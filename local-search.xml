<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>(14).K8S之Etcd备份和恢复</title>
    <link href="/2023/05/19/Container/Kubernetes/kubernetes14/"/>
    <url>/2023/05/19/Container/Kubernetes/kubernetes14/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Etcd备份和恢复"><a href="#1-Etcd备份和恢复" class="headerlink" title="1.Etcd备份和恢复"></a>1.Etcd备份和恢复</h1><h2 id="1-1-Etcd简介"><a href="#1-1-Etcd简介" class="headerlink" title="1.1 Etcd简介"></a>1.1 Etcd简介</h2><p>官方网站：<a href="https://etcd.io/">https://etcd.io/</a></p><p>github地址：</p><p>etcd是一款开源、高度一致的分布式键值(key-value)存储系统。使用Go语言编写的，etcd机器之间的通信通过Raft共识算法处理。</p><p><strong>etcd特点：</strong></p><p>完全复制：集群中的每个节点都可以使用完整的存档</p><p>高可用性：Etcd可用于避免硬件的单点故障或网络问题</p><p>一致性：每次读取都会返回跨多主机的最新写入</p><p>简单：包括一个定义良好、面向用户的API（GRPC）</p><p>安全：实现了带有可选的客户端证书身份验证的自动化TLS</p><p>快速：每秒10000次写入的基准速度</p><p>可靠：使用Raft算法实现了存储的合理分布式Etcd的工作原理</p><h2 id="1-2-Etcd备份和恢复"><a href="#1-2-Etcd备份和恢复" class="headerlink" title="1.2 Etcd备份和恢复"></a>1.2 Etcd备份和恢复</h2><h3 id="1-2-1-手动备份和恢复"><a href="#1-2-1-手动备份和恢复" class="headerlink" title="1.2.1 手动备份和恢复"></a>1.2.1 手动备份和恢复</h3><p><strong>查看当前pod：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl get pod</span>NAME        READY   STATUS    RESTARTS   AGEnet-test1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36mnet-test2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36mnet-test3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36m</code></pre></div></figure><p><strong>备份etcd：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建备份目录</span>root@etcd1:~<span class="token comment"># mkdir /backup</span><span class="token comment">#2.备份etcd</span>root@etcd1:~<span class="token comment"># etcdctl snapshot save /backup/snapshot.db</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.8629804,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"snapshot/v3_snapshot.go:68"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"created temporary db file"</span>,<span class="token string">"path"</span><span class="token builtin class-name">:</span><span class="token string">"/backup/snapshot.db.part"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.8644822,<span class="token string">"logger"</span><span class="token builtin class-name">:</span><span class="token string">"client"</span>,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"v3/maintenance.go:211"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"opened snapshot stream; downloading"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.8645475,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"snapshot/v3_snapshot.go:76"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"fetching snapshot"</span>,<span class="token string">"endpoint"</span><span class="token builtin class-name">:</span><span class="token string">"127.0.0.1:2379"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.8961508,<span class="token string">"logger"</span><span class="token builtin class-name">:</span><span class="token string">"client"</span>,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"v3/maintenance.go:219"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"completed snapshot read; closing"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.9078364,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"snapshot/v3_snapshot.go:91"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"fetched snapshot"</span>,<span class="token string">"endpoint"</span><span class="token builtin class-name">:</span><span class="token string">"127.0.0.1:2379"</span>,<span class="token string">"size"</span><span class="token builtin class-name">:</span><span class="token string">"3.5 MB"</span>,<span class="token string">"took"</span><span class="token builtin class-name">:</span><span class="token string">"now"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1684463589.9079192,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"snapshot/v3_snapshot.go:100"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"saved"</span>,<span class="token string">"path"</span><span class="token builtin class-name">:</span><span class="token string">"/backup/snapshot.db"</span><span class="token punctuation">&#125;</span>Snapshot saved at /backup/snapshot.db</code></pre></div></figure><p><strong>删除pod模拟故障：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl delete pod net-test1</span>pod <span class="token string">"net-test1"</span> deleted</code></pre></div></figure><p><strong>etcd节点1恢复：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@etcd1:~<span class="token comment"># systemctl stop etcd</span>root@etcd1:~<span class="token comment"># rm -rf /var/lib/etcd/</span>root@etcd1:~<span class="token comment"># etcdctl snapshot restore /backup/snapshot.db \</span><span class="token operator">></span> <span class="token parameter variable">--name</span> etcd-192.168.1.45 <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster <span class="token string">"etcd-192.168.1.45=https://192.168.1.45:2380,etcd-192.168.1.46=https://192.168.1.46:2380,etcd-192.168.1.47=https://192.168.1.47:2380"</span> <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster-token etcd-cluster-0 <span class="token punctuation">\</span><span class="token operator">></span> --initial-advertise-peer-urls https://192.168.1.45:2380 <span class="token punctuation">\</span><span class="token operator">></span> --data-dir<span class="token operator">=</span>/var/lib/etcdDeprecated: Use <span class="token variable"><span class="token variable">`</span>etcdutl snapshot restore<span class="token variable">`</span></span> instead.<span class="token number">2023</span>-05-19T06:15:02Zinfosnapshot/v3_snapshot.go:251restoring snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/backup/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span>, <span class="token string">"stack"</span><span class="token builtin class-name">:</span> <span class="token string">"go.etcd.io/etcd/etcdutl/v3/snapshot.(*v3Manager).Restore<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/snapshot/v3_snapshot.go:257<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdutl/v3/etcdutl.SnapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:147<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3/command.snapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/command/snapshot_command.go:128<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:856<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).ExecuteC<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:960<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).Execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:897<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.Start<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:107<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.MustStart<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:111<span class="token entity" title="\n">\n</span>main.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/main.go:59<span class="token entity" title="\n">\n</span>runtime.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/gos/go1.16.3/src/runtime/proc.go:225"</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:02Zinfomembership/store.go:141Trimming membership information from the backend<span class="token punctuation">..</span>.<span class="token number">2023</span>-05-19T06:15:02Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"90de1e36cac08327"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.45:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:02Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9cc7fbc25fe40666"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.46:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:02Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"b56f452e4e806f80"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.47:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:02Zinfosnapshot/v3_snapshot.go:272restored snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/backup/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>etcd节点2恢复：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@etcd2:~<span class="token comment"># systemctl stop etcd</span>root@etcd2:~<span class="token comment"># rm -rf /var/lib/etcd/</span>root@etcd2:~<span class="token comment"># etcdctl snapshot restore /opt/snapshot.db \</span><span class="token operator">></span> <span class="token parameter variable">--name</span><span class="token operator">=</span>etcd-192.168.1.46 <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster<span class="token operator">=</span>etcd-192.168.1.45<span class="token operator">=</span>https://192.168.1.45:2380,etcd-192.168.1.46<span class="token operator">=</span>https://192.168.1.46:2380,etcd-192.168.1.47<span class="token operator">=</span>https://192.168.1.47:2380 <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster-token<span class="token operator">=</span>etcd-cluster-0 <span class="token punctuation">\</span><span class="token operator">></span> --initial-advertise-peer-urls<span class="token operator">=</span>https://192.168.1.46:2380 <span class="token punctuation">\</span><span class="token operator">></span> --data-dir<span class="token operator">=</span>/var/lib/etcdDeprecated: Use <span class="token variable"><span class="token variable">`</span>etcdutl snapshot restore<span class="token variable">`</span></span> instead.<span class="token number">2023</span>-05-19T06:15:19Zinfosnapshot/v3_snapshot.go:251restoring snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/opt/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span>, <span class="token string">"stack"</span><span class="token builtin class-name">:</span> <span class="token string">"go.etcd.io/etcd/etcdutl/v3/snapshot.(*v3Manager).Restore<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/snapshot/v3_snapshot.go:257<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdutl/v3/etcdutl.SnapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:147<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3/command.snapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/command/snapshot_command.go:128<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:856<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).ExecuteC<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:960<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).Execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:897<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.Start<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:107<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.MustStart<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:111<span class="token entity" title="\n">\n</span>main.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/main.go:59<span class="token entity" title="\n">\n</span>runtime.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/gos/go1.16.3/src/runtime/proc.go:225"</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:19Zinfomembership/store.go:141Trimming membership information from the backend<span class="token punctuation">..</span>.<span class="token number">2023</span>-05-19T06:15:19Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"90de1e36cac08327"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.45:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:19Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9cc7fbc25fe40666"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.46:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:19Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"b56f452e4e806f80"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.47:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:19Zinfosnapshot/v3_snapshot.go:272restored snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/opt/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>etcd节点3恢复：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@etcd3:~<span class="token comment"># systemctl stop etcd</span>root@etcd3:~<span class="token comment"># rm -rf /var/lib/etcd/</span>root@etcd3:~<span class="token comment"># etcdctl snapshot restore /opt/snapshot.db \</span><span class="token operator">></span> <span class="token parameter variable">--name</span><span class="token operator">=</span>etcd-192.168.1.47 <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster<span class="token operator">=</span>etcd-192.168.1.45<span class="token operator">=</span>https://192.168.1.45:2380,etcd-192.168.1.46<span class="token operator">=</span>https://192.168.1.46:2380,etcd-192.168.1.47<span class="token operator">=</span>https://192.168.1.47:2380 <span class="token punctuation">\</span><span class="token operator">></span> --initial-cluster-token<span class="token operator">=</span>etcd-cluster-0 <span class="token punctuation">\</span><span class="token operator">></span> --initial-advertise-peer-urls<span class="token operator">=</span>https://192.168.1.47:2380 <span class="token punctuation">\</span><span class="token operator">></span> --data-dir<span class="token operator">=</span>/var/lib/etcdDeprecated: Use <span class="token variable"><span class="token variable">`</span>etcdutl snapshot restore<span class="token variable">`</span></span> instead.<span class="token number">2023</span>-05-19T06:15:31Zinfosnapshot/v3_snapshot.go:251restoring snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/opt/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span>, <span class="token string">"stack"</span><span class="token builtin class-name">:</span> <span class="token string">"go.etcd.io/etcd/etcdutl/v3/snapshot.(*v3Manager).Restore<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/snapshot/v3_snapshot.go:257<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdutl/v3/etcdutl.SnapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:147<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3/command.snapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/command/snapshot_command.go:128<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:856<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).ExecuteC<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:960<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).Execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:897<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.Start<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:107<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdctl/v3/ctlv3.MustStart<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:111<span class="token entity" title="\n">\n</span>main.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/main.go:59<span class="token entity" title="\n">\n</span>runtime.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/gos/go1.16.3/src/runtime/proc.go:225"</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:31Zinfomembership/store.go:141Trimming membership information from the backend<span class="token punctuation">..</span>.<span class="token number">2023</span>-05-19T06:15:31Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"90de1e36cac08327"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.45:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:31Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9cc7fbc25fe40666"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.46:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:31Zinfomembership/cluster.go:421added member<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"9ef50468e1adf7ae"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"b56f452e4e806f80"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://192.168.1.47:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2023</span>-05-19T06:15:31Zinfosnapshot/v3_snapshot.go:272restored snapshot<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/opt/snapshot.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/etcd/member/snap"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>集群节点同时启动etcd：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@etcd1:~<span class="token comment"># systemc start etcd</span>root@etcd2:~<span class="token comment"># systemc start etcd</span>root@etcd3:~<span class="token comment"># systemc start etcd</span>root@etcd1:~<span class="token comment"># export NODE_IPS="192.168.1.45 192.168.1.46 192.168.1.47"</span>root@etcd1:~<span class="token comment"># for n in $&#123;NODE_IPS&#125;;do etcdctl --endpoints=https://$&#123;n&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem --write-out=table endpoint status;done</span></code></pre></div></figure><p><img src="/2023/05/19/Container/Kubernetes/kubernetes14/image-20230519205633348.png" alt="image-20230519205633348"> </p><p><strong>验证pod是否恢复：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl get pod</span>NAME        READY   STATUS    RESTARTS   AGEnet-test1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56mnet-test2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56mnet-test3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56m</code></pre></div></figure><h3 id="1-2-2-kubeasz工具备份和恢复"><a href="#1-2-2-kubeasz工具备份和恢复" class="headerlink" title="1.2.2 kubeasz工具备份和恢复"></a>1.2.2 kubeasz工具备份和恢复</h3><p><strong>查看当前pod：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl get pod</span>NAME        READY   STATUS    RESTARTS   AGEnet-test1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56mnet-test2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56mnet-test3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4h56m</code></pre></div></figure><p><strong>使用ezctl备份etcd数据：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl backup k8s-cluster1</span>ansible-playbook <span class="token parameter variable">-i</span> clusters/k8s-cluster1/hosts <span class="token parameter variable">-e</span> @clusters/k8s-cluster1/config.yml playbooks/94.backup.yml<span class="token number">2023</span>-05-19 06:30:22 INFO cluster:k8s-cluster1 backup begins <span class="token keyword">in</span> 5s, press any key to abort:PLAY <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span> ***********************************************************************************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *****************************************************************************************************************************************ok: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>set NODE_IPS of the etcd cluster<span class="token punctuation">]</span> ************************************************************************************************************************ok: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>get etcd cluster status<span class="token punctuation">]</span> *********************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>debug<span class="token punctuation">]</span> ***************************************************************************************************************************************************ok: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ETCD_CLUSTER_STATUS"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"changed"</span><span class="token builtin class-name">:</span> true,        <span class="token string">"cmd"</span><span class="token builtin class-name">:</span> <span class="token string">"for ip in 192.168.1.45 192.168.1.46 192.168.1.47 ;do ETCDCTL_API=3 /etc/kubeasz/bin/etcdctl --endpoints=https://<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ip</span><span class="token entity" title="\&quot;">\"</span>:2379 --cacert=/etc/kubeasz/clusters/k8s-cluster1/ssl/ca.pem --cert=/etc/kubeasz/clusters/k8s-cluster1/ssl/etcd.pem --key=/etc/kubeasz/clusters/k8s-cluster1/ssl/etcd-key.pem endpoint health; done"</span>,        <span class="token string">"delta"</span><span class="token builtin class-name">:</span> <span class="token string">"0:00:00.071330"</span>,        <span class="token string">"end"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-05-19 06:30:29.129956"</span>,        <span class="token string">"failed"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"rc"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,        <span class="token string">"start"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-05-19 06:30:29.058626"</span>,        <span class="token string">"stderr"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"stderr_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"stdout"</span><span class="token builtin class-name">:</span> <span class="token string">"https://192.168.1.45:2379 is healthy: successfully committed proposal: took = 6.729974ms<span class="token entity" title="\n">\n</span>https://192.168.1.46:2379 is healthy: successfully committed proposal: took = 4.990141ms<span class="token entity" title="\n">\n</span>https://192.168.1.47:2379 is healthy: successfully committed proposal: took = 5.702546ms"</span>,        <span class="token string">"stdout_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"https://192.168.1.45:2379 is healthy: successfully committed proposal: took = 6.729974ms"</span>,            <span class="token string">"https://192.168.1.46:2379 is healthy: successfully committed proposal: took = 4.990141ms"</span>,            <span class="token string">"https://192.168.1.47:2379 is healthy: successfully committed proposal: took = 5.702546ms"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>TASK <span class="token punctuation">[</span>get a running ectd node<span class="token punctuation">]</span> *********************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>debug<span class="token punctuation">]</span> ***************************************************************************************************************************************************ok: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"RUNNING_NODE.stdout"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.45"</span><span class="token punctuation">&#125;</span>TASK <span class="token punctuation">[</span>get current time<span class="token punctuation">]</span> ****************************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>make a backup on the etcd node<span class="token punctuation">]</span> **************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost -<span class="token operator">></span> <span class="token number">192.168</span>.1.45<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>fetch the backup data<span class="token punctuation">]</span> ***********************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost -<span class="token operator">></span> <span class="token number">192.168</span>.1.45<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>update the latest backup<span class="token punctuation">]</span> ********************************************************************************************************************************changed: <span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>PLAY RECAP *****************************************************************************************************************************************************localhost                  <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">10</span>   <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">6</span>    <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#etcd数据备份到集群目录下的backup文件目录,以当前时间戳命名最新的备份，并拷贝一份命名为snapshot.db作为最新恢复使用。</span>root@deploy:/etc/kubeasz<span class="token comment"># ll clusters/k8s-cluster1/backup/</span>total <span class="token number">6776</span>drwxr-xr-x <span class="token number">2</span> root root      <span class="token number">57</span> May <span class="token number">19</span> 06:30 ./drwxr-xr-x <span class="token number">5</span> root root     <span class="token number">203</span> May <span class="token number">19</span> 01:08 <span class="token punctuation">..</span>/-rw------- <span class="token number">1</span> root root <span class="token number">3465248</span> May <span class="token number">19</span> 06:30 snapshot_202305190630.db-rw------- <span class="token number">1</span> root root <span class="token number">3465248</span> May <span class="token number">19</span> 06:30 snapshot.db</code></pre></div></figure><p><strong>删除pod模拟故障：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/etc/kubeasz<span class="token comment"># kubectl delete pod net-test1</span>pod <span class="token string">"net-test1"</span> deletedroot@deploy:/etc/kubeasz<span class="token comment"># kubectl delete pod net-test2</span>pod <span class="token string">"net-test2"</span> deleted</code></pre></div></figure><p><strong>使用ezctl脚本自动化恢复etcd数据。恢复的数据是使用snapshot.db最新的备份进行恢复</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl restore k8s-cluster1</span>ansible-playbook <span class="token parameter variable">-i</span> clusters/k8s-cluster1/hosts <span class="token parameter variable">-e</span> @clusters/k8s-cluster1/config.yml playbooks/95.restore.yml<span class="token number">2023</span>-05-19 06:48:05 INFO cluster:k8s-cluster1 restore begins <span class="token keyword">in</span> 5s, press any key to abort:PLAY <span class="token punctuation">[</span>kube_master<span class="token punctuation">]</span> *********************************************************************************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *****************************************************************************************************************************************ok: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>stopping kube_master services<span class="token punctuation">]</span> ***************************************************************************************************************************changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-apiserver<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-apiserver<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-apiserver<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-controller-manager<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-controller-manager<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-controller-manager<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-scheduler<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-scheduler<span class="token punctuation">)</span>changed: <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token operator">=</span>kube-scheduler<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><p><strong>验证pod是否恢复：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/etc/kubeasz<span class="token comment"># kubectl get pod</span>NAME        READY   STATUS    RESTARTS   AGEnet-test1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5h25mnet-test2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5h25mnet-test3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5h25m</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(13).K8S基于StatefulSet控制器运行MySQL一主多从</title>
    <link href="/2023/05/12/Container/Kubernetes/kubernetes13/"/>
    <url>/2023/05/12/Container/Kubernetes/kubernetes13/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S基于StatefulSet控制器运行MySQL一主多从"><a href="#1-K8S基于StatefulSet控制器运行MySQL一主多从" class="headerlink" title="1.K8S基于StatefulSet控制器运行MySQL一主多从"></a>1.K8S基于StatefulSet控制器运行MySQL一主多从</h1><h2 id="1-1-准备xtrabackup镜像"><a href="#1-1-准备xtrabackup镜像" class="headerlink" title="1.1 准备xtrabackup镜像"></a>1.1 准备xtrabackup镜像</h2><h2 id="1-2-准备mysql镜像"><a href="#1-2-准备mysql镜像" class="headerlink" title="1.2 准备mysql镜像"></a>1.2 准备mysql镜像</h2><h2 id="1-3-配置NFS"><a href="#1-3-配置NFS" class="headerlink" title="1.3 配置NFS"></a>1.3 配置NFS</h2><h2 id="1-4-创建PV"><a href="#1-4-创建PV" class="headerlink" title="1.4 创建PV"></a>1.4 创建PV</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(12).基于StatefulSet控制器运行Redis Cluster集群</title>
    <link href="/2023/05/11/Container/Kubernetes/kubernetes12/"/>
    <url>/2023/05/11/Container/Kubernetes/kubernetes12/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于StatefulSet控制器运行Redis-Cluster集群"><a href="#1-基于StatefulSet控制器运行Redis-Cluster集群" class="headerlink" title="1.基于StatefulSet控制器运行Redis Cluster集群"></a>1.基于StatefulSet控制器运行Redis Cluster集群</h1><p><strong>Redis集群规划：</strong></p><table><thead><tr><th>Redis服务</th><th>角色</th><th>备注</th></tr></thead><tbody><tr><td>redis0</td><td>master</td><td></td></tr><tr><td>redis1</td><td>master</td><td></td></tr><tr><td>redis2</td><td>master</td><td></td></tr><tr><td>redis3</td><td>slave</td><td></td></tr><tr><td>redis4</td><td>slave</td><td></td></tr><tr><td>redis5</td><td>slave</td><td></td></tr></tbody></table><h2 id="1-1-构建Redis镜像"><a href="#1-1-构建Redis镜像" class="headerlink" title="1.1 构建Redis镜像"></a>1.1 构建Redis镜像</h2><h3 id="1-1-1-创建redis-conf"><a href="#1-1-1-创建redis-conf" class="headerlink" title="1.1.1 创建redis.conf"></a>1.1.1 创建redis.conf</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project<span class="token comment"># vim redis.conf</span><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0port <span class="token number">6379</span>daemonize nopidfile /var/run/redis_6379.pidloglevel warninglogfile <span class="token string">"/usr/local/redis/logs/redis.log"</span>dbfilename dump.rdb<span class="token function">dir</span> /usr/local/redis/datasave <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">5</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>stop-writes-on-bgsave-error norequirepass <span class="token number">123456</span>cluster-enabled <span class="token function">yes</span>cluster-config-file /usr/local/redis/data/nodes.confcluster-node-timeout <span class="token number">5000</span>appendonly <span class="token function">yes</span>appendfilename <span class="token string">"appendonly.aof"</span></code></pre></div></figure><h3 id="1-1-2-创建构建镜像脚本"><a href="#1-1-2-创建构建镜像脚本" class="headerlink" title="1.1.2 创建构建镜像脚本"></a>1.1.2 创建构建镜像脚本</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># vim build-command.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/redis/redis:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span> <span class="token function">docker</span> push harbor.chsblogs.local/redis/redis:<span class="token variable">$&#123;TAG&#125;</span></code></pre></div></figure><h3 id="1-1-3-创建Dockerfile"><a href="#1-1-3-创建Dockerfile" class="headerlink" title="1.1.3 创建Dockerfile"></a>1.1.3 创建Dockerfile</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/ubuntu-base:v1  ADD redis-6.2.9.tar.gz /usr/local/srcRUN <span class="token builtin class-name">cd</span> /usr/local/src/redis-6.2.9 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">make</span> <span class="token assign-left variable">MALLOC</span><span class="token operator">=</span>jemalloc <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/redis <span class="token function">install</span>RUN <span class="token builtin class-name">cd</span> /usr/local/redis <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">mkdir</span> /usr/local/redis/conf <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">mkdir</span> /usr/local/redis/logs <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">mkdir</span> /usr/local/redis/dataENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/redis/binADD redis.conf /usr/local/redis/conf/redis.confEXPOSE <span class="token number">6379</span>RUN <span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/local/src/redis-6.2.9.tar.gzroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># bash build-command.sh v6.2.9</span></code></pre></div></figure><h2 id="1-2-配置NFS"><a href="#1-2-配置NFS" class="headerlink" title="1.2 配置NFS"></a>1.2 配置NFS</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:/data/k8sdata<span class="token comment"># mkdir redis-cluster/redis&#123;0..5&#125; -p</span>/data/k8sdata *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span></code></pre></div></figure><h2 id="1-3-创建K8S资源"><a href="#1-3-创建K8S资源" class="headerlink" title="1.3 创建K8S资源"></a>1.3 创建K8S资源</h2><h3 id="1-3-1-创建PV"><a href="#1-3-1-创建PV" class="headerlink" title="1.3.1 创建PV"></a>1.3.1 创建PV</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># vim redis-cluster-pv.yaml</span>apiVersion: v1kind: PersistentVolumemetadata:  name: redis-cluster-pv0spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis0---apiVersion: v1kind: PersistentVolumemetadata:  name: redis-cluster-pv1spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis1---apiVersion: v1kind: PersistentVolumemetadata:  name: redis-cluster-pv2spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis2---apiVersion: v1kind: PersistentVolumemetadata:   name: redis-cluster-pv3spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis3---apiVersion: v1kind: PersistentVolumemetadata:  name: redis-cluster-pv4spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis4---apiVersion: v1kind: PersistentVolumemetadata:  name: redis-cluster-pv5spec:  capacity:    storage: 5Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/redis-cluster/redis5    root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl apply -f redis-cluster-pv.yaml </span>persistentvolume/redis-cluster-pv0 createdpersistentvolume/redis-cluster-pv1 createdpersistentvolume/redis-cluster-pv2 createdpersistentvolume/redis-cluster-pv3 createdpersistentvolume/redis-cluster-pv4 createdpersistentvolume/redis-cluster-pv5 createdroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get pv</span>NAME                CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGEredis-cluster-pv0   5Gi        RWO            Retain           Available                                   13sredis-cluster-pv1   5Gi        RWO            Retain           Available                                   13sredis-cluster-pv2   5Gi        RWO            Retain           Available                                   13sredis-cluster-pv3   5Gi        RWO            Retain           Available                                   13sredis-cluster-pv4   5Gi        RWO            Retain           Available                                   13sredis-cluster-pv5   5Gi        RWO            Retain           Available                                   13s</code></pre></div></figure><h3 id="1-3-2-创建redis-statefulset控制器"><a href="#1-3-2-创建redis-statefulset控制器" class="headerlink" title="1.3.2 创建redis statefulset控制器"></a>1.3.2 创建redis statefulset控制器</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl create ns redis</span>namespace/redis createdroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># vim redis.yaml</span>apiVersion: apps/v1kind: StatefulSetmetadata:  name: redis  namespace: redisspec:  serviceName: redis  replicas: <span class="token number">6</span>  selector:    matchLabels:      app: redis      appCluster: redis-cluster  template:    metadata:      labels:        app: redis        appCluster: redis-cluster    spec:      terminationGracePeriodSeconds: <span class="token number">20</span>      affinity:        podAntiAffinity:          preferredDuringSchedulingIgnoredDuringExecution:          - weight: <span class="token number">100</span>            podAffinityTerm:              labelSelector:                matchExpressions:                - key: app                  operator: In                  values:                  - redis              topologyKey: kubernetes.io/hostname      containers:      - name: redis        image: harbor.chsblogs.local/redis/redis:v6.2.9        imagePullPolicy: Always        command: <span class="token punctuation">[</span><span class="token string">"redis-server"</span>, <span class="token string">"/usr/local/redis/conf/redis.conf"</span><span class="token punctuation">]</span>        env:        - name: POD_IP          valueFrom:            fieldRef:              fieldPath: status.podIP        resources:          requests:            cpu: <span class="token string">"500m"</span>            memory: <span class="token string">"500Mi"</span>        ports:        - containerPort: <span class="token number">6379</span>          name: redis          protocol: TCP        - containerPort: <span class="token number">16379</span>          name: cluster          protocol: TCP        volumeMounts:        - name: data          mountPath: /usr/local/redis/data  volumeClaimTemplates:  - metadata:      name: data      namespace: redis    spec:      accessModes: <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      resources:        requests:          storage: 5Giroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl apply -f redis.yaml </span>statefulset.apps/redis createdroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get pod -n redis -o wide</span>NAME      READY   STATUS    RESTARTS   AGE     IP              NODE           NOMINATED NODE   READINESS GATESredis-0   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m48s   <span class="token number">10.20</span>.132.213   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m32s   <span class="token number">10.20</span>.39.232    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m18s   <span class="token number">10.20</span>.178.235   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m3s    <span class="token number">10.20</span>.132.214   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          118s    <span class="token number">10.20</span>.39.233    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-5   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          114s    <span class="token number">10.20</span>.178.236   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get pvc -n redis</span>NAME           STATUS   VOLUME              CAPACITY   ACCESS MODES   STORAGECLASS   AGEdata-redis-0   Bound    redis-cluster-pv0   5Gi        RWO                           70sdata-redis-1   Bound    redis-cluster-pv1   5Gi        RWO                           54sdata-redis-2   Bound    redis-cluster-pv2   5Gi        RWO                           40sdata-redis-3   Bound    redis-cluster-pv3   5Gi        RWO                           25sdata-redis-4   Bound    redis-cluster-pv4   5Gi        RWO                           20sdata-redis-5   Bound    redis-cluster-pv5   5Gi        RWO                           16sroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get pv</span>NAME                CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS   REASON   AGEredis-cluster-pv0   5Gi        RWO            Retain           Bound    redis/data-redis-0                           39mredis-cluster-pv1   5Gi        RWO            Retain           Bound    redis/data-redis-1                           39mredis-cluster-pv2   5Gi        RWO            Retain           Bound    redis/data-redis-2                           39mredis-cluster-pv3   5Gi        RWO            Retain           Bound    redis/data-redis-3                           39mredis-cluster-pv4   5Gi        RWO            Retain           Bound    redis/data-redis-4                           39mredis-cluster-pv5   5Gi        RWO            Retain           Bound    redis/data-redis-5                           39m</code></pre></div></figure><h3 id="1-3-3-创建redis-svc"><a href="#1-3-3-创建redis-svc" class="headerlink" title="1.3.3 创建redis svc"></a>1.3.3 创建redis svc</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># vim redis-svc.yaml</span>apiVersion: v1kind: Servicemetadata:  name: redis  namespace: redis  labels:    app: redisspec:  selector:    app: redis    appCluster: redis-cluster  ports:  - name: client    port: <span class="token number">6379</span>    targetPort: <span class="token number">6379</span>  - name: cluster    port: <span class="token number">16379</span>    targetPort: <span class="token number">16379</span>  clusterIP: None  root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl apply -f redis-svc.yaml </span>service/redis createdroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get svc -n redis</span>NAME    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>              AGEredis   ClusterIP   None         <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">6379</span>/TCP,16379/TCP   10sroot@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get ep -n redis</span>NAME    ENDPOINTS                                                                 AGEredis   <span class="token number">10.20</span>.132.213:16379,10.20.132.214:16379,10.20.178.235:16379 + <span class="token number">9</span> more<span class="token punctuation">..</span>.   17s</code></pre></div></figure><h3 id="1-3-4-初始化redis创建集群"><a href="#1-3-4-初始化redis创建集群" class="headerlink" title="1.3.4 初始化redis创建集群"></a>1.3.4 初始化redis创建集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.进入data-redis-0 pod</span>root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl exec -it -n redis redis-0 bash</span><span class="token comment">#2.安装dig</span>root@redis-0:/<span class="token comment"># apt install dnsutils -y</span><span class="token comment">#3.初始化命令</span><span class="token comment">#redis-cli -a 123456 --cluster create --cluster-replicas 1 \</span><span class="token comment">#`dig +short redis-0.redis.redis.svc.chsblogs.local`:6379 \</span><span class="token comment">#`dig +short redis-1.redis.redis.svc.chsblogs.local`:6379 \</span><span class="token comment">#`dig +short redis-2.redis.redis.svc.chsblogs.local`:6379 \</span><span class="token comment">#`dig +short redis-3.redis.redis.svc.chsblogs.local`:6379 \</span><span class="token comment">#`dig +short redis-4.redis.redis.svc.chsblogs.local`:6379 \</span><span class="token comment">#`dig +short redis-5.redis.redis.svc.chsblogs.local`:6379</span><span class="token comment">#4.创建redis集群</span>root@redis-0:/<span class="token comment"># redis-cli -a 123456 --cluster create --cluster-replicas 1 \</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-0.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379 <span class="token punctuation">\</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-1.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379 <span class="token punctuation">\</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-2.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379 <span class="token punctuation">\</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-3.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379 <span class="token punctuation">\</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-4.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379 <span class="token punctuation">\</span><span class="token operator">></span> <span class="token variable"><span class="token variable">`</span><span class="token function">dig</span> +short redis-5.redis.redis.svc.chsblogs.local<span class="token variable">`</span></span>:6379Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">0</span> - <span class="token number">5460</span>Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>Adding replica <span class="token number">10.20</span>.39.233:6379 to <span class="token number">10.20</span>.132.213:6379Adding replica <span class="token number">10.20</span>.178.236:6379 to <span class="token number">10.20</span>.39.232:6379Adding replica <span class="token number">10.20</span>.132.214:6379 to <span class="token number">10.20</span>.178.235:6379M: ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">10.20</span>.132.213:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: e26f1dad00af4f65d418762d7336a89904830142 <span class="token number">10.20</span>.39.232:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: 792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">10.20</span>.178.235:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: c4562b4ae3fcc3ae4ee9b267113a32c838fd57c1 <span class="token number">10.20</span>.132.214:6379   replicates 792def011ca7acfa763940fa2671953ef4b5c253S: d44fd2d22b7e0f0f5d069dd1b556dbdd743a8cd1 <span class="token number">10.20</span>.39.233:6379   replicates ec76c8e7ab8f72b7ef27e67f69825c2f383b272bS: f434246abaaf8ea75713d563a14cd6d2513cce7b <span class="token number">10.20</span>.178.236:6379   replicates e26f1dad00af4f65d418762d7336a89904830142Can I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token builtin class-name">.</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">10.20</span>.132.213:6379<span class="token punctuation">)</span>M: ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">10.20</span>.132.213:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e26f1dad00af4f65d418762d7336a89904830142 <span class="token number">10.20</span>.39.232:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: f434246abaaf8ea75713d563a14cd6d2513cce7b <span class="token number">10.20</span>.178.236:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e26f1dad00af4f65d418762d7336a89904830142S: d44fd2d22b7e0f0f5d069dd1b556dbdd743a8cd1 <span class="token number">10.20</span>.39.233:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates ec76c8e7ab8f72b7ef27e67f69825c2f383b272bM: 792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">10.20</span>.178.235:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: c4562b4ae3fcc3ae4ee9b267113a32c838fd57c1 <span class="token number">10.20</span>.132.214:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 792def011ca7acfa763940fa2671953ef4b5c253<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#5.查看集群状态</span>root@redis-0:/<span class="token comment"># redis-cli -a 123456</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODESe26f1dad00af4f65d418762d7336a89904830142 <span class="token number">10.20</span>.39.232:6379@16379 master - <span class="token number">0</span> <span class="token number">1683790387000</span> <span class="token number">2</span> connected <span class="token number">5461</span>-10922f434246abaaf8ea75713d563a14cd6d2513cce7b <span class="token number">10.20</span>.178.236:6379@16379 slave e26f1dad00af4f65d418762d7336a89904830142 <span class="token number">0</span> <span class="token number">1683790388378</span> <span class="token number">2</span> connectedd44fd2d22b7e0f0f5d069dd1b556dbdd743a8cd1 <span class="token number">10.20</span>.39.233:6379@16379 slave ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">0</span> <span class="token number">1683790387361</span> <span class="token number">1</span> connected792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">10.20</span>.178.235:6379@16379 master - <span class="token number">0</span> <span class="token number">1683790387000</span> <span class="token number">3</span> connected <span class="token number">10923</span>-16383ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">10.20</span>.132.213:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1683790388000</span> <span class="token number">1</span> connected <span class="token number">0</span>-5460c4562b4ae3fcc3ae4ee9b267113a32c838fd57c1 <span class="token number">10.20</span>.132.214:6379@16379 slave 792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">0</span> <span class="token number">1683790387000</span> <span class="token number">3</span> connected</code></pre></div></figure><table><thead><tr><th>Redis服务</th><th>角色</th><th>IP</th><th>从节点</th></tr></thead><tbody><tr><td>redis-0</td><td>master</td><td>10.20.132.213</td><td>redis-4</td></tr><tr><td>redis-1</td><td>master</td><td>10.20.39.232</td><td>redis-5</td></tr><tr><td>redis-2</td><td>master</td><td>10.20.178.235</td><td>redis-3</td></tr><tr><td>redis-3</td><td>slave</td><td>10.20.132.214</td><td>&#x2F;</td></tr><tr><td>redis-4</td><td>slave</td><td>10.20.39.233</td><td>&#x2F;</td></tr><tr><td>redis-5</td><td>slave</td><td>10.20.178.236</td><td>&#x2F;</td></tr></tbody></table><h3 id="1-3-5-测试写入数据"><a href="#1-3-5-测试写入数据" class="headerlink" title="1.3.5 测试写入数据"></a>1.3.5 测试写入数据</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@redis-0:/<span class="token comment"># redis-cli -a 123456 -h redis-1.redis.redis.svc.chsblogs.local</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.redis-1.redis.redis.svc.chsblogs.local:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SET <span class="token string">"key1"</span> <span class="token string">"value1"</span>OKredis-1.redis.redis.svc.chsblogs.local:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1<span class="token string">"value1"</span></code></pre></div></figure><h3 id="1-3-6-模拟故障"><a href="#1-3-6-模拟故障" class="headerlink" title="1.3.6 模拟故障"></a>1.3.6 模拟故障</h3><p>删除slave节点pod，验证redis集群自动更换pod ip。这里我们删除redis-5从节点【10.20.178.236】</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl delete pod redis-5 -n redis</span>pod <span class="token string">"redis-5"</span> deleted<span class="token comment">#删除后验证新pod ip已经从新加入集群redis-5的IP地址已经变为10.20.178.237</span>root@deploy:/opt/dockerfile/project/redis-cluster<span class="token comment"># kubectl get pod -n redis -o wide</span>NAME      READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATESredis-0   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          30m   <span class="token number">10.20</span>.132.213   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          30m   <span class="token number">10.20</span>.39.232    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          29m   <span class="token number">10.20</span>.178.235   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          29m   <span class="token number">10.20</span>.132.214   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          29m   <span class="token number">10.20</span>.39.233    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>redis-5   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          43s   <span class="token number">10.20</span>.178.237   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODESe26f1dad00af4f65d418762d7336a89904830142 <span class="token number">10.20</span>.39.232:6379@16379 master - <span class="token number">0</span> <span class="token number">1683791139788</span> <span class="token number">2</span> connected <span class="token number">5461</span>-10922f434246abaaf8ea75713d563a14cd6d2513cce7b <span class="token number">10.20</span>.178.237:6379@16379 slave e26f1dad00af4f65d418762d7336a89904830142 <span class="token number">0</span> <span class="token number">1683791141511</span> <span class="token number">2</span> connectedd44fd2d22b7e0f0f5d069dd1b556dbdd743a8cd1 <span class="token number">10.20</span>.39.233:6379@16379 slave ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">0</span> <span class="token number">1683791141000</span> <span class="token number">1</span> connected792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">10.20</span>.178.235:6379@16379 master - <span class="token number">0</span> <span class="token number">1683791140000</span> <span class="token number">3</span> connected <span class="token number">10923</span>-16383ec76c8e7ab8f72b7ef27e67f69825c2f383b272b <span class="token number">10.20</span>.132.213:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1683791140000</span> <span class="token number">1</span> connected <span class="token number">0</span>-5460c4562b4ae3fcc3ae4ee9b267113a32c838fd57c1 <span class="token number">10.20</span>.132.214:6379@16379 slave 792def011ca7acfa763940fa2671953ef4b5c253 <span class="token number">0</span> <span class="token number">1683791140110</span> <span class="token number">3</span> connected</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(11).K8S资源配额</title>
    <link href="/2023/05/09/Container/Kubernetes/kubernetes11/"/>
    <url>/2023/05/09/Container/Kubernetes/kubernetes11/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S资源配额"><a href="#1-K8S资源配额" class="headerlink" title="1.K8S资源配额"></a>1.K8S资源配额</h1><p>官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/policy/resource-quotas/">https://kubernetes.io/zh-cn/docs/concepts/policy/resource-quotas/</a></p><p>资源配额：通过ResourceQuota对象来定义，对每个命名空间的资源消耗总量提供限制。它可以限制命名空间中某种类型的对象的总数目上限，也可以限制命名空间中的Pod可以使用的计算资源的总上限。</p><h2 id="1-1-资源配额类型"><a href="#1-1-资源配额类型" class="headerlink" title="1.1 资源配额类型"></a>1.1 资源配额类型</h2><h3 id="1-1-1-计算资源配额"><a href="#1-1-1-计算资源配额" class="headerlink" title="1.1.1 计算资源配额"></a>1.1.1 计算资源配额</h3><p>可以对给定命名空间下的可被请求的计算资源总量进行限制。</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td>limits.cpu</td><td>所有非终止状态的 Pod，其 CPU 限额总量不能超过该值。</td></tr><tr><td>limits.memory</td><td>所有非终止状态的 Pod，其内存限额总量不能超过该值。</td></tr><tr><td>requests.cpu</td><td>所有非终止状态的 Pod，其 CPU 需求总量不能超过该值。</td></tr><tr><td>requests.memory</td><td>所有非终止状态的 Pod，其内存需求总量不能超过该值。</td></tr><tr><td>hugepages-<size></size></td><td>对于所有非终止状态的 Pod，针对指定尺寸的巨页请求总数不能超过此值。</td></tr><tr><td>cpu</td><td>与 <code>requests.cpu</code> 相同。</td></tr><tr><td>memory</td><td>与 <code>requests.memory</code> 相同。</td></tr></tbody></table><h3 id="1-1-2-存储资源配额"><a href="#1-1-2-存储资源配额" class="headerlink" title="1.1.2 存储资源配额"></a>1.1.2 存储资源配额</h3><p>可以对给定命名空间下的存储资源总量进行限制。</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td>requests.storage</td><td>所有 PVC，存储资源的需求总量不能超过该值。</td></tr><tr><td>persistentvolumeclaims</td><td>在该命名空间中所允许的PVC总量。</td></tr><tr><td><storage-class-name>.storageclass.storage.k8s.io&#x2F;requests.storage</storage-class-name></td><td>在所有与 <code>&lt;storage-class-name&gt;</code> 相关的持久卷申领中，存储请求的总和不能超过该值。</td></tr><tr><td><storage-class-name>.storageclass.storage.k8s.io&#x2F;persistentvolumeclaims</storage-class-name></td><td>在与 storage-class-name 相关的所有持久卷申领中，命名空间中可以存在的<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">持久卷申领</a>总数。</td></tr><tr><td>requests.ephemeral-storage</td><td>在命名空间的所有 Pod 中，本地临时存储请求的总和不能超过此值。</td></tr><tr><td>limits.ephemeral-storage</td><td>在命名空间的所有 Pod 中，本地临时存储限制值的总和不能超过此值。</td></tr><tr><td>ephemeral-storage</td><td>与 <code>requests.ephemeral-storage</code> 相同。</td></tr></tbody></table><h3 id="1-1-3-对象数量配额"><a href="#1-1-3-对象数量配额" class="headerlink" title="1.1.3 对象数量配额"></a>1.1.3 对象数量配额</h3><p>可以使用以下语法对所有标准的、命名空间域的资源类型进行配额设置：</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>configmaps</code></td><td>在该命名空间中允许存在的 ConfigMap 总数上限。</td></tr><tr><td><code>persistentvolumeclaims</code></td><td>在该命名空间中允许存在的 <a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">PVC</a> 的总数上限。</td></tr><tr><td><code>pods</code></td><td>在该命名空间中允许存在的非终止状态的 Pod 总数上限。Pod 终止状态等价于 Pod 的 <code>.status.phase in (Failed, Succeeded)</code> 为真。</td></tr><tr><td><code>replicationcontrollers</code></td><td>在该命名空间中允许存在的 ReplicationController 总数上限。</td></tr><tr><td><code>resourcequotas</code></td><td>在该命名空间中允许存在的 ResourceQuota 总数上限。</td></tr><tr><td><code>services</code></td><td>在该命名空间中允许存在的 Service 总数上限。</td></tr><tr><td><code>services.loadbalancers</code></td><td>在该命名空间中允许存在的 LoadBalancer 类型的 Service 总数上限。</td></tr><tr><td><code>services.nodeports</code></td><td>在该命名空间中允许存在的 NodePort 类型的 Service 总数上限。</td></tr><tr><td><code>secrets</code></td><td>在该命名空间中允许存在的 Secret 总数上限。</td></tr></tbody></table><h2 id="1-2-配额配额示例"><a href="#1-2-配额配额示例" class="headerlink" title="1.2 配额配额示例"></a>1.2 配额配额示例</h2><p><strong>创建ResourceQuota对象：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建用于测试的名称空间</span>root@deploy:~<span class="token comment"># kubectl create ns quota</span>namespace/quota createdroot@deploy:/opt/yaml/quota<span class="token comment"># vim quota.yaml</span>apiVersion: v1kind: ResourceQuotametadata:  name: quota-test1  namespace: <span class="token function">quota</span>spec:  hard:    persistentvolumeclaims: <span class="token string">"10"</span>    requests.storage: <span class="token string">"5Gi"</span>    pods: <span class="token string">"5"</span>    requests.cpu: <span class="token string">"2"</span>    limits.cpu: <span class="token string">"4"</span>    requests.memory: 2Gi    limits.memory: 4Gi    secrets: <span class="token string">"5"</span>    services: <span class="token string">"3"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f quota.yaml </span>resourcequota/quota-test1 createdroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get resourcequotas -n quota</span>NAME          AGE   REQUEST                                                                                                                                    LIMITquota-test1   32s   persistentvolumeclaims: <span class="token number">0</span>/10, pods: <span class="token number">0</span>/5, requests.cpu: <span class="token number">0</span>/2, requests.memory: <span class="token number">0</span>/2Gi, requests.storage: <span class="token number">0</span>/5Gi, secrets: <span class="token number">1</span>/5, services: <span class="token number">0</span>/3   limits.cpu: <span class="token number">0</span>/4, limits.memory: <span class="token number">0</span>/4Giroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used  Hard--------                ----  ----limits.cpu              <span class="token number">0</span>     <span class="token number">4</span>limits.memory           <span class="token number">0</span>     4Gipersistentvolumeclaims  <span class="token number">0</span>     <span class="token number">10</span>pods                    <span class="token number">0</span>     <span class="token number">5</span>requests.cpu            <span class="token number">0</span>     <span class="token number">2</span>requests.memory         <span class="token number">0</span>     2Girequests.storage        <span class="token number">0</span>     5Gisecrets                 <span class="token number">1</span>     <span class="token number">5</span>services                <span class="token number">0</span>     <span class="token number">3</span></code></pre></div></figure><p><strong>创建一个quota对deployment pod数量进行限制，上限为5副本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建ResourceQuota对象，指定pods创建数量</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim quota.yaml</span>apiVersion: v1kind: ResourceQuotametadata:  name: quota-test1  namespace: <span class="token function">quota</span>spec:  hard:    persistentvolumeclaims: <span class="token string">"10"</span>    requests.storage: <span class="token string">"5Gi"</span>    pods: <span class="token string">"5"</span>    secrets: <span class="token string">"5"</span>    services: <span class="token string">"3"</span><span class="token comment">#2.创建测试容器</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim nginx.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx  name: nginx  namespace: <span class="token function">quota</span>spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx  strategy: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  template:    metadata:      labels:        app: nginx    spec:      containers:      - image: harbor.chsblogs.local/baseimages/nginx:1.22.1        name: nginx        imagePullPolicy: IfNotPresentroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx unchangedroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-5b4dd694d5-5wv49   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          69snginx-5b4dd694d5-nz8fv   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          70sroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe quota -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used  Hard--------                ----  ----persistentvolumeclaims  <span class="token number">0</span>     <span class="token number">10</span>pods                    <span class="token number">2</span>     <span class="token number">5</span>requests.storage        <span class="token number">0</span>     5Gisecrets                 <span class="token number">1</span>     <span class="token number">5</span>services                <span class="token number">0</span>     <span class="token number">3</span><span class="token comment">#3.将Pod副本数调整为5个</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl scale deployment nginx -n quota --replicas=5</span>deployment.apps/nginx scaledroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-5b4dd694d5-5wv49   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          9m7snginx-5b4dd694d5-9z4g6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5snginx-5b4dd694d5-dvh2b   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5snginx-5b4dd694d5-ht2xx   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5snginx-5b4dd694d5-nz8fv   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          9m8s<span class="token comment">#4.将Pod副本数调整为7个，提示创建错误超出pod数量限制为5个上线</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl scale deployment nginx -n quota --replicas=7</span>deployment.apps/nginx scaledroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe rs -n quota | grep Error | tail -1</span>  Warning  FailedCreate      92s <span class="token punctuation">(</span>x15 over 26m<span class="token punctuation">)</span>  replicaset-controller  <span class="token punctuation">(</span>combined from similar events<span class="token punctuation">)</span>: Error creating: pods <span class="token string">"nginx-5b4dd694d5-j8tnr"</span> is forbidden: exceeded quota: quota-test1, requested: <span class="token assign-left variable">pods</span><span class="token operator">=</span><span class="token number">1</span>, used: <span class="token assign-left variable">pods</span><span class="token operator">=</span><span class="token number">5</span>, limited: <span class="token assign-left variable">pods</span><span class="token operator">=</span><span class="token number">5</span></code></pre></div></figure><h2 id="1-3-request-x2F-limits"><a href="#1-3-request-x2F-limits" class="headerlink" title="1.3 request&#x2F;limits"></a>1.3 request&#x2F;limits</h2><p>Deployment.spec.template.spec.containers.resources定义包含两部分：requests和limits</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/quota<span class="token comment"># kubectl explain Deployment.spec.template.spec.containers.resources</span>KIND:     DeploymentVERSION:  apps/v1RESOURCE: resources <span class="token operator">&lt;</span>Object<span class="token operator">></span>DESCRIPTION:     Compute Resources required by this container. Cannot be updated. More info:     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/     ResourceRequirements describes the compute resource requirements.FIELDS:   limits<span class="token operator">&lt;</span>map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>string<span class="token operator">></span>     <span class="token comment">#限制描述了允许的最大计算资源量。</span>     info:     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/   requests<span class="token operator">&lt;</span>map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>string<span class="token operator">></span>     <span class="token comment">#请求描述了所需的最小计算资源量。</span>     info:     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</code></pre></div></figure><h3 id="1-3-1-requests"><a href="#1-3-1-requests" class="headerlink" title="1.3.1 requests"></a>1.3.1 requests</h3><p>限制cpu和内存</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建ResourceQuota对象，限制cpu和内存</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim quota.yaml</span>apiVersion: v1kind: ResourceQuotametadata:  name: quota-test1  namespace: <span class="token function">quota</span>spec:  hard:    cpu: <span class="token string">"1"</span>    memory: <span class="token string">"2G"</span>    persistentvolumeclaims: <span class="token string">"10"</span>    requests.storage: <span class="token string">"5Gi"</span>    pods: <span class="token string">"5"</span>    secrets: <span class="token string">"5"</span>    services: <span class="token string">"3"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f quota.yaml </span>resourcequota/quota-test1 configuredroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used  Hard--------                ----  ----cpu                     <span class="token number">0</span>     <span class="token number">1</span>memory                  <span class="token number">0</span>     2Gpersistentvolumeclaims  <span class="token number">0</span>     <span class="token number">10</span>pods                    <span class="token number">5</span>     <span class="token number">5</span>requests.storage        <span class="token number">0</span>     5Gisecrets                 <span class="token number">1</span>     <span class="token number">5</span>services                <span class="token number">0</span>     <span class="token number">3</span><span class="token comment">#2.创建测试容器</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim nginx.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx  name: nginx  namespace: <span class="token function">quota</span>spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx  strategy: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  template:    metadata:      labels:        app: nginx    spec:      containers:      - image: harbor.chsblogs.local/baseimages/nginx:1.22.1        name: nginx        imagePullPolicy: IfNotPresent        resources:          requests:            memory: <span class="token string">"256Mi"</span>            cpu: <span class="token string">"500m"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx configuredroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-7d6497b859-rh272   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          19snginx-7d6497b859-x459x   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          23sroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used   Hard--------                ----   ----cpu                     <span class="token number">1</span>      <span class="token number">1</span>memory                  512Mi  2Gpersistentvolumeclaims  <span class="token number">0</span>      <span class="token number">10</span>pods                    <span class="token number">2</span>      <span class="token number">5</span>requests.storage        <span class="token number">0</span>      5Gisecrets                 <span class="token number">1</span>      <span class="token number">5</span>services                <span class="token number">0</span>      <span class="token number">3</span></code></pre></div></figure><h3 id="1-3-2-limits"><a href="#1-3-2-limits" class="headerlink" title="1.3.2 limits"></a>1.3.2 limits</h3><p>限制cpu和内存的上限</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.quota限制namespace下的资源上限cpu不得超过1核，内存不得超过2G</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim quota.yaml</span>apiVersion: v1kind: ResourceQuotametadata:  name: quota-test1  namespace: <span class="token function">quota</span>spec:  hard:    cpu: <span class="token string">"1"</span>    memory: <span class="token string">"2G"</span>    limits.cpu: <span class="token string">"1"</span>    limits.memory: <span class="token string">"2G"</span>    persistentvolumeclaims: <span class="token string">"10"</span>    requests.storage: <span class="token string">"5Gi"</span>    pods: <span class="token string">"5"</span>    secrets: <span class="token string">"5"</span>    services: <span class="token string">"3"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f quota.yaml </span>resourcequota/quota-test1 configuredroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used   Hard--------                ----   ----cpu                     <span class="token number">1</span>      <span class="token number">1</span>limits.cpu              <span class="token number">0</span>      <span class="token number">1</span>limits.memory           <span class="token number">0</span>      2Gmemory                  512Mi  2Gpersistentvolumeclaims  <span class="token number">0</span>      <span class="token number">10</span>pods                    <span class="token number">2</span>      <span class="token number">5</span>requests.storage        <span class="token number">0</span>      5Gisecrets                 <span class="token number">1</span>      <span class="token number">5</span>services                <span class="token number">0</span>      <span class="token number">3</span><span class="token comment">#deployment需要指定pods的cpu和内存最大使用上限</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim nginx.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx  name: nginx  namespace: <span class="token function">quota</span>spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx  strategy: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  template:    metadata:      labels:        app: nginx    spec:      containers:      - image: harbor.chsblogs.local/baseimages/nginx:1.22.1        name: nginx        imagePullPolicy: IfNotPresent        resources:          requests:            memory: <span class="token string">"256Mi"</span>            cpu: <span class="token string">"500m"</span>          limits:            memory: <span class="token string">"256Mi"</span>            cpu: <span class="token string">"500m"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx createdroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-7777889869-gljnx   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4snginx-7777889869-zdlq4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4sroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used   Hard--------                ----   ----cpu                     <span class="token number">1</span>      <span class="token number">1</span>limits.cpu              <span class="token number">1</span>      <span class="token number">1</span>limits.memory           512Mi  2Gmemory                  512Mi  2Gpersistentvolumeclaims  <span class="token number">0</span>      <span class="token number">10</span>pods                    <span class="token number">2</span>      <span class="token number">5</span>requests.storage        <span class="token number">0</span>      5Gisecrets                 <span class="token number">1</span>      <span class="token number">5</span>services                <span class="token number">0</span>      <span class="token number">3</span></code></pre></div></figure><h2 id="1-4-LimitRange"><a href="#1-4-LimitRange" class="headerlink" title="1.4 LimitRange"></a>1.4 LimitRange</h2><p>官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/policy/limit-range/">https://kubernetes.io/zh-cn/docs/concepts/policy/limit-range/</a></p><p>LimitRange 是限制命名空间内可为每个适用的对象类别 （例如Pod或PersistentVolumeClaim指定的资源分配量（限制和请求）的策略对象。</p><p>如果namespace设置了quota配额，那么创建不指定资源请求和资源限制的pod是不允许的。kubernetes中pod默认不指定资源请求和计算资源。为了在设定配额的namespace中使用pod，namespace还需要为pod资源请求设定默认范围。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">kind: LimitRangemetadata:  name: limitrange  namespace: <span class="token function">quota</span>spec:  limits:  - type: Container       <span class="token comment">#限制的资源类型</span>    max:      cpu: <span class="token string">"2"</span>            <span class="token comment">#限制单个容器的最大CPU</span>      memory: <span class="token string">"2Gi"</span>       <span class="token comment">#限制单个容器的最大内存</span>    min:      cpu: <span class="token string">"500m"</span>         <span class="token comment">#限制单个容器的最小CPU</span>      memory: <span class="token string">"512Mi"</span>     <span class="token comment">#限制单个容器的最小内存</span>    default:      cpu: <span class="token string">"500m"</span>         <span class="token comment">#默认单个容器的CPU限制</span>      memory: <span class="token string">"512Mi"</span>     <span class="token comment">#默认单个容器的内存限制</span>    defaultRequest:      cpu: <span class="token string">"500m"</span>         <span class="token comment">#默认单个容器的CPU创建请求</span>      memory: <span class="token string">"512Mi"</span>     <span class="token comment">#默认单个容器的内存创建请求</span>    maxLimitRequestRatio:      cpu: <span class="token number">2</span>              <span class="token comment">#限制CPU limit/request比值最大为2  </span>      memory: <span class="token number">2</span>           <span class="token comment">#限制内存limit/request比值最大为2</span>  - type: Pod    max:      cpu: <span class="token string">"4"</span>            <span class="token comment">#限制单个Pod的最大CPU</span>      memory: <span class="token string">"4Gi"</span>       <span class="token comment">#限制单个Pod最大内存</span>  - type: PersistentVolumeClaim    max:      storage: 50Gi        <span class="token comment">#限制PVC最大的requests.storage</span>    min:      storage: 30Gi        <span class="token comment">#限制PVC最小的requests.storage</span></code></pre></div></figure><h3 id="1-4-1-Pod未申请资源示例"><a href="#1-4-1-Pod未申请资源示例" class="headerlink" title="1.4.1 Pod未申请资源示例"></a>1.4.1 Pod未申请资源示例</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.quota限制namespace下的资源上限</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim quota.yaml</span>apiVersion: v1kind: ResourceQuotametadata:  name: quota-test1  namespace: <span class="token function">quota</span>spec:  hard:    limits.cpu: <span class="token string">"1"</span>    limits.memory: <span class="token string">"2G"</span>    requests.cpu: <span class="token string">"0.5"</span>    requests.memory: <span class="token string">"1Gi"</span>    persistentvolumeclaims: <span class="token string">"10"</span>    requests.storage: <span class="token string">"5Gi"</span>    pods: <span class="token string">"5"</span>    secrets: <span class="token string">"5"</span>    services: <span class="token string">"3"</span>root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f quota.yaml </span>resourcequota/quota-test1 configuredroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used  Hard--------                ----  ----limits.cpu              <span class="token number">0</span>     <span class="token number">1</span>limits.memory           <span class="token number">0</span>     2Gpersistentvolumeclaims  <span class="token number">0</span>     <span class="token number">10</span>pods                    <span class="token number">0</span>     <span class="token number">5</span>requests.cpu            <span class="token number">0</span>     500mrequests.memory         <span class="token number">0</span>     1Girequests.storage        <span class="token number">0</span>     5Gisecrets                 <span class="token number">1</span>     <span class="token number">5</span>services                <span class="token number">0</span>     <span class="token number">3</span><span class="token comment">#2.配置limitrange</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim limitrange.yaml</span>apiVersion: v1kind: LimitRangemetadata:  name: limitrange-test1  namespace: <span class="token function">quota</span>spec:  limits:  - default:      cpu: <span class="token string">"500m"</span>      memory: <span class="token string">"700Mi"</span>    defaultRequest:      cpu: <span class="token string">"200m"</span>      memory: <span class="token string">"450Mi"</span>    max:      cpu: <span class="token string">"2"</span>      memory: <span class="token string">"2Gi"</span>    min:      cpu: <span class="token string">"100m"</span>      memory: <span class="token string">"128Mi"</span>    type: Container    root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f limitrange.yaml </span>limitrange/limitrange-test1 createdroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe limitranges -n quota</span>Name:       limitrange-test1Namespace:  <span class="token function">quota</span>Type        Resource  Min    Max  Default Request  Default Limit  Max Limit/Request Ratio----        --------  ---    ---  ---------------  -------------  -----------------------Container   cpu       100m   <span class="token number">2</span>    200m             500m           -Container   memory    128Mi  2Gi  450Mi            1Gi            -<span class="token comment">#3.创建测试容器</span>root@deploy:/opt/yaml/quota<span class="token comment"># vim nginx.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx  name: nginx  namespace: <span class="token function">quota</span>spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx  strategy: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  template:    metadata:      labels:        app: nginx    spec:      containers:      - image: harbor.chsblogs.local/baseimages/nginx:1.22.1        name: nginx        imagePullPolicy: IfNotPresentroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx createdroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-5b4dd694d5-47kn6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5snginx-5b4dd694d5-7jbn6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4sroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used    Hard--------                ----    ----limits.cpu              <span class="token number">1</span>       <span class="token number">1</span>limits.memory           1400Mi  2Gpersistentvolumeclaims  <span class="token number">0</span>       <span class="token number">10</span>pods                    <span class="token number">2</span>       <span class="token number">5</span>requests.cpu            400m    500mrequests.memory         900Mi   1Girequests.storage        <span class="token number">0</span>       5Gisecrets                 <span class="token number">1</span>       <span class="token number">5</span>services                <span class="token number">0</span>       <span class="token number">3</span></code></pre></div></figure><h3 id="1-4-2-Pod已申请资源示例"><a href="#1-4-2-Pod已申请资源示例" class="headerlink" title="1.4.2 Pod已申请资源示例"></a>1.4.2 Pod已申请资源示例</h3><p>创建的容器requests值必须满足条件：min值&lt;requests值&lt;limits值。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/quota<span class="token comment"># vim nginx.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx  name: nginx  namespace: <span class="token function">quota</span>spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx  strategy: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  template:    metadata:      labels:        app: nginx    spec:      containers:      - image: harbor.chsblogs.local/baseimages/nginx:1.22.1        name: nginx        imagePullPolicy: IfNotPresent        resources:          requests:            memory: <span class="token string">"500Mi"</span>            cpu: <span class="token string">"0.25"</span>          limits:            memory: <span class="token string">"900Mi"</span>            cpu: <span class="token string">"400m"</span>            root@deploy:/opt/yaml/quota<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx createdroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl get pod -n quota</span>NAME                     READY   STATUS    RESTARTS   AGEnginx-857b5465f8-d2nxm   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3snginx-857b5465f8-f6gjg   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3sroot@deploy:/opt/yaml/quota<span class="token comment"># kubectl describe resourcequotas -n quota</span>Name:                   quota-test1Namespace:              <span class="token function">quota</span>Resource                Used    Hard--------                ----    ----limits.cpu              800m    <span class="token number">1</span>limits.memory           1800Mi  2Gpersistentvolumeclaims  <span class="token number">0</span>       <span class="token number">10</span>pods                    <span class="token number">2</span>       <span class="token number">5</span>requests.cpu            500m    500mrequests.memory         1000Mi  1Girequests.storage        <span class="token number">0</span>       5Gisecrets                 <span class="token number">1</span>       <span class="token number">5</span>services                <span class="token number">0</span>       3s</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(10).K8S账户授权RBAC</title>
    <link href="/2023/05/09/Container/Kubernetes/kubernetes10/"/>
    <url>/2023/05/09/Container/Kubernetes/kubernetes10/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S账户授权RBAC"><a href="#1-K8S账户授权RBAC" class="headerlink" title="1.K8S账户授权RBAC"></a>1.K8S账户授权RBAC</h1><p>官方文档：</p><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/authorization/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/authorization/</a></p><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/</a></p><h2 id="1-1-角色管理"><a href="#1-1-角色管理" class="headerlink" title="1.1 角色管理"></a>1.1 角色管理</h2><p>K8S为了方便管理权限，将一组特定权限赋予角色，然后将角色赋予用户，那么用户将继承该角色具有的权限。</p><ul><li>Role：定义一组规则，用于访问某一命名空间中的K8S资源。</li><li>RoleBinding：定义用户和角色(Role)的绑定关系。</li><li>ClusterRole：定义一组访问集群中K8S资源(包括所有命名空间)的规则。</li><li>ClusterRoleBinding：定义了用户和集群角色(ClusterRole)的绑定关系。</li></ul><h2 id="1-2-Service-Account"><a href="#1-2-Service-Account" class="headerlink" title="1.2 Service Account"></a>1.2 Service Account</h2><p>Service Account，即服务账户，pod使用Service Account身份运行容器。赋予Service Account相应角色，则使用该Service Account身份运行的pod中进程将具有对应Service Account的权限。在每个namespace中都有一个名称为default的Service Account。每个Service Account都有一个Secret。 Service Account会创建一个secret，pod或deployment使用Service Account账户时，会将Service Account的secret进行挂载到pods中使用。</p><h2 id="1-3-用户授权案例"><a href="#1-3-用户授权案例" class="headerlink" title="1.3 用户授权案例"></a>1.3 用户授权案例</h2><h3 id="1-3-1-创建namespace"><a href="#1-3-1-创建namespace" class="headerlink" title="1.3.1 创建namespace"></a>1.3.1 创建namespace</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl create ns rbac</span>namespace/rbac created</code></pre></div></figure><h3 id="1-3-2-创建sa账户"><a href="#1-3-2-创建sa账户" class="headerlink" title="1.3.2 创建sa账户"></a>1.3.2 创建sa账户</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl create sa chs</span>serviceaccount/chs createdroot@deploy:~<span class="token comment"># kubectl get sa</span>NAME      SECRETS   AGEchs       <span class="token number">1</span>         4sdefault   <span class="token number">1</span>         3m43s</code></pre></div></figure><h3 id="1-3-3-创建role角色"><a href="#1-3-3-创建role角色" class="headerlink" title="1.3.3 创建role角色"></a>1.3.3 创建role角色</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/role<span class="token comment"># vim role.yaml</span>apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata:  name: chs-user <span class="token comment">#角色名称</span>  namespace: rbacrules: <span class="token comment">#定义授权规则</span>- apiGroups: <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span> <span class="token comment">#资源对象API，空表示所有版本。</span>  resources: <span class="token punctuation">[</span><span class="token string">"pods/exec"</span><span class="token punctuation">]</span> <span class="token comment">#目标资源对象</span>  <span class="token comment">#verbs: ["*"]</span>  <span class="token comment">##RO-Role</span>  verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span>, <span class="token string">"create"</span><span class="token punctuation">]</span> <span class="token comment">#该角色针对上述资源对象的动作集</span>- apiGroups: <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>  resources: <span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>  <span class="token comment">#verbs: ["*"]</span>  <span class="token comment">##RO-Role</span>  verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span>, <span class="token string">"delete"</span><span class="token punctuation">]</span>- apiGroups: <span class="token punctuation">[</span><span class="token string">"apps/v1"</span><span class="token punctuation">]</span>  resources: <span class="token punctuation">[</span><span class="token string">"deployments"</span><span class="token punctuation">]</span>  <span class="token comment">#verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]</span>  <span class="token comment">##RO-Role</span>  verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"watch"</span>, <span class="token string">"list"</span><span class="token punctuation">]</span>root@deploy:/opt/yaml/role<span class="token comment"># kubectl apply -f role.yaml </span>role.rbac.authorization.k8s.io/chs-user createdroot@deploy:/opt/yaml/role<span class="token comment"># kubectl get role</span>NAME       CREATED ATchs-user   <span class="token number">2023</span>-05-09T02:23:26Z</code></pre></div></figure><h3 id="1-3-4-用户绑定角色"><a href="#1-3-4-用户绑定角色" class="headerlink" title="1.3.4 用户绑定角色"></a>1.3.4 用户绑定角色</h3><p>将sa账户绑定到role chs-user角色</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/role<span class="token comment"># vim role-bind.yaml</span>kind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:  name: role-bind <span class="token comment">#角色绑定的名称</span>  namespace: rbac <span class="token comment">#角色绑定所在的namespace</span>subjects: <span class="token comment">#主题配置，格式为列表</span>- kind: ServiceAccount  name: chs <span class="token comment">#角色绑定的目标账户</span>  namespace: rbacroleRef: <span class="token comment">#角色配置，指定账户是与Role绑定还是与ClusterRole绑定</span>  kind: Role <span class="token comment">#绑定类型，必须是Role、ClusterRole二者其一</span>  name: chs-user <span class="token comment">#此字段必须与要绑定的目标Role或ClusterRole的名称匹配。</span>  apiGroup: rbac.authorization.k8s.io <span class="token comment">#API版本</span><span class="token comment">#查看sa账户绑定role角色</span>root@deploy:/opt/yaml/role<span class="token comment"># kubectl get rolebindings -o yaml</span>apiVersion: v1items:- apiVersion: rbac.authorization.k8s.io/v1  kind: RoleBinding  metadata:    annotations:      kubectl.kubernetes.io/last-applied-configuration: <span class="token operator">|</span>        <span class="token punctuation">&#123;</span><span class="token string">"apiVersion"</span><span class="token builtin class-name">:</span><span class="token string">"rbac.authorization.k8s.io/v1"</span>,<span class="token string">"kind"</span><span class="token builtin class-name">:</span><span class="token string">"RoleBinding"</span>,<span class="token string">"metadata"</span>:<span class="token punctuation">&#123;</span><span class="token string">"annotations"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,<span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"role-bind"</span>,<span class="token string">"namespace"</span><span class="token builtin class-name">:</span><span class="token string">"rbac"</span><span class="token punctuation">&#125;</span>,<span class="token string">"roleRef"</span>:<span class="token punctuation">&#123;</span><span class="token string">"apiGroup"</span><span class="token builtin class-name">:</span><span class="token string">"rbac.authorization.k8s.io"</span>,<span class="token string">"kind"</span><span class="token builtin class-name">:</span><span class="token string">"Role"</span>,<span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"chs-user"</span><span class="token punctuation">&#125;</span>,<span class="token string">"subjects"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"kind"</span><span class="token builtin class-name">:</span><span class="token string">"ServiceAccount"</span>,<span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"chs"</span>,<span class="token string">"namespace"</span><span class="token builtin class-name">:</span><span class="token string">"rbac"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    creationTimestamp: <span class="token string">"2023-05-09T02:28:50Z"</span>    managedFields:    - apiVersion: rbac.authorization.k8s.io/v1      fieldsType: FieldsV1      fieldsV1:        f:metadata:          f:annotations:            .: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            f:kubectl.kubernetes.io/last-applied-configuration: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        f:roleRef:          f:apiGroup: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          f:kind: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          f:name: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        f:subjects: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      manager: kubectl-client-side-apply      operation: Update      time: <span class="token string">"2023-05-09T02:28:50Z"</span>    name: role-bind    namespace: rbac    resourceVersion: <span class="token string">"1326883"</span>    uid: 27f78308-ec21-4f00-9745-a6570ae14da0  roleRef:    apiGroup: rbac.authorization.k8s.io    kind: Role    name: chs-user  subjects:  - kind: ServiceAccount    name: chs    namespace: rbackind: Listmetadata:  resourceVersion: <span class="token string">""</span>  selfLink: <span class="token string">""</span>  root@deploy:/opt/yaml/role<span class="token comment"># kubectl get secrets -A | grep rbac</span>rbac                          chs-token-tl2gr                                  kubernetes.io/service-account-token   <span class="token number">3</span>      19mrbac                          default-token-wfqfn                              kubernetes.io/service-account-token   <span class="token number">3</span>      22mroot@deploy:/opt/yaml/role<span class="token comment"># kubectl describe secrets chs-token-tl2gr</span>Name:         chs-token-tl2grNamespace:    rbacLabels:       <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:  kubernetes.io/service-account.name: chs              kubernetes.io/service-account.uid: 44f97522-c26b-4e66-b4e5-fc57bf2990d9Type:  kubernetes.io/service-account-tokenData<span class="token operator">==</span><span class="token operator">==</span>ca.crt:     <span class="token number">1350</span> bytesnamespace:  <span class="token number">4</span> bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IktmaWZfcS1FRnFGYS1hMVhTVkF6SGlQVlVGQjJYQmJQU0xrS0VoY0trMEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJyYmFjIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImNocy10b2tlbi10bDJnciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJjaHMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0NGY5NzUyMi1jMjZiLTRlNjYtYjRlNS1mYzU3YmYyOTkwZDkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6cmJhYzpjaHMifQ.jY_dGEwqHq8sZRoqVfvt2-krjEcS0RniGXrBJWl6r0dFJZp-JzKvyxWTIagnlD-sOfEFOv69q3yHyUnomdXtJ_EoKrNECi9u4VjP38zfd1cY-8Zxh0JBh7F75YShO8zkNeQUh9FxKS8NF-kHcNhhh9gEfQqEEs-xA7h744rPiVEchO6-1HOdmx6w6ZAlCeupr2IjpOKl56-z-yV3ttB6qmnbSsFwsXyCuivpQ1lF3kuQS7YA89n5jKjYv1IiPDrRxtRrcvCfSyEVpujv-HtZdrAn3AloKlQzkMsbyNQbhsKwFfSmFVMakXnPROeLRMUHkDzhCpTaQ9jfi46Q8oXvHg</code></pre></div></figure><h2 id="1-4-生成config文件登录UI"><a href="#1-4-生成config文件登录UI" class="headerlink" title="1.4 生成config文件登录UI"></a>1.4 生成config文件登录UI</h2><p>将token附件到k8s的集群配置文件中，dashborad登录使用config文件登录</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># cp /root/.kube/config /tmp/</span>root@deploy:~<span class="token comment"># cd /tmp/</span>root@deploy:/tmp<span class="token comment"># vim config</span>root@deploy:/tmp<span class="token comment"># kubectl -n kubernetes-dashboard describe secrets admin-user | grep ^token</span>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IktmaWZfcS1FRnFGYS1hMVhTVkF6SGlQVlVGQjJYQmJQU0xrS0VoY0trMEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWg5N2c0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0OGJhMjU1Mi03NDkxLTQ2MDgtYjBjYi01OWMwMTZmYTJjN2IiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.p3NBDtPI1LJAEBAQUsOFreAjCgoZee_5XzWwKx5Kwg1pgUK_I6InDM3T3ILZOQUoQtcKaHvHCtvT5SbiyRN1c-16tZSlPkH9wXf-D_CrNt4O2yBUVgQ1vRC_LOvNqGX8vTj8bNtor3nFTHhnPxaQ6C7GaTj7pP-w6yXlD5X3pw6z1hY0yQsqQZebMjTz8-c2UtizJOvYUHtQ614d5h8ZGoWHz9u_AZ1t8I8bN-ejyg6hCuLTVwQU0ZmKPjumsFTc5JvOGHnZULjr4e5_YZZAR2nSnsdNStKrM5uIQKo4xUhxB3Wadq4rgsNICb0zLqAUg1vRgK9rHFx1AAL8nlz0_A<span class="token comment">#添加token到config</span>root@deploy:/tmp<span class="token comment"># tail -n 5 config </span>- name: admin  user:    client-certificate-data: <span class="token assign-left variable">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQxekNDQXIrZ0F3SUJBZ0lVUk5QUkVMWU5yekFNLzhVRWEyWlpXNXFWTDljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdUQ0VoaGJtZGFhRzkxTVFzd0NRWURWUVFIRXdKWQpVekVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEV6QVJCZ05WQkFNVENtdDFZbVZ5CmJtVjBaWE13SUJjTk1qTXdOVEF5TURNek1qQXdXaGdQTWpBM016QTBNVGt3TXpNeU1EQmFNR2N4Q3pBSkJnTlYKQkFZVEFrTk9NUkV3RHdZRFZRUUlFd2hJWVc1bldtaHZkVEVMTUFrR0ExVUVCeE1DV0ZNeEZ6QVZCZ05WQkFvVApEbk41YzNSbGJUcHRZWE4wWlhKek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweERqQU1CZ05WQkFNVEJXRmtiV2x1Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdlpkSnhMTGsyOGJiOTkrNElyd2gKbnNWQ1RabEcvM01NdWhMbWhPZDdNR0xBcVhnM3hzN0t2bmdrYzFMS0dNU3pEWEpROXVmRk4vRzNsR3dGOHBwWgpUekVqYjAvZkZ6U3BPMlp6eXgycnBoT2FMRmpFKzAwQ1FJM0ZqNUpSMXM0aVJCVzE0ekpBbU9aVUJvVTBVOU5SCkhmZlE4QmdERmhpb1huNEU5N1hqaFRGZzBiZE5GcVR2MHFJZFdiRlRMcXJ3M3k0MlBkVVI0clB6R2xKcURzVFgKZ21pbnB3eDFaQ1BEbXAveUViemNMcThBeFhlM3hoWUpncHhEUkxHU0FTdFFLOFB6dmdybkpqZ3puNWM0eGticQp3MmFYN0NZVEdQdm9vakMyWTFMUDFZQmlFYW5mNmpEbjZlUmlJV1hjOXkzUGZ2ZnR4d3ZndnpURWtxNnBNakl2Clh3SURBUUFCbzM4d2ZUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGRUwvZnlBRkNVa2VzSDJZTkRydgptZzJudjhVQ01COEdBMVVkSXdRWU1CYUFGS2tEZ2FzOWpXRTJlMmdSemQ3aUc3dTRQWHNYTUEwR0NTcUdTSWIzCkRRRUJDd1VBQTRJQkFRQjh5UmxkdnViWms2MVlPVEhlazErVFpCSXE2cGc5SU5WZFNPVkF4d0o1OU04WmRUUDMKRVl0NFhsZGQzSWl4VzljOW5SUmJxNjZKRE5Dd0hNakFuQTZuYmVIZ0cvb29OZGlpcklFbkZ3SkRMMHQ1RnRqdwpQOGxsalphbTd1QjlWWGs5QWE5UHpNaUhVb0hFWDNjbVpDQ2RCTE1IYi9TQ0s3MVMrTDVZVktGcGNtUDh6cFB0CkFMSlArSStVOFB1MS9Ca1VhbEl3dnA4RmpiaWlwVjhIZGdwREtveEt4MCtndm1UdUpSU3dWUEtLQUhzL3FOai8Kci9IUlNWTFgxcWgwZnpOUXVtQ3owVVlmcTV3NGpOemVxa0JTY0I2SnovY1NXYmxad2p4T2grbkE0VWxtMGxEbApZWU9kd3lMb29SZFFWWElVdERNWE9HOUxDZVA4UlQ5RER6WW0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo</span><span class="token operator">=</span>    client-key-data: <span class="token assign-left variable">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdlpkSnhMTGsyOGJiOTkrNElyd2huc1ZDVFpsRy8zTU11aExtaE9kN01HTEFxWGczCnhzN0t2bmdrYzFMS0dNU3pEWEpROXVmRk4vRzNsR3dGOHBwWlR6RWpiMC9mRnpTcE8yWnp5eDJycGhPYUxGakUKKzAwQ1FJM0ZqNUpSMXM0aVJCVzE0ekpBbU9aVUJvVTBVOU5SSGZmUThCZ0RGaGlvWG40RTk3WGpoVEZnMGJkTgpGcVR2MHFJZFdiRlRMcXJ3M3k0MlBkVVI0clB6R2xKcURzVFhnbWlucHd4MVpDUERtcC95RWJ6Y0xxOEF4WGUzCnhoWUpncHhEUkxHU0FTdFFLOFB6dmdybkpqZ3puNWM0eGticXcyYVg3Q1lUR1B2b29qQzJZMUxQMVlCaUVhbmYKNmpEbjZlUmlJV1hjOXkzUGZ2ZnR4d3ZndnpURWtxNnBNakl2WHdJREFRQUJBb0lCQUZaaHEvYTNHNWNYVC9ucwpNTldDcWo3UTJaakprWk9xTTg1RDlrdnZ2QzBia1hTbGxhUTdiQnpFV0xkQ3JWb0RwU0VuU01SMmJXRkQvTVRmClF3WjZWTjdFSU1VQ3V6NnplN2ZZd2tGMVQxUG44b0xxSHpYd3JHb0ZMbEp2OUdIT29jWXJyaWZLS2F5QXBTQWoKYU9nWWpBai9kRzh3UVplN3ZGcnhTQW9sRVhrSmNWRHFFUnJPZ0g2NWlSSC9XT1RBWmt6YnZFS2hYTFhyS0dOOQplS2RHUzlBZ0xDSVRjU09YYlpOV3pST2tSREd3WkpRdEI2SU1veTI1UU1DQll6TFplOGNrSndSN1ZxMWd5bTRpCkEyRnZucXd2TGs3eFRLMVhYeDNNU2FCOElpNTllVWtTZFB6dFlIV1RJSytqa2lSNTVNaVlrR216bGxSOE8vbnMKcG54cHZJRUNnWUVBenVtWHZVaDFTZldDTGNyZXNwazIxSEQ2cjFmM0xwS1ZJNUxwS0NOK2o0MDYzallZdFIzaQpyQ2IySFlTNCs4WFc5ZUZpUVNWcG1sZzhiSlBmbVdzSllJcTR2czM2cDlzMDNzWEtzN0xlWmtLcUd2aENuNHNWClBZUUZVQlpnM1h4dnRjSkE5YTdON0dRZGFXdUJkYmNOTEFCclVrbWxIWjJyYnUzbmUrazdrSEVDZ1lFQTZwRzEKay9LS1hCOWN0SlBLcmtRWlBlUFlLT252Q2srSjJ0SzBGWnNKZkp5UW5qOGdwZGV3QlVseDdiT0QzR0Zsc0dMSQp0MnByVFBSdFhRQzBsWXVRZWJCVzF1WmZYb2N6MHV3a1hkQ0xkaXVBV2JjVzlwblZzSFVrZ3ZhVVRZdTRLZkIwCkpVR1N6MVBRdWNyeU5WR21yajI1SlZScnZBZ2FaRHZ3RmRxQXBNOENnWUFrYktqQ3NJdTlQbFB4WGNKQWJJcGoKY1pRZjQvdG1ublZVc3RzS3J0enJ4bS96aUZCbktlQ3FiNTFwNnVCcHFoVkNhYS9UU2hQQ0VRQnFHTW9IQnZtNgpuaEVSdmM3L1Y2NkIvUTNHL3BqNkpZZ3VnVCt4T0ZtLzM0clQ0MnlmOFBUMWFVSG9QaUtRRjd1NXdDd2xIZGxhCndxUWg4MGIyNUxlMktubFNyZWRIY1FLQmdRQ0RSaHB0ZXU0dDBpdHFyODlkS2FWS3VxbHRkRVlmNmhXSFRpWVUKZFZpZzBXb3A5Y0JLcitQRmdhM3R6bW84T3BIVFhlVmdxSUQyWjFDUkhPVHpVRkVCbVV0d0p5czJWc29NLzdUMgpmOUNjeUltaks5RUJIMlMweFVveXROYVljMW9VdG9uNWs3SWFyNWgvY2ZHTkgyMzkwM003VGZ5aEZaUFhocWU5ClF6Ujlod0tCZ0dsUUhYVzhRdjFxNGdUZnBjSE8wVWZiK09aMnpxWi8rbnVZMkN3dnNLb3lvcEt5ODFvNjZXZXkKWTV6Ty9JdVdtTFJrNWVxcUJYaUpJTzJ0S1dmMW5UOFo1YWxGMHZzUG5QMUJEWkgrVEJUVHo5T2lPd3RWN2o2bgpobHNORTR2QTN6d1pkUXFSSjhxVzI2UktKZTB3bEYzUjZjUE1HOXVQd09UYk15WGhmWHNRCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg</span><span class="token operator">==</span>    token: eyJhbGciOiJSUzI1NiIsImtpZCI6IktmaWZfcS1FRnFGYS1hMVhTVkF6SGlQVlVGQjJYQmJQU0xrS0VoY0trMEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWg5N2c0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0OGJhMjU1Mi03NDkxLTQ2MDgtYjBjYi01OWMwMTZmYTJjN2IiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.p3NBDtPI1LJAEBAQUsOFreAjCgoZee_5XzWwKx5Kwg1pgUK_I6InDM3T3ILZOQUoQtcKaHvHCtvT5SbiyRN1c-16tZSlPkH9wXf-D_CrNt4O2yBUVgQ1vRC_LOvNqGX8vTj8bNtor3nFTHhnPxaQ6C7GaTj7pP-w6yXlD5X3pw6z1hY0yQsqQZebMjTz8-c2UtizJOvYUHtQ614d5h8ZGoWHz9u_AZ1t8I8bN-ejyg6hCuLTVwQU0ZmKPjumsFTc5JvOGHnZULjr4e5_YZZAR2nSnsdNStKrM5uIQKo4xUhxB3Wadq4rgsNICb0zLqAUg1vRgK9rHFx1AAL8nlz0_A</code></pre></div></figure><p><strong>生成普通账户config文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(09).K8S基于ZooKeeper集群实现微服务动态注册和发现</title>
    <link href="/2023/05/05/Container/Kubernetes/kubernetes09/"/>
    <url>/2023/05/05/Container/Kubernetes/kubernetes09/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S基于ZooKeeper集群实现微服务动态注册和发现"><a href="#1-K8S基于ZooKeeper集群实现微服务动态注册和发现" class="headerlink" title="1.K8S基于ZooKeeper集群实现微服务动态注册和发现"></a>1.K8S基于ZooKeeper集群实现微服务动态注册和发现</h1><p><img src="/2023/05/05/Container/Kubernetes/kubernetes09/image-20230511193018816.png" alt="image-20230511193018816"> </p><h2 id="1-1-构建zookeeper镜像"><a href="#1-1-构建zookeeper镜像" class="headerlink" title="1.1 构建zookeeper镜像"></a>1.1 构建zookeeper镜像</h2><p><strong>创建zoo.cfg配置文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zoo.cfg</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/usr/local/zookeeper/data<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/usr/local/zookeeper/wal<span class="token comment">#snapCount=100000</span><span class="token assign-left variable">autopurge.purgeInterval</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">quorumListenOnAllIPs</span><span class="token operator">=</span>true</code></pre></div></figure><p><strong>日志配置文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim log4j.properties</span><span class="token comment"># Define some default values that can be overridden by system properties</span><span class="token assign-left variable">zookeeper.root.logger</span><span class="token operator">=</span>INFO, CONSOLE, ROLLINGFILE<span class="token assign-left variable">zookeeper.console.threshold</span><span class="token operator">=</span>INFO<span class="token assign-left variable">zookeeper.log.dir</span><span class="token operator">=</span>/usr/local/zookeeper/log<span class="token assign-left variable">zookeeper.log.file</span><span class="token operator">=</span>zookeeper.log<span class="token assign-left variable">zookeeper.log.threshold</span><span class="token operator">=</span>INFO<span class="token assign-left variable">zookeeper.tracelog.dir</span><span class="token operator">=</span>/usr/local/zookeeper/log<span class="token assign-left variable">zookeeper.tracelog.file</span><span class="token operator">=</span>zookeeper_trace.log <span class="token comment">#</span><span class="token comment"># ZooKeeper Logging Configuration</span><span class="token comment">#</span> <span class="token comment"># Format is "&lt;default threshold> (, &lt;appender>)+</span> <span class="token comment"># DEFAULT: console appender only</span><span class="token assign-left variable">log4j.rootLogger</span><span class="token operator">=</span><span class="token variable">$&#123;zookeeper.root.logger&#125;</span> <span class="token comment"># Example with rolling log file</span><span class="token comment">#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE</span> <span class="token comment"># Example with rolling log file and tracing</span><span class="token comment">#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE</span> <span class="token comment">#</span><span class="token comment"># Log INFO level and above messages to the console</span><span class="token comment">#</span><span class="token assign-left variable">log4j.appender.CONSOLE</span><span class="token operator">=</span>org.apache.log4j.ConsoleAppender<span class="token assign-left variable">log4j.appender.CONSOLE.Threshold</span><span class="token operator">=</span><span class="token variable">$&#123;zookeeper.console.threshold&#125;</span><span class="token assign-left variable">log4j.appender.CONSOLE.layout</span><span class="token operator">=</span>org.apache.log4j.PatternLayout<span class="token assign-left variable">log4j.appender.CONSOLE.layout.ConversionPattern</span><span class="token operator">=</span>%d<span class="token punctuation">&#123;</span>ISO8601<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>myid:%X<span class="token punctuation">&#123;</span>myid<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> - %-5p <span class="token punctuation">[</span>%t:%C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>@%L<span class="token punctuation">]</span> - %m%n <span class="token comment">#</span><span class="token comment"># Add ROLLINGFILE to rootLogger to get log file output</span><span class="token comment">#    Log DEBUG level and above messages to a log file</span><span class="token assign-left variable">log4j.appender.ROLLINGFILE</span><span class="token operator">=</span>org.apache.log4j.RollingFileAppender<span class="token assign-left variable">log4j.appender.ROLLINGFILE.Threshold</span><span class="token operator">=</span><span class="token variable">$&#123;zookeeper.log.threshold&#125;</span><span class="token assign-left variable">log4j.appender.ROLLINGFILE.File</span><span class="token operator">=</span><span class="token variable">$&#123;zookeeper.log.dir&#125;</span>/<span class="token variable">$&#123;zookeeper.log.file&#125;</span> <span class="token comment"># Max log file size of 10MB</span><span class="token assign-left variable">log4j.appender.ROLLINGFILE.MaxFileSize</span><span class="token operator">=</span>10MB<span class="token comment"># uncomment the next line to limit number of backup files</span><span class="token assign-left variable">log4j.appender.ROLLINGFILE.MaxBackupIndex</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">log4j.appender.ROLLINGFILE.layout</span><span class="token operator">=</span>org.apache.log4j.PatternLayout<span class="token assign-left variable">log4j.appender.ROLLINGFILE.layout.ConversionPattern</span><span class="token operator">=</span>%d<span class="token punctuation">&#123;</span>ISO8601<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>myid:%X<span class="token punctuation">&#123;</span>myid<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> - %-5p <span class="token punctuation">[</span>%t:%C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>@%L<span class="token punctuation">]</span> - %m%n  <span class="token comment">#</span><span class="token comment"># Add TRACEFILE to rootLogger to get log file output</span><span class="token comment">#    Log DEBUG level and above messages to a log file</span><span class="token assign-left variable">log4j.appender.TRACEFILE</span><span class="token operator">=</span>org.apache.log4j.FileAppender<span class="token assign-left variable">log4j.appender.TRACEFILE.Threshold</span><span class="token operator">=</span>TRACE<span class="token assign-left variable">log4j.appender.TRACEFILE.File</span><span class="token operator">=</span><span class="token variable">$&#123;zookeeper.tracelog.dir&#125;</span>/<span class="token variable">$&#123;zookeeper.tracelog.file&#125;</span> <span class="token assign-left variable">log4j.appender.TRACEFILE.layout</span><span class="token operator">=</span>org.apache.log4j.PatternLayout<span class="token comment">### Notice we are including log4j's NDC here (%x)</span><span class="token assign-left variable">log4j.appender.TRACEFILE.layout.ConversionPattern</span><span class="token operator">=</span>%d<span class="token punctuation">&#123;</span>ISO8601<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>myid:%X<span class="token punctuation">&#123;</span>myid<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> - %-5p <span class="token punctuation">[</span>%t:%C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>@%L<span class="token punctuation">]</span><span class="token punctuation">[</span>%x<span class="token punctuation">]</span> - %m%n</code></pre></div></figure><p><strong>创建zookeeper生成集群配置文件脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim entrypoint.sh</span><span class="token comment">#!/bin/bash</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;MYID<span class="token operator">:-</span>0&#125;</span> <span class="token operator">></span> /usr/local/zookeeper/data/myid <span class="token comment">#k8s zookeeper集群service名称</span><span class="token assign-left variable">servers</span><span class="token operator">=</span><span class="token punctuation">(</span>zookeeper1 zookeeper2 zookeeper3<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$servers</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">for</span> <span class="token for-or-select variable">list</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>servers<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>      <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\n">\n</span>server.%s = %s:2888:3888"</span> <span class="token string">"<span class="token variable"><span class="token variable">$((</span><span class="token number">1</span> <span class="token operator">+</span> $list<span class="token variable">))</span></span>"</span> <span class="token string">"<span class="token variable">$&#123;servers<span class="token punctuation">[</span>$list<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token operator">>></span> /usr/local/zookeeper/conf/zoo.cfg   <span class="token keyword">done</span><span class="token keyword">fi</span> <span class="token builtin class-name">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span></code></pre></div></figure><p><strong>创建集群状态检查脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zkReady.sh</span><span class="token comment">#!/bin/bash</span> /usr/local/zookeeper/bin/zkServer.sh status <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">'Mode: (standalone|leader|follower|observing)'</span></code></pre></div></figure><p><strong>创建Dockerfile镜像文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/jdk-base:v8.341  ENV ZK_VERSION <span class="token number">3.5</span>.10COPY apache-zookeeper-3.5.10-bin.tar.gz /usr/localRUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/zookeeper/data /usr/local/zookeeper/wal /usr/local/zookeeper/logRUN <span class="token builtin class-name">cd</span> /usr/local/ <span class="token operator">&amp;&amp;</span>  <span class="token punctuation">\</span><span class="token function">tar</span> xf apache-zookeeper-3.5.10-bin.tar.gz <span class="token parameter variable">-C</span> /usr/local/zookeeper/ --strip-component<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> apache-zookeeper-3.5.10-bin.tar.gzCOPY zoo.cfg /usr/local/zookeeper/conf/COPY zkReady.sh /usr/local/zookeeper/bin/COPY entrypoint.sh /ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/zookeeper/bin:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span> <span class="token punctuation">\</span>    <span class="token assign-left variable">ZOO_LOG_DIR</span><span class="token operator">=</span>/usr/local/zookeeper/log <span class="token punctuation">\</span>    <span class="token assign-left variable">ZOO_LOG4J_PROP</span><span class="token operator">=</span><span class="token string">"INFO, CONSOLE, ROLLINGFILE"</span> <span class="token punctuation">\</span>    <span class="token assign-left variable">JMXPORT</span><span class="token operator">=</span><span class="token number">9010</span>ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"/entrypoint.sh"</span> <span class="token punctuation">]</span>CMD <span class="token punctuation">[</span> <span class="token string">"zkServer.sh"</span>, <span class="token string">"start-foreground"</span> <span class="token punctuation">]</span>EXPOSE <span class="token number">2181</span> <span class="token number">2888</span> <span class="token number">3888</span> <span class="token number">9010</span></code></pre></div></figure><p><strong>创建镜像构建脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim build-command.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/zookeeper/zookeeper:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/zookeeper/zookeeper:<span class="token variable">$&#123;TAG&#125;</span></code></pre></div></figure><p><strong>构建zookeeper镜像：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># ./build-command.sh v3.5.10</span></code></pre></div></figure><h2 id="1-2-配置NFS"><a href="#1-2-配置NFS" class="headerlink" title="1.2 配置NFS"></a>1.2 配置NFS</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:/data/k8sdata<span class="token comment"># mkdir /data/k8sdata/zookeeper/zookeeper-datadir-&#123;1..3&#125; -p</span>root@ha1:/data/k8sdata<span class="token comment"># cat /etc/exports</span>/data/k8sdata *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span> </code></pre></div></figure><h2 id="1-3-创建K8S资源"><a href="#1-3-创建K8S资源" class="headerlink" title="1.3 创建K8S资源"></a>1.3 创建K8S资源</h2><p><strong>创建测试zookeeper集群命名空间：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl create ns zookeeper</span>namespace/zookeeper created</code></pre></div></figure><p><strong>创建zookeeper集群PV：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zookeeper-pv.yaml</span>---apiVersion: v1kind: PersistentVolumemetadata:  name: zookeeper-datadir-pv-1spec:  capacity:    storage: 20Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/zookeeper/zookeeper-datadir-1---apiVersion: v1kind: PersistentVolumemetadata:  name: zookeeper-datadir-pv-2spec:  capacity:    storage: 20Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/zookeeper/zookeeper-datadir-2---apiVersion: v1kind: PersistentVolumemetadata:  name: zookeeper-datadir-pv-3spec:  capacity:    storage: 20Gi  accessModes:    - ReadWriteOnce  nfs:    server: <span class="token number">192.168</span>.1.43    path: /data/k8sdata/zookeeper/zookeeper-datadir-3root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl apply -f zookeeper-pv.yaml </span>persistentvolume/zookeeper-datadir-pv-1 createdpersistentvolume/zookeeper-datadir-pv-2 createdpersistentvolume/zookeeper-datadir-pv-3 createdroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get pv | grep zook</span>zookeeper-datadir-pv-1   20Gi       RWO            Retain           Available                                                12szookeeper-datadir-pv-2   20Gi       RWO            Retain           Available                                                12szookeeper-datadir-pv-3   20Gi       RWO            Retain           Available                                                12s</code></pre></div></figure><p><strong>创建zookeeper集群PVC：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zookeeper-pvc.yaml</span>---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: zookeeper-datadir-pvc-1  namespace: zookeeperspec:  accessModes:    - ReadWriteOnce  volumeName: zookeeper-datadir-pv-1  resources:    requests:      storage: 10Gi---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: zookeeper-datadir-pvc-2  namespace: zookeeperspec:  accessModes:    - ReadWriteOnce  volumeName: zookeeper-datadir-pv-2  resources:    requests:      storage: 10Gi---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: zookeeper-datadir-pvc-3  namespace: zookeeperspec:  accessModes:    - ReadWriteOnce  volumeName: zookeeper-datadir-pv-3  resources:    requests:      storage: 10Gi      root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl apply -f zookeeper-pvc.yaml </span>persistentvolumeclaim/zookeeper-datadir-pvc-1 createdpersistentvolumeclaim/zookeeper-datadir-pvc-2 createdpersistentvolumeclaim/zookeeper-datadir-pvc-3 createdroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get pvc -n zookeeper</span>NAME                      STATUS   VOLUME                   CAPACITY   ACCESS MODES   STORAGECLASS   AGEzookeeper-datadir-pvc-1   Bound    zookeeper-datadir-pv-1   20Gi       RWO                           17szookeeper-datadir-pvc-2   Bound    zookeeper-datadir-pv-2   20Gi       RWO                           17szookeeper-datadir-pvc-3   Bound    zookeeper-datadir-pv-3   20Gi       RWO                           17sroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get pv | grep zook</span>zookeeper-datadir-pv-1   20Gi       RWO            Retain           Bound    zookeeper/zookeeper-datadir-pvc-1                           14mzookeeper-datadir-pv-2   20Gi       RWO            Retain           Bound    zookeeper/zookeeper-datadir-pvc-2                           14mzookeeper-datadir-pv-3   20Gi       RWO            Retain           Bound    zookeeper/zookeeper-datadir-pvc-3                           14m</code></pre></div></figure><p><strong>创建zookeeper资源清单文件deployment：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zookeeper.yaml</span>---<span class="token comment">#创建zookeeper1</span>kind: DeploymentapiVersion: apps/v1metadata:  name: zookeeper1  namespace: zookeeperspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: zookeeper  template:    metadata:      labels:        app: zookeeper        server-id: <span class="token string">"1"</span>    spec:      volumes:        - name: data          emptyDir: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        - name: wal          emptyDir:            medium: Memory <span class="token comment">#预写日志数据持久化到内存</span>      containers:        - name: server          image: harbor.chsblogs.local/zookeeper/zookeeper:v3.5.10          imagePullPolicy: IfNotPresent          env:            - name: MYID              value: <span class="token string">"1"</span>            - name: JVMFLAGS              value: <span class="token string">"-Xmx2G"</span>          ports:            - containerPort: <span class="token number">2181</span>            - containerPort: <span class="token number">2888</span>            - containerPort: <span class="token number">3888</span>          volumeMounts:          - mountPath: <span class="token string">"/usr/local/zookeeper/data"</span>            name: zookeeper-datadir-pvc-1      volumes:        - name: zookeeper-datadir-pvc-1          persistentVolumeClaim:            claimName: zookeeper-datadir-pvc-1---<span class="token comment">#创建zookeeper2实例</span>kind: DeploymentapiVersion: apps/v1metadata:  name: zookeeper2  namespace: zookeeperspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: zookeeper  template:    metadata:      labels:        app: zookeeper        server-id: <span class="token string">"2"</span>    spec:      volumes:        - name: data          emptyDir: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        - name: wal          emptyDir:            medium: Memory      containers:        - name: server          image: harbor.chsblogs.local/zookeeper/zookeeper:v3.5.10          imagePullPolicy: IfNotPresent          env:            - name: MYID              value: <span class="token string">"2"</span>            - name: JVMFLAGS              value: <span class="token string">"-Xmx2G"</span>          ports:            - containerPort: <span class="token number">2181</span>            - containerPort: <span class="token number">2888</span>            - containerPort: <span class="token number">3888</span>          volumeMounts:          - mountPath: <span class="token string">"/usr/local/zookeeper/data"</span>            name: zookeeper-datadir-pvc-2      volumes:        - name: zookeeper-datadir-pvc-2          persistentVolumeClaim:            claimName: zookeeper-datadir-pvc-2---<span class="token comment">#创建zookeeper3实例</span>kind: DeploymentapiVersion: apps/v1metadata:  name: zookeeper3  namespace: zookeeperspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: zookeeper  template:    metadata:      labels:        app: zookeeper        server-id: <span class="token string">"3"</span>    spec:      volumes:        - name: data          emptyDir: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        - name: wal          emptyDir:            medium: Memory      containers:        - name: server          image: harbor.chsblogs.local/zookeeper/zookeeper:v3.5.10          imagePullPolicy: IfNotPresent          env:            - name: MYID              value: <span class="token string">"3"</span>            - name: JVMFLAGS              value: <span class="token string">"-Xmx2G"</span>          ports:            - containerPort: <span class="token number">2181</span>            - containerPort: <span class="token number">2888</span>            - containerPort: <span class="token number">3888</span>          volumeMounts:          - mountPath: <span class="token string">"/usr/local/zookeeper/data"</span>            name: zookeeper-datadir-pvc-3      volumes:        - name: zookeeper-datadir-pvc-3          persistentVolumeClaim:           claimName: zookeeper-datadir-pvc-3root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl apply -f zookeeper.yaml </span>deployment.apps/zookeeper1 createddeployment.apps/zookeeper2 createddeployment.apps/zookeeper3 createdroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get pod -n zookeeper</span>NAME                          READY   STATUS    RESTARTS   AGEzookeeper1-78df6bffb-hwszc    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          28szookeeper2-5868f54d65-hcg42   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          28szookeeper3-6dd44dbb-bdqv5     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          28s</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># vim zookeeper-svc.yaml</span><span class="token comment">#所有zookeeper节点内网访问client</span>apiVersion: v1kind: Servicemetadata:  name: zookeeper  namespace: zookeeperspec:  ports:    - name: client      port: <span class="token number">2181</span>  selector:    app: zookeeper ---<span class="token comment">#对外访问zookeeper1</span>apiVersion: v1kind: Servicemetadata:  name: zookeeper1  namespace: zookeeperspec:  type: NodePort          ports:    - name: client      port: <span class="token number">2181</span>      nodePort: <span class="token number">32181</span>    - name: followers      port: <span class="token number">2888</span>    - name: election      port: <span class="token number">3888</span>  selector:    app: zookeeper    server-id: <span class="token string">"1"</span> ---<span class="token comment">#对外访问zookeeper2</span>apiVersion: v1kind: Servicemetadata:  name: zookeeper2  namespace: zookeeperspec:  type: NodePort          ports:    - name: client      port: <span class="token number">2181</span>      nodePort: <span class="token number">32182</span>    - name: followers      port: <span class="token number">2888</span>    - name: election      port: <span class="token number">3888</span>  selector:    app: zookeeper    server-id: <span class="token string">"2"</span> ---<span class="token comment">#对外访问zookeeper3</span>apiVersion: v1kind: Servicemetadata:  name: zookeeper3  namespace: zookeeperspec:  type: NodePort          ports:    - name: client      port: <span class="token number">2181</span>      nodePort: <span class="token number">32183</span>    - name: followers      port: <span class="token number">2888</span>    - name: election      port: <span class="token number">3888</span>  selector:    app: zookeeper    server-id: <span class="token string">"3"</span>    root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl apply -f zookeeper-svc.yaml </span>service/zookeeper createdservice/zookeeper1 createdservice/zookeeper2 createdservice/zookeeper3 createdroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get svc -n zookeeper</span>NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                                        AGEzookeeper    ClusterIP   <span class="token number">172.20</span>.86.133   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">2181</span>/TCP                                       11szookeeper1   NodePort    <span class="token number">172.20</span>.18.7     <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">2181</span>:32181/TCP,2888:48631/TCP,3888:40307/TCP   11szookeeper2   NodePort    <span class="token number">172.20</span>.96.95    <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">2181</span>:32182/TCP,2888:34687/TCP,3888:54242/TCP   11szookeeper3   NodePort    <span class="token number">172.20</span>.11.142   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">2181</span>:32183/TCP,2888:54471/TCP,3888:33958/TCP   11sroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get ep -n zookeeper</span>NAME         ENDPOINTS                                                  AGEzookeeper    <span class="token number">10.20</span>.132.217:2181,10.20.132.218:2181,10.20.178.241:2181   17szookeeper1   <span class="token number">10.20</span>.132.218:2181,10.20.132.218:2888,10.20.132.218:3888   17szookeeper2   <span class="token number">10.20</span>.132.217:2181,10.20.132.217:2888,10.20.132.217:3888   17szookeeper3   <span class="token number">10.20</span>.178.241:2181,10.20.178.241:2888,10.20.178.241:3888   17s</code></pre></div></figure><p><strong>观察验证zookeeper集群模式，leader和follower：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl get pod -n zookeeper</span>NAME                          READY   STATUS    RESTARTS   AGEzookeeper1-78df6bffb-hwszc    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          19mzookeeper2-5868f54d65-hcg42   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          19mzookeeper3-6dd44dbb-bdqv5     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          19mroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl exec -it zookeeper1-78df6bffb-hwszc -n zookeeper /usr/local/zookeeper/bin/zkServer.sh status</span>kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.ZooKeeper JMX enabled by defaultZooKeeper remote JMX Port <span class="token builtin class-name">set</span> to <span class="token number">9010</span>ZooKeeper remote JMX authenticate <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX ssl <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX log4j <span class="token builtin class-name">set</span> to <span class="token boolean">true</span>Using config: /usr/local/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost. Client SSL: false.Mode: followerroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl exec -it zookeeper2-5868f54d65-hcg42 -n zookeeper /usr/local/zookeeper/bin/zkServer.sh status</span>kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.ZooKeeper JMX enabled by defaultZooKeeper remote JMX Port <span class="token builtin class-name">set</span> to <span class="token number">9010</span>ZooKeeper remote JMX authenticate <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX ssl <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX log4j <span class="token builtin class-name">set</span> to <span class="token boolean">true</span>Using config: /usr/local/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost. Client SSL: false.Mode: followerroot@deploy:/opt/dockerfile/project/zookeeper<span class="token comment"># kubectl exec -it zookeeper3-6dd44dbb-bdqv5 -n zookeeper /usr/local/zookeeper/bin/zkServer.sh status</span>kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.ZooKeeper JMX enabled by defaultZooKeeper remote JMX Port <span class="token builtin class-name">set</span> to <span class="token number">9010</span>ZooKeeper remote JMX authenticate <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX ssl <span class="token builtin class-name">set</span> to <span class="token boolean">false</span>ZooKeeper remote JMX log4j <span class="token builtin class-name">set</span> to <span class="token boolean">true</span>Using config: /usr/local/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost. Client SSL: false.Mode: leader</code></pre></div></figure><h2 id="1-4-zookeeper-dubbo微服务架构"><a href="#1-4-zookeeper-dubbo微服务架构" class="headerlink" title="1.4 zookeeper+dubbo微服务架构"></a>1.4 zookeeper+dubbo微服务架构</h2><p><img src="/2023/05/05/Container/Kubernetes/kubernetes09/image-20230511225316951.png" alt="image-20230511225316951"> </p><h2 id="1-5-创建生产者资源"><a href="#1-5-创建生产者资源" class="headerlink" title="1.5 创建生产者资源"></a>1.5 创建生产者资源</h2><p><strong>创建dubbo provider生产者Dockerfile：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># vim Dockerfile</span><span class="token comment">#Dubbo provider</span>FROM harbor.chsblogs.local/system/jdk-base:v8.341RUN <span class="token function">useradd</span> nginxRUN <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">file</span> netcat-traditional <span class="token parameter variable">-y</span>RUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/dubbo/providerADD dubbo-demo-provider-2.1.5/  /usr/local/dubbo/providerADD run_java.sh /usr/local/dubbo/provider/binRUN <span class="token function">chown</span> nginx.nginx /usr/local/dubbo <span class="token parameter variable">-R</span>RUN <span class="token function">chmod</span> a+x /usr/local/dubbo/provider/bin/*.shCMD <span class="token punctuation">[</span><span class="token string">"/usr/local/dubbo/provider/bin/run_java.sh"</span><span class="token punctuation">]</span></code></pre></div></figure><p><strong>配置provider生产者配置文件，填写zookeeper pod的dns地址。Zookeeper使用deployment控制器部署则地址为pod名称.名称空间.svc.集群名称：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># vim dubbo-demo-provider-2.1.5/conf/dubbo.properties</span><span class="token comment">##</span><span class="token comment"># Copyright 1999-2011 Alibaba Group.</span><span class="token comment">#  </span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#  </span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#  </span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token comment">##</span><span class="token assign-left variable">dubbo.container</span><span class="token operator">=</span>log4j,spring<span class="token assign-left variable">dubbo.application.name</span><span class="token operator">=</span>demo-provider<span class="token assign-left variable">dubbo.application.owner</span><span class="token operator">=</span><span class="token comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span><span class="token assign-left variable">dubbo.registry.address</span><span class="token operator">=</span>zookeeper://zookeeper1.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper2.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper3.zookeeper.svc.chsblogs.local:2181<span class="token comment">#dubbo.registry.address=redis://127.0.0.1:6379</span><span class="token comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span><span class="token assign-left variable">dubbo.monitor.protocol</span><span class="token operator">=</span>registry<span class="token assign-left variable">dubbo.protocol.name</span><span class="token operator">=</span>dubbo<span class="token assign-left variable">dubbo.protocol.port</span><span class="token operator">=</span><span class="token number">20880</span><span class="token assign-left variable">dubbo.log4j.file</span><span class="token operator">=</span>logs/dubbo-demo-provider.log<span class="token assign-left variable">dubbo.log4j.level</span><span class="token operator">=</span>WARN</code></pre></div></figure><p><strong>创建dubbo-provider容器运行脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># vim run_java.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">su</span> - nginx <span class="token parameter variable">-c</span> <span class="token string">"/usr/local/dubbo/provider/bin/start.sh"</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /usr/local/dubbo/provider/logs/dubbo-demo-provider.log</code></pre></div></figure><p><strong>创建镜像构建脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># vim build-command.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/zookeeper/dubbo-demo-provider:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/zookeeper/dubbo-demo-provider:<span class="token variable">$&#123;TAG&#125;</span>root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># ./build-command.sh v2.1.5</span></code></pre></div></figure><p><strong>创建生产者k8s资源清单文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># vim provider.yaml</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: dubbo-provider  name: dubbo-provider-deployment  namespace: zookeeperspec:  replicas: <span class="token number">3</span>  selector:    matchLabels:      app: dubbo-provider  template:    metadata:      labels:        app: dubbo-provider    spec:      containers:      - name: dubbo-provider-container        image: harbor.chsblogs.local/zookeeper/dubbo-demo-provider:v2.1.5        imagePullPolicy: Always        ports:        - containerPort: <span class="token number">20880</span>          protocol: TCP          name: http---kind: ServiceapiVersion: v1metadata:  labels:    app: dubbo-provider  name: dubbo-provider-spec  namespace: zookeeperspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">20880</span>    <span class="token comment">#nodePort: 30001</span>  selector:    app: dubbo-provider    root@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># kubectl apply -f provider.yaml </span>deployment.apps/dubbo-provider-deployment createdservice/dubbo-provider-spec createdroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># kubectl get pod -n zookeeper | grep dubbo-pro</span>dubbo-provider-deployment-647fcb66dc-9shkf   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21sdubbo-provider-deployment-647fcb66dc-ctxsx   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21sdubbo-provider-deployment-647fcb66dc-kp84d   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21sroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># kubectl get svc -n zookeeper | grep dubbo-pro</span>dubbo-provider-spec   NodePort    <span class="token number">172.20</span>.241.94   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:54065/TCP                                   57sroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-provider<span class="token comment"># kubectl get ep -n zookeeper | grep dubbo-pro</span>dubbo-provider-spec   <span class="token number">10.20</span>.132.220:20880,10.20.178.242:20880,10.20.39.234:20880   61s</code></pre></div></figure><h2 id="1-6-创建消费者资源"><a href="#1-6-创建消费者资源" class="headerlink" title="1.6 创建消费者资源"></a>1.6 创建消费者资源</h2><p> <strong>创建consumer 消费者Dockerfile：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># vim Dockerfile</span></code></pre></div></figure><p><strong>配置dubbo consumer配置文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># vim dubbo-demo-consumer-2.1.5/conf/dubbo.properties</span><span class="token comment">##</span><span class="token comment"># Copyright 1999-2011 Alibaba Group.</span><span class="token comment">#  </span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#  </span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#  </span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token comment">##</span><span class="token assign-left variable">dubbo.container</span><span class="token operator">=</span>log4j,spring<span class="token assign-left variable">dubbo.application.name</span><span class="token operator">=</span>demo-consumer<span class="token assign-left variable">dubbo.application.owner</span><span class="token operator">=</span><span class="token comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span><span class="token assign-left variable">dubbo.registry.address</span><span class="token operator">=</span>zookeeper://zookeeper1.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper2.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper3.zookeeper.svc.chsblogs.local:2181<span class="token comment">#dubbo.registry.address=redis://127.0.0.1:6379</span><span class="token comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span><span class="token assign-left variable">dubbo.monitor.protocol</span><span class="token operator">=</span>registry<span class="token assign-left variable">dubbo.log4j.file</span><span class="token operator">=</span>logs/dubbo-demo-consumer.log<span class="token assign-left variable">dubbo.log4j.level</span><span class="token operator">=</span>WARN</code></pre></div></figure><p><strong>创建dubbo-consumer容器运行脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># vim run_java.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">su</span> - nginx <span class="token parameter variable">-c</span> <span class="token string">"/usr/local/dubbo/consumer/bin/start.sh"</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /usr/local/dubbo/consumer/logs/dubbo-demo-consumer.log</code></pre></div></figure><p><strong>创建镜像构建脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># vim build-command.sh </span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/zookeeper/dubbo-demo-consumer:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/zookeeper/dubbo-demo-consumer:<span class="token variable">$&#123;TAG&#125;</span>root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># ./build-command.sh v2.1.5</span></code></pre></div></figure><p><strong>创建消费者k8s资源清单文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># vim consumer.yaml</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: dubbo-consumer  name: dubbo-consumer-deployment  namespace: zookeeperspec:  replicas: <span class="token number">3</span>  selector:    matchLabels:      app: dubbo-consumer  template:    metadata:      labels:        app: dubbo-consumer    spec:      containers:      - name: dubbo-consumer-container        image: harbor.chsblogs.local/zookeeper/dubbo-demo-consumer:v2.1.5        imagePullPolicy: Always        ports:        - containerPort: <span class="token number">80</span>          protocol: TCP          name: http---kind: ServiceapiVersion: v1metadata:  labels:    app: dubbo-consumer  name: dubbo-consumer-server  namespace: zookeeperspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">80</span>    <span class="token comment">#nodePort: 30001</span>  selector:    app: dubbo-consumer    root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># kubectl apply -f consumer.yaml </span>deployment.apps/dubbo-consumer-deployment createdservice/dubbo-consumer-server createdroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># kubectl get pod -n zookeeper -o wide | grep dubbo-con</span>dubbo-consumer-deployment-5bc8f774c6-2xwb9   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          96s   <span class="token number">10.20</span>.132.221   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>dubbo-consumer-deployment-5bc8f774c6-j67sf   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          96s   <span class="token number">10.20</span>.178.243   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>dubbo-consumer-deployment-5bc8f774c6-xlntm   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          96s   <span class="token number">10.20</span>.39.235    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><p><strong>查看provider日志消息，查看多个consumer调用provider：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-consumer<span class="token comment"># kubectl exec -it dubbo-provider-deployment-647fcb66dc-9shkf -n zookeeper bash</span>root@dubbo-provider-deployment-647fcb66dc-9shkf:/<span class="token comment"># tail -f /usr/local/dubbo/provider/logs/stdout.log </span><span class="token punctuation">[</span><span class="token number">15</span>:31:03<span class="token punctuation">]</span> Hello world111, request from consumer: /10.20.39.235:54138<span class="token punctuation">[</span><span class="token number">15</span>:31:09<span class="token punctuation">]</span> Hello world114, request from consumer: /10.20.178.243:38824<span class="token punctuation">[</span><span class="token number">15</span>:31:09<span class="token punctuation">]</span> Hello world114, request from consumer: /10.20.132.221:48604<span class="token punctuation">[</span><span class="token number">15</span>:31:09<span class="token punctuation">]</span> Hello world114, request from consumer: /10.20.39.235:54138<span class="token punctuation">[</span><span class="token number">15</span>:31:15<span class="token punctuation">]</span> Hello world117, request from consumer: /10.20.178.243:38824<span class="token punctuation">[</span><span class="token number">15</span>:31:15<span class="token punctuation">]</span> Hello world117, request from consumer: /10.20.132.221:48604<span class="token punctuation">[</span><span class="token number">15</span>:31:15<span class="token punctuation">]</span> Hello world117, request from consumer: /10.20.39.235:54138<span class="token punctuation">[</span><span class="token number">15</span>:31:21<span class="token punctuation">]</span> Hello world120, request from consumer: /10.20.178.243:38824<span class="token punctuation">[</span><span class="token number">15</span>:31:21<span class="token punctuation">]</span> Hello world120, request from consumer: /10.20.132.221:48604</code></pre></div></figure><h2 id="1-7-部署dubbo-admin控制台"><a href="#1-7-部署dubbo-admin控制台" class="headerlink" title="1.7 部署dubbo admin控制台"></a>1.7 部署dubbo admin控制台</h2><p><strong>创建dubbo-admin Dockerfile：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/tomcat:v9.0.65  RUN <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">unzip</span> <span class="token parameter variable">-y</span>ADD server.xml /usr/local/tomcat/conf/server.xmlADD logging.properties /usr/local/tomcat/conf/logging.propertiesADD catalina.sh /usr/local/tomcat/bin/catalina.shADD run_tomcat.sh /usr/local/tomcat/bin/run_tomcat.shADD dubboadmin  /usr/local/tomcat/webapps/dubboadminEXPOSE <span class="token number">8080</span> <span class="token number">8443</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/local/tomcat/bin/run_tomcat.sh"</span><span class="token punctuation">]</span></code></pre></div></figure><p><strong>配置catalina.sh，修改tocmat java启动参数：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim catalina.sh</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms512m -Xmx512m -Xss512k -Xmn1g -XX:CMSInitiatingOccupancyFraction=65  -XX:+UseFastAccessorMethods -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=10 -XX:NewSize=2048M -XX:MaxNewSize=2048M -XX:NewRatio=2 -XX:PermSize=128m -XX:MaxPermSize=512m -XX:CMSFullGCsBeforeCompaction=5 -XX:+ExplicitGCInvokesConcurrent -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods"</span></code></pre></div></figure><p><strong>修改tomcat的日志路径：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim logging.properties </span>3manager.org.apache.juli.AsyncFileHandler.directory <span class="token operator">=</span> /usr/local/tomcat/logs</code></pre></div></figure><p><strong>修改tomcat服务配置文件，设置项目路径和名称：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim server.xml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/usr/local/tomcat/webapps"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- SingleSignOn valve, share authentication between web applications             Documentation at: /docs/config/valve.html --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.authenticator.SingleSignOn"</span> /<span class="token operator">></span>        --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Access log processes all example.             Documentation at: /docs/config/valve.html             Note: The pattern used is equivalent to using <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"common"</span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span> <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>Context <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"dubboadmin"</span> <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token string">"org.eclipse.jst.jee.server:dubboadmin"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/Host<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><p><strong>修改tomcat 服务启动脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim run_tomcat.sh</span><span class="token comment">#!/bin/bash</span> /usr/local/tomcat/bin/catalina.sh start<span class="token function">tail</span> <span class="token parameter variable">-f</span> /usr/local/tomcat/logs/catalina.out</code></pre></div></figure><p><strong>修改dubbo-admin配置文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim dubboadmin/WEB-INF/dubbo.properties</span><span class="token assign-left variable">dubbo.registry.address</span><span class="token operator">=</span>zookeeper://zookeeper1.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper2.zookeeper.svc.chsblogs.local:2181 <span class="token operator">|</span> zookeeper://zookeeper3.zookeeper.svc.chsblogs.local:2181<span class="token assign-left variable">dubbo.admin.root.password</span><span class="token operator">=</span>root<span class="token assign-left variable">dubbo.admin.guest.password</span><span class="token operator">=</span>guest</code></pre></div></figure><p><strong>创建镜像构建脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim build-command.sh </span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/zookeeper/dubboadmin:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push  harbor.chsblogs.local/zookeeper/dubboadmin:<span class="token variable">$&#123;TAG&#125;</span>root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># ./build-command.sh v2.3.2</span></code></pre></div></figure><p><strong>创建dubbo-admin k8s yaml资源文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># vim dubboadmin.yaml</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: dubboadmin  name: dubboadmin-deployment  namespace: zookeeperspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: dubboadmin  template:    metadata:      labels:        app: dubboadmin    spec:      containers:      - name: dubboadmin-container        image: harbor.chsblogs.local/zookeeper/dubboadmin:v2.3.2        imagePullPolicy: Always        ports:        - containerPort: <span class="token number">8080</span>          protocol: TCP          name: http---kind: ServiceapiVersion: v1metadata:  labels:    app: dubboadmin  name: dubboadmin-service  namespace: zookeeperspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">8080</span>    nodePort: <span class="token number">30080</span>  selector:    app: dubboadmindeployment.apps/dubboadmin-deployment createdservice/dubboadmin-service createdroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># kubectl get pod -n zookeeper | grep dubboadmin</span>dubboadmin-deployment-69d548f9c6-kvt6d       <span class="token number">1</span>/1     Running   <span class="token number">0</span>          32sroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># kubectl get svc -n zookeeper | grep dubboadmin</span>dubboadmin-service      NodePort    <span class="token number">172.20</span>.25.201    <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30080/TCP                                   43sroot@deploy:/opt/dockerfile/project/zookeeper/dubbo-admin<span class="token comment"># kubectl get ep -n zookeeper | grep dubboadmin</span>dubboadmin-service      <span class="token number">10.20</span>.132.224:8080                                           47s</code></pre></div></figure><p><img src="/2023/05/05/Container/Kubernetes/kubernetes09/image-20230512194646736.png" alt="image-20230512194646736"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(08).K8S基于ELK及Kafka集群实现日志收集</title>
    <link href="/2023/05/03/Container/Kubernetes/kubernetes08/"/>
    <url>/2023/05/03/Container/Kubernetes/kubernetes08/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S基于ELK及Kafka集群实现日志收集"><a href="#1-K8S基于ELK及Kafka集群实现日志收集" class="headerlink" title="1.K8S基于ELK及Kafka集群实现日志收集"></a>1.K8S基于ELK及Kafka集群实现日志收集</h1><h2 id="1-1-部署Zookeeper-x2F-Kafka集群"><a href="#1-1-部署Zookeeper-x2F-Kafka集群" class="headerlink" title="1.1 部署Zookeeper&#x2F;Kafka集群"></a>1.1 部署Zookeeper&#x2F;Kafka集群</h2><table><thead><tr><th><strong>Kafka集群主机清单：</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>kafka1</td><td>192.168.1.58</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td></tr><tr><td>kafka2</td><td>192.168.1.59</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td></tr><tr><td>kafka3</td><td>192.168.1.60</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td></tr></tbody></table><h3 id="1-1-1-部署Zookeeper集群"><a href="#1-1-1-部署Zookeeper集群" class="headerlink" title="1.1.1 部署Zookeeper集群"></a>1.1.1 部署Zookeeper集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#详见前文Zookeeper章节</span>https://chsblogs.com/2023/03/25/Service/Zookeeper/zookeeper01/</code></pre></div></figure><h3 id="1-1-2-部署Kafka集群"><a href="#1-1-2-部署Kafka集群" class="headerlink" title="1.1.2 部署Kafka集群"></a>1.1.2 部署Kafka集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#详见前文Kafka章节</span>https://chsblogs.com/2023/03/25/MQ/Kafka/kafka01/</code></pre></div></figure><h2 id="1-2-部署Elasticsearch集群"><a href="#1-2-部署Elasticsearch集群" class="headerlink" title="1.2 部署Elasticsearch集群"></a>1.2 部署Elasticsearch集群</h2><table><thead><tr><th><strong>ELK集群主机清单：</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>es1</td><td>192.168.1.55</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1</td></tr><tr><td>es2</td><td>192.168.1.56</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td></tr><tr><td>es3</td><td>192.168.1.57</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#详见前文ELK章节</span>https://chsblogs.com/2023/03/26/Log/ELK/elk01/</code></pre></div></figure><h2 id="1-3-配置收集K8S容器日志"><a href="#1-3-配置收集K8S容器日志" class="headerlink" title="1.3 配置收集K8S容器日志"></a>1.3 配置收集K8S容器日志</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-4-容器内置日志组件收集日志"><a href="#1-4-容器内置日志组件收集日志" class="headerlink" title="1.4 容器内置日志组件收集日志"></a>1.4 容器内置日志组件收集日志</h2><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514164815402.png" alt="image-20230514164815402"> </p><p><strong>基于tomcat业务镜像构建filebeat镜像:</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/tomcat-app1:v1  ADD filebeat-7.12.1-amd64.deb /tmpRUN <span class="token builtin class-name">cd</span> /tmp/ <span class="token operator">&amp;&amp;</span> dpkg <span class="token parameter variable">-i</span> filebeat-7.12.1-amd64.debADD filebeat.yml /etc/filebeat/filebeat.ymlADD filebeat.sh /ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/filebeat.sh"</span><span class="token punctuation">]</span></code></pre></div></figure><p><strong>filebeat启动脚本:</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim filebeat.sh</span><span class="token comment">#!/bin/bash</span>/usr/local/tomcat/bin/catalina.sh start<span class="token function">sleep</span> 3s/usr/share/filebeat/bin/filebeat <span class="token parameter variable">-e</span> <span class="token parameter variable">-c</span> /etc/filebeat/filebeat.yml <span class="token parameter variable">-path.home</span> /usr/share/filebeat <span class="token parameter variable">-path.config</span> /etc/filebeat <span class="token parameter variable">-path.data</span> /var/lib/filebeat <span class="token parameter variable">-path.logs</span> /var/log/filebeat <span class="token operator">&amp;</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /usr/local/tomcat/logs/catalina.out</code></pre></div></figure><p><strong>创建构建镜像脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim build-command.sh </span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/system/tomcat-filebeat:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/system/tomcat-filebeat:<span class="token variable">$&#123;TAG&#125;</span>root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># ./build-command.sh v0.0.2</span></code></pre></div></figure><p><strong>创建filebeat服务配置文件:</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim filebeat.yml</span>filebeat.inputs:- type: log  enabled: <span class="token boolean">true</span>  paths:    - /usr/local/tomcat/logs/catalina.out   <span class="token comment">#获取tomat catalina.out日志</span>  tags: <span class="token punctuation">[</span><span class="token string">"catalinalog"</span><span class="token punctuation">]</span>  multiline.pattern: <span class="token string">'^\d&#123;2&#125;'</span> <span class="token comment">#\d匹配数字开头，数字为2位</span>  multiline.negate: <span class="token boolean">true</span>  multiline.match: after  multiline.max_lines: <span class="token number">10000</span>   <span class="token comment">#最大的合并行数，默认合并的数量为500</span>- type: log  enabled: <span class="token boolean">true</span>  paths:    - /usr/local/tomcat/logs/localhost_access_log.*.txt  <span class="token comment">#获取tomcat访问日志</span>  tags: <span class="token punctuation">[</span><span class="token string">"accesslog"</span><span class="token punctuation">]</span>  json.keys_under_root: <span class="token boolean">true</span>   <span class="token comment">#Flase会将json解析的格式存储至messages，改为true则不存储至message</span>  json.overwrite_keys: <span class="token boolean">true</span>   <span class="token comment">#覆盖默认message字段，使用自定义json格式的key</span>output.kafka:  hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.58:9092"</span>,<span class="token string">"192.168.1.59:9092"</span>,<span class="token string">"192.168.1.60:9092"</span><span class="token punctuation">]</span>  topic: <span class="token string">'tomcat-filebeat-log'</span>  partition.round_robin:    reachable_only: <span class="token boolean">false</span>  required_acks: <span class="token number">1</span>  compression: <span class="token function">gzip</span>  max_message_bytes: <span class="token number">1000000</span></code></pre></div></figure><p><strong>创建tomcat容器k8s yaml：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim tomcat-filebeat.yml </span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: tomcat  name: tomcat-deployment  namespace: chsblogs-logsspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: tomcat  template:    metadata:      labels:        app: tomcat    spec:      containers:      - name: tomcat        image: harbor.chsblogs.local/system/tomcat-filebeat:v0.0.2        imagePullPolicy: Always        ports:        - containerPort: <span class="token number">8080</span>          protocol: TCP          name: http        resources:          limits:            cpu: <span class="token number">1</span>            memory: <span class="token string">"512Mi"</span>          requests:            cpu: 500m            memory: <span class="token string">"512Mi"</span>root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># kubectl apply -f tomcat-filebeat.yml</span>root@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># kubectl get pod -n chsblogs-logs</span>NAME                                 READY   STATUS    RESTARTS   AGEtomcat-deployment-55cd9f6c84-vr6cc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3h49mroot@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># vim tomcat-service.yaml</span>---kind: ServiceapiVersion: v1metadata:  labels:    app: tomcat  name: tomcat  namespace: chsblogs-logsspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">8080</span>    nodePort: <span class="token number">30180</span>  selector:    app: tomcatroot@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># kubectl apply -f tomcat-service.yaml</span>kind: ServiceapiVersion: v1metadata:  labels:    app: tomcat  name: tomcat  namespace: chsblogs-logsspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">8080</span>    nodePort: <span class="token number">30180</span>  selector:    app: tomcatroot@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># kubectl get svc -n chsblogs-logs</span>NAME     TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGEtomcat   NodePort   <span class="token number">172.20</span>.230.48   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30180/TCP   3h53mroot@deploy:/opt/dockerfile/project/elk/filebeat<span class="token comment"># kubectl get ep -n chsblogs-logs</span>NAME     ENDPOINTS            AGEtomcat   <span class="token number">10.20</span>.178.222:8080   3h53m</code></pre></div></figure><p><strong>配置logstash</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@es1:~<span class="token comment"># vim /etc/logstash/conf.d/tomcat.conf</span>input <span class="token punctuation">&#123;</span>  kafka <span class="token punctuation">&#123;</span>    bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.58:9092,192.168.1.59:9092,192.168.1.60:9092"</span>   <span class="token comment">#生产者kafka地址</span>    topics <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"tomcat-filebeat-log"</span><span class="token punctuation">]</span>             <span class="token comment">#消费主题</span>    codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token string">"catalinalog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>      elasticsearch <span class="token punctuation">&#123;</span>        hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.55:9200"</span>,<span class="token string">"192.168.1.56:9200"</span>,<span class="token string">"192.168.1.57:9200"</span><span class="token punctuation">]</span>        manage_template <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>        index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"tomcat-catalinalog-%&#123;+yyyy.MM.dd&#125;"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token string">"accesslog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>      elasticsearch <span class="token punctuation">&#123;</span>        hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.55:9200"</span>,<span class="token string">"192.168.1.56:9200"</span>,<span class="token string">"192.168.1.57:9200"</span><span class="token punctuation">]</span>        manage_template <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>        index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"tomcat-accesslog-%&#123;+yyyy.MM.dd&#125;"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@es1:~<span class="token comment"># systemctl restart logstash</span></code></pre></div></figure><p><strong>配置kibana创建索引模式:</strong></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514194741030.png" alt="image-20230514194741030"> </p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514194807528.png" alt="image-20230514194807528"> </p><h2 id="1-5-基于daemonset收集日志"><a href="#1-5-基于daemonset收集日志" class="headerlink" title="1.5 基于daemonset收集日志"></a>1.5 基于daemonset收集日志</h2><p>基于daemonset运行日志收集服务，主要收集以下类型日志：</p><ul><li>k8s的node节点收集，基于daemonset部署日志收集进程，实现json-file类型(标准输出&#x2F;dev&#x2F;stdout、错误输出&#x2F;dev&#x2F;stderr)日志收集，即应用程序产生的标准输出和错误输出的日志。</li><li>k8s宿主机系统日志等以日志文件形式保存的日志。</li></ul><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514223913247.png" alt="image-20230514223913247"></p><p><strong>构建filebeat镜像:</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># vim Dockerfile</span>FROM elastic/filebeat:7.12.1<span class="token environment constant">USER</span> rootWORKDIR /usr/share/filebeatADD filebeat.yml /usr/share/filebeat/</code></pre></div></figure><p><strong>filebeat配置文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># vim filebeat.yml</span>filebeat.inputs:- type: log  enabled: <span class="token boolean">true</span>  paths:    - /var/log/*.log  tags: <span class="token punctuation">[</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>- type: log  enabled: <span class="token boolean">true</span>  paths:    - /var/lib/docker/containers/*/*.log  tags: <span class="token punctuation">[</span><span class="token string">"applog"</span><span class="token punctuation">]</span>output.kafka:  hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.58:9092"</span>,<span class="token string">"192.168.1.59:9092"</span>,<span class="token string">"192.168.1.60:9092"</span><span class="token punctuation">]</span>  topic: <span class="token string">'daemonset-filebeat-log'</span>  partition.round_robin:    reachable_only: <span class="token boolean">false</span>  required_acks: <span class="token number">1</span>  compression: <span class="token function">gzip</span>  max_message_bytes: <span class="token number">1000000</span></code></pre></div></figure><p><strong>创建构建镜像脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># vim build-command.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/logs/filebeat-kafka:<span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/logs/filebeat-kafka:<span class="token variable">$&#123;TAG&#125;</span>root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># ./build-command.sh v1.0.2</span></code></pre></div></figure><p><strong>创建tomcat容器k8s yaml：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># vim daemonset-filebeat.yaml</span>apiVersion: apps/v1kind: DaemonSetmetadata:  name: filebeat-elasticsearch  namespace: kube-system  labels:    k8s-app: filebeat-loggingspec:  selector:    matchLabels:      name: filebeat-elasticsearch  template:    metadata:      labels:        name: filebeat-elasticsearch    spec:      tolerations:      <span class="token comment"># this toleration is to have the daemonset runnable on master nodes</span>      <span class="token comment"># remove it if your masters can't run pods</span>      - key: node-role.kubernetes.io/master        operator: Exists        effect: NoSchedule      containers:      - name: filebeat-elasticsearch        image: harbor.chsblogs.local/logs/filebeat-kafka:v1.0.2        env:        - name: <span class="token string">"KAFKA_SERVER"</span>          value: <span class="token string">"192.168.1.58:9092,192.168.1.59:9092,192.168.1.60:9092"</span>        - name: <span class="token string">"TOPIC_ID"</span>          value: <span class="token string">"elklog"</span><span class="token comment">#        resources:</span><span class="token comment">#          limits:</span><span class="token comment">#            cpu: 1000m</span><span class="token comment">#            memory: 1024Mi</span><span class="token comment">#          requests:</span><span class="token comment">#            cpu: 500m</span><span class="token comment">#            memory: 1024Mi</span>        volumeMounts:        - name: varlog <span class="token comment">#定义宿主机系统日志挂载路径</span>          mountPath: /var/log <span class="token comment">#宿主机系统日志挂载点</span>        - name: varlibdockercontainers <span class="token comment">#定义容器日志挂载路径,和filebeat配置文件中的收集路径保持一致</span>        - name: varlibdockercontainers <span class="token comment">#定义容器日志挂载路径,和filebeat配置文件中的收集路径保持一致</span>          mountPath: /var/lib/docker/containers <span class="token comment">#docker挂载路径</span>          <span class="token comment">#mountPath: /var/log/pods #containerd挂载路径,此路径与filebeat的日志收集路径必须一致</span>          readOnly: <span class="token boolean">false</span>      terminationGracePeriodSeconds: <span class="token number">30</span>      volumes:      - name: varlog        hostPath:          path: /var/log <span class="token comment">#宿主机系统日志</span>      - name: varlibdockercontainers        hostPath:          path: /var/lib/docker/containers <span class="token comment">#docker的宿主机日志路径</span>          <span class="token comment">#path: /var/log/pods #containerd的宿主机日志路径</span>          root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># kubectl apply -f daemonset-filebeat.yaml</span>root@deploy:/opt/dockerfile/project/elk/daemonset-filebeat<span class="token comment"># kubectl get pod -A -o wide | grep filebeat</span>kube-system            filebeat-elasticsearch-fgvsk                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          23m     <span class="token number">10.20</span>.178.231   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-hmcnx                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          22m     <span class="token number">10.20</span>.54.67     <span class="token number">192.168</span>.1.41   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-j9pj9                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          22m     <span class="token number">10.20</span>.42.131    <span class="token number">192.168</span>.1.40   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-pspjx                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          22m     <span class="token number">10.20</span>.132.223   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-rknzb                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          22m     <span class="token number">10.20</span>.17.171    <span class="token number">192.168</span>.1.52   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-tkwzw                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          23m     <span class="token number">10.20</span>.39.220    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system            filebeat-elasticsearch-xk7jv                 <span class="token number">1</span>/1     Running            <span class="token number">0</span>          23m     <span class="token number">10.20</span>.250.131   <span class="token number">192.168</span>.1.42   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><p><strong>配置logstash</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@es1:~<span class="token comment"># vim /etc/logstash/conf.d/k8s_log.conf</span>input <span class="token punctuation">&#123;</span>  kafka <span class="token punctuation">&#123;</span>    bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.58:9092,192.168.1.59:9092,192.168.1.60:9092"</span>    topics <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"daemonset-filebeat-log"</span><span class="token punctuation">]</span>    codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token string">"syslog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>      elasticsearch <span class="token punctuation">&#123;</span>        hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.55:9200"</span>,<span class="token string">"192.168.1.56:9200"</span>,<span class="token string">"192.168.1.57:9200"</span><span class="token punctuation">]</span>        manage_template <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>        index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"syslog-%&#123;+yyyy.MM.dd&#125;"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token string">"applog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>      elasticsearch <span class="token punctuation">&#123;</span>        hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.55:9200"</span>,<span class="token string">"192.168.1.56:9200"</span>,<span class="token string">"192.168.1.57:9200"</span><span class="token punctuation">]</span>        manage_template <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>        index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"applog-%&#123;+yyyy.MM.dd&#125;"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@es1:~<span class="token comment"># systemctl restart logstash.service</span></code></pre></div></figure><p><strong>配置kibana创建索引模式:</strong></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514224734348.png" alt="image-20230514224734348"> </p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes08/image-20230514224754751.png" alt="image-20230514224754751"> </p><h2 id="1-6-基于sidecar模式收集日志"><a href="#1-6-基于sidecar模式收集日志" class="headerlink" title="1.6 基于sidecar模式收集日志"></a>1.6 基于sidecar模式收集日志</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(07).K8S基于Jenkins和Gitlab实现版本升级与回滚</title>
    <link href="/2023/05/03/Container/Kubernetes/kubernetes07/"/>
    <url>/2023/05/03/Container/Kubernetes/kubernetes07/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S基于Jenkins和Gitlab实现版本升级与回滚"><a href="#1-K8S基于Jenkins和Gitlab实现版本升级与回滚" class="headerlink" title="1.K8S基于Jenkins和Gitlab实现版本升级与回滚"></a>1.K8S基于Jenkins和Gitlab实现版本升级与回滚</h1><h2 id="1-1-安装Jenkins"><a href="#1-1-安装Jenkins" class="headerlink" title="1.1 安装Jenkins"></a>1.1 安装Jenkins</h2><table><thead><tr><th><strong>Jenkins主机清单：</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>主机名</strong></td><td><strong>IP地址</strong></td><td><strong>操作系统</strong></td><td><strong>服务</strong></td></tr><tr><td>jenkins</td><td>192.168.1.53</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考前文安装配置</span>https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg02/</code></pre></div></figure><h2 id="1-2-安装Gitlab"><a href="#1-2-安装Gitlab" class="headerlink" title="1.2 安装Gitlab"></a>1.2 安装Gitlab</h2><table><thead><tr><th><strong>Gitlab主机清单：</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>主机名</strong></td><td><strong>IP地址</strong></td><td><strong>操作系统</strong></td><td><strong>服务</strong></td></tr><tr><td>gitlab</td><td>192.168.1.54</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考前文安装配置</span>https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg01/</code></pre></div></figure><h2 id="1-3-手动升级与回滚"><a href="#1-3-手动升级与回滚" class="headerlink" title="1.3 手动升级与回滚"></a>1.3 手动升级与回滚</h2><p>在指定的deployment中通过kubectl set image指定新版本的镜像:tag来更新代码的。deployment控制器支持两种更新策略：默认为滚动更新。</p><ul><li><p>滚动更新（rolling update）：滚动更新基于新版本镜像创建新版本pod，然后删除一部分旧版本pod，然后再创建新版本pod，再删除一部分旧版本pod，直到9旧版本pod删除完成，滚动更新优势是在升级过程当中不会导致服务不可用，缺点是升级过程中导致两个版本在短时间内会并存。</p><p>具体升级过程是在执行更新操作后k8s会再创建一个新版本ReplicaSet控制器，在删除旧版本的ReplicaSet控制器下的pod的同时会在新版本的RplicaSet控制器下创建新pod，直到旧版本的pod全部被删除完后再把旧版本的ReplicaSet控制器也回收掉。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在执行滚动更新的同时，为了保证服务的可用性，当前控制器内不可用的pod（pod需要拉取镜像执行创建和执行探针，探测期间是不可用的）不能超出一定范围，因为需要至少保留一定数量的pod以保证服务可以被客户端正常访问。可以通过以下参数指定：kubectl explain deployment.spec.strategy</span>kubectl explain deployment.spec.strategy.rollingUpdate.maxSurge <span class="token comment">#指定在升级期间pod总数可以超出定义好的期望的pod数的个数百分比，默认为25%，如果设置为10%，假如当前是100个pod。那么升级时最多将创建110个pod即额外有10%的pod临时会超出当前控制器指定的副本数限制。</span>kubectl explain deployment.spec.strategy.rollingUpdate.maxUnavailable <span class="token comment">#指定升级期间最大不可用的pod数，可以是整数或者当前pod的百分比，默认是25%，假如当前是100个pod。那么升级时最多可以有25个pod不可用。</span>注意：以上两个值不能同时为0，如果两个同时为0，会导致pod无法进行滚动更新。</code></pre></div></figure></li><li><p>重建更新（recreate）：先删除现有的pod，然后基于新版本的镜像重建，优势是同时只有一个版本在线，不会产生多版本在线问题，缺点是pod删除后至pod重建完成期间服务是无法访问的。</p></li></ul><h3 id="1-3-1-创建测试Pod"><a href="#1-3-1-创建测试Pod" class="headerlink" title="1.3.1 创建测试Pod"></a>1.3.1 创建测试Pod</h3><p>准备一个Pod，分别创建三个版本v1,v2,v3，用于测试POd的升级与回滚。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建Dockerfile</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/nginx:v1.22.0  ADD nginx.conf /usr/local/nginx/conf/nginx.confADD index.html  /usr/local/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/local/nginx/sbin/nginx"</span><span class="token punctuation">]</span><span class="token comment">#2.index.html文件</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># cat index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token comment">#3.nginx.conf文件</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># vim nginx.conf</span>user  nginx nginx<span class="token punctuation">;</span>worker_processes  auto<span class="token punctuation">;</span><span class="token comment">#error_log  logs/error.log;</span><span class="token comment">#error_log  logs/error.log  notice;</span><span class="token comment">#error_log  logs/error.log  info;</span><span class="token comment">#pid        logs/nginx.pid;</span>daemon off<span class="token punctuation">;</span><span class="token comment">#取消后台启动</span>events <span class="token punctuation">&#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/octet-stream<span class="token punctuation">;</span>    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>    <span class="token comment">#access_log  logs/access.log  main;</span>    sendfile        on<span class="token punctuation">;</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token comment">#keepalive_timeout  0;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment">#gzip  on;</span>    server <span class="token punctuation">&#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        <span class="token comment">#charset koi8-r;</span>        <span class="token comment">#access_log  logs/host.access.log  main;</span>        location / <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#4.构建镜像</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker build -t harbor.chsblogs.local/system/nginx-upgrade:v1 .</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker push harbor.chsblogs.local/system/nginx-upgrade:v1</span><span class="token comment">#5.创建nginx.yaml文件</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: nginx-deployment-label  name: nginx-deployment  namespace: chsblogs-test3spec:  replicas: <span class="token number">3</span>  selector:    matchLabels:      app: nginx-app  template:    metadata:      labels:        app: nginx-app    spec:      containers:      - name: nginx        image: harbor.chsblogs.local/system/nginx-upgrade:v1        imagePullPolicy: IfNotPresent        ports:        - containerPort: <span class="token number">80</span>          protocol: TCP          name: http        - containerPort: <span class="token number">443</span>          protocol: TCP          name: https        resources:          limits:            cpu: 500m            memory: 512Mi          requests:            cpu: 500m            memory: 256Mi---kind: ServiceapiVersion: v1metadata:  labels:    app: nginx-svc-label  name: nginx-svc  namespace: chsblogs-test3spec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">80</span>    nodePort: <span class="token number">33015</span>  - name: https    port: <span class="token number">443</span>    protocol: TCP    targetPort: <span class="token number">443</span>    nodePort: <span class="token number">33443</span>  selector:    app: nginx-approot@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># kubectl apply -f nginx.yaml</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># kubectl get pod -n chsblogs-test3</span>NAME                                READY   STATUS    RESTARTS   AGEnginx-deployment-7cdd95547d-4xczm   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4m18snginx-deployment-7cdd95547d-6vnbn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4m18snginx-deployment-7cdd95547d-9bjj7   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4m19sroot@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># kubectl get svc -n chsblogs-test3</span>NAME        TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGEnginx-svc   NodePort   <span class="token number">172.20</span>.181.48   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:33015/TCP,443:33443/TCP   4m34sroot@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># kubectl get ep -n chsblogs-test3</span>NAME        ENDPOINTS                                                         AGEnginx-svc   <span class="token number">10.20</span>.17.145:443,10.20.178.210:443,10.20.39.211:443 + <span class="token number">3</span> more<span class="token punctuation">..</span>.   4m40s<span class="token comment">#6.访问测试</span>root@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token comment">#7.创建Pod v2版本</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># cat index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker build -t harbor.chsblogs.local/system/nginx-upgrade:v2 .</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker push harbor.chsblogs.local/system/nginx-upgrade:v2</span><span class="token comment">#8.创建Pod v3版本</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># cat index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker build -t harbor.chsblogs.local/system/nginx-upgrade:v3 .</span>root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># docker push harbor.chsblogs.local/system/nginx-upgrade:v3</span></code></pre></div></figure><h3 id="1-3-2-Pod版本升级"><a href="#1-3-2-Pod版本升级" class="headerlink" title="1.3.2 Pod版本升级"></a>1.3.2 Pod版本升级</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#镜像升级命令：kubectl set image deployment/nginx-deployment containers=镜像 -n 名称空间</span><span class="token comment">#1.将nginx pod更新至v2版本</span>root@deploy:~<span class="token comment"># kubectl set image deployment/nginx-deployment nginx=harbor.chsblogs.local/system/nginx-upgrade:v2 -n chsblogs-test3</span>deployment.apps/nginx-deployment image updatedroot@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token comment">#2.查看历史版本信息</span>root@deploy:~<span class="token comment"># kubectl rollout history deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment REVISION  CHANGE-CAUSE<span class="token number">1</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">2</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token comment">#3.将nginx pod更新至v3版本</span>root@deploy:~<span class="token comment"># kubectl set image deployment/nginx-deployment nginx=harbor.chsblogs.local/system/nginx-upgrade:v3 -n chsblogs-test3</span>deployment.apps/nginx-deployment image updatedroot@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:~<span class="token comment"># kubectl rollout history deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment REVISION  CHANGE-CAUSE<span class="token number">1</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">2</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">3</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><h3 id="1-3-2-Pod版本回滚"><a href="#1-3-2-Pod版本回滚" class="headerlink" title="1.3.2 Pod版本回滚"></a>1.3.2 Pod版本回滚</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.将nginx pod回滚至v2版本，即回滚到上一个版本，当前版本v3，回滚至v2版本</span>root@deploy:~<span class="token comment"># kubectl rollout undo deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment rolled backroot@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:~<span class="token comment"># kubectl rollout history deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment REVISION  CHANGE-CAUSE<span class="token number">1</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">3</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">4</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token comment">#2.再次执行回滚，查看nginx po版本，可以看到回滚到v3版本了，回滚只能在两个版本间回滚。</span>root@deploy:~<span class="token comment"># kubectl rollout undo deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment rolled backroot@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:~<span class="token comment"># kubectl rollout history deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment REVISION  CHANGE-CAUSE<span class="token number">1</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">4</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">5</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token comment">#3.回滚到指定版本。将当前版本回滚至v1版本</span>root@deploy:~<span class="token comment"># kubectl rollout undo deployment/nginx-deployment --to-revision=1 -n chsblogs-test3</span>deployment.apps/nginx-deployment rolled backroot@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span>root@jenkins:~<span class="token comment"># curl http://192.168.1.40:33015/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:~<span class="token comment"># kubectl rollout history deployment/nginx-deployment -n chsblogs-test3</span>deployment.apps/nginx-deployment REVISION  CHANGE-CAUSE<span class="token number">4</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">5</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token number">6</span>         <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><h2 id="1-4-配置Jenkins实现版本升级与回滚"><a href="#1-4-配置Jenkins实现版本升级与回滚" class="headerlink" title="1.4 配置Jenkins实现版本升级与回滚"></a>1.4 配置Jenkins实现版本升级与回滚</h2><h3 id="1-4-1-配置Gitlab"><a href="#1-4-1-配置Gitlab" class="headerlink" title="1.4.1 配置Gitlab"></a>1.4.1 配置Gitlab</h3><p>Gitlab上创建一个web1项目，并提交v1版本</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># git config --global user.name "陈怀森"</span>root@jenkins:~<span class="token comment"># git config --global user.email "1285780460@qq.com"</span>root@jenkins:~<span class="token comment"># git clone http://192.168.1.54/chsblogs/web1.git</span>Cloning into <span class="token string">'web1'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.54'</span><span class="token builtin class-name">:</span> chsPassword <span class="token keyword">for</span> <span class="token string">'http://chs@192.168.1.54'</span><span class="token builtin class-name">:</span> warning: You appear to have cloned an empty repository.root@jenkins:~<span class="token comment"># cd web1/</span>root@jenkins:~/web1<span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod jenkins/gitlab Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@jenkins:~/web1<span class="token comment"># git add .</span>root@jenkins:~/web1<span class="token comment"># git commit -m "chsblogs v1"</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> 49a42cf<span class="token punctuation">]</span> chsblogs v1 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> index.html  root@jenkins:~/web1<span class="token comment"># git push -u origin master</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.54'</span><span class="token builtin class-name">:</span> chsPassword <span class="token keyword">for</span> <span class="token string">'http://chs@192.168.1.54'</span><span class="token builtin class-name">:</span> Enumerating objects: <span class="token number">6</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6</span>/6<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">2</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">4</span>/4<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6</span>/6<span class="token punctuation">)</span>, <span class="token number">535</span> bytes <span class="token operator">|</span> <span class="token number">535.00</span> KiB/s, done.Total <span class="token number">6</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.54/chsblogs/web1.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> masterBranch <span class="token string">'master'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'master'</span> from <span class="token string">'origin'</span><span class="token builtin class-name">.</span></code></pre></div></figure><h3 id="1-4-2-编写脚本"><a href="#1-4-2-编写脚本" class="headerlink" title="1.4.2 编写脚本"></a>1.4.2 编写脚本</h3><p><strong>SHELL脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># mkdir /data/scripts/chsblogs -p</span>root@jenkins:~<span class="token comment"># mkdir /data/gitdata/chsblogs -p</span>root@jenkins:~<span class="token comment"># cd /data/scripts/chsblogs/</span>root@jenkins:/data/scripts/chsblogs<span class="token comment"># vim chsblogs-nginx-deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token comment">#记录脚本开始执行时间</span><span class="token assign-left variable">starttime</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token variable">`</span></span><span class="token assign-left variable">SHELL_DIR</span><span class="token operator">=</span><span class="token string">"/data/scripts"</span><span class="token assign-left variable">SHELL_NAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$0</span>"</span><span class="token assign-left variable">K8S_DEPLOY</span><span class="token operator">=</span><span class="token string">"192.168.1.39"</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d_%H_%M_%S<span class="token variable">`</span></span><span class="token assign-left variable">METHOD</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">Branch</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-z</span> <span class="token variable">$Branch</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token assign-left variable">Branch</span><span class="token operator">=</span>develop<span class="token keyword">fi</span><span class="token comment">#从gitlab将代码克隆至jenkins</span><span class="token keyword">function</span> <span class="token function-name function">Code_Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token assign-left variable">Git_URL</span><span class="token operator">=</span><span class="token string">"git@192.168.1.54:chsblogs/web1.git"</span>  <span class="token assign-left variable">DIR_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>Git_URL<span class="token punctuation">&#125;</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">"/"</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">"."</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span>  <span class="token assign-left variable">DATA_DIR</span><span class="token operator">=</span><span class="token string">"/data/gitdata/chsblogs"</span>  <span class="token assign-left variable">Git_Dir</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;DATA_DIR&#125;</span>/<span class="token variable">$&#123;DIR_NAME&#125;</span>"</span>  <span class="token builtin class-name">cd</span> <span class="token variable">$&#123;DATA_DIR&#125;</span> <span class="token operator">&amp;&amp;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将清空上一版本代码并获取当前分支最新代码"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;DIR_NAME&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将开始从分支<span class="token variable">$&#123;Branch&#125;</span> 获取代码"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token variable">$&#123;Branch&#125;</span> <span class="token variable">$&#123;Git_URL&#125;</span>   <span class="token builtin class-name">echo</span> <span class="token string">"分支<span class="token variable">$&#123;Branch&#125;</span> 克隆完成，即将进行代码编译!"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token builtin class-name">cd</span> <span class="token variable">$&#123;Git_Dir&#125;</span>  <span class="token function">tar</span> czf <span class="token variable">$&#123;DIR_NAME&#125;</span>.tar.gz  ./*<span class="token punctuation">&#125;</span><span class="token comment">#将打包好的压缩文件拷贝到K8S部署服务器，即192.168.1.39</span><span class="token keyword">function</span> <span class="token function-name function">Copy_File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"压缩文件打包完成，即将拷贝到K8S部署服务器<span class="token variable">$&#123;K8S_DEPLOY&#125;</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token function">scp</span> <span class="token variable">$&#123;Git_Dir&#125;</span>/<span class="token variable">$&#123;DIR_NAME&#125;</span>.tar.gz root@<span class="token variable">$&#123;K8S_DEPLOY&#125;</span>:/opt/dockerfile/project/upgrade/  <span class="token builtin class-name">echo</span> <span class="token string">"压缩文件拷贝完成,服务器<span class="token variable">$&#123;K8S_DEPLOY&#125;</span>即将开始制作Docker镜像!"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">#到K8S部署服务器执行脚本制作并上传镜像</span><span class="token keyword">function</span> <span class="token function-name function">Make_Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"开始制作Docker镜像并上传到Harbor服务器"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token function">ssh</span> root@<span class="token variable">$&#123;K8S_DEPLOY&#125;</span> <span class="token string">"cd /opt/dockerfile/project/upgrade  &amp;&amp; bash build-command.sh <span class="token variable">$&#123;DATE&#125;</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Docker镜像制作完成并已经上传到harbor服务器"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">#到K8S部署服务器更新k8s yaml文件中的镜像版本号,从而保持yaml文件中的镜像版本号和k8s中版本号一致</span><span class="token keyword">function</span> <span class="token function-name function">Update_k8s_yaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将更新k8s yaml文件中镜像版本"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token function">ssh</span> root@<span class="token variable">$&#123;K8S_DEPLOY&#125;</span> <span class="token string">"cd /opt/dockerfile/project/upgrade  &amp;&amp; sed -i 's/image: harbor.chsblogs.*/image: harbor.chsblogs.local\/system\/nginx-upgrade:<span class="token variable">$&#123;DATE&#125;</span>/g' nginx.yaml"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"k8s yaml文件镜像版本更新完成,即将开始更新容器中镜像版本"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">#到控制端更新k8s中容器的版本号,有两种更新办法，一是指定镜像版本更新，二是apply执行修改过的yaml文件</span><span class="token keyword">function</span> <span class="token function-name function">Update_k8s_container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">#第一种方法</span>  <span class="token function">ssh</span> root@<span class="token variable">$&#123;K8S_DEPLOY&#125;</span> <span class="token string">"kubectl set image deployment/nginx-deployment nginx=harbor.chsblogs.local/system/nginx-upgrade:<span class="token variable">$&#123;DATE&#125;</span> -n chsblogs-test3"</span>  <span class="token comment">#第二种方法,推荐使用第一种</span>  <span class="token comment">#ssh root@$&#123;K8S_DEPLOY&#125; "cd /opt/dockerfile/project/upgrade &amp;&amp; kubectl apply -f nginx.yaml --record=true" </span>  <span class="token builtin class-name">echo</span> <span class="token string">"k8s 镜像更新完成"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token builtin class-name">echo</span> <span class="token string">"当前业务镜像版本: harbor.chsblogs.local/system/nginx-upgrade:<span class="token variable">$&#123;DATE&#125;</span>"</span>  <span class="token comment">#计算脚本累计执行时间，如果不需要的话可以去掉下面四行</span>  <span class="token assign-left variable">endtime</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token variable">`</span></span>  <span class="token assign-left variable">start_seconds</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">--date</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$starttime</span>"</span> +%s<span class="token variable">)</span></span><span class="token punctuation">;</span>  <span class="token assign-left variable">end_seconds</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">--date</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$endtime</span>"</span> +%s<span class="token variable">)</span></span><span class="token punctuation">;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"本次业务镜像更新总计耗时："</span><span class="token variable"><span class="token variable">$((</span>end_seconds<span class="token operator">-</span>start_seconds<span class="token variable">))</span></span><span class="token string">"s"</span><span class="token punctuation">&#125;</span><span class="token comment">#基于k8s内置版本管理回滚到上一个版本</span><span class="token keyword">function</span> <span class="token function-name function">rollback_last_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将回滚之上一个版本"</span>  <span class="token function">ssh</span> root@<span class="token variable">$&#123;K8S_DEPLOY&#125;</span>  <span class="token string">"kubectl rollout undo deployment/nginx-deployment -n chsblogs-test3"</span>  <span class="token function">sleep</span> <span class="token number">1</span>  <span class="token builtin class-name">echo</span> <span class="token string">"已执行回滚至上一个版本"</span><span class="token punctuation">&#125;</span><span class="token comment">#使用帮助</span><span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"部署使用方法为 <span class="token variable">$&#123;SHELL_DIR&#125;</span>/<span class="token variable">$&#123;SHELL_NAME&#125;</span> deploy"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"回滚到上一版本使用方法为 <span class="token variable">$&#123;SHELL_DIR&#125;</span>/<span class="token variable">$&#123;SHELL_NAME&#125;</span> rollback_last_version"</span><span class="token punctuation">&#125;</span><span class="token comment">#主函数</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token variable">$&#123;METHOD&#125;</span>  <span class="token keyword">in</span>  deploy<span class="token punctuation">)</span>    Code_Clone<span class="token punctuation">;</span>    Copy_File<span class="token punctuation">;</span>    Make_Image<span class="token punctuation">;</span>     Update_k8s_yaml<span class="token punctuation">;</span>    Update_k8s_container<span class="token punctuation">;</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  rollback_last_version<span class="token punctuation">)</span>    rollback_last_version<span class="token punctuation">;</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>    usage<span class="token punctuation">;</span>  <span class="token keyword">esac</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>main <span class="token variable">$1</span> <span class="token variable">$2</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── Dockerfile├── build-command.sh├── index.html├── nginx.conf├── nginx.yaml└── web1.tar.gz<span class="token number">0</span> directories, <span class="token number">6</span> filesroot@deploy:/opt/dockerfile/project/upgrade<span class="token comment"># cat build-command.sh </span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.local/system/nginx-upgrade:<span class="token variable">$TAG</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push harbor.chsblogs.local/system/nginx-upgrade:<span class="token variable">$TAG</span></code></pre></div></figure><h3 id="1-4-2-配置Jenkins"><a href="#1-4-2-配置Jenkins" class="headerlink" title="1.4.2 配置Jenkins"></a>1.4.2 配置Jenkins</h3><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506095915804.png" alt="image-20230506095915804"> </p><p>访问测试：<a href="http://192.168.1.40:33015/">http://192.168.1.40:33015/</a></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506100043115.png" alt="image-20230506100043115"> </p><h3 id="1-4-3-部署v2版本"><a href="#1-4-3-部署v2版本" class="headerlink" title="1.4.3 部署v2版本"></a>1.4.3 部署v2版本</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开发提交v2代码</span>root@jenkins:~/web1<span class="token comment"># cat index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Pod jenkins/gitlab Upgrade Test www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@jenkins:~/web1<span class="token comment"># git add .</span>root@jenkins:~/web1<span class="token comment"># git commit -m "chsblogs v2"</span><span class="token punctuation">[</span>master d951bb4<span class="token punctuation">]</span> chsblogs v2 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span>root@jenkins:~/web1<span class="token comment"># git push </span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.54'</span><span class="token builtin class-name">:</span> chsPassword <span class="token keyword">for</span> <span class="token string">'http://chs@192.168.1.54'</span><span class="token builtin class-name">:</span> Enumerating objects: <span class="token number">5</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">2</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">346</span> bytes <span class="token operator">|</span> <span class="token number">346.00</span> KiB/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.54/chsblogs/web1.git   af84a15<span class="token punctuation">..</span>d951bb4  master -<span class="token operator">></span> master</code></pre></div></figure><p><strong>执行Jenkins Job:</strong></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506103538967.png" alt="image-20230506103538967"> </p><p>访问测试：<a href="http://192.168.1.40:33015/">http://192.168.1.40:33015/</a></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506103629905.png" alt="image-20230506103629905"> </p><h3 id="1-4-4-回滚版本"><a href="#1-4-4-回滚版本" class="headerlink" title="1.4.4 回滚版本"></a>1.4.4 回滚版本</h3><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506103825197.png" alt="image-20230506103825197"> </p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506104011295.png" alt="image-20230506104011295"> </p><p>访问测试：<a href="http://192.168.1.40:33015/">http://192.168.1.40:33015/</a></p><p> <img src="/2023/05/03/Container/Kubernetes/kubernetes07/image-20230506104056880.png" alt="image-20230506104056880"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(06).K8S基于HPA控制器实现Pod自动伸缩</title>
    <link href="/2023/05/03/Container/Kubernetes/kubernetes06/"/>
    <url>/2023/05/03/Container/Kubernetes/kubernetes06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-K8S基于HPA控制器实现Pod自动伸缩"><a href="#1-K8S基于HPA控制器实现Pod自动伸缩" class="headerlink" title="1.K8S基于HPA控制器实现Pod自动伸缩"></a>1.K8S基于HPA控制器实现Pod自动伸缩</h1><p>HorizontalPodAutoscaler（简称HPA）自动更新工作负载资源（例如Deployment或者StatefulSet），基于pod资源利用率横向调整pod副本数量。目的是自动扩缩工作负载以满足需求。如果负载减少，并且Pod的数量高于配置的最小值， HorizontalPodAutoscaler会指示工作负载资源（Deployment、StatefulSet或其他类似资源）缩减。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HPA的API有三个版本，通过 kubectl api-versions | grep autoscal可看到</span>root@deploy:~<span class="token comment"># kubectl api-versions | grep autoscal</span>autoscaling/v1autoscaling/v2beta1autoscaling/v2beta2</code></pre></div></figure><p>三个版本之前的区别如下：</p><ul><li>autoscaling&#x2F;v1：只支持基于CPU指标的缩放；</li><li>autoscaling&#x2F;v2beta1：支持 Resource Metrics（资源指标，如 pod 内存）和 Custom Metrics（自定义指标）的缩放；</li><li>autoscaling&#x2F;v2beta2：支持 Resource Metrics（资源指标，如 pod 的内存）和 Custom Metrics（自定义指标）和 ExternalMetrics</li></ul><h2 id="1-1-安装metrics-server"><a href="#1-1-安装metrics-server" class="headerlink" title="1.1 安装metrics server"></a>1.1 安装metrics server</h2><p>Metrics Server从node节点上的Kubelet收集资源指标,并通过Metrics API在 Kubernetes apiserver中公开指标数据,以供Horizontal Pod Autoscaler使用,也可以通过访问kubectl top node&#x2F;pod查看指标数据。</p><p><strong>github项目地址：</strong><a href="https://github.com/kubernetes-sigs/metrics-server/releases">https://github.com/kubernetes-sigs/metrics-server/releases</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml</span>root@deploy:~<span class="token comment"># kubectl get pods -n kube-system</span>NAME                                       READY   STATUS    RESTARTS   AGEcalico-kube-controllers-5bb6cdfb64-48l7s   <span class="token number">1</span>/1     Running   <span class="token number">1</span>          2d1hcalico-node-4glbl                          <span class="token number">1</span>/1     Running   <span class="token number">3</span>          2dcalico-node-ggvcb                          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2dcalico-node-ld2gk                          <span class="token number">1</span>/1     Running   <span class="token number">1</span>          2dcalico-node-lqgtd                          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2dcalico-node-n274l                          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2dcalico-node-tvg4l                          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2dcalico-node-v7t2n                          <span class="token number">1</span>/1     Running   <span class="token number">1</span>          2dcoredns-b7db84f9f-9dgwj                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          46hcoredns-b7db84f9f-b9699                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          46hcoredns-b7db84f9f-fk48m                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          46hmetrics-server-66757c6774-t4b8g            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18h<span class="token comment">#验证：查看可以采集pods和nodes节点资源</span>root@deploy:~<span class="token comment"># kubectl top node</span>NAME           CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   CPU%   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   MEMORY%   <span class="token number">192.168</span>.1.40   241m         <span class="token number">12</span>%    1113Mi          <span class="token number">67</span>%       <span class="token number">192.168</span>.1.41   258m         <span class="token number">12</span>%    1081Mi          <span class="token number">65</span>%       <span class="token number">192.168</span>.1.42   225m         <span class="token number">11</span>%    1005Mi          <span class="token number">60</span>%       <span class="token number">192.168</span>.1.49   160m         <span class="token number">8</span>%     867Mi           <span class="token number">52</span>%       <span class="token number">192.168</span>.1.50   211m         <span class="token number">10</span>%    843Mi           <span class="token number">51</span>%       <span class="token number">192.168</span>.1.51   187m         <span class="token number">9</span>%     860Mi           <span class="token number">52</span>%       <span class="token number">192.168</span>.1.52   220m         <span class="token number">11</span>%    919Mi           <span class="token number">55</span>%</code></pre></div></figure><p>HPA参数</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/hpa<span class="token comment"># kube-controller-manager --help | grep horizontal-pod-autoscaler</span>--horizontal-pod-autoscaler-cpu-initialization-period duration   <span class="token comment">#初始化延迟时间，在此时间内pod的CPU资源指标将不会生效，默认为5分钟。</span>--horizontal-pod-autoscaler-downscale-stabilization duration     <span class="token comment">#缩容间隔周期，默认5分钟。</span>--horizontal-pod-autoscaler-initial-readiness-delay duration     <span class="token comment">#用于设置pod准备时间，在此时间内的pod统统被认为未就绪及不采集数据,默认为30秒</span>--horizontal-pod-autoscaler-sync-period duration                 <span class="token comment">#默认每隔15s，可以通过此选项修改查询metrics的资源使用</span>--horizontal-pod-autoscaler-tolerance float                      <span class="token comment">#自动缩放器考虑缩放的期望与实际度量比率的最小变化（从1.0开始）。（默认值0.1）</span></code></pre></div></figure><h2 id="1-2-基于HPA根据CPU伸缩"><a href="#1-2-基于HPA根据CPU伸缩" class="headerlink" title="1.2 基于HPA根据CPU伸缩"></a>1.2 基于HPA根据CPU伸缩</h2><h3 id="1-2-1-创建测试Pod"><a href="#1-2-1-创建测试Pod" class="headerlink" title="1.2.1 创建测试Pod"></a>1.2.1 创建测试Pod</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/hpa<span class="token comment"># vim nginx.yaml</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: nginx-deployment-label  name: nginx-deployment  namespace: chsblogs-test2spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx-app  template:    metadata:      labels:        app: nginx-app    spec:      containers:      - name: nginx        image: nginx:1.24.0        imagePullPolicy: IfNotPresent        ports:        - containerPort: <span class="token number">80</span>          protocol: TCP          name: http        - containerPort: <span class="token number">443</span>          protocol: TCP          name: https        resources:          limits:            cpu: 100m            memory: 200Mi          requests:            cpu: 100m            memory: 200Mi---kind: ServiceapiVersion: v1metadata:  labels:    app: nginx-svc-label  name: nginx-svc  namespace: chsblogs-test2spec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">80</span>    nodePort: <span class="token number">32015</span>  - name: https    port: <span class="token number">443</span>    protocol: TCP    targetPort: <span class="token number">443</span>    nodePort: <span class="token number">32443</span>  selector:    app: nginx-approot@deploy:/opt/yaml/hpa<span class="token comment"># kubectl apply -f nginx.yaml</span>root@deploy:/opt/yaml/hpa<span class="token comment"># kubectl get pod -n chsblogs-test2</span>NAME                               READY   STATUS    RESTARTS   AGEnginx-deployment-7c9fd9676-sl8p4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          152mnginx-deployment-7c9fd9676-ww9vc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          152mroot@deploy:/opt/yaml/hpa<span class="token comment"># kubectl get svc -n chsblogs-test2</span>NAME        TYPE       CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGEnginx-svc   NodePort   <span class="token number">172.20</span>.251.244   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:32015/TCP,443:32443/TCP   161mroot@deploy:/opt/yaml/hpa<span class="token comment"># kubectl get ep -n chsblogs-test2</span>NAME        ENDPOINTS                                                         AGEnginx-svc   <span class="token number">10.20</span>.178.206:443,10.20.39.206:443,10.20.178.206:80 + <span class="token number">1</span> more<span class="token punctuation">..</span>.   161m</code></pre></div></figure><h3 id="1-2-2-创建HPA"><a href="#1-2-2-创建HPA" class="headerlink" title="1.2.2 创建HPA"></a>1.2.2 创建HPA</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/hpa<span class="token comment"># vim hpa.yaml</span>apiVersion: autoscaling/v1 <span class="token comment">#版本为 autoscaling/v1</span>kind: HorizontalPodAutoscaler <span class="token comment">#类型为 HPA</span>metadata:  creationTimestamp: null  name: nginx-deployment <span class="token comment">#HPA的名称</span>  namespace: chsblogs-test2 <span class="token comment">#名称空间</span>spec:  maxReplicas: <span class="token number">10</span> <span class="token comment">#最大副本数</span>  minReplicas: <span class="token number">2</span> <span class="token comment">#最小副本数</span>  scaleTargetRef: <span class="token comment">#要伸缩的目标资源，这里为 deployment</span>    apiVersion: apps/v1 <span class="token comment">#伸缩类型的版本，这里为deployment，版本为apps/v1</span>    kind: Deployment <span class="token comment">#扩缩容的对象是 deployment</span>    name: nginx-deployment <span class="token comment">#deployment的名称</span>  targetCPUUtilizationPercentage: <span class="token number">30</span> <span class="token comment">#定义检测的CPU使用率指标的阈值，这里为30，当小于30%的时候就会缩容，大于的时候就会扩容。</span>status:  currentReplicas: <span class="token number">0</span>  desiredReplicas: <span class="token number">0</span>  root@deploy:/opt/yaml/hpa<span class="token comment"># kubectl apply -f hpa.yaml</span><span class="token comment">#查看HPA控制器</span>root@deploy:/opt/yaml/hpa<span class="token comment"># kubectl get hpa -n chsblogs-test2</span>NAME               REFERENCE                     TARGETS   MINPODS   MAXPODS   REPLICAS   AGEnginx-deployment   Deployment/nginx-deployment   <span class="token number">0</span>%/30%    <span class="token number">2</span>         <span class="token number">10</span>        <span class="token number">2</span>          147m<span class="token comment">#查看HPA控制器详细信息</span>root@deploy:/opt/yaml/hpa<span class="token comment"># kubectl describe hpa -n chsblogs-test2</span>Name:                                                  nginx-deploymentNamespace:                                             chsblogs-test2Labels:                                                <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:                                           <span class="token operator">&lt;</span>none<span class="token operator">></span>CreationTimestamp:                                     Thu, 04 May <span class="token number">2023</span> <span class="token number">11</span>:32:34 +0800Reference:                                             Deployment/nginx-deploymentMetrics:                                               <span class="token punctuation">(</span> current / target <span class="token punctuation">)</span>  resource cpu on pods  <span class="token punctuation">(</span>as a percentage of request<span class="token punctuation">)</span>:  <span class="token number">0</span>% <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> / <span class="token number">30</span>%Min replicas:                                          <span class="token number">2</span>Max replicas:                                          <span class="token number">10</span>Deployment pods:                                       <span class="token number">2</span> current / <span class="token number">2</span> desiredConditions:  Type            Status  Reason            Message  ----            ------  ------            -------  AbleToScale     True    ReadyForNewScale  recommended size matches current size  ScalingActive   True    ValidMetricFound  the HPA was able to successfully calculate a replica count from cpu resource utilization <span class="token punctuation">(</span>percentage of request<span class="token punctuation">)</span>  ScalingLimited  True    TooFewReplicas    the desired replica count is <span class="token function">less</span> than the minimum replica countEvents:           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><h3 id="1-2-3-ab压测容器"><a href="#1-2-3-ab压测容器" class="headerlink" title="1.2.3 ab压测容器"></a>1.2.3 ab压测容器</h3><p>对创建好的容器进行压测。观察容器副本数。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master2:~<span class="token comment"># ab -n 30000 -c 1000 http://192.168.1.40:32015/</span></code></pre></div></figure><p>可以看到容器已经扩容至10个了</p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes06/image-20230504140422290.png" alt="image-20230504140422290"> </p><p>等待5分钟后，在观察，容器已经缩容至2个了</p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes06/image-20230504141605816.png" alt="image-20230504141605816"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(05).自定义镜像运行Nginx及Java服务并基于NFS实现动静分离</title>
    <link href="/2023/05/03/Container/Kubernetes/kubernetes05/"/>
    <url>/2023/05/03/Container/Kubernetes/kubernetes05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-自定义镜像运行Nginx及Java服务并基于NFS实现动静分离"><a href="#1-自定义镜像运行Nginx及Java服务并基于NFS实现动静分离" class="headerlink" title="1.自定义镜像运行Nginx及Java服务并基于NFS实现动静分离"></a>1.自定义镜像运行Nginx及Java服务并基于NFS实现动静分离</h1><p><strong>nginx+tomcat动静分离业务流程图：</strong></p><p><img src="/2023/05/03/Container/Kubernetes/kubernetes05/image-20230503172746619.png" alt="image-20230503172746619"> </p><h2 id="1-1-配置nfs文件共享"><a href="#1-1-配置nfs文件共享" class="headerlink" title="1.1 配置nfs文件共享"></a>1.1 配置nfs文件共享</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:~<span class="token comment"># apt install nfs-server</span>root@ha1:~<span class="token comment"># mkdir /data/k8sdata -p</span>root@ha1:/data/k8sdata<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── nginx│   ├── images│   └── static└── tomcatapp1    ├── images    └── static<span class="token number">6</span> directories, <span class="token number">0</span> filesroot@ha1:~<span class="token comment"># vim /etc/exports</span>/data/k8sdata *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span>root@ha1:~<span class="token comment"># systemctl restart nfs-server</span>root@ha1:~<span class="token comment"># systemctl enable nfs-server</span></code></pre></div></figure><h2 id="1-2-构建jdk与tomcat业务镜像"><a href="#1-2-构建jdk与tomcat业务镜像" class="headerlink" title="1.2 构建jdk与tomcat业务镜像"></a>1.2 构建jdk与tomcat业务镜像</h2><p>基于官方提供的centos、debian、ubuntu、alpine等基础镜像构建JDK，然后在基于构建的JDK镜像构建Tomcat业务镜像。</p><h3 id="1-2-1-构建ubuntu基础镜像"><a href="#1-2-1-构建ubuntu基础镜像" class="headerlink" title="1.2.1 构建ubuntu基础镜像"></a>1.2.1 构建ubuntu基础镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.1 拉取ubuntu官方镜像上传至harbor</span>root@deploy:~<span class="token comment"># docker pull ubuntu:20.04</span>root@deploy:~<span class="token comment"># docker tag ubuntu:20.04 harbor.chsblogs.local/system/ubuntu:20.04</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/system/ubuntu:20.04</span><span class="token comment">#1.2 编写Dockerfile</span>root@deploy:~<span class="token comment"># cd /opt/</span>root@deploy:/opt<span class="token comment"># mkdir -p /opt/dockerfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,/system/&#123;centos,ubuntu,debian,alpine&#125;,/project/&#123;tomcat,nginx&#125;&#125;</span>root@deploy:/opt<span class="token comment"># cd dockerfile/system/ubuntu/</span>root@deploy:/opt/dockerfile/system/ubuntu<span class="token comment"># vim Dockerfile</span><span class="token comment"># ubuntu:20.04 Base Image</span>FROM harbor.chsblogs.local/system/ubuntu:20.04LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*archive.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.listRUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*security.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.listRUN <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> iproute2 ntpdate tcpdump telnet <span class="token function">traceroute</span> nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> iotop <span class="token function">unzip</span> <span class="token function">zip</span> gcc <span class="token function">make</span>root@deploy:/opt/dockerfile/system/ubuntu<span class="token comment"># docker build -t harbor.chsblogs.local/system/ubuntu-base:v1 .</span>root@deploy:/opt/dockerfile/system/ubuntu<span class="token comment"># docker push harbor.chsblogs.local/system/ubuntu-base:v1</span></code></pre></div></figure><h3 id="1-2-2-基于ubuntu基础镜像构建JDK镜像"><a href="#1-2-2-基于ubuntu基础镜像构建JDK镜像" class="headerlink" title="1.2.2 基于ubuntu基础镜像构建JDK镜像"></a>1.2.2 基于ubuntu基础镜像构建JDK镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/system/ubuntu<span class="token comment"># cd ../../web/jdk/</span>root@deploy:/opt/dockerfile/web/jdk<span class="token comment"># cat profile</span>root@deploy:/opt/dockerfile/web/jdk<span class="token comment"># cat profile </span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_341<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarroot@deploy:/opt/dockerfile/web/jdk<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/ubuntu-base:v1LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD jdk-8u341-linux-x64.tar.gz /usr/local/ADD profile /etc/profile ENV <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_341ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>ENV <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarroot@deploy:/opt/dockerfile/web/jdk<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── Dockerfile├── jdk-8u341-linux-x64.tar.gz└── profile<span class="token number">0</span> directories, <span class="token number">3</span> filesroot@deploy:/opt/dockerfile/web/jdk<span class="token comment"># docker build -t harbor.chsblogs.local/system/jdk-base:v8.341 .</span>root@deploy:/opt/dockerfile/web/jdk<span class="token comment"># docker push harbor.chsblogs.local/system/jdk-base:v8.341</span></code></pre></div></figure><h3 id="1-2-3-基于JDK镜像构建Tomcat基础镜像"><a href="#1-2-3-基于JDK镜像构建Tomcat基础镜像" class="headerlink" title="1.2.3 基于JDK镜像构建Tomcat基础镜像"></a>1.2.3 基于JDK镜像构建Tomcat基础镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/web/jdk<span class="token comment"># cd ../tomcat/</span>root@deploy:/opt/dockerfile/web/tomcat<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/jdk-base:v8.341  LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span> ADD apache-tomcat-9.0.65.tar.gz /usr/local RUN <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /usr/local/apache-tomcat-9.0.65 /usr/local/tomcatroot@deploy:/opt/dockerfile/web/tomcat<span class="token comment"># docker build -t harbor.chsblogs.local/system/tomcat:v9.0.65 .</span>root@deploy:/opt/dockerfile/web/tomcat<span class="token comment"># docker push harbor.chsblogs.local/system/tomcat:v9.0.65</span></code></pre></div></figure><h3 id="1-2-4-基于Tomcat基础镜像构建业务镜像"><a href="#1-2-4-基于Tomcat基础镜像构建业务镜像" class="headerlink" title="1.2.4 基于Tomcat基础镜像构建业务镜像"></a>1.2.4 基于Tomcat基础镜像构建业务镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/web/tomcat<span class="token comment"># cd ../../project/tomcat/</span><span class="token comment">#自定义myapp页面</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># mkdir myapp</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># echo "&lt;h1>www.chsblogs.com v1&lt;/h1>" > myapp/index.html</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># cat myapp/index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># tar -czvf myapp.tar.gz myapp/</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># docker cp 68af9479e007:/apps/tomcat/conf/server.xml ./</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># vim server.xml #更改tomcat路径</span>     <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/tomcat/webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token comment">#编写Dockerfile文件</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/tomcat:v9.0.65 LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD run_tomcat.sh /usr/local/tomcat/bin/run_start.shADD server.xml /usr/local/tomcat/conf/server.xmlADD myapp.tar.gz /data/tomcat/webapps/ RUN <span class="token function">useradd</span> tomcatRUN <span class="token function">chown</span> <span class="token parameter variable">-R</span> tomcat.tomcat /data/ /usr/local/tomcat/ EXPOSE <span class="token number">8080</span> <span class="token number">8443</span> CMD <span class="token punctuation">[</span><span class="token string">"/usr/local/tomcat/bin/run_start.sh"</span><span class="token punctuation">]</span><span class="token comment">#容器启动脚本</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># cat run_tomcat.sh </span><span class="token comment">#!/bin/bash</span><span class="token function">su</span> - tomcat <span class="token parameter variable">-c</span> <span class="token string">"/usr/local/tomcat/bin/catalina.sh start"</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /etc/hostsroot@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># chmod +x run_tomcat.sh</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── Dockerfile├── myapp│   └── index.html├── myapp.tar.gz├── run_tomcat.sh└── server.xml<span class="token number">1</span> directory, <span class="token number">5</span> filesroot@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># docker build -t harbor.chsblogs.local/system/tomcat-app1:v1 .</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># docker push harbor.chsblogs.local/system/tomcat-app1:v1</span><span class="token comment">#测试tomcat业务镜像</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># docker run -d -p 8080:8080 --name tomcat-app1 harbor.chsblogs.local/system/tomcat-app1:v1</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># curl http://192.168.1.39:8080/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="1-2-5-创建k8s业务资源文件"><a href="#1-2-5-创建k8s业务资源文件" class="headerlink" title="1.2.5 创建k8s业务资源文件"></a>1.2.5 创建k8s业务资源文件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># vim tomcat-app1.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: tomcat-app1-deployment-label  name: tomcat-app1-deployment  namespace: chsblogs-test1spec:  replicas: <span class="token number">3</span>  selector:    matchLabels:      app: tomcat-app1  template:    metadata:      labels:        app: tomcat-app1    spec:      containers:      - name: tomcat        image: harbor.chsblogs.local/system/tomcat-app1:v1        imagePullPolicy: IfNotPresent        ports:        - containerPort: <span class="token number">8080</span>          protocol: TCP          name: http        volumeMounts:        - name: tomcatapp1-images          mountPath: /data/tomcat/webapps/myapp/images          readOnly: <span class="token boolean">false</span>        - name: tomcatapp1-static          mountPath: /data/tomcat/webapps/myapp/static          readOnly: <span class="token boolean">false</span>      volumes:      - name: tomcatapp1-images        nfs:          server: <span class="token number">192.168</span>.1.43          path: /data/k8sdata/tomcatapp1/images      - name: tomcatapp1-static        nfs:          server: <span class="token number">192.168</span>.1.43          path: /data/k8sdata/tomcatapp1/static---kind: ServiceapiVersion: v1metadata:  labels:    app: tomcat-app1-svc-label  name: tomcat-app1-svc  namespace: chsblogs-test1spec:  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">8080</span>  selector:    app: tomcat-app1    root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># kubectl apply -f tomcat-app1.yaml</span>root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># kubectl get pod -n chsblogs-test1</span>NAME                                      READY   STATUS    RESTARTS   AGEtomcat-app1-deployment-79b7b48fb7-crzsd   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59stomcat-app1-deployment-79b7b48fb7-p2x4s   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59stomcat-app1-deployment-79b7b48fb7-z5sj4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59sroot@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># kubectl get svc -n chsblogs-test1</span>NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGEtomcat-app1-svc   ClusterIP   <span class="token number">172.20</span>.139.13   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>/TCP    114sroot@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># kubectl get ep -n chsblogs-test1</span>NAME              ENDPOINTS                                                AGEtomcat-app1-svc   <span class="token number">10.20</span>.17.135:8080,10.20.178.200:8080,10.20.39.197:8080   2m</code></pre></div></figure><h2 id="1-3-构建nginx业务镜像"><a href="#1-3-构建nginx业务镜像" class="headerlink" title="1.3 构建nginx业务镜像"></a>1.3 构建nginx业务镜像</h2><h3 id="1-3-1-基于ubuntu基础镜像构建nginx基础镜像"><a href="#1-3-1-基于ubuntu基础镜像构建nginx基础镜像" class="headerlink" title="1.3.1 基于ubuntu基础镜像构建nginx基础镜像"></a>1.3.1 基于ubuntu基础镜像构建nginx基础镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/tomcat<span class="token comment"># cd ../../web/nginx/</span>root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/ubuntu-base:v1ADD nginx-1.22.0.tar.gz /usr/local/src/RUN <span class="token function">useradd</span> nginx <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-M</span>RUN <span class="token builtin class-name">cd</span> /usr/local/src/nginx-1.22.0 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>./configure <span class="token punctuation">\</span><span class="token parameter variable">--user</span><span class="token operator">=</span>nginx <span class="token punctuation">\</span><span class="token parameter variable">--group</span><span class="token operator">=</span>nginx <span class="token punctuation">\</span><span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx <span class="token punctuation">\</span>--with-http_stub_status_module <span class="token punctuation">\</span>--with-http_ssl_module <span class="token punctuation">\</span>--with-stream <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> RUN <span class="token function">rm</span> <span class="token parameter variable">-fr</span> /usr/local/src/nginx-1.22.0root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── Dockerfile└── nginx-1.22.0.tar.gz<span class="token number">0</span> directories, <span class="token number">2</span> filesroot@deploy:/opt/dockerfile/web/nginx<span class="token comment"># docker build -t harbor.chsblogs.local/system/nginx:v1.22.0 .</span>root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># docker push harbor.chsblogs.local/system/nginx:v1.22.0</span></code></pre></div></figure><h3 id="1-3-2-基于nginx基础镜像构建业务镜像"><a href="#1-3-2-基于nginx基础镜像构建业务镜像" class="headerlink" title="1.3.2 基于nginx基础镜像构建业务镜像"></a>1.3.2 基于nginx基础镜像构建业务镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># cd ../../project/nginx/</span>root@deploy:/opt/dockerfile/project/nginx<span class="token comment"># vim Dockerfile</span>FROM harbor.chsblogs.local/system/nginx:v1.22.0 <span class="token comment">#静态资源挂载路径</span>RUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/nginx/html/staticRUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/nginx/html/imagesADD nginx.conf /usr/local/nginx/conf/nginx.confADD boot.js /usr/local/nginx/html/static/ADD default.jpg /usr/local/nginx/html/images/ADD index.html  /usr/local/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span> CMD <span class="token punctuation">[</span><span class="token string">"/usr/local/nginx/sbin/nginx"</span><span class="token punctuation">]</span>root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># docker build -t harbor.chsblogs.local/system/nginx-web1:v1 .</span>root@deploy:/opt/dockerfile/web/nginx<span class="token comment"># docker push harbor.chsblogs.local/system/nginx-web1:v1</span></code></pre></div></figure><h3 id="1-3-3-创建k8s业务资源文件"><a href="#1-3-3-创建k8s业务资源文件" class="headerlink" title="1.3.3 创建k8s业务资源文件"></a>1.3.3 创建k8s业务资源文件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/dockerfile/project/nginx<span class="token comment"># vim nginx.yaml</span>kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: nginx-deployment-label  name: nginx-deployment  namespace: chsblogs-test1spec:  replicas: <span class="token number">2</span>  selector:    matchLabels:      app: nginx-app  template:    metadata:      labels:        app: nginx-app    spec:      containers:      - name: nginx        image: harbor.chsblogs.local/system/nginx-web1:v2        imagePullPolicy: IfNotPresent        ports:        - containerPort: <span class="token number">80</span>          protocol: TCP          name: http        - containerPort: <span class="token number">443</span>          protocol: TCP          name: https        resources:          limits:            cpu: 500m            memory: 512Mi          requests:            cpu: 500m            memory: 256Mi        volumeMounts:        - name: images          mountPath: /usr/local/nginx/html/images          readOnly: <span class="token boolean">false</span>        - name: static          mountPath: /usr/local/nginx/html/static          readOnly: <span class="token boolean">false</span>      volumes:      - name: images        nfs:          server: <span class="token number">192.168</span>.1.43          path: /data/k8sdata/nginx/images      - name: static        nfs:          server: <span class="token number">192.168</span>.1.43          path: /data/k8sdata/nginx/static---kind: ServiceapiVersion: v1metadata:  labels:    app: nginx-svc-label  name: nginx-svc  namespace: chsblogs-test1spec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">80</span>    nodePort: <span class="token number">30015</span>  - name: https    port: <span class="token number">443</span>    protocol: TCP    targetPort: <span class="token number">443</span>    nodePort: <span class="token number">30443</span>  selector:    app: nginx-app    root@deploy:/opt/dockerfile/project/nginx<span class="token comment"># kubectl apply -f nginx.yaml </span>deployment.apps/nginx-deployment createdservice/nginx-svc createdroot@deploy:/opt/dockerfile/project/nginx<span class="token comment"># kubectl get svc -n chsblogs-test1</span>NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGEnginx-svc         NodePort    <span class="token number">172.20</span>.30.140   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30015/TCP,443:30443/TCP   11stomcat-app1-svc   ClusterIP   <span class="token number">172.20</span>.139.13   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>/TCP                       17hroot@deploy:/opt/dockerfile/project/nginx<span class="token comment"># kubectl get ep -n chsblogs-test1</span>NAME              ENDPOINTS                                                         AGEnginx-svc         <span class="token number">10.20</span>.132.201:443,10.20.39.203:443,10.20.132.201:80 + <span class="token number">1</span> more<span class="token punctuation">..</span>.   17stomcat-app1-svc   <span class="token number">10.20</span>.17.136:8080,10.20.178.201:8080,10.20.39.199:8080            17h</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(04).基于kubeasz工具部署K8S高可用集群</title>
    <link href="/2023/04/26/Container/Kubernetes/kubernetes04/"/>
    <url>/2023/04/26/Container/Kubernetes/kubernetes04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于kubeasz工具部署K8S高可用集群"><a href="#1-基于kubeasz工具部署K8S高可用集群" class="headerlink" title="1.基于kubeasz工具部署K8S高可用集群"></a>1.基于kubeasz工具部署K8S高可用集群</h1><h2 id="1-1-部署主机清单"><a href="#1-1-部署主机清单" class="headerlink" title="1.1 部署主机清单"></a>1.1 部署主机清单</h2><p>基于kubeasz工具二进制部署K8S高可用集群，熟悉K8S。基于Jenkins+Gitlab自动发布项目，Ceph存储数据，ELK收集日志，Prometheus监控。</p><p><strong>K8S集群主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td><strong>K8S集群主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>deploy.chsblogs.com</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>k8s集群部署服务器</td><td></td></tr><tr><td>master1.chsblogs.com</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>K8s Master1</td><td>192.168.1.90</td></tr><tr><td>master2.chsblogs.com</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>K8s Master2</td><td>192.168.1.90</td></tr><tr><td>master3.chsblogs.com</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>K8s Master3</td><td>192.168.1.90</td></tr><tr><td>ha1.chsblogs.com</td><td>192.168.1.43</td><td>Ubuntu20.04</td><td>Haproxy1</td><td></td></tr><tr><td>ha2.chsblogs.com</td><td>192.168.1.44</td><td>Ubuntu20.04</td><td>Haproxy2</td><td></td></tr><tr><td>etcd1.chsblogs.com</td><td>192.168.1.45</td><td>Ubuntu20.04</td><td>Etcd节点1</td><td></td></tr><tr><td>etcd2.chsblogs.com</td><td>192.168.1.46</td><td>Ubuntu20.04</td><td>Etcd节点2</td><td></td></tr><tr><td>etcd3.chsblogs.com</td><td>192.168.1.47</td><td>Ubuntu20.04</td><td>Etcd节点3</td><td></td></tr><tr><td>harbor1.chsblogs.com</td><td>192.168.1.48</td><td>Ubuntu20.04</td><td>Harbor1</td><td></td></tr><tr><td>node1.chsblogs.com</td><td>192.168.1.49</td><td>Ubuntu20.04</td><td>Node节点1</td><td></td></tr><tr><td>node2.chsblogs.com</td><td>192.168.1.50</td><td>Ubuntu20.04</td><td>Node节点2</td><td></td></tr><tr><td>node3.chsblogs.com</td><td>192.168.1.51</td><td>Ubuntu20.04</td><td>Node节点3</td><td></td></tr><tr><td>node4.chsblogs.com</td><td>192.168.1.52</td><td>Ubuntu20.04</td><td>Node节点4</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Jenkins主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>jenkins</td><td>192.168.1.53</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Gitlab主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>gitlab</td><td>192.168.1.54</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>ELK集群主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>es1</td><td>192.168.1.55</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.56</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.57</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Kafka集群主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>kafka1</td><td>192.168.1.58</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.59</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.60</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Prometheus主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>prometheus</td><td>192.168.1.61</td><td>Ubuntu20.04</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Ceph集群主机清单：</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>eph-deploy</td><td>192.168.1.10&#x2F;172.31.1.10</td><td>CentOS7.9</td><td>ceph集群部署服务器</td><td></td></tr><tr><td>ceph-mon1</td><td>192.168.1.11&#x2F;172.31.1.11</td><td>CentOS7.9</td><td>Mon监视服务器</td><td></td></tr><tr><td>ceph-mon2</td><td>192.168.1.12&#x2F;172.31.1.12</td><td>CentOS7.9</td><td>Mon监视服务器</td><td></td></tr><tr><td>ceph-mon3</td><td>192.168.1.13&#x2F;172.31.1.13</td><td>CentOS7.9</td><td>Mon监视服务器</td><td></td></tr><tr><td>ceph-mgr1</td><td>192.168.1.14&#x2F;172.31.1.14</td><td>CentOS7.9</td><td>Mgr管理服务器</td><td></td></tr><tr><td>ceph-mgr1</td><td>192.168.1.15&#x2F;172.31.1.15</td><td>CentOS7.9</td><td>Mgr管理服务器</td><td></td></tr><tr><td>ceph-node1</td><td>192.168.1.16&#x2F;172.31.1.16</td><td>CentOS7.9</td><td>OSD存储服务器</td><td></td></tr><tr><td>ceph-node1</td><td>192.168.1.17&#x2F;172.31.1.17</td><td>CentOS7.9</td><td>OSD存储服务器</td><td></td></tr><tr><td>ceph-node1</td><td>192.168.1.18&#x2F;172.31.1.18</td><td>CentOS7.9</td><td>OSD存储服务器</td><td></td></tr></tbody></table><h2 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2 环境准备"></a>1.2 环境准备</h2><h3 id="1-2-1-关闭swap分区"><a href="#1-2-1-关闭swap分区" class="headerlink" title="1.2.1 关闭swap分区"></a>1.2.1 关闭swap分区</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ubuntu2004:~<span class="token comment"># vim /etc/fstab</span><span class="token comment">#/swap.img      none    swap    sw      0       0</span></code></pre></div></figure><h3 id="1-2-2-内核优化"><a href="#1-2-2-内核优化" class="headerlink" title="1.2.2 内核优化"></a>1.2.2 内核优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.系统资源限制优化</span><span class="token function">vim</span> /etc/security/limits.confroot soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span><span class="token comment">#2.内核参数优化</span><span class="token function">vim</span> /etc/sysctl.confnet.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_nonlocal_bind <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.conf.default.accept_source_route <span class="token operator">=</span> <span class="token number">0</span>kernel.sysrq <span class="token operator">=</span> <span class="token number">0</span>kernel.core_uses_pid <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">1</span>kernel.msgmnb <span class="token operator">=</span> <span class="token number">65536</span>kernel.msgmax <span class="token operator">=</span> <span class="token number">65536</span>kernel.shmmax <span class="token operator">=</span> <span class="token number">68719476736</span>kernel.shmall <span class="token operator">=</span> <span class="token number">4294967296</span>net.ipv4.tcp_mem <span class="token operator">=</span> <span class="token number">786432</span> <span class="token number">1048576</span> <span class="token number">1572864</span>net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">87380</span> <span class="token number">4194304</span>net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">16384</span> <span class="token number">4194304</span>net.ipv4.tcp_window_scaling <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_sack <span class="token operator">=</span> <span class="token number">1</span>net.core.wmem_default <span class="token operator">=</span> <span class="token number">8388608</span>net.core.rmem_default <span class="token operator">=</span> <span class="token number">8388608</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">16777216</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">16777216</span>net.core.netdev_max_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.core.somaxconn <span class="token operator">=</span> <span class="token number">20480</span>net.core.optmem_max <span class="token operator">=</span> <span class="token number">81920</span> net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.tcp_retries1 <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.tcp_retries2 <span class="token operator">=</span> <span class="token number">15</span>net.ipv4.tcp_timestamps <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">0</span> net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_max_tw_buckets <span class="token operator">=</span> <span class="token number">20000</span>net.ipv4.tcp_max_orphans <span class="token operator">=</span> <span class="token number">3276800</span>net.ipv4.tcp_synack_retries <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">300</span>net.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">30</span>net.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">10001</span> <span class="token number">65000</span>vm.overcommit_memory <span class="token operator">=</span> <span class="token number">0</span>vm.swappiness <span class="token operator">=</span> <span class="token number">10</span>fs.file-max <span class="token operator">=</span> <span class="token number">1000000</span></code></pre></div></figure><h3 id="1-2-3-配置主机名"><a href="#1-2-3-配置主机名" class="headerlink" title="1.2.3 配置主机名"></a>1.2.3 配置主机名</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname deploy.chsblogs.comhostnamectl set-hostname master1.chsblogs.comhostnamectl set-hostname master2.chsblogs.comhostnamectl set-hostname master3.chsblogs.comhostnamectl set-hostname ha1.chsblogs.comhostnamectl set-hostname ha2.chsblogs.comhostnamectl set-hostname etcd1.chsblogs.comhostnamectl set-hostname etcd2.chsblogs.comhostnamectl set-hostname etcd3.chsblogs.comhostnamectl set-hostname harbor1.chsblogs.comhostnamectl set-hostname node1.chsblogs.comhostnamectl set-hostname node2.chsblogs.comhostnamectl set-hostname node3.chsblogs.comhostnamectl set-hostname node4.chsblogs.com</code></pre></div></figure><h2 id="1-3-安装配置Haproxy"><a href="#1-3-安装配置Haproxy" class="headerlink" title="1.3 安装配置Haproxy"></a>1.3 安装配置Haproxy</h2><p><strong>主机ha1.chsblogs.com【192.168.1.43】安装配置Keepalived及Haproxy：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装keepalived</span>root@k8s-ha1:~<span class="token comment"># apt update &amp;&amp; apt -y install keepalived</span><span class="token comment">#2.配置keepalived</span>root@k8s-ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.vrrp /etc/keepalived/keepalived.conf</span>root@k8s-ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33 <span class="token comment">#注意网卡名称</span>    garp_master_delay <span class="token number">10</span>    smtp_alert    virtual_router_id <span class="token number">51</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.90 dev ens33 label ens33:1        <span class="token number">192.168</span>.1.91 dev ens33 label ens33:2        <span class="token number">192.168</span>.1.92 dev ens33 label ens33:3    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@k8s-ha1:~<span class="token comment"># systemctl enable --now keepalived</span><span class="token comment">#3.安装haproxy</span>root@k8s-ha1:~<span class="token comment"># apt update &amp;&amp; apt -y install haproxy</span><span class="token comment">#4.配置haproxy</span>root@k8s-ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:adminlisten k8s-api-6443  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.90:6443  mode tcp  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  server <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.42:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  root@k8s-ha1:~<span class="token comment"># systemctl restart haproxy</span>root@k8s-ha1:~<span class="token comment"># systemctl enable haproxy</span></code></pre></div></figure><p><strong>主机ha2.chsblogs.com【192.168.1.44】安装配置Keepalived及Haproxy：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装keepalived</span>root@k8s-ha2:~<span class="token comment"># apt update &amp;&amp; apt -y install keepalived</span><span class="token comment">#2.配置keepalived</span>root@k8s-ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.vrrp /etc/keepalived/keepalived.conf</span>root@k8s-ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33 <span class="token comment">#注意网卡名称</span>    garp_master_delay <span class="token number">10</span>    smtp_alert    virtual_router_id <span class="token number">51</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.90 dev ens33 label ens33:1        <span class="token number">192.168</span>.1.91 dev ens33 label ens33:2        <span class="token number">192.168</span>.1.92 dev ens33 label ens33:3    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@k8s-ha2:~<span class="token comment"># systemctl enable --now keepalived</span><span class="token comment">#3.安装haproxy</span>root@k8s-ha2:~<span class="token comment"># apt update &amp;&amp; apt -y install haproxy</span><span class="token comment">#4.配置haproxy</span>root@k8s-ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:adminlisten k8s-api-6443  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.90:6443  mode tcp  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  server <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.42:6443 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>  <span class="token comment">#注意开启内核参数net.ipv4.ip_nonlocal_bind = 1，否则本机没有监听192.168.1.66地址无法启动haproxy</span>root@k8s-ha2:~<span class="token comment"># systemctl restart haproxy</span>root@k8s-ha2:~<span class="token comment"># systemctl enable haproxy</span></code></pre></div></figure><h2 id="1-4-安装配置Harbor"><a href="#1-4-安装配置Harbor" class="headerlink" title="1.4 安装配置Harbor"></a>1.4 安装配置Harbor</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装docker</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal docker-ce-cli<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal<span class="token comment">#2.安装Docker-Compose</span>root@harbor1:/usr/local/src<span class="token comment"># curl -L https://github.com/docker/compose/releases/download/v2.15.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</span>root@harbor1:/usr/local/src<span class="token comment"># chmod +x /usr/local/bin/docker-compose</span><span class="token comment">#3.下载Harbor安装包</span>root@harbor1:~<span class="token comment"># cd /usr/local/src/</span>root@harbor1:/usr/local/src<span class="token comment"># wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz</span>root@harbor1:/usr/local/src<span class="token comment"># ls</span>harbor-offline-installer-v2.5.0.tgz<span class="token comment">#4.安装Harbor并创建自签发SSL</span>root@harbor1:/usr/local/src<span class="token comment"># tar -xvf harbor-offline-installer-v2.5.0.tgz</span>root@harbor1:/usr/local/src<span class="token comment"># cd harbor/</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># cp harbor.yml.tmpl harbor.yml</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># mkdir certs</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># cd certs/</span><span class="token comment">#创建CA私钥</span>root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># openssl genrsa -out ca.key 4096</span> <span class="token comment">#自签名机构生成CA证书</span>root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># openssl req -x509 -new -nodes -sha512 -days 7300 \</span><span class="token parameter variable">-subj</span> <span class="token string">"/C=CN/ST=Jangxi/L=GanZhou/O=example/OU=Personal/CN=harbor.chsblogs.local"</span> <span class="token punctuation">\</span><span class="token parameter variable">-key</span> ca.key <span class="token punctuation">\</span><span class="token parameter variable">-out</span> ca.crt <span class="token comment">#参数说明：</span><span class="token comment">## C，Country，代表国家</span><span class="token comment">## ST，STate，代表省份</span><span class="token comment">## L，Location，代表城市</span><span class="token comment">## O，Organization，代表组织，公司</span><span class="token comment">## OU，Organization Unit，代表部门</span><span class="token comment">## CN，Common Name，代表服务器域名</span><span class="token comment">## emailAddress，代表联系人邮箱地址。</span> <span class="token comment">#客户端私钥证书生成</span>root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># openssl genrsa -out harbor.chsblogs.local.key 4096</span> root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># openssl req -sha512 -new \</span><span class="token parameter variable">-subj</span> <span class="token string">"/C=CN/ST=Jangsu/L=Nanjing/O=example/OU=Personal/CN=cncf.net"</span> <span class="token punctuation">\</span><span class="token parameter variable">-key</span> harbor.chsblogs.local.key <span class="token punctuation">\</span><span class="token parameter variable">-out</span> harbor.chsblogs.local.csr <span class="token comment">#生成多个域名请求</span><span class="token function">cat</span> <span class="token operator">></span> v3.ext <span class="token operator">&lt;&lt;-</span><span class="token string">EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names [alt_names]DNS.1=harbor.chsblogs.comDNS.2=harbor.chsblogs.netDNS.3=harbor.chsblogs.localEOF</span> <span class="token comment">#使用自签名CA签发证书</span>root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># openssl x509 -req -sha512 -days 7300 \</span><span class="token parameter variable">-extfile</span> v3.ext <span class="token punctuation">\</span><span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token punctuation">\</span><span class="token parameter variable">-in</span> harbor.chsblogs.local.csr <span class="token punctuation">\</span><span class="token parameter variable">-out</span> harbor.chsblogs.local.crtroot@harbor1:/usr/local/src/harbor/certs<span class="token comment"># ll</span>total <span class="token number">28</span>drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">161</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 ./drwxr-xr-x <span class="token number">4</span> root root  <span class="token number">193</span> May  <span class="token number">1</span> <span class="token number">20</span>:11 <span class="token punctuation">..</span>/-rw-r--r-- <span class="token number">1</span> root root <span class="token number">2069</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 ca.crt-rw------- <span class="token number">1</span> root root <span class="token number">3243</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 ca.key-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">41</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 ca.srl-rw-r--r-- <span class="token number">1</span> root root <span class="token number">2155</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 harbor.chsblogs.local.crt-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1700</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 harbor.chsblogs.local.csr-rw------- <span class="token number">1</span> root root <span class="token number">3243</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 harbor.chsblogs.local.key-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">293</span> May  <span class="token number">1</span> <span class="token number">20</span>:09 v3.extroot@harbor1:/usr/local/src/harbor/certs<span class="token comment"># cd ..</span><span class="token comment">#5.创建Harbor数据目录，并使用数据盘挂载到/data目录</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># mkdir /data</span><span class="token comment">#6.配置Harbor</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># vim harbor.yml</span>hostname: harbor.chsblogs.local<span class="token comment"># http related config</span>http:  <span class="token comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span>  port: <span class="token number">80</span><span class="token comment"># https related config</span>https:  <span class="token comment"># https port for harbor, default is 443</span>  port: <span class="token number">443</span>  <span class="token comment"># The path of cert and key files for nginx</span>  certificate: /usr/local/src/harbor/certs/harbor.chsblogs.local.crt  private_key: /usr/local/src/harbor/certs/harbor.chsblogs.local.keyharbor_admin_password: <span class="token number">123456</span>data_volume: /data<span class="token comment">#7.执行install.sh脚本安装</span>root@harbor1:/usr/local/src/harbor<span class="token comment"># ./install.sh --with-trivy --with-chartmuseum</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230501100346878.png" alt="image-20230501100346878"> </p><p><strong>创建baseimages项目：</strong></p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230501194232560.png" alt="image-20230501194232560"> </p><p><strong>docker客户端配置证书验证，并推送镜像到Harbor：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.docker客户端创建证书保留位置，创建证书的名称必须是harbor域名的名称</span>root@deploy:~<span class="token comment"># mkdir /etc/docker/certs.d/harbor.chsblogs.local -p</span><span class="token comment">#2.Harbor将证书发送给客户端</span>root@harbor1:/usr/local/src/harbor/certs<span class="token comment"># scp harbor.chsblogs.local.crt 192.168.1.39:/etc/docker/certs.d/harbor.chsblogs.local</span><span class="token comment">#3.docker客户端配置hosts域名解析Harbor</span>root@deploy:~<span class="token comment"># vim /etc/hosts</span><span class="token number">192.168</span>.1.48 harbor.chsblogs.local<span class="token comment">#4.测试docker登录Harbor</span>root@deploy:~<span class="token comment"># docker login harbor.chsblogs.local</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded<span class="token comment">#5.测试docker push推送镜像到Harbor</span>root@deploy:~<span class="token comment"># docker pull centos:7.9.2009</span><span class="token number">7.9</span>.2009: Pulling from library/centos2d473b07cdd5: Pull complete Digest: sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987Status: Downloaded newer image <span class="token keyword">for</span> centos:7.9.2009docker.io/library/centos:7.9.2009root@deploy:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEcentos       <span class="token number">7.9</span>.2009   eeb6ee3f44bd   <span class="token number">19</span> months ago   204MBroot@deploy:~<span class="token comment"># docker tag centos:7.9.2009 harbor.chsblogs.local/baseimages/centos:7.9.2009</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/centos:7.9.2009</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.local/baseimages/centos<span class="token punctuation">]</span>174f56854903: Pushed <span class="token number">7.9</span>.2009: digest: sha256:dead07b4d8ed7e29e98de0f4504d87e8880d4347859d839686a31da35a3b532f size: <span class="token number">529</span><span class="token comment">#6.查看Harbor</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230501202001881.png" alt="image-20230501202001881"> </p><h2 id="1-7-安装配置Ansible"><a href="#1-7-安装配置Ansible" class="headerlink" title="1.7 安装配置Ansible"></a>1.7 安装配置Ansible</h2><p><strong>主机deploy.chsblogs.com【192.168.1.39】安装Ansible</strong>：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># apt update &amp;&amp; apt -y install ansible git</span></code></pre></div></figure><h3 id="1-7-1-配置免密钥认证"><a href="#1-7-1-配置免密钥认证" class="headerlink" title="1.7.1 配置免密钥认证"></a>1.7.1 配置免密钥认证</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置所有节点都能够免密登录，并为每个节点设置python的软连接</span>root@deploy:~<span class="token comment"># apt install sshpass</span>root@deploy:~<span class="token comment"># ssh-keygen</span>root@deploy:~<span class="token comment"># ln -sv /usr/bin/python3 /usr/bin/python</span>root@deploy:~<span class="token comment"># vim key.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token string">"192.168.1.40192.168.1.41192.168.1.42192.168.1.43192.168.1.44192.168.1.45192.168.1.46192.168.1.47192.168.1.48192.168.1.49192.168.1.50192.168.1.51192.168.1.52"</span><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token variable">$&#123;IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>  sshpass <span class="token parameter variable">-p</span> <span class="token number">123456</span> ssh-copy-id <span class="token variable">$&#123;n&#125;</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;n&#125;</span> done"</span>  <span class="token function">ssh</span> <span class="token variable">$&#123;n&#125;</span> <span class="token string">"ln -sv /usr/bin/python3 /usr/bin/python"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;n&#125;</span> /usr/bin/python3 done"</span><span class="token keyword">done</span>root@deploy:~<span class="token comment"># bash key.sh</span></code></pre></div></figure><h3 id="1-7-2-配置hosts文件"><a href="#1-7-2-配置hosts文件" class="headerlink" title="1.7.2 配置hosts文件"></a>1.7.2 配置hosts文件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># vim /etc/hosts</span><span class="token number">127.0</span>.0.1 localhost<span class="token number">127.0</span>.1.1 ubuntu2004<span class="token comment"># The following lines are desirable for IPv6 capable hosts</span>::1     ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters<span class="token number">192.168</span>.1.40 master1.chsblogs.com master1<span class="token number">192.168</span>.1.41 master2.chsblogs.com master2<span class="token number">192.168</span>.1.42 master3.chsblogs.com master3<span class="token number">192.168</span>.1.45 etcd1.chsblogs.com etcd1<span class="token number">192.168</span>.1.46 etcd2.chsblogs.com etcd2<span class="token number">192.168</span>.1.47 etcd3.chsblogs.com etcd3<span class="token number">192.168</span>.1.49 node1.chsblogs.com node1<span class="token number">192.168</span>.1.50 node2.chsblogs.com node2<span class="token number">192.168</span>.1.51 node3.chsblogs.com node3<span class="token number">192.168</span>.1.52 node4.chsblogs.com node4<span class="token number">192.168</span>.1.48 harbor.chsblogs.local<span class="token comment">#分发hosts文件到所有集群节点</span>root@deploy:~<span class="token comment"># for n in &#123;40..52&#125;;do scp /etc/hosts 192.168.1.$n:/etc/;done</span></code></pre></div></figure><h3 id="1-7-3-配置时间同步"><a href="#1-7-3-配置时间同步" class="headerlink" title="1.7.3 配置时间同步"></a>1.7.3 配置时间同步</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># for n in &#123;40..52&#125;;do ssh 192.168.1.$n "apt update &amp;&amp; apt install chrony -y;systemctl enable chrony --now";done</span></code></pre></div></figure><h3 id="1-7-4-同步docker证书"><a href="#1-7-4-同步docker证书" class="headerlink" title="1.7.4 同步docker证书"></a>1.7.4 同步docker证书</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># vim scp.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token string">"192.168.1.40192.168.1.41192.168.1.42192.168.1.49192.168.1.50192.168.1.51192.168.1.52"</span><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token variable">$&#123;IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token function">ssh</span> <span class="token variable">$&#123;n&#125;</span> <span class="token string">"mkdir /etc/docker/certs.d/harbor.chsblogs.local -p"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;n&#125;</span> Harbor证书创建完成"</span>  <span class="token function">scp</span> /etc/docker/certs.d/harbor.chsblogs.local/harbor.chsblogs.local.crt <span class="token variable">$n</span>:/etc/docker/certs.d/harbor.chsblogs.local/harbor.chsblogs.local.crt  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;n&#125;</span> Harbor证书复制完成"</span><span class="token keyword">done</span>root@deploy:~<span class="token comment"># bash scp.sh</span></code></pre></div></figure><h2 id="1-8-kubeasz工具介绍"><a href="#1-8-kubeasz工具介绍" class="headerlink" title="1.8 kubeasz工具介绍"></a>1.8 kubeasz工具介绍</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#kubeasz github地址：</span>https://github.com/easzlab/kubeasz</code></pre></div></figure><p><strong>下载kubeasz工具：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># export release=3.1.1</span>root@deploy:~<span class="token comment"># wget https://github.com/easzlab/kubeasz/releases/download/$&#123;release&#125;/ezdown</span>root@deploy:~<span class="token comment"># chmod a+x ezdown</span><span class="token comment">#修改ezdown配置</span>root@deploy:~<span class="token comment"># vim ezdown</span><span class="token assign-left variable">DOCKER_VER</span><span class="token operator">=</span><span class="token number">19.03</span>.15<span class="token assign-left variable">K8S_BIN_VER</span><span class="token operator">=</span>v1.20.14</code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502103837315.png" alt="image-20230502103837315"> </p><h2 id="1-9-准备镜像"><a href="#1-9-准备镜像" class="headerlink" title="1.9 准备镜像"></a>1.9 准备镜像</h2><h3 id="1-9-1-下载镜像"><a href="#1-9-1-下载镜像" class="headerlink" title="1.9.1 下载镜像"></a>1.9.1 下载镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看脚本，可以选择自定义kubernetes组件版本号；查看安装镜像手动拉去镜像到本地。该脚本以包含docker安装，如果本机如果已经安装docker则直接使用。</span>root@deploy:~<span class="token comment"># cat ezdown | grep "docker pull"</span>  <span class="token function">docker</span> pull easzlab/kubeasz-k8s-bin:<span class="token string">"<span class="token variable">$K8S_BIN_VER</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>  <span class="token function">docker</span> pull <span class="token string">"easzlab/kubeasz-ext-bin:<span class="token variable">$EXT_BIN_VER</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>  <span class="token function">docker</span> pull <span class="token string">"easzlab/kubeasz-sys-pkg:<span class="token variable">$SYS_PKG_VER</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>  <span class="token function">docker</span> pull <span class="token string">"easzlab/harbor-offline:<span class="token variable">$HARBOR_VER</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"calico/cni:<span class="token variable">$calicoVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"calico/pod2daemon-flexvol:<span class="token variable">$calicoVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"calico/kube-controllers:<span class="token variable">$calicoVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"calico/node:<span class="token variable">$calicoVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"coredns/coredns:<span class="token variable">$corednsVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/k8s-dns-node-cache:<span class="token variable">$dnsNodeCacheVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"kubernetesui/dashboard:<span class="token variable">$dashboardVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/flannel:<span class="token variable">$flannelVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"kubernetesui/metrics-scraper:<span class="token variable">$dashboardMetricsScraperVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/metrics-server:<span class="token variable">$metricsVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/pause-amd64:<span class="token variable">$pauseVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/nfs-subdir-external-provisioner:<span class="token variable">$nfsProvisionerVer</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">docker</span> pull <span class="token string">"easzlab/kubeasz:<span class="token variable">$KUBEASZ_VER</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token comment">#下载kubeasz代码、二进制、默认容器镜像</span>root@master1:~<span class="token comment"># ./ezdown -D</span>root@deploy:~<span class="token comment"># docker images</span>REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZEeaszlab/kubeasz-k8s-bin                   v1.20.14            006b650320fe        <span class="token number">16</span> months ago       474MBeaszlab/kubeasz                           <span class="token number">3.1</span>.1               a9da15e59bfc        <span class="token number">19</span> months ago       164MBeaszlab/kubeasz-ext-bin                   <span class="token number">0.9</span>.5               60e52b5c3e9f        <span class="token number">20</span> months ago       402MBcalico/node                               v3.19.2             7aa1277761b5        <span class="token number">21</span> months ago       169MBcalico/pod2daemon-flexvol                 v3.19.2             6a1186da14d9        <span class="token number">21</span> months ago       <span class="token number">21</span>.7MBcalico/cni                                v3.19.2             05bf027c9836        <span class="token number">21</span> months ago       146MBcalico/kube-controllers                   v3.19.2             779aa7e4e93c        <span class="token number">21</span> months ago       <span class="token number">60</span>.6MBkubernetesui/dashboard                    v2.3.1              e1482a24335a        <span class="token number">22</span> months ago       220MBcoredns/coredns                           <span class="token number">1.8</span>.4               8d147537fb7d        <span class="token number">23</span> months ago       <span class="token number">47</span>.6MBeaszlab/metrics-server                    v0.5.0              1c655933b9c5        <span class="token number">23</span> months ago       <span class="token number">63</span>.5MBeaszlab/pause-amd64                       <span class="token number">3.5</span>                 ed210e3e4a5b        <span class="token number">2</span> years ago         683kBeaszlab/nfs-subdir-external-provisioner   v4.0.1              686d3731280a        <span class="token number">2</span> years ago         <span class="token number">43</span>.8MBeaszlab/k8s-dns-node-cache                <span class="token number">1.17</span>.0              3a187183b3a8        <span class="token number">2</span> years ago         123MBkubernetesui/metrics-scraper              v1.0.6              48d79e554db6        <span class="token number">2</span> years ago         <span class="token number">34</span>.5MBeaszlab/flannel                           v0.13.0-amd64       e708f4bb69e3        <span class="token number">2</span> years ago         <span class="token number">57</span>.2MB</code></pre></div></figure><h3 id="1-9-2-上传镜像至Harbor"><a href="#1-9-2-上传镜像至Harbor" class="headerlink" title="1.9.2 上传镜像至Harbor"></a>1.9.2 上传镜像至Harbor</h3><p>将deploy部署服务器下载好的所有镜像进行上传到本地harbor做一个归档备份</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传pause镜像</span>root@deploy:~<span class="token comment"># docker tag easzlab/pause-amd64:3.5 harbor.chsblogs.local/baseimages/pause-amd64:3.5</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/pause-amd64:3.5</span><span class="token comment">#2.上传calico/node镜像</span>root@deploy:~<span class="token comment"># docker tag calico/node:v3.19.2 harbor.chsblogs.local/baseimages/calico/node:v3.19.2</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/calico/node:v3.19.2</span><span class="token comment">#3.上传calico/pod2daemon-flexvol镜像</span>root@deploy:~<span class="token comment"># docker tag calico/pod2daemon-flexvol:v3.19.2 harbor.chsblogs.local/baseimages/calico/pod2daemon-flexvol:v3.19.2</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/calico/pod2daemon-flexvol:v3.19.2</span><span class="token comment">#4.上传calico/cni镜像</span>root@deploy:~<span class="token comment"># docker tag calico/cni:v3.19.2 harbor.chsblogs.local/baseimages/calico/cni:v3.19.2</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/calico/cni:v3.19.2</span><span class="token comment">#5.上传calico/kube-controllers镜像</span>root@deploy:~<span class="token comment"># docker tag calico/kube-controllers:v3.19.2 harbor.chsblogs.local/baseimages/calico/kube-controllers:v3.19.2</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/calico/kube-controllers:v3.19.2</span></code></pre></div></figure><h2 id="1-10-部署K8S集群"><a href="#1-10-部署K8S集群" class="headerlink" title="1.10 部署K8S集群"></a>1.10 部署K8S集群</h2><h3 id="1-10-1-ezctl脚本使用"><a href="#1-10-1-ezctl脚本使用" class="headerlink" title="1.10.1 ezctl脚本使用"></a>1.10.1 ezctl脚本使用</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#脚本运行成功后，所有文件（kubeasz代码、二进制、离线镜像）均已整理好放入目录/etc/kubeasz下</span>root@deploy:~<span class="token comment"># cd /etc/kubeasz/</span>root@deploy:/etc/kubeasz<span class="token comment"># ll</span>total <span class="token number">100</span>drwxrwxr-x  <span class="token number">11</span> root root   <span class="token number">209</span> May  <span class="token number">2</span> 00:27 ./drwxr-xr-x <span class="token number">101</span> root root  <span class="token number">8192</span> May  <span class="token number">2</span> <span class="token number">10</span>:43 <span class="token punctuation">..</span>/-rw-rw-r--   <span class="token number">1</span> root root   <span class="token number">301</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> .gitignore-rw-rw-r--   <span class="token number">1</span> root root  <span class="token number">6222</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> README.md-rw-rw-r--   <span class="token number">1</span> root root <span class="token number">20304</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> ansible.cfgdrwxr-xr-x   <span class="token number">3</span> root root  <span class="token number">4096</span> May  <span class="token number">2</span> 00:27 bin/ <span class="token comment">#所有组件的二进制文件路径</span>drwxrwxr-x   <span class="token number">8</span> root root    <span class="token number">92</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> docs/drwxr-xr-x   <span class="token number">2</span> root root  <span class="token number">4096</span> May  <span class="token number">2</span> 00:33 down/drwxrwxr-x   <span class="token number">2</span> root root    <span class="token number">70</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> example/-rwxrwxr-x   <span class="token number">1</span> root root <span class="token number">24629</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> ezctl*-rwxrwxr-x   <span class="token number">1</span> root root <span class="token number">15031</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> ezdown*drwxrwxr-x  <span class="token number">10</span> root root   <span class="token number">145</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> manifests/drwxrwxr-x   <span class="token number">2</span> root root   <span class="token number">322</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> pics/drwxrwxr-x   <span class="token number">2</span> root root  <span class="token number">4096</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> playbooks/ <span class="token comment">#剧本目录</span>drwxrwxr-x  <span class="token number">22</span> root root   <span class="token number">323</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> roles/ <span class="token comment">#角色目录</span>drwxrwxr-x   <span class="token number">2</span> root root    <span class="token number">48</span> Sep <span class="token number">25</span>  <span class="token number">2021</span> tools/root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl --help</span>Usage: ezctl COMMAND <span class="token punctuation">[</span>args<span class="token punctuation">]</span>-------------------------------------------------------------------------------------Cluster setups:    list             to list all of the managed clusters    checkout    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to switch default kubeconfig of the cluster    new         <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            <span class="token comment">#创建一个新的k8s集群去部署，&lt;cluster>为k8s集群名称</span>    setup       <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>step<span class="token operator">></span>    <span class="token comment">#对k8s集群进行步骤安装，&lt;setup>为步骤名称</span>    start       <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to start all of the k8s services stopped by <span class="token string">'ezctl stop'</span>    stop        <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to stop all of the k8s services temporarily    upgrade     <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to upgrade the k8s cluster    destroy     <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to destroy the k8s cluster    backup      <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to backup the cluster state <span class="token punctuation">(</span>etcd snapshot<span class="token punctuation">)</span>    restore     <span class="token operator">&lt;</span>cluster<span class="token operator">></span>            to restore the cluster state from backups    start-aio             to quickly setup an all-in-one cluster with <span class="token string">'default'</span> settingsCluster ops:    add-etcd    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to <span class="token function">add</span> a etcd-node to the etcd cluster    add-master  <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to <span class="token function">add</span> a master <span class="token function">node</span> to the k8s cluster    add-node    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to <span class="token function">add</span> a work <span class="token function">node</span> to the k8s cluster    del-etcd    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to delete a etcd-node from the etcd cluster    del-master  <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to delete a master <span class="token function">node</span> from the k8s cluster    del-node    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>ip<span class="token operator">></span>      to delete a work <span class="token function">node</span> from the k8s clusterExtra operation:    kcfg-adm    <span class="token operator">&lt;</span>cluster<span class="token operator">></span>  <span class="token operator">&lt;</span>args<span class="token operator">></span>    to manage client kubeconfig of the k8s clusterUse <span class="token string">"ezctl help &lt;command>"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a given command.root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup --help</span>Usage: ezctl setup <span class="token operator">&lt;</span>cluster<span class="token operator">></span> <span class="token operator">&lt;</span>step<span class="token operator">></span>available steps:    01  prepare            to prepare CA/certs <span class="token operator">&amp;</span> kubeconfig <span class="token operator">&amp;</span> other system settings     02  etcd               to setup the etcd cluster    03  container-runtime  to setup the container runtime<span class="token punctuation">(</span>docker or containerd<span class="token punctuation">)</span>    04  kube-master        to setup the master nodes    05  kube-node          to setup the worker nodes    06  network            to setup the network plugin    07  cluster-addon      to setup other useful plugins    <span class="token number">90</span>  all                to run 01~07 all at once    <span class="token number">10</span>  ex-lb              to <span class="token function">install</span> external loadbalance <span class="token keyword">for</span> accessing k8s from outside    <span class="token number">11</span>  harbor             to <span class="token function">install</span> a new harbor server or to integrate with an existed oneexamples: ./ezctl setup test-k8s 01  <span class="token punctuation">(</span>or ./ezctl setup test-k8s prepare<span class="token punctuation">)</span>  ./ezctl setup test-k8s 02  <span class="token punctuation">(</span>or ./ezctl setup test-k8s etcd<span class="token punctuation">)</span>          ./ezctl setup test-k8s all          ./ezctl setup test-k8s 04 <span class="token parameter variable">-t</span> restart_master</code></pre></div></figure><h3 id="1-10-2-创建集群配置"><a href="#1-10-2-创建集群配置" class="headerlink" title="1.10.2 创建集群配置"></a>1.10.2 创建集群配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.建自定义集群名称k8s-cluster1,会在当前/etc/kubeasz/clusters/创建一个名称为k8s-cluster1的文件夹并将ansible资源清单（hosts）和变量文件（config.yaml）放在这个目录下</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl new k8s-cluster1</span><span class="token number">2023</span>-05-02 <span class="token number">11</span>:03:35 DEBUG generate custom cluster files <span class="token keyword">in</span> /etc/kubeasz/clusters/k8s-cluster1<span class="token number">2023</span>-05-02 <span class="token number">11</span>:03:35 DEBUG <span class="token builtin class-name">set</span> version of common plugins<span class="token number">2023</span>-05-02 <span class="token number">11</span>:03:35 DEBUG cluster k8s-cluster1: files successfully created.<span class="token number">2023</span>-05-02 <span class="token number">11</span>:03:35 INFO next steps <span class="token number">1</span>: to config <span class="token string">'/etc/kubeasz/clusters/k8s-cluster1/hosts'</span><span class="token number">2023</span>-05-02 <span class="token number">11</span>:03:35 INFO next steps <span class="token number">2</span>: to config <span class="token string">'/etc/kubeasz/clusters/k8s-cluster1/config.yml'</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.进入集群配置目录</span>root@deploy:/etc/kubeasz<span class="token comment"># cd clusters/k8s-cluster1/</span>root@deploy:/etc/kubeasz/clusters/k8s-cluster1<span class="token comment"># ls</span>config.yml  hosts</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.编辑资源清单文件</span>root@deploy:/etc/kubeasz/clusters/k8s-cluster1<span class="token comment"># vim hosts</span><span class="token comment"># 'etcd' cluster should have odd member(s) (1,3,5,...)</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> <span class="token comment">#指定etcd集群地址</span><span class="token number">192.168</span>.1.45<span class="token number">192.168</span>.1.46<span class="token number">192.168</span>.1.47<span class="token comment"># master node(s)</span><span class="token punctuation">[</span>kube_master<span class="token punctuation">]</span> <span class="token comment">#指定k8s master集群地址</span><span class="token number">192.168</span>.1.40<span class="token number">192.168</span>.1.41<span class="token comment"># work node(s) </span><span class="token punctuation">[</span>kube_node<span class="token punctuation">]</span> <span class="token comment">#指定k8s node集群地址</span><span class="token number">192.168</span>.1.49<span class="token number">192.168</span>.1.50<span class="token comment"># [optional] harbor server, a private docker registry</span><span class="token comment"># 'NEW_INSTALL': 'true' to install a harbor server; 'false' to integrate with existed one</span><span class="token punctuation">[</span>harbor<span class="token punctuation">]</span><span class="token comment">#192.168.1.8 NEW_INSTALL=false</span><span class="token comment"># [optional] loadbalance for accessing k8s from outside</span><span class="token punctuation">[</span>ex_lb<span class="token punctuation">]</span> <span class="token comment">#这里打开来，要调用EX_APISERVER_VIP地址，实际上负载均衡服务我们已经手动安装。</span><span class="token number">192.168</span>.1.6 <span class="token assign-left variable">LB_ROLE</span><span class="token operator">=</span>backup <span class="token assign-left variable">EX_APISERVER_VIP</span><span class="token operator">=</span><span class="token number">192.168</span>.1.90 <span class="token assign-left variable">EX_APISERVER_PORT</span><span class="token operator">=</span><span class="token number">6443</span><span class="token number">192.168</span>.1.7 <span class="token assign-left variable">LB_ROLE</span><span class="token operator">=</span>master <span class="token assign-left variable">EX_APISERVER_VIP</span><span class="token operator">=</span><span class="token number">192.168</span>.1.90 <span class="token assign-left variable">EX_APISERVER_PORT</span><span class="token operator">=</span><span class="token number">6443</span><span class="token comment"># [optional] ntp server for the cluster</span><span class="token punctuation">[</span>chrony<span class="token punctuation">]</span><span class="token comment">#192.168.1.1</span><span class="token punctuation">[</span>all:vars<span class="token punctuation">]</span><span class="token comment"># --------- Main Variables ---------------</span><span class="token comment"># Secure port for apiservers</span><span class="token assign-left variable">SECURE_PORT</span><span class="token operator">=</span><span class="token string">"6443"</span> <span class="token comment">#指定apiserver端口号，默认即可</span><span class="token comment"># Cluster container-runtime supported: docker, containerd</span><span class="token assign-left variable">CONTAINER_RUNTIME</span><span class="token operator">=</span><span class="token string">"docker"</span> <span class="token comment">#指定容器运行时，与kubeasz版本兼容有关</span><span class="token comment"># Network plugins supported: calico, flannel, kube-router, cilium, kube-ovn</span><span class="token assign-left variable">CLUSTER_NETWORK</span><span class="token operator">=</span><span class="token string">"calico"</span> <span class="token comment">#指定网络插件</span><span class="token comment"># Service proxy mode of kube-proxy: 'iptables' or 'ipvs'</span><span class="token assign-left variable">PROXY_MODE</span><span class="token operator">=</span><span class="token string">"ipvs"</span> <span class="token comment">#指定svc模式</span><span class="token comment"># K8S Service CIDR, not overlap with node(host) networking</span><span class="token assign-left variable">SERVICE_CIDR</span><span class="token operator">=</span><span class="token string">"172.20.0.0/16"</span> <span class="token comment">#指定svc网络地址</span><span class="token comment"># Cluster CIDR (Pod CIDR), not overlap with node(host) networking</span><span class="token assign-left variable">CLUSTER_CIDR</span><span class="token operator">=</span><span class="token string">"10.20.0.0/16"</span> <span class="token comment">#指定pod网络地址</span><span class="token comment"># NodePort Range</span><span class="token assign-left variable">NODE_PORT_RANGE</span><span class="token operator">=</span><span class="token string">"30000-62767"</span> <span class="token comment">#指定svc nodeport端口范围</span><span class="token comment"># Cluster DNS Domain</span><span class="token assign-left variable">CLUSTER_DNS_DOMAIN</span><span class="token operator">=</span><span class="token string">"chsblogs.local"</span> <span class="token comment">#指定集群节点dns后缀</span><span class="token comment"># -------- Additional Variables (don't change the default value right now) ---</span><span class="token comment"># Binaries Directory</span><span class="token assign-left variable">bin_dir</span><span class="token operator">=</span><span class="token string">"/usr/local/bin"</span> <span class="token comment">#指定集群节点二进制安装命令存放路径</span><span class="token comment"># Deploy Directory (kubeasz workspace)</span><span class="token assign-left variable">base_dir</span><span class="token operator">=</span><span class="token string">"/etc/kubeasz"</span> <span class="token comment">#指定kubeasz的配置目录</span><span class="token comment"># Directory for a specific cluster</span><span class="token assign-left variable">cluster_dir</span><span class="token operator">=</span><span class="token string">"&#123;&#123; base_dir &#125;&#125;/clusters/k8s-cluster1"</span> <span class="token comment">#指定集群配置目录</span><span class="token comment"># CA and other components cert/key Directory</span><span class="token assign-left variable">ca_dir</span><span class="token operator">=</span><span class="token string">"/etc/kubernetes/ssl"</span> <span class="token comment">#指定证书签发路径</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.修改config.yaml修改安装k8s的组件配置</span>root@deploy:/etc/kubeasz/clusters/k8s-cluster1<span class="token comment"># vim config.yml</span><span class="token comment">############################</span><span class="token comment"># prepare</span><span class="token comment">############################</span><span class="token comment"># 可选离线安装系统软件包 (offline|online)</span>INSTALL_SOURCE: <span class="token string">"online"</span><span class="token comment"># 可选进行系统安全加固 github.com/dev-sec/ansible-collection-hardening</span>OS_HARDEN: <span class="token boolean">false</span><span class="token comment"># 设置时间源服务器【重要：集群内机器时间必须同步】</span>ntp_servers:  - <span class="token string">"ntp1.aliyun.com"</span>  - <span class="token string">"time1.cloud.tencent.com"</span>  - <span class="token string">"0.cn.pool.ntp.org"</span><span class="token comment"># 设置允许内部时间同步的网络段，比如"10.0.0.0/8"，默认全部允许</span>local_network: <span class="token string">"0.0.0.0/0"</span><span class="token comment">############################</span><span class="token comment"># role:deploy</span><span class="token comment">############################</span><span class="token comment"># default: ca will expire in 100 years</span><span class="token comment"># default: certs issued by the ca will expire in 50 years</span>CA_EXPIRY: <span class="token string">"876000h"</span>CERT_EXPIRY: <span class="token string">"438000h"</span><span class="token comment"># kubeconfig 配置参数</span>CLUSTER_NAME: <span class="token string">"cluster1"</span>CONTEXT_NAME: <span class="token string">"context-&#123;&#123; CLUSTER_NAME &#125;&#125;"</span><span class="token comment">############################</span><span class="token comment"># role:etcd</span><span class="token comment">############################</span><span class="token comment"># 设置不同的wal目录，可以避免磁盘io竞争，提高性能</span>ETCD_DATA_DIR: <span class="token string">"/var/lib/etcd"</span>ETCD_WAL_DIR: <span class="token string">""</span><span class="token comment">############################</span><span class="token comment"># role:runtime [containerd,docker]</span><span class="token comment">############################</span><span class="token comment"># ------------------------------------------- containerd</span><span class="token comment"># [.]启用容器仓库镜像</span>ENABLE_MIRROR_REGISTRY: <span class="token boolean">true</span><span class="token comment"># [containerd]基础容器镜像</span>SANDBOX_IMAGE: <span class="token string">"harbor.chsblogs.local/baseimages/pause-amd64:3.5"</span> <span class="token comment">#修改为本地镜像harbor仓库地址</span><span class="token comment"># [containerd]容器持久化存储目录</span>CONTAINERD_STORAGE_DIR: <span class="token string">"/var/lib/containerd"</span><span class="token comment"># ------------------------------------------- docker</span><span class="token comment"># [docker]容器存储目录</span>DOCKER_STORAGE_DIR: <span class="token string">"/var/lib/docker"</span><span class="token comment"># [docker]开启Restful API</span>ENABLE_REMOTE_API: <span class="token boolean">false</span><span class="token comment"># [docker]信任的HTTP仓库</span>INSECURE_REG: <span class="token string">'["127.0.0.1/8"]'</span><span class="token comment">############################</span><span class="token comment"># role:kube-master</span><span class="token comment">############################</span><span class="token comment"># k8s 集群 master 节点证书配置，可以添加多个ip和域名（比如增加公网ip和域名）</span>MASTER_CERT_HOSTS:  - <span class="token string">"10.1.1.1"</span>  - <span class="token string">"k8s.test.io"</span>  <span class="token comment">#- "www.test.com"</span><span class="token comment"># node 节点上 pod 网段掩码长度（决定每个节点最多能分配的pod ip地址）</span><span class="token comment"># 如果flannel 使用 --kube-subnet-mgr 参数，那么它将读取该设置为每个节点分配pod网段</span><span class="token comment"># https://github.com/coreos/flannel/issues/847</span>NODE_CIDR_LEN: <span class="token number">24</span><span class="token comment">############################</span><span class="token comment"># role:kube-node</span><span class="token comment">############################</span><span class="token comment"># Kubelet 根目录</span>KUBELET_ROOT_DIR: <span class="token string">"/var/lib/kubelet"</span><span class="token comment"># node节点最大pod 数</span>MAX_PODS: <span class="token number">110</span><span class="token comment"># 配置为kube组件（kubelet,kube-proxy,dockerd等）预留的资源量</span><span class="token comment"># 数值设置详见templates/kubelet-config.yaml.j2</span>KUBE_RESERVED_ENABLED: <span class="token string">"no"</span><span class="token comment"># k8s 官方不建议草率开启 system-reserved, 除非你基于长期监控，了解系统的资源占用状况；</span><span class="token comment"># 并且随着系统运行时间，需要适当增加资源预留，数值设置详见templates/kubelet-config.yaml.j2</span><span class="token comment"># 系统预留设置基于 4c/8g 虚机，最小化安装系统服务，如果使用高性能物理机可以适当增加预留</span><span class="token comment"># 另外，集群安装时候apiserver等资源占用会短时较大，建议至少预留1g内存</span>SYS_RESERVED_ENABLED: <span class="token string">"no"</span><span class="token comment"># haproxy balance mode</span>BALANCE_ALG: <span class="token string">"roundrobin"</span><span class="token comment">############################</span><span class="token comment"># role:network [flannel,calico,cilium,kube-ovn,kube-router]</span><span class="token comment">############################</span><span class="token comment"># ------------------------------------------- flannel</span><span class="token comment"># [flannel]设置flannel 后端"host-gw","vxlan"等</span>FLANNEL_BACKEND: <span class="token string">"vxlan"</span>DIRECT_ROUTING: <span class="token boolean">false</span><span class="token comment"># [flannel] flanneld_image: "quay.io/coreos/flannel:v0.10.0-amd64"</span>flannelVer: <span class="token string">"v0.13.0-amd64"</span>flanneld_image: <span class="token string">"easzlab/flannel:&#123;&#123; flannelVer &#125;&#125;"</span><span class="token comment"># [flannel]离线镜像tar包</span>flannel_offline: <span class="token string">"flannel_&#123;&#123; flannelVer &#125;&#125;.tar"</span><span class="token comment"># ------------------------------------------- calico</span><span class="token comment"># [calico]设置 CALICO_IPV4POOL_IPIP=“off”,可以提高网络性能，条件限制详见 docs/setup/calico.md</span>CALICO_IPV4POOL_IPIP: <span class="token string">"Always"</span><span class="token comment"># [calico]设置 calico-node使用的host IP，bgp邻居通过该地址建立，可手工指定也可以自动发现</span>IP_AUTODETECTION_METHOD: <span class="token string">"can-reach=&#123;&#123; groups['kube_master'][0] &#125;&#125;"</span><span class="token comment"># [calico]设置calico 网络 backend: brid, vxlan, none</span>CALICO_NETWORKING_BACKEND: <span class="token string">"brid"</span><span class="token comment"># [calico]更新支持calico 版本: [v3.3.x] [v3.4.x] [v3.8.x] [v3.15.x]</span>calico_ver: <span class="token string">"v3.19.2"</span><span class="token comment"># [calico]calico 主版本</span>calico_ver_main: <span class="token string">"&#123;&#123; calico_ver.split('.')[0] &#125;&#125;.&#123;&#123; calico_ver.split('.')[1] &#125;&#125;"</span><span class="token comment"># [calico]离线镜像tar包</span>calico_offline: <span class="token string">"calico_&#123;&#123; calico_ver &#125;&#125;.tar"</span><span class="token comment"># ------------------------------------------- cilium</span><span class="token comment"># [cilium]CILIUM_ETCD_OPERATOR 创建的 etcd 集群节点数 1,3,5,7...</span>ETCD_CLUSTER_SIZE: <span class="token number">1</span><span class="token comment"># [cilium]镜像版本</span>cilium_ver: <span class="token string">"v1.4.1"</span><span class="token comment"># [cilium]离线镜像tar包</span>cilium_offline: <span class="token string">"cilium_&#123;&#123; cilium_ver &#125;&#125;.tar"</span><span class="token comment"># ------------------------------------------- kube-ovn</span><span class="token comment"># [kube-ovn]选择 OVN DB and OVN Control Plane 节点，默认为第一个master节点</span>OVN_DB_NODE: <span class="token string">"&#123;&#123; groups['kube_master'][0] &#125;&#125;"</span><span class="token comment"># [kube-ovn]离线镜像tar包</span>kube_ovn_ver: <span class="token string">"v1.5.3"</span>kube_ovn_offline: <span class="token string">"kube_ovn_&#123;&#123; kube_ovn_ver &#125;&#125;.tar"</span><span class="token comment"># ------------------------------------------- kube-router</span><span class="token comment"># [kube-router]公有云上存在限制，一般需要始终开启 ipinip；自有环境可以设置为 "subnet"</span>OVERLAY_TYPE: <span class="token string">"full"</span><span class="token comment"># [kube-router]NetworkPolicy 支持开关</span>FIREWALL_ENABLE: <span class="token string">"true"</span><span class="token comment"># [kube-router]kube-router 镜像版本</span>kube_router_ver: <span class="token string">"v0.3.1"</span>busybox_ver: <span class="token string">"1.28.4"</span><span class="token comment"># [kube-router]kube-router 离线镜像tar包</span>kuberouter_offline: <span class="token string">"kube-router_&#123;&#123; kube_router_ver &#125;&#125;.tar"</span>busybox_offline: <span class="token string">"busybox_&#123;&#123; busybox_ver &#125;&#125;.tar"</span><span class="token comment">############################</span><span class="token comment"># role:cluster-addon</span><span class="token comment">############################</span><span class="token comment"># coredns 自动安装</span>dns_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>corednsVer: <span class="token string">"1.8.4"</span>ENABLE_LOCAL_DNS_CACHE: <span class="token boolean">false</span>dnsNodeCacheVer: <span class="token string">"1.17.0"</span><span class="token comment"># 设置 local dns cache 地址</span>LOCAL_DNS_CACHE: <span class="token string">"169.254.20.10"</span><span class="token comment"># metric server 自动安装</span>metricsserver_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>metricsVer: <span class="token string">"v0.5.0"</span><span class="token comment"># dashboard 自动安装</span>dashboard_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>dashboardVer: <span class="token string">"v2.3.1"</span>dashboardMetricsScraperVer: <span class="token string">"v1.0.6"</span><span class="token comment"># ingress 自动安装</span>ingress_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>ingress_backend: <span class="token string">"traefik"</span>traefik_chart_ver: <span class="token string">"9.12.3"</span><span class="token comment"># prometheus 自动安装</span>prom_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>prom_namespace: <span class="token string">"monitor"</span>prom_chart_ver: <span class="token string">"12.10.6"</span><span class="token comment"># nfs-provisioner 自动安装</span>nfs_provisioner_install: <span class="token string">"no"</span> <span class="token comment">#取消安装</span>nfs_provisioner_namespace: <span class="token string">"kube-system"</span>nfs_provisioner_ver: <span class="token string">"v4.0.1"</span>nfs_storage_class: <span class="token string">"managed-nfs-storage"</span>nfs_server: <span class="token string">"192.168.1.10"</span>nfs_path: <span class="token string">"/data/nfs"</span><span class="token comment">############################</span><span class="token comment"># role:harbor</span><span class="token comment">############################</span><span class="token comment"># harbor version，完整版本号</span>HARBOR_VER: <span class="token string">"v2.1.3"</span>HARBOR_DOMAIN: <span class="token string">"harbor.yourdomain.com"</span>HARBOR_TLS_PORT: <span class="token number">8443</span><span class="token comment"># if set 'false', you need to put certs named harbor.pem and harbor-key.pem in directory 'down'</span>HARBOR_SELF_SIGNED_CERT: <span class="token boolean">true</span><span class="token comment"># install extra component</span>HARBOR_WITH_NOTARY: <span class="token boolean">false</span>HARBOR_WITH_TRIVY: <span class="token boolean">false</span>HARBOR_WITH_CLAIR: <span class="token boolean">false</span>HARBOR_WITH_CHARTMUSEUM: <span class="token boolean">true</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.去掉负载均衡检查，已手动安装</span>root@deploy:/etc/kubeasz<span class="token comment"># vim playbooks/01.prepare.yml</span><span class="token comment"># [optional] to synchronize system time of nodes with 'chrony' </span>- hosts:  - kube_master  - kube_node  - etcd    <span class="token comment">#- ex_lb</span>    <span class="token comment">#- chrony</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><h3 id="1-10-3-初始化集群安装"><a href="#1-10-3-初始化集群安装" class="headerlink" title="1.10.3 初始化集群安装"></a>1.10.3 初始化集群安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 01</span><span class="token comment"># 剧本文件为：/etc/kubeasz/playbooks/01.preare.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/prepare/tasks</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 01</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502113854805.png" alt="image-20230502113854805"> </p><h3 id="1-10-4-部署etcd集群"><a href="#1-10-4-部署etcd集群" class="headerlink" title="1.10.4 部署etcd集群"></a>1.10.4 部署etcd集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 02</span><span class="token comment"># 剧本文件为：/etc/kubeasz/playbooks/02.etcd.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/etcd/tasks</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 02</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502114159514.png" alt="image-20230502114159514"> </p><p><strong>登录etcd集群查看节点状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@etcd1:~<span class="token comment"># export NODE_IPS="192.168.1.45 192.168.1.46 192.168.1.47"</span>root@etcd1:~<span class="token comment"># for n in $&#123;NODE_IPS&#125;;do etcdctl --endpoints=https://$&#123;n&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem endpoint health;done</span>https://192.168.1.45:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">8</span>.04417mshttps://192.168.1.46:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">12</span>.723181mshttps://192.168.1.47:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">13</span>.48795msroot@etcd1:~<span class="token comment"># for n in $&#123;NODE_IPS&#125;;do etcdctl --endpoints=https://$&#123;n&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem --write-out=table endpoint status;done</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502114600908.png" alt="image-20230502114600908"> </p><h3 id="1-10-5-部署集群runtime"><a href="#1-10-5-部署集群runtime" class="headerlink" title="1.10.5 部署集群runtime"></a>1.10.5 部署集群runtime</h3><p>master和node节点必须安装docker。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 03</span><span class="token comment"># 剧本文件：/etc/kubeasz/playbooks/03.runtime.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/docker/tasks</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 03</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502115219882.png" alt="image-20230502115219882"> </p><h3 id="1-10-6-部署K8S-Master"><a href="#1-10-6-部署K8S-Master" class="headerlink" title="1.10.6 部署K8S Master"></a>1.10.6 部署K8S Master</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 04</span><span class="token comment"># 剧本文件：/etc/kubeasz/playbooks/04.kube-master.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/kube-master/tasks</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 04</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502115820852.png" alt="image-20230502115820852"> </p><p><strong>kubenetes Master节点验证：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get node</span>NAME           STATUS                     ROLES    AGE   VERSION<span class="token number">192.168</span>.1.40   Ready,SchedulingDisabled   master   46s   v1.20.14<span class="token number">192.168</span>.1.41   Ready,SchedulingDisabled   master   46s   v1.20.14</code></pre></div></figure><h3 id="1-10-7-部署K8S-Node"><a href="#1-10-7-部署K8S-Node" class="headerlink" title="1.10.7 部署K8S Node"></a>1.10.7 部署K8S Node</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 05</span><span class="token comment"># 剧本文件：/etc/kubeasz/playbooks/05.kube-node.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/kube-node/tasks/</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 05</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502120239962.png" alt="image-20230502120239962"> </p><p><strong>kubenetes Node节点验证：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get node</span>NAME           STATUS                     ROLES    AGE     VERSION<span class="token number">192.168</span>.1.40   Ready,SchedulingDisabled   master   5m53s   v1.20.14<span class="token number">192.168</span>.1.41   Ready,SchedulingDisabled   master   5m53s   v1.20.14<span class="token number">192.168</span>.1.49   Ready                      <span class="token function">node</span>     106s    v1.20.14<span class="token number">192.168</span>.1.50   Ready                      <span class="token function">node</span>     106s    v1.20.14</code></pre></div></figure><h3 id="1-10-8-部署网络插件calico"><a href="#1-10-8-部署网络插件calico" class="headerlink" title="1.10.8 部署网络插件calico"></a>1.10.8 部署网络插件calico</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将镜像统一修改为本地harbor的镜像仓库地址</span>root@deploy:/etc/kubeasz<span class="token comment"># cd roles/calico/templates/</span>root@deploy:/etc/kubeasz/roles/calico/templates<span class="token comment"># vim calico-v3.19.yaml.j2</span><span class="token comment">#1.修改calico-cni镜像仓库地址</span>         image: harbor.chsblogs.local/baseimages/calico/cni:v3.19.2<span class="token comment">#2.修改calico/pod2daemon-flexvol镜像仓库地址</span>         image: harbor.chsblogs.local/baseimages/calico/pod2daemon-flexvol:v3.19.2<span class="token comment">#3.修改calico/node镜像仓库地址</span>          image: harbor.chsblogs.local/baseimages/calico/node:v3.19.2<span class="token comment">#4.修改calico/kube-controllers镜像仓库地址</span>         image: harbor.chsblogs.local/baseimages/calico/kube-controllers:v3.19.2</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./ezctl setup k8s-cluster1 06</span><span class="token comment"># 剧本文件：/etc/kubeasz/playbooks/06.network.yml</span><span class="token comment"># 剧本角色执行文件：/etc/kubeasz/roles/calico/tasks</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl setup k8s-cluster1 06</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502121648663.png" alt="image-20230502121648663"> </p><p><strong>节点验证：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get pod -A</span>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGEkube-system   calico-kube-controllers-5bb6cdfb64-48l7s   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          82skube-system   calico-node-6rgc2                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          82skube-system   calico-node-flv8c                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          82skube-system   calico-node-plrtd                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          82skube-system   calico-node-wncfj                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          82sroot@master1:~<span class="token comment"># calicoctl node status</span>Calico process is running.IPv4 BGP status+--------------+-------------------+-------+----------+-------------+<span class="token operator">|</span> PEER ADDRESS <span class="token operator">|</span>     PEER TYPE     <span class="token operator">|</span> STATE <span class="token operator">|</span>  SINCE   <span class="token operator">|</span>    INFO     <span class="token operator">|</span>+--------------+-------------------+-------+----------+-------------+<span class="token operator">|</span> <span class="token number">192.168</span>.1.41 <span class="token operator">|</span> node-to-node mesh <span class="token operator">|</span> up    <span class="token operator">|</span> 04:16:23 <span class="token operator">|</span> Established <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">192.168</span>.1.49 <span class="token operator">|</span> node-to-node mesh <span class="token operator">|</span> up    <span class="token operator">|</span> 04:16:22 <span class="token operator">|</span> Established <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">192.168</span>.1.50 <span class="token operator">|</span> node-to-node mesh <span class="token operator">|</span> up    <span class="token operator">|</span> 04:16:23 <span class="token operator">|</span> Established <span class="token operator">|</span>+--------------+-------------------+-------+----------+-------------+IPv6 BGP statusNo IPv6 peers found.</code></pre></div></figure><h3 id="1-10-9-测试集群网络"><a href="#1-10-9-测试集群网络" class="headerlink" title="1.10.9 测试集群网络"></a>1.10.9 测试集群网络</h3><p>测试不同node下的pod网络,测试外网的网络访问。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建三个测试容器</span>root@deploy:~<span class="token comment"># kubectl run net-test1 --image=centos:7.9.2009 sleep 888888</span>pod/net-test1 createdroot@deploy:~<span class="token comment"># kubectl run net-test2 --image=centos:7.9.2009 sleep 888888</span>pod/net-test2 createdroot@deploy:~<span class="token comment"># kubectl run net-test3 --image=centos:7.9.2009 sleep 888888</span>pod/net-test3 created<span class="token comment">#2.查看容器状态</span>root@deploy:~<span class="token comment"># kubectl get pod -o wide</span>NAME        READY   STATUS    RESTARTS   AGE     IP              NODE           NOMINATED NODE   READINESS GATESnet-test1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m59s   <span class="token number">10.20</span>.39.193    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>net-test2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m55s   <span class="token number">10.20</span>.39.194    <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>net-test3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m51s   <span class="token number">10.20</span>.132.193   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token comment">#3.查看网络ping</span>root@deploy:~<span class="token comment"># kubectl exec -it net-test1 bash</span>kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.<span class="token punctuation">[</span>root@net-test1 /<span class="token punctuation">]</span><span class="token comment"># ping 10.20.132.193</span>PING <span class="token number">10.20</span>.132.193 <span class="token punctuation">(</span><span class="token number">10.20</span>.132.193<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">10.20</span>.132.193: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.718</span> ms<span class="token number">64</span> bytes from <span class="token number">10.20</span>.132.193: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">1.81</span> ms<span class="token number">64</span> bytes from <span class="token number">10.20</span>.132.193: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.914</span> ms^C--- <span class="token number">10.20</span>.132.193 <span class="token function">ping</span> statistics ---<span class="token number">3</span> packets transmitted, <span class="token number">3</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 2003msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.718</span>/1.147/1.810/0.476 ms<span class="token punctuation">[</span>root@net-test1 /<span class="token punctuation">]</span><span class="token comment"># ping 223.5.5.5</span>PING <span class="token number">223.5</span>.5.5 <span class="token punctuation">(</span><span class="token number">223.5</span>.5.5<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">223.5</span>.5.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">118</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">11.4</span> ms<span class="token number">64</span> bytes from <span class="token number">223.5</span>.5.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">118</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">22.3</span> ms<span class="token number">64</span> bytes from <span class="token number">223.5</span>.5.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">118</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">16.7</span> ms<span class="token number">64</span> bytes from <span class="token number">223.5</span>.5.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">118</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">9.98</span> ms^C--- <span class="token number">223.5</span>.5.5 <span class="token function">ping</span> statistics ---<span class="token number">4</span> packets transmitted, <span class="token number">4</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 3004msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">9.988</span>/15.116/22.337/4.861 ms</code></pre></div></figure><h2 id="1-11-集群维护与管理"><a href="#1-11-集群维护与管理" class="headerlink" title="1.11 集群维护与管理"></a>1.11 集群维护与管理</h2><h3 id="1-11-1-添加Master节点"><a href="#1-11-1-添加Master节点" class="headerlink" title="1.11.1 添加Master节点"></a>1.11.1 添加Master节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下面有个负载均衡器的执行报错没有关系，负载均衡器我们已经手动安装了</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl add-master k8s-cluster1 192.168.1.42</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502130837378.png" alt="image-20230502130837378"> </p><p><strong>验证节点：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get node -o wide</span>NAME           STATUS                     ROLES    AGE     VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME<span class="token number">192.168</span>.1.40   Ready,SchedulingDisabled   master   71m     v1.20.14   <span class="token number">192.168</span>.1.40   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Ubuntu <span class="token number">20.04</span>.4 LTS   <span class="token number">5.4</span>.0-147-generic   docker://19.3.15<span class="token number">192.168</span>.1.41   Ready,SchedulingDisabled   master   71m     v1.20.14   <span class="token number">192.168</span>.1.41   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Ubuntu <span class="token number">20.04</span>.4 LTS   <span class="token number">5.4</span>.0-147-generic   docker://19.3.15<span class="token number">192.168</span>.1.42   Ready,SchedulingDisabled   master   3m28s   v1.20.14   <span class="token number">192.168</span>.1.42   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Ubuntu <span class="token number">20.04</span>.4 LTS   <span class="token number">5.4</span>.0-147-generic   docker://19.3.15<span class="token number">192.168</span>.1.49   Ready                      <span class="token function">node</span>     67m     v1.20.14   <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Ubuntu <span class="token number">20.04</span>.4 LTS   <span class="token number">5.4</span>.0-147-generic   docker://19.3.15<span class="token number">192.168</span>.1.50   Ready                      <span class="token function">node</span>     67m     v1.20.14   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Ubuntu <span class="token number">20.04</span>.4 LTS   <span class="token number">5.4</span>.0-147-generic   docker://19.3.15</code></pre></div></figure><h3 id="1-11-2-添加Node节点"><a href="#1-11-2-添加Node节点" class="headerlink" title="1.11.2 添加Node节点"></a>1.11.2 添加Node节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl add-node k8s-cluster1 192.168.1.51</span>root@deploy:/etc/kubeasz<span class="token comment"># ./ezctl add-node k8s-cluster1 192.168.1.52</span></code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502131727996.png" alt="image-20230502131727996"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502132407963.png" alt="image-20230502132407963"> </p><p><strong>验证节点：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get node</span>NAME           STATUS                     ROLES    AGE     VERSION<span class="token number">192.168</span>.1.40   Ready,SchedulingDisabled   master   86m     v1.20.14<span class="token number">192.168</span>.1.41   Ready,SchedulingDisabled   master   86m     v1.20.14<span class="token number">192.168</span>.1.42   Ready,SchedulingDisabled   master   18m     v1.20.14<span class="token number">192.168</span>.1.49   Ready                      <span class="token function">node</span>     82m     v1.20.14<span class="token number">192.168</span>.1.50   Ready                      <span class="token function">node</span>     82m     v1.20.14<span class="token number">192.168</span>.1.51   Ready                      <span class="token function">node</span>     9m50s   v1.20.14<span class="token number">192.168</span>.1.52   Ready                      <span class="token function">node</span>     4m1s    v1.20.14</code></pre></div></figure><h2 id="1-12-部署K8S-DNS组件"><a href="#1-12-部署K8S-DNS组件" class="headerlink" title="1.12 部署K8S DNS组件"></a>1.12 部署K8S DNS组件</h2><p>目前常用的dns组件有kube-dns和coredns两个，即到目前k8s版本1.17.x都可以使用，kube-dns和coredns用于解析集群中service name所对应得到的IP地址。K8S 1.18版本后将不再支持kube-dns</p><h3 id="1-12-1-部署coredns"><a href="#1-12-1-部署coredns" class="headerlink" title="1.12.1 部署coredns"></a>1.12.1 部署coredns</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.coredns下载,通过kubernetes的github的项目下载,通过kubernetes的github的项目，从kubernetes源码包内获取coredns的yaml文件.</span><span class="token comment">#  https://github.com/kubernetes/kubernetes/releases/tag/v1.20.15</span>root@deploy:~<span class="token comment"># mkdir /k8s/dns/coredns -p</span>root@deploy:~<span class="token comment"># cd /k8s/dns/coredns/</span>root@deploy:/k8s/dns/coredns<span class="token comment"># wget https://dl.k8s.io/v1.20.15/kubernetes.tar.gz</span>root@deploy:/k8s/dns/coredns<span class="token comment"># tar -xvf kubernetes.tar.gz </span>root@deploy:/k8s/dns/coredns<span class="token comment"># cp kubernetes/cluster/addons/dns/coredns/coredns.yaml.base .</span>root@deploy:/k8s/dns/coredns<span class="token comment"># mv coredns.yaml.base coredns_v1.8.4.yaml</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.修改coredns_v1.8.4.yaml配置文件</span><span class="token comment">#将__DNS__DOMAIN__修改为当前k8s集群的dns后缀名称</span>root@deploy:/k8s/dns/coredns<span class="token comment"># vim coredns_v1.8.4.yaml</span>        <span class="token comment">#kubernetes __DNS__DOMAIN__ in-addr.arpa ip6.arpa &#123; #修改__DNS__DOMAIN__ 替换为 chsblogs.local</span>         kubernetes chsblogs.local in-addr.arpa ip6.arpa <span class="token punctuation">&#123;</span>        <span class="token comment">#resources:</span>          <span class="token comment">#limits:</span>            <span class="token comment">#memory: __DNS__MEMORY__LIMIT__</span>          <span class="token comment">#requests:</span>            <span class="token comment">#cpu: 100m</span>            <span class="token comment">#memory: 70Mi</span>        resources:          limits:            memory: 256Mi <span class="token comment">#生产建议上限为 cpu：200m，内存4Gi</span>            cpu: 200m          requests:            cpu: 100m            memory: 70Mi  <span class="token comment">#clusterIP: __DNS__SERVER__ #修改coredns地址，地址为service地址，通过kubectl get svc查看，172.20.0.1为k8s分配，这里设置172.20.0.2地址</span>  clusterIP: <span class="token number">172.20</span>.0.2    <span class="token comment">#image: k8s.gcr.io/coredns:1.7.0 #修改镜像地址为本地harbor</span>  image: harbor.chsblogs.local/baseimages/coredns:1.8.4  <span class="token comment">#- apiGroups:</span>  <span class="token comment">#- ""</span>  <span class="token comment">#resources:</span>  <span class="token comment">#- nodes</span>  <span class="token comment">#verbs:</span>  <span class="token comment">#- get</span>- apiGroups: <span class="token comment">#改为以下，否则会报Readiness probe failed: HTTP probe failed with statuscode: 503</span>  - discovery.k8s.io  resources:  - endpointslices  verbs:  - list  - <span class="token function">watch</span>  <span class="token comment">#coredns_v1.8.4.yaml配置文件</span><span class="token comment"># __MACHINE_GENERATED_WARNING__</span>apiVersion: v1kind: ServiceAccountmetadata:  name: coredns  namespace: kube-system  labels:      kubernetes.io/cluster-service: <span class="token string">"true"</span>      addonmanager.kubernetes.io/mode: Reconcile---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: Reconcile  name: system:corednsrules:- apiGroups:  - <span class="token string">""</span>  resources:  - endpoints  - services  - pods  - namespaces  verbs:  - list  - <span class="token function">watch</span>- apiGroups:  - discovery.k8s.io  resources:  - endpointslices  verbs:  - list  - <span class="token function">watch</span>---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  annotations:    rbac.authorization.kubernetes.io/autoupdate: <span class="token string">"true"</span>  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: EnsureExists  name: system:corednsroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:corednssubjects:- kind: ServiceAccount  name: coredns  namespace: kube-system---apiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: kube-system  labels:      addonmanager.kubernetes.io/mode: EnsureExistsdata:  Corefile: <span class="token operator">|</span>    .:53 <span class="token punctuation">&#123;</span>        errors        health <span class="token punctuation">&#123;</span>            lameduck 5s        <span class="token punctuation">&#125;</span>        ready        kubernetes chsblogs.local in-addr.arpa ip6.arpa <span class="token punctuation">&#123;</span>            pods insecure            fallthrough in-addr.arpa ip6.arpa            ttl <span class="token number">30</span>        <span class="token punctuation">&#125;</span>        prometheus :9153        forward <span class="token builtin class-name">.</span> /etc/resolv.conf <span class="token punctuation">&#123;</span>            max_concurrent <span class="token number">1000</span>        <span class="token punctuation">&#125;</span>        cache <span class="token number">30</span>        loop        reload        loadbalance    <span class="token punctuation">&#125;</span>---apiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: kube-dns    kubernetes.io/cluster-service: <span class="token string">"true"</span>    addonmanager.kubernetes.io/mode: Reconcile    kubernetes.io/name: <span class="token string">"CoreDNS"</span>spec:  <span class="token comment"># replicas: not specified here:</span>  <span class="token comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span>  <span class="token comment"># 2. Default is 1.</span>  <span class="token comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span>  strategy:    type: RollingUpdate    rollingUpdate:      maxUnavailable: <span class="token number">1</span>  selector:    matchLabels:      k8s-app: kube-dns  template:    metadata:      labels:        k8s-app: kube-dns    spec:      securityContext:        seccompProfile:          type: RuntimeDefault      priorityClassName: system-cluster-critical      serviceAccountName: coredns      affinity:        podAntiAffinity:          preferredDuringSchedulingIgnoredDuringExecution:          - weight: <span class="token number">100</span>            podAffinityTerm:              labelSelector:                matchExpressions:                  - key: k8s-app                    operator: In                    values: <span class="token punctuation">[</span><span class="token string">"kube-dns"</span><span class="token punctuation">]</span>              topologyKey: kubernetes.io/hostname      tolerations:        - key: <span class="token string">"CriticalAddonsOnly"</span>          operator: <span class="token string">"Exists"</span>      nodeSelector:        kubernetes.io/os: linux      containers:      - name: coredns        image: harbor.chsblogs.local/baseimages/coredns:1.8.4        imagePullPolicy: IfNotPresent        resources:          limits:            memory: 256Mi            cpu: 200m          requests:            cpu: 100m            memory: 70Mi        args: <span class="token punctuation">[</span> <span class="token string">"-conf"</span>, <span class="token string">"/etc/coredns/Corefile"</span> <span class="token punctuation">]</span>        volumeMounts:        - name: config-volume          mountPath: /etc/coredns          readOnly: <span class="token boolean">true</span>        ports:        - containerPort: <span class="token number">53</span>          name: dns          protocol: UDP        - containerPort: <span class="token number">53</span>          name: dns-tcp          protocol: TCP        - containerPort: <span class="token number">9153</span>          name: metrics          protocol: TCP        livenessProbe:          httpGet:            path: /health            port: <span class="token number">8080</span>            scheme: HTTP          initialDelaySeconds: <span class="token number">60</span>          timeoutSeconds: <span class="token number">5</span>          successThreshold: <span class="token number">1</span>          failureThreshold: <span class="token number">5</span>        readinessProbe:          httpGet:            path: /ready            port: <span class="token number">8181</span>            scheme: HTTP        securityContext:          allowPrivilegeEscalation: <span class="token boolean">false</span>          capabilities:            add:            - NET_BIND_SERVICE            drop:            - all          readOnlyRootFilesystem: <span class="token boolean">true</span>      dnsPolicy: Default      volumes:        - name: config-volume          configMap:            name: coredns            items:            - key: Corefile              path: Corefile---apiVersion: v1kind: Servicemetadata:  name: kube-dns  namespace: kube-system  annotations:    prometheus.io/port: <span class="token string">"9153"</span>    prometheus.io/scrape: <span class="token string">"true"</span>  labels:    k8s-app: kube-dns    kubernetes.io/cluster-service: <span class="token string">"true"</span>    addonmanager.kubernetes.io/mode: Reconcile    kubernetes.io/name: <span class="token string">"CoreDNS"</span>spec:  selector:    k8s-app: kube-dns  clusterIP: <span class="token number">172.20</span>.0.2  ports:  - name: dns    port: <span class="token number">53</span>    protocol: UDP  - name: dns-tcp    port: <span class="token number">53</span>    protocol: TCP  - name: metrics    port: <span class="token number">9153</span>    protocol: TCP</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.下载coredns镜像并上传至harbor</span>root@deploy:~<span class="token comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.8.4</span>root@deploy:~<span class="token comment"># docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.8.4 harbor.chsblogs.local/baseimages/coredns:1.8.4</span>root@deploy:~<span class="token comment"># docker push harbor.chsblogs.local/baseimages/coredns:1.8.4</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.创建coredns</span>root@deploy:/k8s/dns/coredns<span class="token comment"># kubectl apply -f coredns_v1.8.4.yaml </span>serviceaccount/coredns createdclusterrole.rbac.authorization.k8s.io/system:coredns createdclusterrolebinding.rbac.authorization.k8s.io/system:coredns createdconfigmap/coredns createddeployment.apps/coredns createdservice/kube-dns createdNAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                  AGEdefault       kubernetes   ClusterIP   <span class="token number">172.20</span>.0.1   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>/TCP                  3h9mkube-system   kube-dns     ClusterIP   <span class="token number">172.20</span>.0.2   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">53</span>/UDP,53/TCP,9153/TCP   5m44sroot@deploy:/k8s/dns/coredns<span class="token comment"># kubectl get pod -A </span>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGEdefault       net-test1                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          154mdefault       net-test2                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          154mdefault       net-test3                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          154mkube-system   calico-kube-controllers-5bb6cdfb64-48l7s   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          167mkube-system   calico-node-4glbl                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          115mkube-system   calico-node-ggvcb                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          116mkube-system   calico-node-ld2gk                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          115mkube-system   calico-node-lqgtd                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          103mkube-system   calico-node-n274l                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          109mkube-system   calico-node-tvg4l                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          116mkube-system   calico-node-v7t2n                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          116mkube-system   coredns-b7db84f9f-b9699                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m54s<span class="token comment">#测试解析外网域名</span><span class="token punctuation">[</span>root@net-test1 /<span class="token punctuation">]</span><span class="token comment"># ping www.baidu.com</span>PING www.a.shifen.com <span class="token punctuation">(</span><span class="token number">36.152</span>.44.96<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">36.152</span>.44.96 <span class="token punctuation">(</span><span class="token number">36.152</span>.44.96<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">10.6</span> ms<span class="token number">64</span> bytes from <span class="token number">36.152</span>.44.96 <span class="token punctuation">(</span><span class="token number">36.152</span>.44.96<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">13.1</span> ms<span class="token number">64</span> bytes from <span class="token number">36.152</span>.44.96 <span class="token punctuation">(</span><span class="token number">36.152</span>.44.96<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">11.8</span> ms<span class="token number">64</span> bytes from <span class="token number">36.152</span>.44.96 <span class="token punctuation">(</span><span class="token number">36.152</span>.44.96<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">9.65</span> ms^C--- www.a.shifen.com <span class="token function">ping</span> statistics ---<span class="token number">4</span> packets transmitted, <span class="token number">4</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 3007msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">9.653</span>/11.329/13.166/1.312 ms</code></pre></div></figure><p><strong>增加coredns资源(cpu&#x2F;内存),增加coredns副本数：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#生产环境1个coredns可能存在解析慢的问题，增加副本数replicas: 3</span>root@deploy:/k8s/dns/coredns<span class="token comment"># vim coredns_v1.8.4.yaml</span>spec:  <span class="token comment"># replicas: not specified here:</span>  <span class="token comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span>  <span class="token comment"># 2. Default is 1.</span>  <span class="token comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span>  replicas: <span class="token number">3</span>  strategy:    type: RollingUpdate    rollingUpdate:      maxUnavailable: <span class="token number">1</span>      root@deploy:/k8s/dns/coredns<span class="token comment"># kubectl apply -f coredns_v1.8.4.yaml</span>serviceaccount/coredns unchangedclusterrole.rbac.authorization.k8s.io/system:coredns unchangedclusterrolebinding.rbac.authorization.k8s.io/system:coredns unchangedconfigmap/coredns unchangeddeployment.apps/coredns configuredservice/kube-dns unchangedroot@deploy:/k8s/dns/coredns<span class="token comment"># kubectl get pod -A </span>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGEdefault       net-test1                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          166mdefault       net-test2                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          166mdefault       net-test3                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          166mkube-system   calico-kube-controllers-5bb6cdfb64-48l7s   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          179mkube-system   calico-node-4glbl                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          127mkube-system   calico-node-ggvcb                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          127mkube-system   calico-node-ld2gk                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          127mkube-system   calico-node-lqgtd                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          115mkube-system   calico-node-n274l                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          121mkube-system   calico-node-tvg4l                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          128mkube-system   calico-node-v7t2n                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          128mkube-system   coredns-b7db84f9f-9dgwj                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18skube-system   coredns-b7db84f9f-b9699                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          14mkube-system   coredns-b7db84f9f-fk48m                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18s</code></pre></div></figure><h2 id="1-13-部署K8S-Web组件"><a href="#1-13-部署K8S-Web组件" class="headerlink" title="1.13 部署K8S Web组件"></a>1.13 部署K8S Web组件</h2><h3 id="1-13-1-部署dashboard"><a href="#1-13-1-部署dashboard" class="headerlink" title="1.13.1 部署dashboard"></a>1.13.1 部署dashboard</h3><p><a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">https://github.com/kubernetes/dashboard/releases/tag/v2.4.0<span class="token comment">#1.下载官方yaml文件</span>root@deploy:~<span class="token comment"># cd /k8s/</span>root@deploy:/k8s<span class="token comment"># mkdir dashboard</span>root@deploy:/k8s<span class="token comment"># cd dashboard/</span>root@deploy:/k8s/dashboard<span class="token comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml</span>root@deploy:/k8s/dashboard<span class="token comment"># mv recommended.yaml dashboard-2.4.0.yaml</span><span class="token comment">#2.下载镜像</span>root@deploy:/k8s/dashboard<span class="token comment"># docker pull kubernetesui/dashboard:v2.4.0</span>root@deploy:/k8s/dashboard<span class="token comment"># docker pull kubernetesui/metrics-scraper:v1.0.7</span><span class="token comment">#3.将镜像上传至harbor仓库</span>root@deploy:/k8s/dashboard<span class="token comment"># docker tag kubernetesui/dashboard:v2.4.0 harbor.chsblogs.local/baseimages/dashboard:v2.4.0</span>root@deploy:/k8s/dashboard<span class="token comment"># docker push harbor.chsblogs.local/baseimages/dashboard:v2.4.0</span>root@deploy:/k8s/dashboard<span class="token comment"># docker tag kubernetesui/metrics-scraper:v1.0.7 harbor.chsblogs.local/baseimages/metrics-scraper:v1.0.7</span>root@deploy:/k8s/dashboard<span class="token comment"># docker push harbor.chsblogs.local/baseimages/metrics-scraper:v1.0.7</span><span class="token comment">#4.修改ashboard-2.4.0.yaml</span>root@deploy:/k8s/dashboard<span class="token comment"># vim dashboard-2.4.0.yaml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>spec:  type: NodePort  ports:    - port: <span class="token number">443</span>      targetPort: <span class="token number">8443</span>      nodePort: <span class="token number">32000</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    spec:      containers:        - name: kubernetes-dashboard          image: harbor.chsblogs.local/baseimages/dashboard:v2.4.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>   spec:      securityContext:        seccompProfile:          type: RuntimeDefault      containers:        - name: dashboard-metrics-scraper          image: harbor.chsblogs.local/baseimages/metrics-scraper:v1.0.7<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#5.创建容器</span>root@deploy:/k8s/dashboard<span class="token comment"># kubectl apply -f dashboard-2.4.0.yaml</span><span class="token comment">#6.验证容器</span>root@deploy:/k8s/dashboard<span class="token comment"># kubectl get pod -A | grep kubernetes-dashboard</span>kubernetes-dashboard   dashboard-metrics-scraper-85c7b5b9bf-6ffs2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          15skubernetes-dashboard   kubernetes-dashboard-6c4c7dcdc-l8b75         <span class="token number">1</span>/1     Running   <span class="token number">0</span>          15s<span class="token comment">#7.验证宿主机是否监听32000端口，master和node节点都会监听</span>root@master1:~<span class="token comment"># ss -tnl | grep 32000</span>LISTEN  <span class="token number">0</span>        <span class="token number">32768</span>            <span class="token number">0.0</span>.0.0:32000          <span class="token number">0.0</span>.0.0:*root@node1:~<span class="token comment"># ss -tnl | grep 32000</span>LISTEN  <span class="token number">0</span>        <span class="token number">32768</span>            <span class="token number">0.0</span>.0.0:32000          <span class="token number">0.0</span>.0.0:*<span class="token comment">#8.访问测试</span>https://192.168.1.40:32000<span class="token comment">#9.创建用户</span>root@deploy:/k8s/dashboard<span class="token comment"># vim admin-user.yaml</span>apiVersion: v1kind: ServiceAccountmetadata:  name: admin-user  namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: admin-userroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: admin-user  namespace: kubernetes-dashboardroot@deploy:/k8s/dashboard<span class="token comment"># kubectl apply -f admin-user.yaml </span>serviceaccount/admin-user createdclusterrolebinding.rbac.authorization.k8s.io/admin-user created<span class="token comment">#10.获取登录token</span>root@deploy:/k8s/dashboard<span class="token comment"># kubectl get secret -A | grep admin</span>kubernetes-dashboard   admin-user-token-8thrc                           kubernetes.io/service-account-token   <span class="token number">3</span>      6sroot@deploy:/k8s/dashboard<span class="token comment"># kubectl describe secret admin-user-token-8thrc -n kubernetes-dashboard</span>Name:         admin-user-token-8thrcNamespace:    kubernetes-dashboardLabels:       <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:  kubernetes.io/service-account.name: admin-user              kubernetes.io/service-account.uid: 1e2f1838-df44-4481-a992-daf1ed257473Type:  kubernetes.io/service-account-tokenData<span class="token operator">==</span><span class="token operator">==</span>namespace:  <span class="token number">20</span> bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IktmaWZfcS1FRnFGYS1hMVhTVkF6SGlQVlVGQjJYQmJQU0xrS0VoY0trMEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTh0aHJjIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxZTJmMTgzOC1kZjQ0LTQ0ODEtYTk5Mi1kYWYxZWQyNTc0NzMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.grf7QMwvSDmMczsCan9cBBE-Fp6cW43jquJVnJmFzseLAs8tS0kMiXl8CkjhgoAaLW1hpjB5MDEtWCRbPJ4MpooMsDIa_Z9HdTcpBuRYLOlMd3cYPbcS0axgek0Gaxj647nLFa1SUiyqy6DWKJw1B_0RHeIzIqOYRlmuUTNXsB8zsCwyMpDqMxwcV1Pru0WeugorCCwme5qtuz8CpMiZESCUbt6wc3xJ3Q4DsARWfH_SeIiALZjtspyfUzaBllcM6eZEza1aBrY0waOuBUfPdHhGikgBllIrnRYcqqQEQnadLtsmkuAVRtV0TPWIMFZRJ2jdl_QayGSiT-IgHlo98Aca.crt:     <span class="token number">1350</span> bytes</code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502154313000.png" alt="image-20230502154313000"> </p><h3 id="1-13-2-部署rancher"><a href="#1-13-2-部署rancher" class="headerlink" title="1.13.2 部署rancher"></a>1.13.2 部署rancher</h3><p><a href="https://ranchermanager.docs.rancher.com/zh/v2.7">https://ranchermanager.docs.rancher.com/zh/v2.7</a></p><p><a href="https://www.rancher.com/quick-start">https://www.rancher.com/quick-start</a></p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502160542081.png" alt="image-20230502160542081"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装rancher</span>root@deploy:~<span class="token comment"># docker pull rancher/rancher</span>root@deploy:~<span class="token comment"># sudo docker run --privileged -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher</span><span class="token comment">#2.访问测试</span>https://192.168.1.39/root@deploy:~<span class="token comment"># docker  ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                      NAMESe86366447a45        rancher/rancher     <span class="token string">"entrypoint.sh"</span>     <span class="token number">3</span> minutes ago       Up <span class="token number">2</span> minutes        <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:443-<span class="token operator">></span><span class="token number">443</span>/tcp   reverent_montalciniroot@deploy:~<span class="token comment"># docker logs e86366447a45  2>&amp;1 | grep "Bootstrap Password:"</span><span class="token number">2023</span>/05/02 08:08:26 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Bootstrap Password: 4xzw6g86zwf86qr88ds2gbpq6hqn288rbznj2zbmj6clwr2cvgb9fn</code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502161048045.png" alt="image-20230502161048045"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502161305210.png"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502161654410.png" alt="image-20230502161654410"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502163853667.png" alt="image-20230502163853667"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502163913502.png" alt="image-20230502163913502"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502163952162.png" alt="image-20230502163952162"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># curl --insecure -sfL https://192.168.1.39/v3/import/m67rkzzk85bjz2j2j655j6tqc5xplr7ktbdgkpzffjd87kgpqqz8p4_c-m-vv4qf9bw.yaml | kubectl apply -f -clusterrole.rbac.authorization.k8s.io/proxy-clusterrole-kubeapiserver created</span>clusterrolebinding.rbac.authorization.k8s.io/proxy-role-binding-kubernetes-master creatednamespace/cattle-system createdserviceaccount/cattle createdclusterrolebinding.rbac.authorization.k8s.io/cattle-admin-binding createdsecret/cattle-credentials-e650b3d createdclusterrole.rbac.authorization.k8s.io/cattle-admin createddeployment.apps/cattle-cluster-agent createdservice/cattle-cluster-agent created</code></pre></div></figure><h3 id="1-13-3-部署kuboard"><a href="#1-13-3-部署kuboard" class="headerlink" title="1.13.3 部署kuboard"></a>1.13.3 部署kuboard</h3><p><a href="https://kuboard.cn/">https://kuboard.cn/</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># docker pull swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3</span>root@deploy:~<span class="token comment"># sudo docker run -d \</span><span class="token operator">></span>   <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">--name</span><span class="token operator">=</span>kuboard <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">-p</span> <span class="token number">80</span>:80/tcp <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">-p</span> <span class="token number">10081</span>:10081/tcp <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">KUBOARD_ENDPOINT</span><span class="token operator">=</span><span class="token string">"http://192.168.1.39:80"</span> <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">KUBOARD_AGENT_SERVER_TCP_PORT</span><span class="token operator">=</span><span class="token string">"10081"</span> <span class="token punctuation">\</span><span class="token operator">></span>   <span class="token parameter variable">-v</span> /root/kuboard-data:/data <span class="token punctuation">\</span><span class="token operator">></span>   swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3b2627d9cb853c10548f9df2403e262add548ba7a562c3a49a235e6a218ce8ee5<span class="token comment">#访问测试</span>http://192.168.1.39/用户名：admin密码：Kuboard123</code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes04/image-20230502170504365.png" alt="image-20230502170504365"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03).基于kubeadm工具部署K8S高可用集群</title>
    <link href="/2023/04/26/Container/Kubernetes/kubernetes03/"/>
    <url>/2023/04/26/Container/Kubernetes/kubernetes03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于kubeadm工具部署K8S高可用集群"><a href="#1-基于kubeadm工具部署K8S高可用集群" class="headerlink" title="1.基于kubeadm工具部署K8S高可用集群"></a>1.基于kubeadm工具部署K8S高可用集群</h1><h2 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h2><h3 id="1-1-1-主机清单"><a href="#1-1-1-主机清单" class="headerlink" title="1.1.1 主机清单"></a>1.1.1 主机清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>k8s-master1.chsblogs.com</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>K8s Master1</td><td></td></tr><tr><td>k8s-master2.chsblogs.com</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>K8s Master2</td><td></td></tr><tr><td>k8s-master3.chsblogs.com</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>K8s Master3</td><td></td></tr><tr><td>k8s-ha1.chsblogs.com</td><td>192.168.1.43</td><td>Ubuntu20.04</td><td>Haproxy1</td><td>192.168.1.66</td></tr><tr><td>k8s-ha2.chsblogs.com</td><td>192.168.1.44</td><td>Ubuntu20.04</td><td>Haproxy2</td><td>192.168.1.66</td></tr><tr><td>k8s-harbor1.chsblogs.com</td><td>192.168.1.45</td><td>Ubuntu20.04</td><td>Harbor1</td><td></td></tr><tr><td>k8s-node1.chsblogs.com</td><td>192.168.1.46</td><td>Ubuntu20.04</td><td>Node1</td><td></td></tr><tr><td>k8s-node2.chsblogs.com</td><td>192.168.1.47</td><td>Ubuntu20.04</td><td>Node2</td><td></td></tr><tr><td>k8s-node3.chsblogs.com</td><td>192.168.1.48</td><td>Ubuntu20.04</td><td>Node3</td><td></td></tr></tbody></table><h3 id="1-1-2-部署拓扑图"><a href="#1-1-2-部署拓扑图" class="headerlink" title="1.1.2 部署拓扑图"></a>1.1.2 部署拓扑图</h3><h3 id="1-1-3-关闭swap分区"><a href="#1-1-3-关闭swap分区" class="headerlink" title="1.1.3 关闭swap分区"></a>1.1.3 关闭swap分区</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ubuntu2004:~<span class="token comment"># vim /etc/fstab</span><span class="token comment">#/swap.img      none    swap    sw      0       0</span></code></pre></div></figure><h3 id="1-1-4-内核优化"><a href="#1-1-4-内核优化" class="headerlink" title="1.1.4 内核优化"></a>1.1.4 内核优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.系统资源限制优化</span><span class="token function">vim</span> /etc/security/limits.confroot soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span><span class="token comment">#2.内核参数优化</span><span class="token function">vim</span> /etc/sysctl.confnet.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_nonlocal_bind <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.conf.default.accept_source_route <span class="token operator">=</span> <span class="token number">0</span>kernel.sysrq <span class="token operator">=</span> <span class="token number">0</span>kernel.core_uses_pid <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">1</span>kernel.msgmnb <span class="token operator">=</span> <span class="token number">65536</span>kernel.msgmax <span class="token operator">=</span> <span class="token number">65536</span>kernel.shmmax <span class="token operator">=</span> <span class="token number">68719476736</span>kernel.shmall <span class="token operator">=</span> <span class="token number">4294967296</span>net.ipv4.tcp_mem <span class="token operator">=</span> <span class="token number">786432</span> <span class="token number">1048576</span> <span class="token number">1572864</span>net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">87380</span> <span class="token number">4194304</span>net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">16384</span> <span class="token number">4194304</span>net.ipv4.tcp_window_scaling <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_sack <span class="token operator">=</span> <span class="token number">1</span>net.core.wmem_default <span class="token operator">=</span> <span class="token number">8388608</span>net.core.rmem_default <span class="token operator">=</span> <span class="token number">8388608</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">16777216</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">16777216</span>net.core.netdev_max_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.core.somaxconn <span class="token operator">=</span> <span class="token number">20480</span>net.core.optmem_max <span class="token operator">=</span> <span class="token number">81920</span> net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.tcp_retries1 <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.tcp_retries2 <span class="token operator">=</span> <span class="token number">15</span>net.ipv4.tcp_timestamps <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">0</span> net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_max_tw_buckets <span class="token operator">=</span> <span class="token number">20000</span>net.ipv4.tcp_max_orphans <span class="token operator">=</span> <span class="token number">3276800</span>net.ipv4.tcp_synack_retries <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">300</span>net.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">30</span>net.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">3</span>net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">10001</span> <span class="token number">65000</span>vm.overcommit_memory <span class="token operator">=</span> <span class="token number">0</span>vm.swappiness <span class="token operator">=</span> <span class="token number">10</span>fs.file-max <span class="token operator">=</span> <span class="token number">1000000</span></code></pre></div></figure><h3 id="1-1-5-配置主机名"><a href="#1-1-5-配置主机名" class="headerlink" title="1.1.5 配置主机名"></a>1.1.5 配置主机名</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname k8s-master1.chsblogs.comhostnamectl set-hostname k8s-master2.chsblogs.comhostnamectl set-hostname k8s-master3.chsblogs.comhostnamectl set-hostname k8s-ha1.chsblogs.comhostnamectl set-hostname k8s-ha2.chsblogs.comhostnamectl set-hostname k8s-harbor1.chsblogs.comhostnamectl set-hostname k8s-node1.chsblogs.comhostnamectl set-hostname k8s-node2.chsblogs.comhostnamectl set-hostname k8s-node3.chsblogs.com</code></pre></div></figure><h2 id="1-2-安装配置Haproxy"><a href="#1-2-安装配置Haproxy" class="headerlink" title="1.2 安装配置Haproxy"></a>1.2 安装配置Haproxy</h2><p><strong>主机ha1【192.168.1.43】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@k8s-ha1:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@k8s-ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen k8s-apiserver-6443  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:6443  mode tcp  balance <span class="token builtin class-name">source</span>  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>        server <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.42:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@k8s-ha1:~<span class="token comment"># systemctl start haproxy                                                               </span>root@k8s-ha1:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@k8s-ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@k8s-ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@k8s-ha1:~<span class="token comment"># systemctl start keepalived</span>root@k8s-ha1:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><p><strong>主机ha2【192.168.1.44】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@k8s-ha2:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@k8s-ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen k8s-apiserver-6443  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:6443  mode tcp  balance <span class="token builtin class-name">source</span>  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>        server <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.42:6443 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@k8s-ha2:~<span class="token comment"># systemctl start haproxy                                                               </span>root@k8s-ha2:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@k8s-ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@k8s-ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@k8s-ha2:~<span class="token comment"># systemctl start keepalived</span>root@k8s-ha2:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><h2 id="1-3-安装Harbor"><a href="#1-3-安装Harbor" class="headerlink" title="1.3 安装Harbor"></a>1.3 安装Harbor</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装docker</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal docker-ce-cli<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal<span class="token comment">#2.安装Docker-Compose</span>root@k8s-harbor1:~<span class="token comment"># ll docker-compose </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">25722880</span> Apr <span class="token number">26</span> <span class="token number">21</span>:36 <span class="token function">docker-compose</span>root@k8s-harbor1:~<span class="token comment"># chmod +x /usr/local/bin/docker-compose</span><span class="token comment">#3.安装Harbor</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> harbor-offline-installer-v2.5.0.tgz<span class="token builtin class-name">cd</span> harbor/<span class="token function">cp</span> harbor.yml.tmpl harbor.yml<span class="token comment">#更改配置</span><span class="token function">vim</span> harbor.ymlhostname: harbor.chsblogs.com<span class="token comment">#https:</span>  <span class="token comment"># https port for harbor, default is 443</span>  <span class="token comment">#port: 443</span>  <span class="token comment"># The path of cert and key files for nginx</span>  <span class="token comment">#certificate: /your/certificate/path</span>  <span class="token comment">#private_key: /your/private/key/path</span>harbor_admin_password: <span class="token number">123456</span><span class="token comment">#安装harbor</span>./install.sh --with-trivy<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Step <span class="token number">5</span><span class="token punctuation">]</span>: starting Harbor <span class="token punctuation">..</span>.Creating network <span class="token string">"harbor_harbor"</span> with the default driverCreating harbor-log <span class="token punctuation">..</span>. donedpcCreating harbor-portal <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating redis         <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registryctl   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registry      <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-db     <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-core   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating nginx             <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-jobservice <span class="token punctuation">..</span>. <span class="token keyword">done</span>✔ ----Harbor has been installed and started successfully.----</code></pre></div></figure><p><strong>创建baseimages和chsblogs两个公开项目：</strong></p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes03/image-20230426214814190.png" alt="image-20230426214814190"> </p><h2 id="1-4-安装docker"><a href="#1-4-安装docker" class="headerlink" title="1.4 安装docker"></a>1.4 安装docker</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.master和node节点安装docker</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal docker-ce-cli<span class="token operator">=</span><span class="token number">5</span>:19.03.15~3-0~ubuntu-focal<span class="token comment">#2.master和node节点配置docker仓库</span><span class="token function">vim</span> /lib/systemd/system/docker.service<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock --insecure-registry harbor.chsblogs.com<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.master和node节点重启docker</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span class="token comment">#4.master和node节点配置hosts域名解析</span><span class="token function">vim</span> /etc/hosts<span class="token number">192.168</span>.1.45 harbor.chsblogs.com<span class="token comment">#5.测试登录harbor</span>root@k8s-master1:~<span class="token comment"># docker login harbor.chsblogs.com</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded</code></pre></div></figure><h2 id="1-5-安装kubeadm"><a href="#1-5-安装kubeadm" class="headerlink" title="1.5 安装kubeadm"></a>1.5 安装kubeadm</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.配置阿里源</span><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> apt-transport-https<span class="token function">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class="token operator">|</span> apt-key <span class="token function">add</span> - <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span>/etc/apt/sources.list.d/kubernetes.list</span>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF</span><span class="token function">apt-get</span> update<span class="token comment">#2.查看kubeadm版本</span>root@k8s-master1:~<span class="token comment"># apt-cache madison kubeadm</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>   kubeadm <span class="token operator">|</span>  <span class="token number">1.21</span>.2-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.21</span>.1-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.21</span>.0-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.15-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.14-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.13-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.12-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.11-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span> <span class="token number">1.20</span>.10-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.20</span>.9-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.20</span>.8-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.20</span>.7-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.20</span>.6-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages   kubeadm <span class="token operator">|</span>  <span class="token number">1.20</span>.5-00 <span class="token operator">|</span> https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.在master安装kubeadm，kubelet，kubectl</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.20</span>.14-00 <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.20</span>.14-00 <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.20</span>.14-00<span class="token comment">#4.在node节点安装kubeadm，kubelet</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.20</span>.14-00 <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.20</span>.14-00<span class="token comment">#5.安装完后kubelet会尝试启动，此时报错，因为k8s还没装</span>root@k8s-master1:~<span class="token comment"># vim /var/log/syslog</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Apr <span class="token number">26</span> <span class="token number">22</span>:23:23 k8s-master1 kubelet<span class="token punctuation">[</span><span class="token number">9018</span><span class="token punctuation">]</span>: F0426 <span class="token number">22</span>:23:23.313541    <span class="token number">9018</span> server.go:198<span class="token punctuation">]</span> failed to load Kubelet config <span class="token function">file</span> /var/lib/kubelet/config.yaml, error failed to <span class="token builtin class-name">read</span> kubelet config <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span>, error: <span class="token function">open</span> /var/lib/kubelet/config.yaml: no such <span class="token function">file</span> or directory<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><h2 id="1-6-kubeadm使用"><a href="#1-6-kubeadm使用" class="headerlink" title="1.6 kubeadm使用"></a>1.6 kubeadm使用</h2><h3 id="1-6-1-kubeadm命令"><a href="#1-6-1-kubeadm命令" class="headerlink" title="1.6.1 kubeadm命令"></a>1.6.1 kubeadm命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#kubeadm官方文档</span>https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/root@k8s-master1:~<span class="token comment"># kubeadm --help</span>Available Commands:  alpha       <span class="token comment">#kubeadm处于测试阶段的命令</span>  certs       <span class="token comment">#处理kubernetes证书</span>  completion  <span class="token comment">#bash命令补全，需要安装bash-completion</span>              <span class="token comment"># mkdir /data/script -p</span>              <span class="token comment"># kubeadm completion bash > /data/script/kubeadm_completion.sh</span>              <span class="token comment"># source /data/script/kubeadm_completion.sh</span>              <span class="token comment"># vim /etc/profile </span>              <span class="token comment"># source /data/script/kubeadm_completion.sh</span>  config      <span class="token comment">#管理kubeadm集群的配置，该配置保留在集群的ConfigMap中</span>              <span class="token comment"># kubeadm config print init-defaults</span>  <span class="token builtin class-name">help</span>        <span class="token comment">#帮助</span>  init        <span class="token comment">#初始化一个k8s控制平面</span>  <span class="token function">join</span>        <span class="token comment">#将节点加入到已经存在的k8s master</span>  reset       <span class="token comment">#还原使用kubeadm init或者kubeadm join对系统产生的环境变化。</span>  token       <span class="token comment">#管理token</span>  upgrade     <span class="token comment">#升级k8s版本</span>  version     <span class="token comment">#查看版本信息</span></code></pre></div></figure><p><strong>kubeadm init命令：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/root@k8s-master1:~<span class="token comment"># kubeadm init --help</span>Flags:      --apiserver-advertise-address string   <span class="token comment">#k8s api server将要监听的本机ip</span>      --apiserver-bind-port int32            <span class="token comment">#api server绑定的端口，默认6443</span>      --apiserver-cert-extra-sans strings    <span class="token comment">#可选的证书额外信息，用于指定api server的服务器证书。可以是ip地址或者dns名称。</span>      --cert-dir string                      <span class="token comment">#证书的存储路径，缺省路径为/etc/kubernetes/pki</span>      --certificate-key string               <span class="token comment">#定义一个用于加密kubeadm-certs secret中的控制平台证书的密钥。</span>      <span class="token parameter variable">--config</span> string                        <span class="token comment">#kubeadm配置文件路径</span>                                             <span class="token comment">#kubeadm config print init-defaults</span>      --control-plane-endpoint string        <span class="token comment">#为控制平台指定一个稳定的ip地址或dns名称，即配置一个可以长期使用且是高可用的vip或者域名，k8s多master高可用基于此参数实现。</span>      --cri-socket string                    <span class="token comment">#要连接的CRI套接字的路径，如果为空，则kubeadm将尝试自动检测此值，仅当安装了多个CRI或者具有非标准CRI插槽时，才使用此选项。</span>      --dry-run                              <span class="token comment">#不要应用任何更改，只是输出将要执行的操作，其实就是测试运行。</span>      --experimental-patches string          <span class="token comment">#</span>      --feature-gates string                 <span class="token comment">#</span>  -h, <span class="token parameter variable">--help</span>                                 <span class="token comment">#</span>      --ignore-preflight-errors strings      <span class="token comment">#可以忽略检查过程中出现的错误信息，比如忽略swap，如果为all就忽略所有。</span>      --image-repository string              <span class="token comment">#设置一个镜像仓库，默认为k8s.gcr.io</span>      --kubernetes-version string            <span class="token comment">#指定安装k8s版本，默认为stable-1</span>      --node-name string                     <span class="token comment">#指定node节点名称</span>      --pod-network-cidr string              <span class="token comment">#设置pod ip地址范围</span>      --service-cidr string                  <span class="token comment">#设置service网络地址范围</span>      --service-dns-domain string            <span class="token comment">#设置k8s内部域名，默认为cluster.local，会有相应的dns服务(kube-dns/coredns)解析生成的域名记录。</span>      --skip-certificate-key-print           <span class="token comment">#不打印用于加密的key信息</span>      --skip-phases strings                  <span class="token comment">#要跳过哪些阶段。</span>      --skip-token-print                     <span class="token comment">#跳过打印token信息</span>      <span class="token parameter variable">--token</span> string                         <span class="token comment">#指定token</span>      --token-ttl duration                   <span class="token comment">#指定token过期时间，默认为24小时，0为永不过期</span>      --upload-certs                         <span class="token comment">#更新证书。</span>Global Flags:                    <span class="token comment">#全局可选项</span>      --add-dir-header           <span class="token comment">#如果为true,在日志头部添加日志目录</span>      --log-file string          <span class="token comment">#如果不为空，将使用此日志文件</span>      --log-file-max-size uint   <span class="token comment">#设置日志文件的最大大小，单位兆，默认1800兆，0为没有限制</span>      --one-output               <span class="token comment">#</span>      <span class="token parameter variable">--rootfs</span> string            <span class="token comment">#宿主机的根路径，也就是绝对路径</span>      --skip-headers             <span class="token comment">#如果为true，在log日志里面不显示标题前缀。</span>      --skip-log-headers         <span class="token comment">#如果为true，在log日志里面不显示标题。</span>  -v, <span class="token parameter variable">--v</span> Level                  <span class="token comment">#日志级别。</span>Use <span class="token string">"kubeadm init [command] --help"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a command.<span class="token comment">#验证当前kubeadm版本</span>root@k8s-master1:~<span class="token comment">#  </span>root@k8s-master1:~<span class="token comment"># kubeadm version</span>kubeadm version: <span class="token operator">&amp;</span>version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"20"</span>, GitVersion:<span class="token string">"v1.20.14"</span>, GitCommit:<span class="token string">"57a3aa3f13699cf3db9c52d228c18db94fa81876"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2021-12-15T14:51:22Z"</span>, GoVersion:<span class="token string">"go1.15.15"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-6-2-准备镜像"><a href="#1-6-2-准备镜像" class="headerlink" title="1.6.2 准备镜像"></a>1.6.2 准备镜像</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.查看当前版本所需镜像</span>root@k8s-master1:~<span class="token comment"># kubeadm config images list --kubernetes-version v1.20.14</span>k8s.gcr.io/kube-apiserver:v1.20.14k8s.gcr.io/kube-controller-manager:v1.20.14k8s.gcr.io/kube-scheduler:v1.20.14k8s.gcr.io/kube-proxy:v1.20.14k8s.gcr.io/pause:3.2k8s.gcr.io/etcd:3.4.13-0k8s.gcr.io/coredns:1.7.0<span class="token comment">#2.下载镜像，建议提前在master节点下载镜像以减少安装等待时间，但是镜像默认使⽤Google的镜像仓库，所以国内⽆法直接下载，但是可以通过阿⾥云的镜像仓库把镜像先提前下载下来，可以避免后期因镜像下载异常⽽导致k8s部署异常。</span>root@k8s-master1:~<span class="token comment"># vim k8s-images-download.sh</span><span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.20.14<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.20.14<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.20.14<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.20.14<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0root@k8s-master1:~<span class="token comment"># bash k8s-images-download.sh</span><span class="token comment">#3.验证当前镜像</span>root@k8s-master1:~<span class="token comment"># docker images</span>REPOSITORY                                                                    TAG                 IMAGE ID            CREATED             SIZEregistry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy                v1.20.14            ec690d6bc684        <span class="token number">16</span> months ago       <span class="token number">99</span>.7MBregistry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager   v1.20.14            aea9b0bc2c0c        <span class="token number">16</span> months ago       116MBregistry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver            v1.20.14            a50752e7cbd3        <span class="token number">16</span> months ago       122MBregistry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler            v1.20.14            e419f64ebbc3        <span class="token number">16</span> months ago       <span class="token number">47</span>.3MBregistry.cn-hangzhou.aliyuncs.com/google_containers/etcd                      <span class="token number">3.4</span>.13-0            0369cf4303ff        <span class="token number">2</span> years ago         253MBregistry.cn-hangzhou.aliyuncs.com/google_containers/coredns                   <span class="token number">1.7</span>.0               bfe3a36ebd25        <span class="token number">2</span> years ago         <span class="token number">45</span>.2MBregistry.cn-hangzhou.aliyuncs.com/google_containers/pause                     <span class="token number">3.2</span>                 80d28bedfe5d        <span class="token number">3</span> years ago         683kB</code></pre></div></figure><h3 id="1-6-3-单master初始化"><a href="#1-6-3-单master初始化" class="headerlink" title="1.6.3 单master初始化"></a>1.6.3 单master初始化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s-master1:~<span class="token comment"># kubeadm init --apiserver-advertise-address=192.168.1.40 --apiserver-bind-port=6443 --kubernetes-version=v1.20.14 --pod-network-cidr=10.10.0.0/16 --service-cidr=10.20.0.0/16 --service-dns-domain=chsblogs.local --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --ignore-preflight-errors=swap</span><span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.20.14<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.chsblogs.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.20</span>.0.1 <span class="token number">192.168</span>.1.40<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"sa"</span> key and public key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"kubelet.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token builtin class-name">local</span> etcd <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>wait-control-plane<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="token string">"/etc/kubernetes/manifests"</span><span class="token builtin class-name">.</span> This can take up to 4m0s<span class="token punctuation">[</span>apiclient<span class="token punctuation">]</span> All control plane components are healthy after <span class="token number">19.006088</span> seconds<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>kubelet<span class="token punctuation">]</span> Creating a ConfigMap <span class="token string">"kubelet-config-1.20"</span> <span class="token keyword">in</span> namespace kube-system with the configuration <span class="token keyword">for</span> the kubelets <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Skipping phase. Please see --upload-certs<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master1.chsblogs.com as control-plane by adding the labels <span class="token string">"node-role.kubernetes.io/master=''"</span> and <span class="token string">"node-role.kubernetes.io/control-plane='' (deprecated)"</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master1.chsblogs.com as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span><span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Using token: ahkv05.rz9mq2wfwqaubxdb<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to get nodes<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="token keyword">in</span> order <span class="token keyword">for</span> nodes to get long term certificate credentials<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Creating the <span class="token string">"cluster-info"</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">"kube-public"</span> namespace<span class="token punctuation">[</span>kubelet-finalize<span class="token punctuation">]</span> Updating <span class="token string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configAlternatively, <span class="token keyword">if</span> you are the root user, you can run:  <span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.40:6443 <span class="token parameter variable">--token</span> ahkv05.rz9mq2wfwqaubxdb <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:fc40a8be3e15775105e236e6aeba11322011998313c30117a69cb1ddddfb0c68        root@k8s-master1:~<span class="token comment"># mkdir -p $HOME/.kube</span>root@k8s-master1:~<span class="token comment"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span>root@k8s-master1:~<span class="token comment"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span>root@k8s-master1:~<span class="token comment"># kubectl get node</span>NAME                       STATUS     ROLES                  AGE     VERSIONk8s-master1.chsblogs.com   NotReady   control-plane,master   5m19s   v1.20.14</code></pre></div></figure><h3 id="1-6-4-部署flannel网络组件"><a href="#1-6-4-部署flannel网络组件" class="headerlink" title="1.6.4 部署flannel网络组件"></a>1.6.4 部署flannel网络组件</h3><p>k8s支持的网络扩展：<a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/">https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/</a></p><p>flannel镜像下载地址：<a href="https://quay.io/repository/coreos/flannel?tab=tags">https://quay.io/repository/coreos/flannel?tab=tags</a></p><p>flannel的github地址：<a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.下载flannel的yml文件</span>root@k8s-master1:~<span class="token comment"># mkdir k8s</span>root@k8s-master1:~<span class="token comment"># cd k8s/</span>root@k8s-master1:~/k8s<span class="token comment"># wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span><span class="token comment">#2.更改镜像下载地址</span>root@k8s-master1:~/k8s<span class="token comment"># vim kube-flannel.yml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>          value: <span class="token string">"5000"</span>        image: quay.io/coreos/flannel:v0.14.0-rc1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        - <span class="token function">cp</span>        image: quay.io/coreos/flannel:v0.14.0-rc1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        net-conf.json: <span class="token operator">|</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"Network"</span><span class="token builtin class-name">:</span> <span class="token string">"10.10.0.0/16"</span>,      <span class="token string">"Backend"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"vxlan"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.下载flannel:v0.14.0-rc1镜像</span>root@k8s-master1:~/k8s<span class="token comment"># docker pull quay.io/coreos/flannel:v0.14.0-rc1</span><span class="token comment">#6.部署flannel网络组件</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl apply -f kube-flannel.yml</span>namespace/kube-flannel createdserviceaccount/flannel createdclusterrole.rbac.authorization.k8s.io/flannel createdclusterrolebinding.rbac.authorization.k8s.io/flannel createdconfigmap/kube-flannel-cfg createddaemonset.apps/kube-flannel-ds created<span class="token comment">#7.验证pod状态</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl get pod -A | grep kube-flannel</span>kube-flannel   kube-flannel-ds-bmnhz                              <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m27s<span class="token comment">#8.添加node节点，在node节点执行</span><span class="token comment">#kubeadm join 192.168.1.40:6443 --token ahkv05.rz9mq2wfwqaubxdb \</span><span class="token comment">#    --discovery-token-ca-cert-hash sha256:fc40a8be3e15775105e236e6aeba11322011998313c30117a69cb1ddddfb0c68</span>root@k8s-node1:~<span class="token comment"># kubeadm join 192.168.1.40:6443 --token ahkv05.rz9mq2wfwqaubxdb \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:fc40a8be3e15775105e236e6aeba11322011998313c30117a69cb1ddddfb0c68<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span class="token comment">#9.创建测试容器</span>root@k8s-master1:~<span class="token comment"># kubectl run test-pod1 --image=alpine sleep 888888</span>pod/test-pod1 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod2 --image=alpine sleep 888888</span>pod/test-pod2 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod3 --image=alpine sleep 888888</span>pod/test-pod3 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod4 --image=alpine sleep 888888</span>pod/test-pod4 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod5 --image=alpine sleep 888888</span>pod/test-pod5 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod6 --image=alpine sleep 888888</span>pod/test-pod6 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod7 --image=alpine sleep 888888</span>pod/test-pod7 createdroot@k8s-master1:~<span class="token comment"># kubectl run test-pod8 --image=alpine sleep 888888</span>pod/test-pod8 createdroot@k8s-master1:~/k8s<span class="token comment"># kubectl get pod -o wide</span>NAME        READY   STATUS    RESTARTS   AGE     IP          NODE                     NOMINATED NODE   READINESS GATEStest-pod1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m26s   <span class="token number">10.10</span>.1.2   k8s-node1.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod2   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m22s   <span class="token number">10.10</span>.2.2   k8s-node2.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod3   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m18s   <span class="token number">10.10</span>.2.3   k8s-node2.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m15s   <span class="token number">10.10</span>.1.3   k8s-node1.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod5   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m11s   <span class="token number">10.10</span>.1.4   k8s-node1.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m8s    <span class="token number">10.10</span>.2.4   k8s-node2.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod7   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m3s    <span class="token number">10.10</span>.2.5   k8s-node2.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>test-pod8   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m      <span class="token number">10.10</span>.1.5   k8s-node1.chsblogs.com   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token comment">#测试本地容器网络访问及跨主机容器网络访问</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl exec -it test-pod1 sh</span>kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead./ <span class="token comment"># ping 10.10.1.3</span>PING <span class="token number">10.10</span>.1.3 <span class="token punctuation">(</span><span class="token number">10.10</span>.1.3<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes<span class="token number">64</span> bytes from <span class="token number">10.10</span>.1.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.540</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.1.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.130</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.1.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.127</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.1.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.107</span> ms^C--- <span class="token number">10.10</span>.1.3 <span class="token function">ping</span> statistics ---<span class="token number">4</span> packets transmitted, <span class="token number">4</span> packets received, <span class="token number">0</span>% packet lossround-trip min/avg/max <span class="token operator">=</span> <span class="token number">0.107</span>/0.226/0.540 ms/ <span class="token comment"># ping 10.10.2.3</span>PING <span class="token number">10.10</span>.2.3 <span class="token punctuation">(</span><span class="token number">10.10</span>.2.3<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes<span class="token number">64</span> bytes from <span class="token number">10.10</span>.2.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">2.702</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.2.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">1.554</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.2.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">3.171</span> ms<span class="token number">64</span> bytes from <span class="token number">10.10</span>.2.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">62</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.601</span> ms^C--- <span class="token number">10.10</span>.2.3 <span class="token function">ping</span> statistics ---<span class="token number">4</span> packets transmitted, <span class="token number">4</span> packets received, <span class="token number">0</span>% packet lossround-trip min/avg/max <span class="token operator">=</span> <span class="token number">0.601</span>/2.007/3.171 ms</code></pre></div></figure><h3 id="1-6-5-高可用master初始化"><a href="#1-6-5-高可用master初始化" class="headerlink" title="1.6.5 高可用master初始化"></a>1.6.5 高可用master初始化</h3><p>基于keepalived实现高可用vip，通过haproxy实现kube-apiserver的反向代理，然后将对kube-apiserver的管理请求转发至多台k8s master以实现管理端高可用。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s-master1:~<span class="token comment"># kubeadm init --apiserver-advertise-address=192.168.1.40 --control-plane-endpoint=192.168.1.66 --apiserver-bind-port=6443 --kubernetes-version=v1.20.14 --pod-network-cidr=10.10.0.0/16 --service-cidr=10.20.0.0/16 --service-dns-domain=chsblogs.local --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --ignore-preflight-errors=swap</span><span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.20.14<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.chsblogs.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.20</span>.0.1 <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.66<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master1.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.40 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"sa"</span> key and public key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"kubelet.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token builtin class-name">local</span> etcd <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>wait-control-plane<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="token string">"/etc/kubernetes/manifests"</span><span class="token builtin class-name">.</span> This can take up to 4m0s<span class="token punctuation">[</span>apiclient<span class="token punctuation">]</span> All control plane components are healthy after <span class="token number">26.318472</span> seconds<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>kubelet<span class="token punctuation">]</span> Creating a ConfigMap <span class="token string">"kubelet-config-1.20"</span> <span class="token keyword">in</span> namespace kube-system with the configuration <span class="token keyword">for</span> the kubelets <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Skipping phase. Please see --upload-certs<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master1.chsblogs.com as control-plane by adding the labels <span class="token string">"node-role.kubernetes.io/master=''"</span> and <span class="token string">"node-role.kubernetes.io/control-plane='' (deprecated)"</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master1.chsblogs.com as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span><span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Using token: zgzkrs.9uq777ywq8se0dkz<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to get nodes<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="token keyword">in</span> order <span class="token keyword">for</span> nodes to get long term certificate credentials<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Creating the <span class="token string">"cluster-info"</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">"kube-public"</span> namespace<span class="token punctuation">[</span>kubelet-finalize<span class="token punctuation">]</span> Updating <span class="token string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configAlternatively, <span class="token keyword">if</span> you are the root user, you can run:  <span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now <span class="token function">join</span> any number of control-plane nodes by copying certificate authoritiesand <span class="token function">service</span> account keys on each <span class="token function">node</span> and <span class="token keyword">then</span> running the following as root:  kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.66:6443 <span class="token parameter variable">--token</span> zgzkrs.9uq777ywq8se0dkz <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d <span class="token punctuation">\</span>    --control-plane Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.66:6443 <span class="token parameter variable">--token</span> zgzkrs.9uq777ywq8se0dkz <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d</code></pre></div></figure><p><strong>基于文件初始化高可用master方式：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.将默认初始化配置输出至文件</span>root@k8s-master1:~<span class="token comment"># kubeadm config print init-defaults > kubeadm-init.yaml</span><span class="token comment">#2.修改初始化文件内容</span>root@k8s-master1:~<span class="token comment"># vim kubeadm-init.yaml</span>apiVersion: kubeadm.k8s.io/v1beta2bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: <span class="token number">192.168</span>.1.40  bindPort: <span class="token number">6443</span>nodeRegistration:  criSocket: /var/run/dockershim.sock  name: k8s-master1.chsblogs.com  taints:  - effect: NoSchedule    key: node-role.kubernetes.io/master---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrolPlaneEndpoint: <span class="token number">192.168</span>.1.66:6443controllerManager: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>dns:  type: CoreDNSetcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: v1.20.14networking:  dnsDomain: chsblogs.local  podSubnet: <span class="token number">10.10</span>.0.0/16  serviceSubnet: <span class="token number">10.20</span>.0.0/16scheduler: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">#3.基于文件执行k8s master初始化</span>root@k8s-master1:~<span class="token comment"># kubeadm init --config kubeadm-init.yaml</span></code></pre></div></figure><h3 id="1-6-6-扩展master节点"><a href="#1-6-6-扩展master节点" class="headerlink" title="1.6.6 扩展master节点"></a>1.6.6 扩展master节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.master生成证书用于添加新控制节点</span>root@k8s-master1:~<span class="token comment"># kubeadm init phase upload-certs --upload-certs </span>I0427 <span class="token number">21</span>:48:15.610766   <span class="token number">22265</span> version.go:254<span class="token punctuation">]</span> remote version is much newer: v1.27.1<span class="token punctuation">;</span> falling back to: stable-1.20<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Storing the certificates <span class="token keyword">in</span> Secret <span class="token string">"kubeadm-certs"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Using certificate key:f69e59eda9eb56cc2f6660515da221ca907ee1d1097e97c1c1b3a6b05ee3f56f<span class="token comment">#2.添加master节点2</span><span class="token comment">#kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token comment">#    --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d \</span><span class="token comment">#    --control-plane --certificate-key \</span><span class="token comment">#    f69e59eda9eb56cc2f6660515da221ca907ee1d1097e97c1c1b3a6b05ee3f56f</span>root@k8s-master2:~<span class="token comment"># kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d <span class="token punctuation">\</span><span class="token operator">></span>     --control-plane --certificate-key f69e59eda9eb56cc2f6660515da221ca907ee1d1097e97c1c1b3a6b05ee3f56f<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks before initializing the new control plane instance<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>download-certs<span class="token punctuation">]</span> Downloading the certificates <span class="token keyword">in</span> Secret <span class="token string">"kubeadm-certs"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master2.chsblogs.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.chsblogs.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.20</span>.0.1 <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.66<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master2.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master2.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.41 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Valid certificates and keys now exist <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using the existing <span class="token string">"sa"</span> key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Generating kubeconfig files<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>check-etcd<span class="token punctuation">]</span> Checking that the etcd cluster is healthy<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.<span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Announced new etcd member joining to the existing etcd cluster<span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"etcd"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the new etcd member to <span class="token function">join</span> the cluster. This can take up to 40s<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master2.chsblogs.com as control-plane by adding the labels <span class="token string">"node-role.kubernetes.io/master=''"</span> and <span class="token string">"node-role.kubernetes.io/control-plane='' (deprecated)"</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master2.chsblogs.com as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span>This <span class="token function">node</span> has joined the cluster and a new control plane instance was created:* Certificate signing request was sent to apiserver and approval was received.* The Kubelet was informed of the new secure connection details.* Control plane <span class="token punctuation">(</span>master<span class="token punctuation">)</span> label and taint were applied to the new node.* The Kubernetes control plane instances scaled up.* A new etcd member was added to the local/stacked etcd cluster.To start administering your cluster from this node, you need to run the following as a regular user:<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configRun <span class="token string">'kubectl get nodes'</span> to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span class="token comment">#3.添加master节点3</span>root@k8s-master3:~<span class="token comment"># kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d <span class="token punctuation">\</span><span class="token operator">></span>     --control-plane --certificate-key f69e59eda9eb56cc2f6660515da221ca907ee1d1097e97c1c1b3a6b05ee3f56f<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks before initializing the new control plane instance<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>download-certs<span class="token punctuation">]</span> Downloading the certificates <span class="token keyword">in</span> Secret <span class="token string">"kubeadm-certs"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master3.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master3.chsblogs.com localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.1.42 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>k8s-master3.chsblogs.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.chsblogs.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.20</span>.0.1 <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.66<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Valid certificates and keys now exist <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using the existing <span class="token string">"sa"</span> key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Generating kubeconfig files<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>check-etcd<span class="token punctuation">]</span> Checking that the etcd cluster is healthy<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.<span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Announced new etcd member joining to the existing etcd cluster<span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"etcd"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the new etcd member to <span class="token function">join</span> the cluster. This can take up to 40s<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master3.chsblogs.com as control-plane by adding the labels <span class="token string">"node-role.kubernetes.io/master=''"</span> and <span class="token string">"node-role.kubernetes.io/control-plane='' (deprecated)"</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> k8s-master3.chsblogs.com as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span>This <span class="token function">node</span> has joined the cluster and a new control plane instance was created:* Certificate signing request was sent to apiserver and approval was received.* The Kubelet was informed of the new secure connection details.* Control plane <span class="token punctuation">(</span>master<span class="token punctuation">)</span> label and taint were applied to the new node.* The Kubernetes control plane instances scaled up.* A new etcd member was added to the local/stacked etcd cluster.To start administering your cluster from this node, you need to run the following as a regular user:<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configRun <span class="token string">'kubectl get nodes'</span> to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.</code></pre></div></figure><h3 id="1-6-7-添加node节点"><a href="#1-6-7-添加node节点" class="headerlink" title="1.6.7 添加node节点"></a>1.6.7 添加node节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token comment">#    --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d</span><span class="token comment">#添加node1节点</span>root@k8s-node1:~<span class="token comment"># kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span class="token comment">#添加node2节点</span>root@k8s-node2:~<span class="token comment"># kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span class="token comment">#添加node3节点</span>root@k8s-node3:~<span class="token comment"># kubeadm join 192.168.1.66:6443 --token zgzkrs.9uq777ywq8se0dkz \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:b69d2c597b334ef3c42fcdb0ca274052e04e7617bbe964b0b0e1036b91261b5d<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.</code></pre></div></figure><p>查看状态：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Init:ImagePullBackOff因网络问题镜像拉取失败，可以手动去拉镜像</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl get pod -n kube-flannel</span>NAME                    READY   STATUS                  RESTARTS   AGEkube-flannel-ds-5fn4t   <span class="token number">1</span>/1     Running                 <span class="token number">0</span>          20mkube-flannel-ds-6bqs9   <span class="token number">1</span>/1     Running                 <span class="token number">0</span>          15mkube-flannel-ds-8jcv8   <span class="token number">1</span>/1     Running                 <span class="token number">0</span>          40mkube-flannel-ds-h8gng   <span class="token number">0</span>/1     Init:ImagePullBackOff   <span class="token number">0</span>          17mkube-flannel-ds-mb8d4   <span class="token number">1</span>/1     Running                 <span class="token number">0</span>          16mkube-flannel-ds-wnss8   <span class="token number">1</span>/1     Running                 <span class="token number">0</span>          19m</code></pre></div></figure><h2 id="1-7-部署dashboard"><a href="#1-7-部署dashboard" class="headerlink" title="1.7 部署dashboard"></a>1.7 部署dashboard</h2><p><a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">https://github.com/kubernetes/dashboard/releases/tag/v2.4.0<span class="token comment">#1.下载官方yaml文件</span>root@k8s-master1:~/k8s<span class="token comment"># wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml</span>root@k8s-master1:~/k8s<span class="token comment"># mv recommended.yaml dashboard-2.4.0.yaml</span><span class="token comment">#2.下载镜像</span>root@k8s-master1:~<span class="token comment"># docker pull kubernetesui/dashboard:v2.4.0</span>root@k8s-master1:~<span class="token comment"># docker pull kubernetesui/metrics-scraper:v1.0.7</span><span class="token comment">#3.将镜像上传至harbor仓库</span>root@k8s-master1:~<span class="token comment"># docker tag kubernetesui/dashboard:v2.4.0 harbor.chsblogs.com/baseimages/dashboard:v2.4.0</span>root@k8s-master1:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/dashboard:v2.4.0</span>root@k8s-master1:~<span class="token comment"># docker tag kubernetesui/metrics-scraper:v1.0.7 harbor.chsblogs.com/baseimages/metrics-scraper:v1.0.7</span>root@k8s-master1:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/metrics-scraper:v1.0.7</span><span class="token comment">#4.修改ashboard-2.4.0.yaml</span>root@k8s-master1:~/k8s<span class="token comment"># vim dashboard-2.4.0.yaml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>spec:  type: NodePort  ports:    - port: <span class="token number">443</span>      targetPort: <span class="token number">8443</span>      nodePort: <span class="token number">32000</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    spec:      containers:        - name: kubernetes-dashboard          image: harbor.chsblogs.com/baseimages/dashboard:v2.4.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>   spec:      securityContext:        seccompProfile:          type: RuntimeDefault      containers:        - name: dashboard-metrics-scraper          image: harbor.chsblogs.com/baseimages/metrics-scraper:v1.0.7<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#5.创建容器</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl apply -f dashboard-2.4.0.yaml</span><span class="token comment">#6.验证容器</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl get pod -A | grep kubernetes-dashboard</span>kubernetes-dashboard   dashboard-metrics-scraper-7f5b4d9ff-gtjhq          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37skubernetes-dashboard   kubernetes-dashboard-5b7657f8d9-jfm7p              <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37s<span class="token comment">#7.验证宿主机是否监听32000端口，master和node节点都会监听</span>root@k8s-master1:~<span class="token comment"># ss -tnl | grep 32000</span>LISTEN  <span class="token number">0</span>        <span class="token number">20480</span>            <span class="token number">0.0</span>.0.0:32000          <span class="token number">0.0</span>.0.0:*root@k8s-node1:/etc/docker<span class="token comment"># ss -tnl | grep 32000</span>LISTEN  <span class="token number">0</span>        <span class="token number">20480</span>            <span class="token number">0.0</span>.0.0:32000          <span class="token number">0.0</span>.0.0:*<span class="token comment">#8.访问测试</span>https://192.168.1.40:32000<span class="token comment">#9.创建用户</span>root@k8s-master1:~/k8s<span class="token comment"># vim admin-user.yaml</span>apiVersion: v1kind: ServiceAccountmetadata:  name: admin-user  namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: admin-userroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: admin-user  namespace: kubernetes-dashboardroot@k8s-master1:~/k8s<span class="token comment"># kubectl apply -f admin-user.yaml </span>serviceaccount/admin-user createdclusterrolebinding.rbac.authorization.k8s.io/admin-user created<span class="token comment">#10.获取登录token</span>root@k8s-master1:~/k8s<span class="token comment"># kubectl get secret -A | grep admin</span>kubernetes-dashboard   admin-user-token-s79qn                           kubernetes.io/service-account-token   <span class="token number">3</span>      115sroot@k8s-master1:~/k8s<span class="token comment"># kubectl describe secret admin-user-token-s79qn -n kubernetes-dashboard</span>Name:         admin-user-token-s79qnNamespace:    kubernetes-dashboardLabels:       <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:  kubernetes.io/service-account.name: admin-user              kubernetes.io/service-account.uid: 6ab3de89-a65b-436b-9946-928ab434217bType:  kubernetes.io/service-account-tokenData<span class="token operator">==</span><span class="token operator">==</span>ca.crt:     <span class="token number">1066</span> bytesnamespace:  <span class="token number">20</span> bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IndZbkNhaFdHZnR5blRqLXBWTjRyVHVwQ28zejdXZEpzMVZJS2dwb2FZajQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXM3OXFuIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI2YWIzZGU4OS1hNjViLTQzNmItOTk0Ni05MjhhYjQzNDIxN2IiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.k9j_8hNzUH6foL9LjMayxmO3vvF1plRoqoBbQTYi7vo2Sn5qtMlJotHJuoVdtjRybqsfc4JAfm-hkzuybk0e1AiHVhQvlz5KpoVzPzwHokWpguVyfX31RtkM2x1DmeO7rJXxcuACgUjL_hLFKe9voL49aOcPnFgK4gZf9pAgmNjkCVA0rcPVqtXWnSiu5mBzz4Z8r27xSZfb8YEOPMnkFzgPUU7k5gMZs-uwjHqtq4xuceouh5rHGzuwrqc2lxVRX1qy8t0m2ZDeoCucI0tswtyFPk-hR0GtmMtr8ZBprVvJbqTC1mWrmtYQ7ZP-00hA2FCH602EeF7I6EPS7n2MBw</code></pre></div></figure><p><img src="/2023/04/26/Container/Kubernetes/kubernetes03/image-20230427225417813.png" alt="image-20230427225417813"> </p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes03/image-20230427230823479.png" alt="image-20230427230823479"> </p><h2 id="1-8-测试运行Nginx-Tomcat"><a href="#1-8-测试运行Nginx-Tomcat" class="headerlink" title="1.8 测试运行Nginx+Tomcat"></a>1.8 测试运行Nginx+Tomcat</h2><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/</a></p><h3 id="1-8-1-运行Nginx"><a href="#1-8-1-运行Nginx" class="headerlink" title="1.8.1 运行Nginx"></a>1.8.1 运行Nginx</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s-master1:~/k8s<span class="token comment"># vim nginx.yml</span>apiVersion: apps/v1kind: Deploymentmetadata:  namespace: default  name: nginx-deployment  labels:    app: nginxspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: nginx  template:    metadata:      labels:        app: nginx    spec:      containers:      - name: nginx        image: nginx:1.18.0        ports:        - containerPort: <span class="token number">80</span>---kind: ServiceapiVersion: v1metadata:  labels:    app: test-nginx-service-label  name: test-nginx-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">80</span>    nodePort: <span class="token number">30004</span>  selector:    app: nginxroot@k8s-master1:~/k8s<span class="token comment"># kubectl apply -f nginx.yml </span>deployment.apps/nginx-deployment createdservice/test-nginx-service createdroot@k8s-master1:~/k8s<span class="token comment"># kubectl get pod</span>NAME                                READY   STATUS    RESTARTS   AGEnginx-deployment-67dfd6c8f9-5psp5   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          46sroot@k8s-master1:~/k8s<span class="token comment"># kubectl get service</span>NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGEkubernetes            ClusterIP   <span class="token number">10.20</span>.0.1       <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>/TCP        158mtest-nginx-service    NodePort    <span class="token number">10.20</span>.60.32     <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30004/TCP   34mtest-tomcat-service   NodePort    <span class="token number">10.20</span>.112.177   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30005/TCP   23mroot@k8s-master1:~/k8s<span class="token comment"># kubectl get ep</span>NAME                  ENDPOINTS                                               AGEkubernetes            <span class="token number">192.168</span>.1.40:6443,192.168.1.41:6443,192.168.1.42:6443   158mtest-nginx-service    <span class="token number">10.10</span>.3.5:80                                            34mtest-tomcat-service   <span class="token number">10.10</span>.4.5:8080                                          23m<span class="token comment">#进入nginx容器生成静态文件</span>root@nginx-deployment-67dfd6c8f9-tm2nd:/usr/share/nginx/html<span class="token comment"># wget http://192.168.1.200:4000/img/default.jpg</span><span class="token comment">#配置nginx将动态文件转发给tomcat处理</span>root@nginx-deployment-67dfd6c8f9-tm2nd:/<span class="token comment"># cd /etc/nginx/conf.d/</span>root@nginx-deployment-67dfd6c8f9-tm2nd:/etc/nginx/conf.d<span class="token comment"># vim default.conf</span>upstream chsblogs-host <span class="token punctuation">&#123;</span>  server test-tomcat-service<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    location /chsblogs <span class="token punctuation">&#123;</span>      proxy_pass http://chsblogs-host<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>将nginx副本扩展至2个：</strong></p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes03/image-20230428000416279.png" alt="image-20230428000416279"> </p><h3 id="1-8-2-运行Tomcat"><a href="#1-8-2-运行Tomcat" class="headerlink" title="1.8.2 运行Tomcat"></a>1.8.2 运行Tomcat</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s-master1:~/k8s<span class="token comment"># vim tomcat.yml</span>apiVersion: apps/v1kind: Deploymentmetadata:  namespace: default  name: tomcat-deployment  labels:    app: tomcatspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: tomcat  template:    metadata:      labels:        app: tomcat    spec:      containers:      - name: tomcat        image: tomcat        ports:        - containerPort: <span class="token number">8080</span>---kind: ServiceapiVersion: v1metadata:  labels:    app: test-tomcat-service-label  name: test-tomcat-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: <span class="token number">80</span>    protocol: TCP    targetPort: <span class="token number">8080</span>    nodePort: <span class="token number">30005</span>  selector:    app: tomcatroot@k8s-master1:~/k8s<span class="token comment"># kubectl apply -f tomcat.yml </span>deployment.apps/tomcat-deployment createdservice/test-tomcat-service createdroot@k8s-master1:~/k8s<span class="token comment"># kubectl get pod | grep tomcat</span>tomcat-deployment-6c44f58b47-mwckk   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          58s<span class="token comment">#进入tomcat容器生成测试页面</span>root@tomcat-deployment-6c44f58b47-mwckk:~<span class="token comment"># cd /usr/local/tomcat/webapps</span>root@tomcat-deployment-6c44f58b47-mwckk:/usr/local/tomcat/webapps<span class="token comment"># mkdir chsblogs</span>root@tomcat-deployment-6c44f58b47-mwckk:/usr/local/tomcat/webapps<span class="token comment"># cd chsblogs/</span>root@tomcat-deployment-6c44f58b47-mwckk:/usr/local/tomcat/webapps/chsblogs<span class="token comment"># echo "www.chsblogs.com" > index.jsp</span></code></pre></div></figure><p><strong>将tomcat副本扩展至2个：</strong></p><p><img src="/2023/04/26/Container/Kubernetes/kubernetes03/image-20230428000523903.png" alt="image-20230428000523903"> </p><h3 id="1-8-3-访问测试"><a href="#1-8-3-访问测试" class="headerlink" title="1.8.3 访问测试"></a>1.8.3 访问测试</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#静态文件</span>http://192.168.1.40:30004/default.jpg<span class="token comment">#动态文件</span>http://192.168.1.40:30004/chsblogs/index.jsp</code></pre></div></figure><p><strong>通过负载均衡器调度：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s-ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen chsblogs-80  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode tcp  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:30004 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:30004 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.42 <span class="token number">192.168</span>.1.42:30004 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#访问测试</span>http://192.168.1.66/default.jpghttp://192.168.1.66/chsblogs/index.jsp</code></pre></div></figure><h2 id="1-9-K8S版本升级"><a href="#1-9-K8S版本升级" class="headerlink" title="1.9 K8S版本升级"></a>1.9 K8S版本升级</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02).基于手动二进制部署K8S高可用集群</title>
    <link href="/2023/04/26/Container/Kubernetes/kubernetes02/"/>
    <url>/2023/04/26/Container/Kubernetes/kubernetes02/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01).K8S核心组件介绍</title>
    <link href="/2023/04/25/Container/Kubernetes/kubernetes01/"/>
    <url>/2023/04/25/Container/Kubernetes/kubernetes01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-云原生简介"><a href="#1-云原生简介" class="headerlink" title="1.云原生简介"></a>1.云原生简介</h1><h2 id="1-1-CNCF简介"><a href="#1-1-CNCF简介" class="headerlink" title="1.1 CNCF简介"></a>1.1 CNCF简介</h2><p><strong>官网：</strong><a href="https://www.cncf.io/">https://www.cncf.io/</a></p><p>CNCF，英文全称为Cloud Native Computing Foundation，中文译为“云原生计算基金会”。成立于2015年12月11日。</p><p>CNCF基于著名的鸿沟理论开展项目管理，将项目分为沙盒项目(Sandbox)、孵化项目(Incubating)、毕业项目(Graduated)。基于该理论，CNCF技术监督委员会制定了严格的项目管理制度和项目毕业标准，保证毕业的项目具有采用率、健康的变化率以及来自多个组织的提交人等。</p><p>发展历程：</p><p>2004年，Google已在内部大规模的使用容器技术。</p><p>2008年，Google将Cgroups合并进入了Linux内核。</p><p>2013年，Docker项目正式发布。</p><p>2014年，kubernetes项目正式发布。</p><p>2015年，由Google、Redhat 以及微软等大型云计算厂商以及一些开源公司共同牵头成立了CNCF(Cloud Native Computing Foundation)云原生计算基金会。 </p><p>2017年，CNCF达到170个成员和14个基金项目。</p><p>2018年，CNCF成立三周年有了195个成员，19个基金会项目和11个孵化项目。</p><p>2022年，全球187国家、820+企业成员、130+项目、16万以上开发者。</p><p><strong>云原生定义：</strong></p><p>云原生(Cloud Native)是一种构建和运行应用程序的方法，是一套技术体系和方法论，方便企业快速运行应用程序，企业不需要将人效用于放在底层运行环境，而是主要聚焦在业务层功能开发，从而实现产品快速交付、迭代以及稳定性，降低整体成本支出并提高交付效率。</p><h2 id="1-2-CNCF云原生全景图"><a href="#1-2-CNCF云原生全景图" class="headerlink" title="1.2 CNCF云原生全景图"></a>1.2 CNCF云原生全景图</h2><p>CNCF Landscape路线图从实践步骤上帮助用户梳理了整个云原生应用的最佳流程。然而整个实践过程中的每个环节，用户都需要了解有哪些具体的软件和产品选择。</p><p><a href="https://landscape.cncf.io/">https://landscape.cncf.io/</a></p><ul><li><strong>Special</strong></li></ul><p>图中最底层是Cloud（公有云，包括AWS、Google、Azure、Ali、Baidu、Tencent等）以及Kubernetes认证的服务提供商（主要是私有云，包括谐云、灵雀云、博云、才云、DaoCloud、Rancher等提供商）</p><ul><li><p><strong>Provisioning</strong></p><p>有了物理机或虚拟机后，在运行容器化服务之前，需要为容器准备标准化的基础环境，这就是Provisioning这一层的作用。在Provisioning这一层中，分为以下几个功能组成模块：</p><ul><li><p><strong>Automation &amp; Configuration：</strong>用于自动化部署和配置容器运行平台和环境，代表工具和厂商包括Ansible、Chef、Puppet、VMware、OpenStack。</p></li><li><p><strong>Container Registry：</strong>容器镜像库是整个CNCF云原生中的核心部件之一，因为基于容器的运行环境中，所有的应用都需要借助容器镜像库来进行安装和部署。容器镜像库又分为公有和私有，公有的容器镜像库包括docker官方的registry，AWS的Elastic Container Registry，Google的Container Registry等。在私有镜像库中，VMware中国团队主导的Harbor得到了广泛的应用，大量的容器平台目前都基于Harbor构建其镜像仓库。</p></li><li><p><strong>Security &amp; Compliance：</strong>Notary和TUF（The Upgrade Framework）是这个领域两个主要的项目，其中TUF是一个开源的安全标准，Notary是其中一个实现。Notary软件除了确保软件的出处外，它还能保证在未经容器镜像提供者批准的情况下，不会在镜像供应链的任何地方修改镜像内的内容，从而确保从开发到运营的过程中，安全都被无缝统一地嵌入到整个工作流中。</p></li><li><p><strong>Key Management：</strong>主要用于在整个容器平台中进行秘钥管理。</p></li></ul></li><li><p><strong>Runtime</strong></p><p>这一层可以理解为容器的整个运行环境，是云原生中最核心的部分，它包括了计算、存储、网络三大块</p><ul><li><strong>Cloud Native Storage：</strong>起初，容器为无状态的运行单元，容器最上一层文件系统无法保存其在运行时写入的文件或数据，容器重建或重启后，这些写入的数据将丢失。但随着数据库、消息队列等中间件逐步在容器环境中得到应用，如今用户对容器持久化存储的理解和需求也更加深入和迫切。</li><li><strong>Container Runtime：</strong>Docker是最广为人知的容器运行环境，但生产环境下也有一些其他的容器环境在运行。Containerd是满足OCI规范的核心容器运行时，从设计上就是为了嵌入大型系统的。它由Docker Inc公司启动，并且在2017年3月份捐赠给了CNCF。此外，CoreOS的RKT是一个用于在Linux上运行应用程序容器的CLI，也可以作为安全、可组合和基于标准的容器虚拟化运行环境。</li><li><strong>Cloud Native Network：</strong>网络历来是虚拟化技术中最灵活多变的部分，目前，大多数客户使用的主要包括Calico、Flannel、Open vSwitch等方案。</li></ul></li><li><p><strong>Orchestration &amp; Management</strong></p><p>这一层主要负责容器平台的编排和调度，包括服务的发现和治理，远程调用，服务代理，微服务治理等组件，包括：</p><ul><li><strong>Scheduling &amp; Orchestration：</strong>在这个领域，Kubernetes是当仁不让的头号玩家，目前基于Kubernetes的容器生态得到了迅速发展。其它的编排工具还包括Mesos、Docker Swarm等。</li><li><strong>Coordination &amp; Service Discovery</strong>：分布式计算中很重要的一点就是各个服务之间的协同以及服务发现（或节点发现的问题），从老牌的Zookeeper到近年来在很多互联网厂商和应用中流行的Consul（Docker Swarm默认使用），都可以用于分布式服务的发现和配置，Kubernetes默认使用的则是CoreOS旗下的Etcd。</li><li><strong>Remote Procedure Call</strong>：微服务间进行通信，通常有两种方式，其一为HTTP REST-JSON的方式，另一种为RPC 方式，相比起来RPC方式效率更高。常用的包括 Google 开源的 GRPC 、apache 旗下的 thrift 框架、Netflix 开源的自带负载均衡的 ribbon 和 avra 数据序列化框架。</li><li>Service Proxy：</li><li>API Gateway：</li><li>Service Mesh：</li></ul></li><li><p><strong>App Definition and Development</strong></p></li></ul><p>这一层就是容器平台上运行的具体应用和工具了，可以理解为容器平台的应用商店。根据应用的不同作用的使用场景，可以大致分为以下几种类型：数据库（例如MySQL、MariaDB、mongoDB、PostgreSQL、Cassandra、TiDB等）、流处理和消息队列（例如Spark、Storm、RocketMQ、Kafka、RabbitMQ等）、应用和镜像制作（用于将应用封装成标准镜像，使应用能在标准的容器平台上运行，例如Helm、Docker Composer、Packer等）、CI&#x2F;CD（最常见的Jenkins、Atlassian公司开发的Bamboo等）。</p><ul><li><strong>Platform</strong></li></ul><p>从横向上看，整个云原生还包括众多的经过认证的平台供应商。</p><ul><li><strong>Observability and Analysis</strong></li></ul><p>这个部分包含了大量用于对平台进行监控（Prometheus、Nagios、Grafana、Zabbix等）、日志（Fluentd、ElasticSearch、Logstash）、以及追踪（Jaeger）的工具。</p><h1 id="2-K8S核心组件介绍"><a href="#2-K8S核心组件介绍" class="headerlink" title="2.K8S核心组件介绍"></a>2.K8S核心组件介绍</h1><p>kubernetes官网：</p><p><a href="https://kubernetes.io/zh-cn/">https://kubernetes.io/zh-cn/</a></p><p>kubernetes github开源项目：</p><p><a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></p><p><img src="/2023/04/25/Container/Kubernetes/kubernetes01/image-20230426193632453.png" alt="image-20230426193632453"> </p><ul><li><strong>kube-apiserver：</strong>Kubernetes API 服务器验证并配置 API 对象的数据， 这些对象包括 pods、services、replicationcontrollers 等。 API 服务器为 REST 操作提供服务，并为集群的共享状态提供前端， 所有其他组件都通过该前端进行交互。</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/</a></p><ul><li><strong>kube-scheduler：</strong>是Kubernetes的pod调度器，负责将Pods指派到合法的节点上，调度器基于约束和可用资源为调度队列中每个Pod确定其可合法放置的节点，调度器是一个拥有丰富策略，能够感知拓扑变化，支持特定负载的功能组件，调度器需要考虑独立的和集体的资源需求，服务质量需求，硬件&#x2F;软件&#x2F;策略限制，亲和与反亲和规范等需求。</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-scheduler/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-scheduler/</a></p><ul><li><p><strong>kube-controller-manager：</strong>作为集群内部的管理控制中心，负责集群的Node Pod副本，服务端点(Endpoint)，命名空间(Namespace)，服务账号(ServiceAccount)，资源定额(ResourceQuota)的管理，当某个Node意外宕机时，Controller-manager会及时发现并执行自动化修复流程，确保集群中的Pod副本始终处于预期的工作状态。</p></li><li><p><strong>kube-proxy：</strong>k8s网络代理运行在Node上，它反映了Node上k8s API中定义的服务，并可以通过一组后端进行简单的TCP、UDP和SCTP流转发或者在一组后端进行循环TCP、UDP和SCTP转发，用户必须使用apiserver API创建一个服务来配置代理，其实就是kube-proxy通过在主机上维护网络规则并执行连接转发来实现k8s服务访问。</p></li></ul><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-proxy/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-proxy/</a></p><ul><li><strong>kubelet：</strong>是运行在每个worker节点的代理组件，它会监视已经分配给节点的Pod，具体功能有向Master汇报Node节点状态信息，接受指令并在Pod中创建容器，准备Pod所需要的数据卷，返回Pod的运行状态，在Node节点执行容器的健康检查。</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kubelet/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kubelet/</a></p><ul><li>etcd：是CoreOS公司开发目前是k8s默认使用的key-value数据存储系统，用于保存所有集群数据，支持分布式集群功能，生产环境使用时需要为etcd数据提供定期备份机制。</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/configure-upgrade-etcd/">https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/configure-upgrade-etcd/</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#k8s组件预览</span>https://kubernetes.io/zh-cn/docs/concepts/overview/components/<span class="token comment">#核心组件</span>apiserver:         <span class="token comment">#提供资源操作的唯一入口，并提供认证，授权，访问控制，API注册和发现等机制。</span>controller manager:<span class="token comment">#负责维护集群的状态，比如故障检测，自动扩展，滚动更新等。</span>scheduler:         <span class="token comment">#负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上。</span>kubelet:           <span class="token comment">#负责维护容器的生命周期，同时也负责Volume(CVI)和网络(CNI)的管理。</span>container runtime: <span class="token comment">#负责镜像管理以及Pod和容器的真正运行(CRI)。</span>kuber-proxy:       <span class="token comment">#负责为service提供cluster内部的服务发现和负载均衡。</span>etcd:              <span class="token comment">#保存了整个集群的状态。</span><span class="token comment">#可选组件</span>kube-dns/coredns:     <span class="token comment">#负责为整个集群提供DNS服务。</span>ingress controller:   <span class="token comment">#为服务提供外网入口。</span>prometheus:           <span class="token comment">#提供资源监控。</span>dashboard:            <span class="token comment">#提供GUI</span>federation:           <span class="token comment">#提供跨可用区的集群。</span>fluentd-elasticsearch:<span class="token comment">#提供集群日志采集，存储与查询。</span></code></pre></div></figure><h1 id="3-K8S网络模型介绍"><a href="#3-K8S网络模型介绍" class="headerlink" title="3.K8S网络模型介绍"></a>3.K8S网络模型介绍</h1><p><strong>三种IP：</strong></p><ol><li><strong>Node IP：</strong>Node节点的IP地址，即物理机(虚拟机)的IP地址。每个Service都会在Node节点上开通一个端口，外部可以通过<a href="http://NodeIP:NodePort即可访问Service里的Pod提供的服务。">http://NodeIP:NodePort即可访问Service里的Pod提供的服务。</a></li><li><strong>Pod IP：</strong>Pod的IP地址，即docker容器的IP地址，此为虚拟IP地址。是每个Pod的IP地址，Docker Engine根据docker网桥的IP地址段进行分配的，通常是一个虚拟的二层网络。同Service下的pod可以直接根据PodIP相互通信，不同Service下的pod在集群间pod通信要借助于cluster ip，pod和集群外通信，要借助于node ip</li><li><strong>Cluster IP：</strong>Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有k8s集群内部访问使用。Cluster IP仅仅作用于K8s Service这个对象，并由K8es管理和分配IP地址。ClusterIP无法被ping，他没有一个“实体网络对象”来响应。Cluster IP只能结合ServicePort组成一个具体的通信端口，单独的Cluster IP不具备通信的基础，并且他们属于K8s集群这样一个封闭的空间。在不同Service下的pod节点在集群间相互访问可以通过Cluster IP</li></ol><p><strong>三种网络：</strong></p><ol><li><strong>Node Network：</strong>承载k8s集群中各个物理机&#x2F;虚拟机(Master和Node)通信的网络。</li><li><strong>Pod Network：</strong>集群中承载各个Pod相互通信的网络。</li><li><strong>Service Network：</strong>由k8s集群中的Service所组成的”网络”。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(05).Prometheus基于alertmanager实现告警通知</title>
    <link href="/2023/04/19/Monitor/Prometheus/prometheus05/"/>
    <url>/2023/04/19/Monitor/Prometheus/prometheus05/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(04).Prometheus联邦集群机制</title>
    <link href="/2023/04/19/Monitor/Prometheus/prometheus04/"/>
    <url>/2023/04/19/Monitor/Prometheus/prometheus04/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03).Prometheus监控案例</title>
    <link href="/2023/04/19/Monitor/Prometheus/prometheus03/"/>
    <url>/2023/04/19/Monitor/Prometheus/prometheus03/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02).Prometheus服务发现机制</title>
    <link href="/2023/04/19/Monitor/Prometheus/prometheus02/"/>
    <url>/2023/04/19/Monitor/Prometheus/prometheus02/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01).部署Prometheus基于Grafana渲染数据</title>
    <link href="/2023/04/19/Monitor/Prometheus/prometheus01/"/>
    <url>/2023/04/19/Monitor/Prometheus/prometheus01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-部署Prometheus基于Grafana渲染数据"><a href="#1-部署Prometheus基于Grafana渲染数据" class="headerlink" title="1.部署Prometheus基于Grafana渲染数据"></a>1.部署Prometheus基于Grafana渲染数据</h1><p>官方文档：<a href="https://prometheus.io/docs/">https://prometheus.io/docs/</a></p><p>github地址：<a href="https://github.com/prometheus">https://github.com/prometheus</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Prometheus server             <span class="token comment">#主服务，接受外部http请求，收集、存储、查询数据等。</span>Prometheus targets            <span class="token comment">#静态收集的目标服务器。</span>Service discovery             <span class="token comment">#动态发现服务。</span>Prometheus alerting           <span class="token comment">#报警通知。</span>Push gateway                  <span class="token comment">#数据收集代理服务器。</span>Data visualization and <span class="token builtin class-name">export</span> <span class="token comment">#数据可视化与数据导出</span></code></pre></div></figure><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506213103820.png" alt="image-20230506213103820"> </p><h2 id="1-1-基于二进制部署Prometheus"><a href="#1-1-基于二进制部署Prometheus" class="headerlink" title="1.1 基于二进制部署Prometheus"></a>1.1 基于二进制部署Prometheus</h2><p>Prometheus组件：Prometheus Server、Grafana、alertmanager、node-exporter等组件使用单独服务器二进制安装或者单独容器进行部署。</p><h3 id="1-1-1-部署Prometheus-Server"><a href="#1-1-1-部署Prometheus-Server" class="headerlink" title="1.1.1 部署Prometheus Server"></a>1.1.1 部署Prometheus Server</h3><p>官方下载：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p><p>github下载：<a href="https://github.com/prometheus/prometheus">https://github.com/prometheus/prometheus</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.解压</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> prometheus-2.37.8.linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> prometheus-2.37.8.linux-amd64/ prometheus<span class="token comment">#2.创建service启动脚本，默认监听9090端口</span><span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/prometheus.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=Prometheus ServerDocumentation=https://prometheus.io/docs/introduction/overview/After=network.target [Service]Restart=on-failureWorkingDirectory=/usr/local/prometheus/ExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --web.enable-lifecycle --storage.tsdb.retention=720h [Install]WantedBy=multi-user.targetEOF</span><span class="token comment">#3.启动prometheus</span>systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> prometheus.service <span class="token operator">&amp;&amp;</span> systemctl restart prometheus.service<span class="token comment">#4.访问测试</span>http://192.168.1.61:9090/<span class="token comment">#5.热加载prometheus服务配置</span><span class="token comment">#修改prometheus.server，启动prometheus命令后添加--web.enable-lifecycle参数</span>root@prometheus:~<span class="token comment"># vim /etc/systemd/system/prometheus.service</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/prometheus/prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/usr/local/prometheus/prometheus.yml --web.enable-lifecycle<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>root@prometheus:~<span class="token comment"># curl -X POST http://192.168.1.61:9090/-/reload</span></code></pre></div></figure><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506214858413.png" alt="image-20230506214858413"> </p><h3 id="1-1-2-部署node-exporter"><a href="#1-1-2-部署node-exporter" class="headerlink" title="1.1.2 部署node-exporter"></a>1.1.2 部署node-exporter</h3><p>node-exporter用于收集宿主机的监控指标数据，默认监听端口为9100</p><p>github下载地址：<a href="https://github.com/prometheus/node_exporter">https://github.com/prometheus/node_exporter</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.解压</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> node_exporter-1.5.0.linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> node_exporter-1.5.0.linux-amd64/ node_exporter<span class="token comment">#2.创建service启动脚本</span><span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/node-exporter.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=Prometheus Node ExporterAfter=network.target [Service]ExecStart=/usr/local/node_exporter/node_exporter [Install]WantedBy=multi-user.targetEOF</span><span class="token comment">#3.启动node_exporter</span>systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl restart node-exporter <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> node-exporter.service</code></pre></div></figure><h3 id="1-1-3-安装Grafana"><a href="#1-1-3-安装Grafana" class="headerlink" title="1.1.3 安装Grafana"></a>1.1.3 安装Grafana</h3><p>grafana官网：<a href="https://grafana.com/">https://grafana.com/</a></p><p>grafana下载地址：<a href="https://grafana.com/get/?plcmt=top-nav&cta=downloads&tab=self-managed">https://grafana.com/get/?plcmt=top-nav&amp;cta=downloads&amp;tab=self-managed</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Grafana</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> adduser libfontconfig1<span class="token function">wget</span> https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.0_amd64.deb<span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> grafana-enterprise_9.5.0_amd64.deb<span class="token comment">#2.访问测试，默认监听3000端口，登录账号密码默认admin/admin</span>http://192.168.1.61:3000/</code></pre></div></figure><p> <img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506215857320.png" alt="image-20230506215857320"> </p><p><strong>设置中文：</strong></p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506220023937.png" alt="image-20230506220023937"> </p><h3 id="1-1-4-基于node-exporters收集指标数据"><a href="#1-1-4-基于node-exporters收集指标数据" class="headerlink" title="1.1.4 基于node-exporters收集指标数据"></a>1.1.4 基于node-exporters收集指标数据</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.宿主机安装node-exporter</span>主机192.168.1.40，192.168.1.41，192.168.1.42安装node-exporter<span class="token comment">#2.配置prometheus</span>root@prometheus:~<span class="token comment"># vim /usr/local/prometheus/prometheus.yml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  - job_name: <span class="token string">"prometheus-node"</span>    static_configs:      - targets: <span class="token punctuation">[</span><span class="token string">"192.168.1.40:9100"</span>,<span class="token string">"192.168.1.41:9100"</span>,<span class="token string">"192.168.1.42:9100"</span><span class="token punctuation">]</span><span class="token comment">#3.重启prometheus</span>root@prometheus:~<span class="token comment"># systemctl restart prometheus</span></code></pre></div></figure><p><strong>配置grafana添加prometheus数据源：</strong></p><p>点击【管理】-【数据源】-【Add new data source】</p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506221252447.png" alt="image-20230506221252447"> </p><p>填写URL地址：</p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506221321610.png" alt="image-20230506221321610"> </p><p>点击【Save &amp; test】</p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506221359890.png" alt="image-20230506221359890"> </p><p><strong>添加grafana dashboard模板：</strong></p><p>下载添加prometheus的dashboard模板：<a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a></p><p>如果grafana部署的服务器是内网，无法接入外网，则通过浏览器下载json手动导入到grafana，能通外网则可以直接通过模板的ID直接在grafana直接添加。</p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506221822953.png" alt="image-20230506221822953"> </p><p>左侧菜单栏点击【仪表盘】-【新建】-【导入】：</p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506222001930.png" alt="image-20230506222001930"> </p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506222110809.png" alt="image-20230506222110809"> </p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506222126944.png" alt="image-20230506222126944"> </p><h3 id="1-1-5-基于cadvisors收集指标数据"><a href="#1-1-5-基于cadvisors收集指标数据" class="headerlink" title="1.1.5 基于cadvisors收集指标数据"></a>1.1.5 基于cadvisors收集指标数据</h3><p>监控Pod指标数据需要使用cadvisor，cadvisor由谷歌开源，在kubernetes v1.11及之前的版本内置在kubelet中并监听在4194端口，从v1.12开始kubelet中的cadvisor被移除，因此需要单独通过daemonset等方式部署。</p><p>cadvisor（容器顾问）不仅可以搜集⼀台机器上所有运行的容器信息，还提供基础查询界⾯和http接口，方便其他组件如Prometheus进行数据抓取，cAdvisor可以对节点机器上的容器进行实时监控和性能数据采集，包括容器的CPU使用情况、内存使用情况、网络吞吐量及文件系统使用情况。</p><p>github地址：<a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.docker容器部署cadvisor</span><span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/liangxiaohui/cadvisor-amd64:v0.45.0<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/:/rootfs:ro <span class="token punctuation">\</span>  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/run:/var/run:ro <span class="token punctuation">\</span>  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/sys:/sys:ro <span class="token punctuation">\</span>  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/lib/docker/:/var/lib/docker:ro <span class="token punctuation">\</span>  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/dev/disk/:/dev/disk:ro <span class="token punctuation">\</span>  <span class="token parameter variable">--publish</span><span class="token operator">=</span><span class="token number">8080</span>:8080 <span class="token punctuation">\</span>  <span class="token parameter variable">--detach</span><span class="token operator">=</span>true <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span><span class="token operator">=</span>cadvisor <span class="token punctuation">\</span>  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/kmsg <span class="token punctuation">\</span>  registry.cn-hangzhou.aliyuncs.com/liangxiaohui/cadvisor-amd64:v0.45.0<span class="token comment">#2.部署后浏览器访问 ip:8080端口</span>http://192.168.1.49:8080/http://192.168.1.49:8080/metrics <span class="token comment">#显示采集容器的指标数据</span><span class="token comment">#3.配置prometheus</span>root@prometheus:/usr/local/prometheus<span class="token comment"># vim prometheus.yml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  - job_name: <span class="token string">"prometheus-cadvisors"</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">"192.168.1.49:8080"</span>,<span class="token string">"192.168.1.50:8080"</span>,<span class="token string">"192.168.1.51:8080"</span>,<span class="token string">"192.168.1.52:8080"</span><span class="token punctuation">]</span><span class="token comment">#3.重启prometheus</span>root@prometheus:~<span class="token comment"># systemctl restart prometheus</span></code></pre></div></figure><p><strong>添加grafana dashboard模板：</strong></p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506225603923.png" alt="image-20230506225603923"> </p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230506225820792.png" alt="image-20230506225820792"> </p><h2 id="1-2-K8S中部署Prometheus"><a href="#1-2-K8S中部署Prometheus" class="headerlink" title="1.2 K8S中部署Prometheus"></a>1.2 K8S中部署Prometheus</h2><h3 id="1-2-1-部署Prometheus"><a href="#1-2-1-部署Prometheus" class="headerlink" title="1.2.1 部署Prometheus"></a>1.2.1 部署Prometheus</h3><p>deployment部署prometheus-server：在k8s集群中部署prometheus-server，实现动态发现集群pod</p><p><strong>创建prometheus的配置文件configmap，实现服务发现的配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># vim prometheus-cfg.yaml</span>kind: ConfigMapapiVersion: v1metadata:  labels:    app: prometheus  name: prometheus-config  namespace: monitoring data:  prometheus.yml: <span class="token operator">|</span>    global:      scrape_interval: 15s      scrape_timeout: 10s      evaluation_interval: 1m    scrape_configs:    - job_name: <span class="token string">'kubelet'</span>      kubernetes_sd_configs:      - role: <span class="token function">node</span>      scheme: https      tls_config:        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token        - job_name: <span class="token string">'kubernetes-node'</span>      kubernetes_sd_configs:      - role: <span class="token function">node</span>      relabel_configs:      - source_labels: <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        regex: <span class="token string">'(.*):10250'</span>        replacement: <span class="token string">'$&#123;1&#125;:9100'</span>        target_label: __address__        action: replace      - action: labelmap        regex: __meta_kubernetes_node_label_<span class="token punctuation">(</span>.+<span class="token punctuation">)</span>    - job_name: <span class="token string">'kubernetes-node-cadvisor'</span>      kubernetes_sd_configs:      - role:  <span class="token function">node</span>      scheme: https      tls_config:        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token      relabel_configs:      - action: labelmap        regex: __meta_kubernetes_node_label_<span class="token punctuation">(</span>.+<span class="token punctuation">)</span>      - target_label: __address__        replacement: kubernetes.default.svc:443      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_node_name<span class="token punctuation">]</span>        regex: <span class="token punctuation">(</span>.+<span class="token punctuation">)</span>        target_label: __metrics_path__        replacement: /api/v1/nodes/<span class="token variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor    - job_name: <span class="token string">'kubernetes-apiserver'</span>      kubernetes_sd_configs:      - role: endpoints      scheme: https      tls_config:        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token      relabel_configs:      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name<span class="token punctuation">]</span>        action: keep        regex: default<span class="token punctuation">;</span>kubernetes<span class="token punctuation">;</span>https    - job_name: <span class="token string">'kubernetes-service-endpoints'</span>      kubernetes_sd_configs:      - role: endpoints      relabel_configs:      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_scrape<span class="token punctuation">]</span>        action: keep        regex: <span class="token boolean">true</span>      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_scheme<span class="token punctuation">]</span>        action: replace        target_label: __scheme__        regex: <span class="token punctuation">(</span>https?<span class="token punctuation">)</span>      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_path<span class="token punctuation">]</span>        action: replace        target_label: __metrics_path__        regex: <span class="token punctuation">(</span>.+<span class="token punctuation">)</span>      - source_labels: <span class="token punctuation">[</span>__address__, __meta_kubernetes_service_annotation_prometheus_io_port<span class="token punctuation">]</span>        action: replace        target_label: __address__        regex: <span class="token punctuation">(</span><span class="token punctuation">[</span>^:<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">(</span>?::<span class="token punctuation">\</span>d+<span class="token punctuation">)</span>?<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">\</span>d+<span class="token punctuation">)</span>        replacement: <span class="token variable">$1</span><span class="token builtin class-name">:</span><span class="token variable">$2</span>      - action: labelmap        regex: __meta_kubernetes_service_label_<span class="token punctuation">(</span>.+<span class="token punctuation">)</span>      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">]</span>        action: replace        target_label: kubernetes_namespace      - source_labels: <span class="token punctuation">[</span>__meta_kubernetes_service_name<span class="token punctuation">]</span>        action: replace        target_label: kubernetes_service_nameroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f prometheus-cfg.yaml </span>configmap/prometheus-config createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get configmap -n monitoring</span>NAME                DATA   AGEkube-root-ca.crt    <span class="token number">1</span>      38mprometheus-config   <span class="token number">1</span>      19s</code></pre></div></figure><p><strong>设置nfs共享存储路径：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:~<span class="token comment"># mkdir /data/k8sdata/prometheus</span>root@ha1:~<span class="token comment"># chown nobody.nogroup -R /data/k8sdata/prometheus/</span>root@ha1:~<span class="token comment"># cat /etc/exports </span>/data/k8sdata *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span></code></pre></div></figure><p><strong>创建供给prometheus 容器使用的pv和pvc：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.pv</span>root@deploy:/opt/yaml/prometheus<span class="token comment"># vim prometheus-pv.yaml</span>apiVersion: v1kind: PersistentVolumemetadata:  name: prometheus-nfs  labels:    type: nfsspec:  capacity:    storage: 50Gi  accessModes:    - ReadWriteOnce  nfs:    path: <span class="token string">"/data/k8sdata/prometheus"</span>    server: <span class="token number">192.168</span>.1.43root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f prometheus-pv.yaml </span>persistentvolume/prometheus-nfs createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get pv</span>NAME             CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS   REASON   AGEprometheus-nfs   50Gi       RWO            Retain           Bound    monitoring/prometheus-nfs                           39s<span class="token comment">#2.pvc</span>root@deploy:/opt/yaml/prometheus<span class="token comment"># vim prometheus-pvc.yaml</span>kind: PersistentVolumeClaimapiVersion: v1metadata:  name: prometheus-nfs  namespace: monitoringspec:  accessModes:    - ReadWriteOnce  resources:    requests:      storage: 10Gi  selector:    matchLabels:      type: nfs      root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f prometheus-pvc.yaml </span>persistentvolumeclaim/prometheus-nfs createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get pvc -n monitoring</span>NAME             STATUS   VOLUME           CAPACITY   ACCESS MODES   STORAGECLASS   AGEprometheus-nfs   Bound    prometheus-nfs   50Gi       RWO                           56s</code></pre></div></figure><p><strong>创建serviceaccount账号：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#对prometheus-server分配集群控制权限，能够动态发现pod</span>root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl create serviceaccount monitor -n monitoring </span>serviceaccount/monitor created</code></pre></div></figure><p><strong>对serviceaccount账号monitor进行clusterrole权限绑定：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl create clusterrolebinding monitoring-clusterrolebinding -n monitoring --clusterrole cluster-admin --serviceaccount=monitoring:monitor</span>clusterrolebinding.rbac.authorization.k8s.io/monitoring-clusterrolebinding created</code></pre></div></figure><p><strong>创建prometheus-server：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># vim deployment-prometheus.yaml</span>apiVersion: apps/v1kind: Deploymentmetadata:  name: prometheus-server  namespace: monitoring  labels:    app: prometheusspec:  replicas: <span class="token number">1</span>  selector:    matchLabels:      app: prometheus      component: server  template:    metadata:      labels:        app: prometheus        component: server      annotations:        prometheus.io/scrape: <span class="token string">'false'</span>    spec:      serviceAccountName: monitor          <span class="token comment">#指定sa账号赋予集群权限</span>      containers:      - name: prometheus        image: prom/prometheus:v2.31.2        imagePullPolicy: IfNotPresent        command:          - prometheus          - <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/etc/prometheus/prometheus.yml          - <span class="token parameter variable">--storage.tsdb.path</span><span class="token operator">=</span>/prometheus          - <span class="token parameter variable">--storage.tsdb.retention</span><span class="token operator">=</span>720h       <span class="token comment">#保留30天数据</span>        ports:        - containerPort: <span class="token number">9090</span>          protocol: TCP        volumeMounts:        - mountPath: /etc/prometheus/prometheus.yml          name: prometheus-config          subPath: prometheus.yml        - mountPath: /prometheus/          name: prometheus-storage-volume      volumes:        - name: prometheus-config          configMap:            name: prometheus-config            items:              - key: prometheus.yml                path: prometheus.yml                mode: 0644        - name: prometheus-storage-volume          persistentVolumeClaim:            claimName: prometheus-nfs            root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f deployment-prometheus.yaml </span>deployment.apps/prometheus-server createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get pod -n monitoring | grep prometheus</span>prometheus-server-66cf6fbd49-g9ghn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          39s</code></pre></div></figure><p><strong>创建svc：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># vim prometheus-svc.yaml</span>apiVersion: v1kind: Servicemetadata:  name: prometheus  namespace: monitoring  labels:    app: prometheusspec:  type: NodePort  ports:    - port: <span class="token number">9090</span>      targetPort: <span class="token number">9090</span>      nodePort: <span class="token number">39090</span>      protocol: TCP  selector:    app: prometheus    component: server    root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f prometheus-svc.yaml </span>service/prometheus createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get svc -n monitoring</span>NAME         TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>          AGEprometheus   NodePort   <span class="token number">172.20</span>.24.206   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">9090</span>:39090/TCP   15sroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get ep -n monitoring</span>NAME         ENDPOINTS           AGEprometheus   <span class="token number">10.20</span>.39.224:9090   20s<span class="token comment">#访问测试</span>http://192.168.1.40:39090/</code></pre></div></figure><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230507103657085.png" alt="image-20230507103657085"> </p><h3 id="1-2-2-部署node-exporter"><a href="#1-2-2-部署node-exporter" class="headerlink" title="1.2.2 部署node-exporter"></a>1.2.2 部署node-exporter</h3><p>daemonset部署node-exporter：</p><p><strong>创建namespace：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:~<span class="token comment"># kubectl create ns monitoring</span>namespace/monitoring created</code></pre></div></figure><p><strong>创建node-exporter k8s yaml：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># vim daemonset-deploy-node-exporter.yaml</span>apiVersion: apps/v1kind: DaemonSetmetadata:  name: node-exporter  namespace: monitoring   labels:    k8s-app: node-exporterspec:  selector:    matchLabels:        k8s-app: node-exporter  template:    metadata:      labels:        k8s-app: node-exporter    spec:      tolerations:        - effect: NoSchedule          <span class="token comment">#master节点污点容忍</span>          key: node-role.kubernetes.io/master      containers:      - image: prom/node-exporter:v1.3.1         imagePullPolicy: IfNotPresent        name: prometheus-node-exporter        ports:        - containerPort: <span class="token number">9100</span>    <span class="token comment">#端口暴露在9100</span>          hostPort: <span class="token number">9100</span>          protocol: TCP          name: metrics        volumeMounts:        - mountPath: /host/proc          name: proc        - mountPath: /host/sys          name: sys        - mountPath: /host          name: rootfs        args:        - <span class="token parameter variable">--path.procfs</span><span class="token operator">=</span>/host/proc        - <span class="token parameter variable">--path.sysfs</span><span class="token operator">=</span>/host/sys        - <span class="token parameter variable">--path.rootfs</span><span class="token operator">=</span>/host      volumes:        - name: proc          hostPath:            path: /proc        - name: sys          hostPath:            path: /sys        - name: rootfs          hostPath:            path: /      hostNetwork: <span class="token boolean">true</span>    <span class="token comment">#使用宿主机网络</span>      hostPID: <span class="token boolean">true</span>        <span class="token comment">#Pod使用宿主机的进程命名空间</span>      root@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f daemonset-deploy-node-exporter.yaml </span>daemonset.apps/node-exporter createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get pods -n monitoring -o wide</span>NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE           NOMINATED NODE   READINESS GATESnode-exporter-bwrxc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34s   <span class="token number">192.168</span>.1.52   <span class="token number">192.168</span>.1.52   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-hzlgz   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34s   <span class="token number">192.168</span>.1.40   <span class="token number">192.168</span>.1.40   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-jzlxp   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          35s   <span class="token number">192.168</span>.1.50   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-lskt9   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34s   <span class="token number">192.168</span>.1.41   <span class="token number">192.168</span>.1.41   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-nmx4d   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34s   <span class="token number">192.168</span>.1.51   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-pw468   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          35s   <span class="token number">192.168</span>.1.49   <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-exporter-q5vd4   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          35s   <span class="token number">192.168</span>.1.42   <span class="token number">192.168</span>.1.42   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><h3 id="1-2-3-部署cadvisors"><a href="#1-2-3-部署cadvisors" class="headerlink" title="1.2.3 部署cadvisors"></a>1.2.3 部署cadvisors</h3><p>daemonset部署cadvisor：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@deploy:/opt/yaml/prometheus<span class="token comment"># vim daemonset-deploy-cadvisor.yaml</span>apiVersion: apps/v1kind: DaemonSetmetadata:  name: cadvisor  namespace: monitoringspec:  selector:    matchLabels:      app: cAdvisor  template:    metadata:      labels:        app: cAdvisor    spec:      tolerations:    <span class="token comment">#污点容忍,忽略master的NoSchedule</span>        - effect: NoSchedule          key: node-role.kubernetes.io/master      hostNetwork: <span class="token boolean">true</span>       <span class="token comment">#使用宿主机网络</span>      restartPolicy: Always   <span class="token comment">#重启策略</span>      containers:      - name: cadvisor        image: registry.cn-hangzhou.aliyuncs.com/liangxiaohui/cadvisor-amd64:v0.45.0        imagePullPolicy: IfNotPresent  <span class="token comment"># 镜像策略</span>        ports:        - containerPort: <span class="token number">8080</span>        volumeMounts:          - name: root            mountPath: /rootfs          - name: run            mountPath: /var/run          - name: sys            mountPath: /sys          - name: <span class="token function">docker</span>            mountPath: /var/lib/docker      volumes:      - name: root        hostPath:          path: /      - name: run        hostPath:          path: /var/run      - name: sys        hostPath:          path: /sys      - name: <span class="token function">docker</span>        hostPath:          path: /var/lib/dockerroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl apply -f daemonset-deploy-cadvisor.yaml </span>daemonset.apps/cadvisor createdroot@deploy:/opt/yaml/prometheus<span class="token comment"># kubectl get pod -n monitoring -o wide | grep cadvisor</span>cadvisor-8947m        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.52   <span class="token number">192.168</span>.1.52   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-9hjpq        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.51   <span class="token number">192.168</span>.1.51   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-d4l2p        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.40   <span class="token number">192.168</span>.1.40   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-d5n6b        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.49   <span class="token number">192.168</span>.1.49   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-hpwsp        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.50   <span class="token number">192.168</span>.1.50   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-kjv6r        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.42   <span class="token number">192.168</span>.1.42   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>cadvisor-z8b86        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s     <span class="token number">192.168</span>.1.41   <span class="token number">192.168</span>.1.41   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre></div></figure><h2 id="1-3-Operator部署Prometheus"><a href="#1-3-Operator部署Prometheus" class="headerlink" title="1.3 Operator部署Prometheus"></a>1.3 Operator部署Prometheus</h2><p>Operator部署器是基于已经编写好的yaml文件，可以将prometheus server、alertmanager、grafana、nodeexporter等组件⼀键批量部署在K8S集群当中。</p><p>github地址：<a href="https://github.com/prometheus-operator/kube-prometheus">https://github.com/prometheus-operator/kube-prometheus</a></p><p><strong>根据支持的kubernetes版本去选择：</strong></p><p><img src="/2023/04/19/Monitor/Prometheus/prometheus01/image-20230507105847814.png" alt="image-20230507105847814"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).Zabbix事件通知机制</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix06/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix事件通知机制"><a href="#1-Zabbix事件通知机制" class="headerlink" title="1.Zabbix事件通知机制"></a>1.Zabbix事件通知机制</h1><h2 id="1-1-邮件通知"><a href="#1-1-邮件通知" class="headerlink" title="1.1 邮件通知"></a>1.1 邮件通知</h2><h2 id="1-2-短信通知"><a href="#1-2-短信通知" class="headerlink" title="1.2 短信通知"></a>1.2 短信通知</h2><h2 id="1-3-企业微信通知"><a href="#1-3-企业微信通知" class="headerlink" title="1.3 企业微信通知"></a>1.3 企业微信通知</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).Zabbix监控案例</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix05/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix监控Tomcat服务"><a href="#1-Zabbix监控Tomcat服务" class="headerlink" title="1.Zabbix监控Tomcat服务"></a>1.Zabbix监控Tomcat服务</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方tomcat模板地址</span>https://www.zabbix.com/cn/integrations/tomcat</code></pre></div></figure><h2 id="1-1-安装配置Tomcat"><a href="#1-1-安装配置Tomcat" class="headerlink" title="1.1 安装配置Tomcat"></a>1.1 安装配置Tomcat</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装JDK</span>root@zabbix-agent-active:~<span class="token comment"># apt install openjdk-8-jdk</span><span class="token comment">#2.安装Tomcat</span><span class="token function">wget</span> https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.72/bin/apache-tomcat-9.0.72.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> apache-tomcat-9.0.72.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> apache-tomcat-9.0.72/ tomcat<span class="token builtin class-name">echo</span> <span class="token string">'PATH=/usr/local/tomcat/bin:$PATH'</span> <span class="token operator">></span> /etc/profile.d/tomcat.sh<span class="token builtin class-name">.</span> /etc/profile.d/tomcat.sh<span class="token comment">#3.Tomcat开启JMX监控，JMX在Java编程语言中定义了应用程序以及网络管理和监控的体系结构，设计模式，应用程序接口以及服务，通常使用JMX来监控系统的运行状态。</span><span class="token comment">#-Dcom.sun.management.jmxremote \ #启动远程监控JMX</span><span class="token comment">#-Dcom.sun.management.jmxremote.port=12345 \ #启用JMX端口号</span><span class="token comment">#-Dcom.sun.management.jmxremote.authenticate=false \ #不使用用户名密码</span><span class="token comment">#-Dcom.sun.management.jmxremote.ssl=false \ #不适用ssl认证</span><span class="token comment">#-Djava.rmi.server.hostname=192.168.1.33" #Tomcat主机IP地址</span>root@zabbix-agent-active:~<span class="token comment"># vim /usr/local/tomcat/bin/catalina.sh</span><span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CATALINA_OPTS</span> \-Dcom.sun.management.jmxremote \-Dcom.sun.management.jmxremote.port=12345 \-Dcom.sun.management.jmxremote.authenticate=false \-Dcom.sun.management.jmxremote.ssl=false \-Djava.rmi.server.hostname=192.168.1.33"</span></code></pre></div></figure><h2 id="1-2-安装配置Java-Gateway"><a href="#1-2-安装配置Java-Gateway" class="headerlink" title="1.2 安装配置Java Gateway"></a>1.2 安装配置Java Gateway</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Java Gateway</span>root@zabbix-agent-active:~<span class="token comment"># wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-active:~<span class="token comment"># dpkg -i zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-active:~<span class="token comment"># apt update</span>root@zabbix-agent-active:~<span class="token comment"># apt install zabbix-java-gateway</span><span class="token comment">#2.配置Java Gateway</span>root@zabbix-agent-active:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_java_gateway.conf </span><span class="token assign-left variable">LISTEN_IP</span><span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token assign-left variable">LISTEN_PORT</span><span class="token operator">=</span><span class="token number">10052</span><span class="token assign-left variable">PID_FILE</span><span class="token operator">=</span><span class="token string">"/var/run/zabbix/zabbix_java_gateway.pid"</span><span class="token assign-left variable">START_POLLERS</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">TIMEOUT</span><span class="token operator">=</span><span class="token number">30</span>root@zabbix-agent-active:~<span class="token comment"># systemctl restart zabbix-java-gateway</span>root@zabbix-agent-active:~<span class="token comment"># systemctl enable zabbix-java-gateway</span></code></pre></div></figure><h2 id="1-3-配置Zabbix-Server"><a href="#1-3-配置Zabbix-Server" class="headerlink" title="1.3 配置Zabbix Server"></a>1.3 配置Zabbix Server</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@zabbix-server:~<span class="token comment"># vim /etc/zabbix/zabbix_server.conf</span><span class="token assign-left variable">JavaGateway</span><span class="token operator">=</span><span class="token number">192.168</span>.1.33 <span class="token comment">#监听地址</span><span class="token assign-left variable">JavaGatewayPort</span><span class="token operator">=</span><span class="token number">10052</span> <span class="token comment">#指定Java Gateway的服务器监听端口</span><span class="token assign-left variable">StartJavaPollers</span><span class="token operator">=</span><span class="token number">20</span> <span class="token comment">#启动多少个线程轮询Java Gateway</span>root@zabbix-server:~<span class="token comment"># systemctl restart zabbix-server</span></code></pre></div></figure><h2 id="1-4-Zabbix-Server添加JMX监控"><a href="#1-4-Zabbix-Server添加JMX监控" class="headerlink" title="1.4 Zabbix Server添加JMX监控"></a>1.4 Zabbix Server添加JMX监控</h2><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230422222136677.png" alt="image-20230422222136677"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230422222219702.png" alt="image-20230422222219702"> </p><h1 id="2-Zabbix监控Linux-TCP连接状态"><a href="#2-Zabbix监控Linux-TCP连接状态" class="headerlink" title="2.Zabbix监控Linux TCP连接状态"></a>2.Zabbix监控Linux TCP连接状态</h1><h1 id="3-Zabbix监控Memcache服务"><a href="#3-Zabbix监控Memcache服务" class="headerlink" title="3.Zabbix监控Memcache服务"></a>3.Zabbix监控Memcache服务</h1><h1 id="4-Zabbix监控Redis服务"><a href="#4-Zabbix监控Redis服务" class="headerlink" title="4.Zabbix监控Redis服务"></a>4.Zabbix监控Redis服务</h1><h1 id="5-Zabbix监控Nginx服务"><a href="#5-Zabbix监控Nginx服务" class="headerlink" title="5.Zabbix监控Nginx服务"></a>5.Zabbix监控Nginx服务</h1><p>对nginx的活动连接和当前状态等运行状态进行监控</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Active connections: <span class="token number">3</span> server accepts handled requests <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span> Reading: <span class="token number">0</span> Writing: <span class="token number">1</span> Waiting: <span class="token number">2</span>Active connections：当前处于活动状态的客户端连接数，包括连接等待空闲连接数。accepts：统计总值，nginx自启动后已经接受的客户端请求的总数。handled：统计总值，nginx自启动后已经处理完成的客户端请求总数，通常等于accepts，除非有因为worker_connections限制等被拒绝的连接。requests：统计总值，nginx自启动后客户端发来的总的请求数。Reading: 当前状态，正在读取客户端请求报文首部的连接的连接数。Writing: 当前状态，正在向客户端发送响应报文过程中的连接数。Waiting: 正在等待客户端发出请求的空闲连接数，开启keep-alive的情况下，这个值等于active - （reading + writing）</code></pre></div></figure><h2 id="5-1-zabbix官方模板说明"><a href="#5-1-zabbix官方模板说明" class="headerlink" title="5.1 zabbix官方模板说明"></a>5.1 zabbix官方模板说明</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方nginx模板说明地址</span>https://www.zabbix.com/cn/integrations/nginx<span class="token comment">#1.Overview</span>For Zabbix version: <span class="token number">6.0</span> and higherThe template to monitor Nginx by Zabbix that work without any external scripts. Most of the metrics are collected <span class="token keyword">in</span> one go, thanks to Zabbix bulk data collection.Template Nginx by Zabbix agent collects metrics by polling ngx_http_stub_status_module locally with Zabbix agent:    Active connections: <span class="token number">291</span>    server accepts handled requests    <span class="token number">16630948</span> <span class="token number">16630948</span> <span class="token number">31070465</span>    Reading: <span class="token number">6</span> Writing: <span class="token number">179</span> Waiting: <span class="token number">106</span>Note that this template doesn<span class="token string">'t support https and redirects (limitations of web.page.get).It also uses Zabbix agent to collect nginx Linux process stats like CPU usage, memory usage and whether process is running or not.This template was tested on:Nginx, version 1.17.2#2.SetupSee Zabbix template operation for basic instructions.Setup ngx_http_stub_status_module. Test availability of http_stub_status module with nginx -V 2>&amp;1 | grep -o with-http_stub_status_module.Example configuration of Nginx:    location = /basic_status &#123;        stub_status;        allow 127.0.0.1;        allow ::1;        deny all;    &#125;    If you use another location, then don'</span>t forget to change <span class="token punctuation">&#123;</span><span class="token variable">$NGINX</span>.STUB_STATUS.<span class="token environment constant">PATH</span><span class="token punctuation">&#125;</span> macro. Install and setup Zabbix agent.</code></pre></div></figure><h2 id="5-2-配置监控nginx"><a href="#5-2-配置监控nginx" class="headerlink" title="5.2 配置监控nginx"></a>5.2 配置监控nginx</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装nginx，在主机[192.168.1.31]上安装nginx测试</span>root@mysql-master:~<span class="token comment"># apt install nginx</span><span class="token comment">#2.配置nginx</span>root@mysql-master:~<span class="token comment"># vim /etc/nginx/sites-enabled/default</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>server <span class="token punctuation">&#123;</span>        listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span>                <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>                location <span class="token operator">=</span> /basic_status <span class="token punctuation">&#123;</span>          stub_status<span class="token punctuation">;</span>          allow <span class="token number">127.0</span>.0.1<span class="token punctuation">;</span>          allow ::1<span class="token punctuation">;</span>          deny all<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span class="token comment">#3.Zabbix Server添加nginx模板：</span></code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230423000954298.png" alt="image-20230423000954298"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230423001016900.png" alt="image-20230423001016900"> </p><h1 id="6-Zabbix基于SNMP监控"><a href="#6-Zabbix基于SNMP监控" class="headerlink" title="6.Zabbix基于SNMP监控"></a>6.Zabbix基于SNMP监控</h1><h2 id="6-1-SNMP简介"><a href="#6-1-SNMP简介" class="headerlink" title="6.1 SNMP简介"></a>6.1 SNMP简介</h2><h2 id="6-2-基于SNMP监控打印机"><a href="#6-2-基于SNMP监控打印机" class="headerlink" title="6.2 基于SNMP监控打印机"></a>6.2 基于SNMP监控打印机</h2><p>基于SNMP监控打印机耗材状况，当打印机耗材余量不足5%时，触发告警。</p><table><thead><tr><th>耗材情况</th><th>OID</th></tr></thead><tbody><tr><td>碳粉（品红）</td><td>.1.3.6.1.2.1.43.11.1.1.9.1.2</td></tr><tr><td>碳粉（青）</td><td>.1.3.6.1.2.1.43.11.1.1.9.1.1</td></tr><tr><td>碳粉（黄）</td><td>.1.3.6.1.2.1.43.11.1.1.9.1.3</td></tr><tr><td>碳粉（黑）</td><td>.1.3.6.1.2.1.43.11.1.1.9.1.4</td></tr></tbody></table><h3 id="6-2-1-打印机耗材监控模板制作"><a href="#6-2-1-打印机耗材监控模板制作" class="headerlink" title="6.2.1 打印机耗材监控模板制作"></a>6.2.1 打印机耗材监控模板制作</h3><h3 id="6-2-2-Zabbix-Server添加打印机"><a href="#6-2-2-Zabbix-Server添加打印机" class="headerlink" title="6.2.2 Zabbix Server添加打印机"></a>6.2.2 Zabbix Server添加打印机</h3><h1 id="7-Zabbix监控MySQL服务"><a href="#7-Zabbix监控MySQL服务" class="headerlink" title="7.Zabbix监控MySQL服务"></a>7.Zabbix监控MySQL服务</h1><h2 id="7-1-zabbix官方模板说明"><a href="#7-1-zabbix官方模板说明" class="headerlink" title="7.1 zabbix官方模板说明"></a>7.1 zabbix官方模板说明</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方mysql模板说明地址</span>https://www.zabbix.com/cn/integrations/mysql<span class="token number">1</span>.Install Zabbix agent and MySQL client. If necessary, <span class="token function">add</span> the path to the mysql and mysqladmin utilities to the global environment variable <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span><span class="token number">2</span>.Copy template_db_mysql.conf into the folder with Zabbix agent configuration <span class="token punctuation">(</span>/etc/zabbix/zabbix_agentd.d/ by default<span class="token punctuation">)</span>. Don<span class="token string">'t forget to restart Zabbix agent.3.Create a MySQL user for monitoring (&lt;password> at your discretion):    CREATE USER '</span>zbx_monitor<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED BY '</span><span class="token operator">&lt;</span>password<span class="token operator">></span><span class="token string">';    GRANT REPLICATION CLIENT,PROCESS,SHOW DATABASES,SHOW VIEW ON *.* TO '</span>zbx_monitor<span class="token string">'@'</span>%<span class="token string">';4.Create .my.cnf in the home directory of Zabbix agent for Linux (/var/lib/zabbix by default ) or my.cnf in c:\ for Windows. The file must have three strings:    [client]    user='</span>zbx_monitor<span class="token string">'    password='</span><span class="token operator">&lt;</span>password<span class="token operator">></span>'</code></pre></div></figure><h2 id="7-2-zabbix-agent配置"><a href="#7-2-zabbix-agent配置" class="headerlink" title="7.2 zabbix_agent配置"></a>7.2 zabbix_agent配置</h2><p><strong>创建mysql用户授权：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE <span class="token environment constant">USER</span> <span class="token string">'zbx_monitor'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'Admin@123'</span><span class="token punctuation">;</span>GRANT REPLICATION CLIENT,PROCESS,SHOW DATABASES,SHOW VIEW ON *.* TO <span class="token string">'zbx_monitor'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span></code></pre></div></figure><p><strong>在&#x2F;var&#x2F;lib&#x2F;zabbix，新建.my.cnf隐藏文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@mysql-master:~<span class="token comment"># mkdir /var/lib/zabbix/</span>root@mysql-master:~<span class="token comment"># vim /var/lib/zabbix/.my.cnf</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">user</span><span class="token operator">=</span>zbx_monitor<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">'Admin@123'</span></code></pre></div></figure><p><strong>在源码安装包中复制模板文件到zabbix目录：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.复制模板</span>root@mysql-master:~<span class="token comment"># cp zabbix-6.0.16/conf/zabbix_agentd/userparameter_mysql.conf /etc/zabbix/zabbix_agentd.d/</span><span class="token comment">#2.测试是否能正常获取数据</span>root@mysql-master:~<span class="token comment"># HOME=/var/lib/zabbix/ mysqladmin ping</span>mysqld is alive<span class="token comment">#3.配置zabbix agent</span>root@mysql-master:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_agentd.conf </span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_agentd.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30<span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30<span class="token assign-left variable">Hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.1.31<span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agentd.d/*.conf<span class="token comment">#4.重启zabbix agent</span>root@mysql-master:~<span class="token comment"># systemctl restart zabbix-agent</span></code></pre></div></figure><p><strong>Zabbix Server添加mysql模板：</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230422230130711.png" alt="image-20230422230130711"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix05/image-20230422230217173.png" alt="image-20230422230217173"> </p><h1 id="8-Zabbix监控HAProxy服务"><a href="#8-Zabbix监控HAProxy服务" class="headerlink" title="8.Zabbix监控HAProxy服务"></a>8.Zabbix监控HAProxy服务</h1><h1 id="9-Zabbix监控之故障自愈"><a href="#9-Zabbix监控之故障自愈" class="headerlink" title="9.Zabbix监控之故障自愈"></a>9.Zabbix监控之故障自愈</h1><h1 id="10-Zabbix基于Grafana实现图形显示"><a href="#10-Zabbix基于Grafana实现图形显示" class="headerlink" title="10.Zabbix基于Grafana实现图形显示"></a>10.Zabbix基于Grafana实现图形显示</h1><h1 id="11-Zabbix监控Elasticsearch服务"><a href="#11-Zabbix监控Elasticsearch服务" class="headerlink" title="11.Zabbix监控Elasticsearch服务"></a>11.Zabbix监控Elasticsearch服务</h1><h1 id="12-Zabbix监控Ceph服务"><a href="#12-Zabbix监控Ceph服务" class="headerlink" title="12.Zabbix监控Ceph服务"></a>12.Zabbix监控Ceph服务</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).Zabbix分布式监控Proxy</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix04/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix分布式监控Proxy"><a href="#1-Zabbix分布式监控Proxy" class="headerlink" title="1.Zabbix分布式监控Proxy"></a>1.Zabbix分布式监控Proxy</h1><p>Zabbix Proxy 可以代表 Zabbix server 收集性能和可用性数据。通过这种方式， proxy 可以自己承担一些收集数据的负载，并减轻 Zabbix<br>Server 的负担。</p><p>此外，当所有 agents 和 proxy 都向一个 Zabbix server 报告并且所有数据都集中收集时，使用 Proxy 代理是实现集中式和分布式监控的<br>最简单方法  </p><ul><li>Zabbix proxy 代理必须使用单独的数据库。  </li><li>proxy 收集的所有数据在传输到 server 之前都存储在本地。这种方式不会因为与 server 之间的任何临时通信问题而丢失数据。<br>ProxyLocalBuffer 和 ProxyOfflineBuffer 参数在proxy 配置文件控制数据在本地保存多长时间。  </li><li>Zabbix proxy 代理是一个数据收集器。它不计算触发器、处理事件或发送警报。</li></ul><h2 id="1-1-Zabbix-Proxy架构"><a href="#1-1-Zabbix-Proxy架构" class="headerlink" title="1.1 Zabbix Proxy架构"></a>1.1 Zabbix Proxy架构</h2><p><img src="/2023/04/17/Monitor/Zabbix/zabbix04/image-20230420161557593.png" alt="image-20230420161557593"> </p><h2 id="1-2-Zabbix-Proxy安装"><a href="#1-2-Zabbix-Proxy安装" class="headerlink" title="1.2 Zabbix Proxy安装"></a>1.2 Zabbix Proxy安装</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Zabbix Proxy</span><span class="token function">wget</span> https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu20.04_all.debdpkg <span class="token parameter variable">-i</span> zabbix-release_6.0-4+ubuntu20.04_all.deb<span class="token function">apt</span> update<span class="token function">apt</span> <span class="token function">install</span> zabbix-proxy-mysql zabbix-sql-scripts<span class="token comment">#2.本机安装MySQL</span><span class="token function">vim</span> /etc/apt/sources.list.d/mysql-community.listdeb https://mirrors.tuna.tsinghua.edu.cn/mysql/apt/ubuntu focal mysql-8.0 mysql-toolsapt-key adv --recv-keys <span class="token parameter variable">--keyserver</span> keyserver.ubuntu.com 467B942D3A79BD29<span class="token function">apt</span> update<span class="token function">apt</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-server<span class="token comment"># mysql -uroot -p</span>passwordmysql<span class="token operator">></span> create database zabbix_proxy character <span class="token builtin class-name">set</span> utf8mb4 collate utf8mb4_bin<span class="token punctuation">;</span>mysql<span class="token operator">></span> create user <span class="token string">'zabbix'</span>@<span class="token string">'%'</span> identified by <span class="token string">'zabbix'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> grant all privileges on zabbix_proxy.* to <span class="token string">'zabbix'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token function">cat</span> /usr/share/zabbix-sql-scripts/mysql/proxy.sql <span class="token operator">|</span> mysql --default-character-set<span class="token operator">=</span>utf8mb4 <span class="token parameter variable">-uzabbix</span> <span class="token parameter variable">-p</span> zabbix_proxy<span class="token comment"># mysql -uroot -p</span>passwordmysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment">#3.配置Zabbix Proxy连接数据库</span>root@zabbix-proxy:~<span class="token comment"># vim /etc/zabbix/zabbix_proxy.conf</span><span class="token assign-left variable">DBHost</span><span class="token operator">=</span>localhost<span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix_proxy<span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPort</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">#4.启动Zabbix Proxy</span>systemctl restart zabbix-proxysystemctl <span class="token builtin class-name">enable</span> zabbix-proxy</code></pre></div></figure><h2 id="1-3-配置Zabbix-Proxy主动模式"><a href="#1-3-配置Zabbix-Proxy主动模式" class="headerlink" title="1.3 配置Zabbix Proxy主动模式"></a>1.3 配置Zabbix Proxy主动模式</h2><p> 配置并使用Zabbix Proxy主动模式收集zabbix agent监控数据。</p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>zabbix-server</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Zabbix Server服务</td></tr><tr><td>zabbix-agent-active</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Zabbix Agent服务(主动)</td></tr><tr><td>zabbix-proxy-active</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Zabbix Proxy服务(主动)</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.配置zabbix proxy</span>root@zabbix-proxy-active:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_proxy.conf </span><span class="token assign-left variable">ProxyMode</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#0为主动，1为被动</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30 <span class="token comment">#zabbix server服务器的地址或主机名</span><span class="token assign-left variable">Hostname</span><span class="token operator">=</span>chsblogs-proxy-active <span class="token comment">#代理服务器名称，需要与zabbix server添加代理时候的proxy name是一致的。 </span><span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10051</span><span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_proxy.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">EnableRemoteCommands</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#允许zabbix server执行远程命令</span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_proxy.pid<span class="token assign-left variable">SocketDir</span><span class="token operator">=</span>/run/zabbix<span class="token assign-left variable">DBHost</span><span class="token operator">=</span>localhost<span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix_proxy<span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">ProxyLocalBuffer</span><span class="token operator">=</span><span class="token number">720</span> <span class="token comment">#已经提交到zabbix server的数据保留时间</span><span class="token assign-left variable">ProxyOfflineBuffer</span><span class="token operator">=</span><span class="token number">720</span> <span class="token comment">#未提交到zabbix server的时间保留时间</span><span class="token assign-left variable">HeartbeatFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#心跳间隔检测时间，默认60秒，范围0-3600秒，被动模式不使用</span><span class="token assign-left variable">ConfigFrequency</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#间隔多少秒从zabbix server获取监控项信息</span><span class="token assign-left variable">DataSenderFrequency</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#数据发送时间间隔，默认为1秒，范围为1-3600秒，被动模式不使用</span><span class="token assign-left variable">StartPollers</span><span class="token operator">=</span><span class="token number">20</span> <span class="token comment">#启动的数据采集器数量</span><span class="token assign-left variable">SNMPTrapperFile</span><span class="token operator">=</span>/var/log/snmptrap/snmptrap.log<span class="token assign-left variable">HistoryCacheSize</span><span class="token operator">=</span>2G <span class="token comment">#保存监控项而占用的最大内存</span><span class="token assign-left variable">HistoryIndexCacheSize</span><span class="token operator">=</span>128M <span class="token comment">#历史索引缓存的大小</span><span class="token assign-left variable">Timeout</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment">#监控项超时时间，单位为秒</span><span class="token assign-left variable">FpingLocation</span><span class="token operator">=</span>/usr/bin/fping<span class="token assign-left variable">Fping6Location</span><span class="token operator">=</span>/usr/bin/fping6<span class="token assign-left variable">LogSlowQueries</span><span class="token operator">=</span><span class="token number">3000</span> <span class="token comment">#毫秒，多久的数据库查询会被记录到日志</span><span class="token assign-left variable">StatsAllowedIP</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token comment">#2.重启zabbix proxy</span>root@zabbix-proxy-active:~<span class="token comment"># systemctl restart zabbix-proxy</span><span class="token comment">#3.添加zabbix被动代理</span></code></pre></div></figure><p>管理-&gt;agent代理程序-&gt;创建代理</p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix04/image-20230420215344747.png" alt="image-20230420215344747"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.添加主动模式代理主机</span></code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix04/image-20230420215440222.png" alt="image-20230420215440222"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.zabbix server配置,修改zabbix server向zabbix获取监控数据的频率等参数.</span>root@zabbix-server:~<span class="token comment"># vim /etc/zabbix/zabbix_server.conf</span><span class="token assign-left variable">StartProxyPollers</span><span class="token operator">=</span><span class="token number">20</span> <span class="token comment">#启用多少子进程与代理端通信，若代理较多可考虑加大此数值，范围是0-250</span><span class="token assign-left variable">ProxyConfigFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#proxy被动模式下，server多少秒同步配置文件至proxy，该参数仅用于被动模式</span><span class="token assign-left variable">ProxyDataFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#被动模式下，zabbix server间隔多少秒向proxy请求历史数据</span><span class="token comment">#6.zabbix agent配置文件</span>root@zabbix-agent-active:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_agentd.conf </span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_agentd.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30,192.168.1.35<span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10050</span><span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30,192.168.1.35<span class="token assign-left variable">Hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.1.33<span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agentd.d/*.conf<span class="token comment">#重启zabbix agent</span>root@zabbix-agent-active:~<span class="token comment"># systemctl restart zabbix-agent</span><span class="token comment">#7.zabbix web验证当前主机状态</span></code></pre></div></figure><h2 id="1-4-配置Zabbix-Proxy被动模式"><a href="#1-4-配置Zabbix-Proxy被动模式" class="headerlink" title="1.4 配置Zabbix Proxy被动模式"></a>1.4 配置Zabbix Proxy被动模式</h2><p> 配置并使用Zabbix Proxy被动模式收集zabbix agent监控数据。</p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>zabbix-server</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Zabbix Server服务</td></tr><tr><td>zabbix-agent-passive</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Zabbix Agent服务(被动)</td></tr><tr><td>zabbix-proxy-passive</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Zabbix Proxy服务(被动)</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.配置zabbix proxy</span>root@zabbix-proxy-passive:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_proxy.conf </span><span class="token assign-left variable">ProxyMode</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#0为主动，1为被动</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30 <span class="token comment">#zabbix server服务器的地址或主机名</span><span class="token assign-left variable">Hostname</span><span class="token operator">=</span>chsblogs-proxy-passive <span class="token comment">#代理服务器名称，需要与zabbix server添加代理时候的proxy name是一致的。 </span><span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10051</span><span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_proxy.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">EnableRemoteCommands</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#允许zabbix server执行远程命令</span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_proxy.pid<span class="token assign-left variable">SocketDir</span><span class="token operator">=</span>/run/zabbix<span class="token assign-left variable">DBHost</span><span class="token operator">=</span>localhost<span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix_proxy<span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">ProxyLocalBuffer</span><span class="token operator">=</span><span class="token number">720</span> <span class="token comment">#已经提交到zabbix server的数据保留时间</span><span class="token assign-left variable">ProxyOfflineBuffer</span><span class="token operator">=</span><span class="token number">720</span> <span class="token comment">#未提交到zabbix server的时间保留时间</span><span class="token assign-left variable">HeartbeatFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#心跳间隔检测时间，默认60秒，范围0-3600秒，被动模式不使用</span><span class="token assign-left variable">ConfigFrequency</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#间隔多少秒从zabbix server获取监控项信息</span><span class="token assign-left variable">DataSenderFrequency</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#数据发送时间间隔，默认为1秒，范围为1-3600秒，被动模式不使用</span><span class="token assign-left variable">StartPollers</span><span class="token operator">=</span><span class="token number">20</span> <span class="token comment">#启动的数据采集器数量</span><span class="token assign-left variable">SNMPTrapperFile</span><span class="token operator">=</span>/var/log/snmptrap/snmptrap.log<span class="token assign-left variable">HistoryCacheSize</span><span class="token operator">=</span>2G <span class="token comment">#保存监控项而占用的最大内存</span><span class="token assign-left variable">HistoryIndexCacheSize</span><span class="token operator">=</span>128M <span class="token comment">#历史索引缓存的大小</span><span class="token assign-left variable">Timeout</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment">#监控项超时时间，单位为秒</span><span class="token assign-left variable">FpingLocation</span><span class="token operator">=</span>/usr/bin/fping<span class="token assign-left variable">Fping6Location</span><span class="token operator">=</span>/usr/bin/fping6<span class="token assign-left variable">LogSlowQueries</span><span class="token operator">=</span><span class="token number">3000</span> <span class="token comment">#毫秒，多久的数据库查询会被记录到日志</span><span class="token assign-left variable">StatsAllowedIP</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token comment">#2.重启zabbix proxy</span>root@zabbix-proxy-passive:~<span class="token comment"># systemctl restart zabbix-proxy</span><span class="token comment">#3.添加zabbix被动代理</span></code></pre></div></figure><p>管理-&gt;agent代理程序-&gt;创建代理</p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix04/image-20230420210004848.png" alt="image-20230420210004848"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.添加被动模式代理主机</span></code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix04/image-20230420215155331.png" alt="image-20230420215155331"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.zabbix server配置,修改zabbix server向zabbix获取监控数据的频率等参数.</span>root@zabbix-server:~<span class="token comment"># vim /etc/zabbix/zabbix_server.conf</span><span class="token assign-left variable">StartProxyPollers</span><span class="token operator">=</span><span class="token number">20</span> <span class="token comment">#启用多少子进程与代理端通信，若代理较多可考虑加大此数值，范围是0-250</span><span class="token assign-left variable">ProxyConfigFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#proxy被动模式下，server多少秒同步配置文件至proxy，该参数仅用于被动模式</span><span class="token assign-left variable">ProxyDataFrequency</span><span class="token operator">=</span><span class="token number">60</span> <span class="token comment">#被动模式下，zabbix server间隔多少秒向proxy请求历史数据</span><span class="token comment">#6.zabbix agent配置文件</span>root@zabbix-agent-passive:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_agentd.conf </span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_agentd.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30,192.168.1.36<span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10050</span><span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">Hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.1.34<span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agentd.d/*.conf<span class="token comment">#重启zabbix agent</span>root@zabbix-agent-passive:~<span class="token comment"># systemctl restart zabbix-agent</span><span class="token comment">#7.zabbix web验证当前主机状态</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Zabbix配置文件详解</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix03/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix配置文件详解"><a href="#1-Zabbix配置文件详解" class="headerlink" title="1.Zabbix配置文件详解"></a>1.Zabbix配置文件详解</h1><h2 id="1-1-zabbix-server-conf"><a href="#1-1-zabbix-server-conf" class="headerlink" title="1.1 zabbix_server.conf"></a>1.1 zabbix_server.conf</h2><h2 id="1-2-zabbix-agentd-conf"><a href="#1-2-zabbix-agentd-conf" class="headerlink" title="1.2 zabbix_agentd.conf"></a>1.2 zabbix_agentd.conf</h2><h2 id="1-3-Zabbix监控Linux操作系统"><a href="#1-3-Zabbix监控Linux操作系统" class="headerlink" title="1.3 Zabbix监控Linux操作系统"></a>1.3 Zabbix监控Linux操作系统</h2><h3 id="1-3-1-安装配置zabbix-agent"><a href="#1-3-1-安装配置zabbix-agent" class="headerlink" title="1.3.1 安装配置zabbix agent"></a>1.3.1 安装配置zabbix agent</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机[192.168.1.32]安装zabbix agent</span>root@zabbix-agent-passive:~<span class="token comment"># wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-passive:~<span class="token comment"># dpkg -i zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-passive:~<span class="token comment"># apt update</span>root@zabbix-agent-passive:~<span class="token comment"># apt install zabbix-agent</span><span class="token comment">#2.配置zabbix agent</span>root@zabbix-agent-passive:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_agentd.conf </span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_agentd.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30 <span class="token comment">#zabbix server服务器地址</span><span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10050</span><span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">Hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.1.34<span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agentd.d/*.confroot@zabbix-agent-passive:~<span class="token comment"># systemctl restart zabbix-agent</span>root@zabbix-agent-passive:~<span class="token comment"># systemctl enable zabbix-agent</span></code></pre></div></figure><h3 id="1-3-2-zabbix-web添加监控主机"><a href="#1-3-2-zabbix-web添加监控主机" class="headerlink" title="1.3.2 zabbix web添加监控主机"></a>1.3.2 zabbix web添加监控主机</h3><p>检测-主机-创建主机：</p><p>选择相应的模板</p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420145547871.png" alt="image-20230420145547871"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420145932574.png" alt="image-20230420145932574"> </p><h2 id="1-4-Zabbix主动与被动监控模式"><a href="#1-4-Zabbix主动与被动监控模式" class="headerlink" title="1.4 Zabbix主动与被动监控模式"></a>1.4 Zabbix主动与被动监控模式</h2><p>无论是主动监控模式还是被动监控模式，都是站在zabbix agent角度来说的工作模式。</p><h3 id="1-4-1-Zabbix主动监控模式"><a href="#1-4-1-Zabbix主动监控模式" class="headerlink" title="1.4.1 Zabbix主动监控模式"></a>1.4.1 Zabbix主动监控模式</h3><p><strong>Zabbix主动监控模式：</strong>处理过程将相对复杂。 Agent 必须首先从 Zabbix sever 索取监控项列表以进行独立处理，然后会定期发送采集到的新值给Zabbix server  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机[192.168.1.33]安装zabbix agent</span>root@zabbix-agent-active:~<span class="token comment"># wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-active:~<span class="token comment"># dpkg -i zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-agent-active:~<span class="token comment"># apt update</span>root@zabbix-agent-active:~<span class="token comment"># apt install zabbix-agent</span><span class="token comment">#2.配置zabbix agent</span>root@zabbix-agent-active:~<span class="token comment"># grep -Ev "^#|^$" /etc/zabbix/zabbix_agentd.conf </span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/run/zabbix/zabbix_agentd.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30 <span class="token comment">#zabbix server服务器地址</span><span class="token assign-left variable">ListenPort</span><span class="token operator">=</span><span class="token number">10050</span><span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30 <span class="token comment">#主动模式的zabbix server地址</span><span class="token assign-left variable">Hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.1.33<span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agentd.d/*.confroot@zabbix-agent-active:~<span class="token comment"># systemctl restart zabbix-agent</span>root@zabbix-agent-active:~<span class="token comment"># systemctl enable zabbix-agent</span></code></pre></div></figure><p><strong>zabbix web添加监控主机：</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420155730582.png" alt="image-20230420155730582"> </p><p><strong>验证数据：</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420155906373.png" alt="image-20230420155906373"> </p><p><strong>ZBX可用性为灰色，但是查看主机的最新数据时又会发现一切都是那么的正常：</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420160119391.png" alt="image-20230420160119391"> </p><p><strong>需要添加zabbix agent被动的监控模板：</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420160422191.png" alt="image-20230420160422191"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix03/image-20230420160643419.png" alt="image-20230420160643419"> </p><h3 id="1-4-2-Zabbix被动监控模式"><a href="#1-4-2-Zabbix被动监控模式" class="headerlink" title="1.4.2 Zabbix被动监控模式"></a>1.4.2 Zabbix被动监控模式</h3><p><strong>Zabbix被动监控模式：</strong>agent 应答数据请求。 Zabbix server（或 proxy）询求数据，例如 CPU load，然后 Zabbix agent 返还结果。  </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Zabbix安装</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix02/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix规划及部署"><a href="#1-Zabbix规划及部署" class="headerlink" title="1.Zabbix规划及部署"></a>1.Zabbix规划及部署</h1><h2 id="1-1-主机清单"><a href="#1-1-主机清单" class="headerlink" title="1.1 主机清单"></a>1.1 主机清单</h2><p><strong>CentOS7.9主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>zabbix-server</td><td>192.168.1.60</td><td>CentOS7.9</td><td>Zabbix Server服务</td></tr><tr><td>mysql-master</td><td>192.168.1.61</td><td>CentOS7.9</td><td>MySQL5.7</td></tr><tr><td>mysql-slave</td><td>192.168.1.62</td><td>CentOS7.9</td><td>MySQL5.7</td></tr><tr><td>zabbix-agent-active</td><td>192.168.1.63</td><td>CentOS7.9</td><td>Zabbix Agent服务(主动)</td></tr><tr><td>zabbix-agent-passive</td><td>192.168.1.64</td><td>CentOS7.9</td><td>Zabbix Agent服务(被动)</td></tr><tr><td>zabbix-proxy-active</td><td>192.168.1.65</td><td>CentOS7.9</td><td>Zabbix Proxy服务(主动)</td></tr><tr><td>zabbix-proxy-passive</td><td>192.168.1.66</td><td>CentOS7.9</td><td>Zabbix Proxy服务(被动)</td></tr><tr><td>agent-node1</td><td>192.168.1.67</td><td>CentOS7.9</td><td>Zabbix Agent服务</td></tr><tr><td>agent-node2</td><td>192.168.1.68</td><td>CentOS7.9</td><td>Zabbix Agent服务</td></tr><tr><td>agent-node3</td><td>192.168.1.69</td><td>CentOS7.9</td><td>Zabbix Agent服务</td></tr></tbody></table><p><strong>Ubuntu20.04主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>zabbix-server</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Zabbix Server服务</td></tr><tr><td>mysql-master</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>MySQL8.0</td></tr><tr><td>mysql-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>MySQL8.0</td></tr><tr><td>zabbix-agent-active</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Zabbix Agent服务(主动)</td></tr><tr><td>zabbix-agent-passive</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Zabbix Agent服务(被动)</td></tr><tr><td>zabbix-proxy-active</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Zabbix Proxy服务(主动)</td></tr><tr><td>zabbix-proxy-passive</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Zabbix Proxy服务(被动)</td></tr><tr><td>agent-node1</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Zabbix Agent服务</td></tr><tr><td>agent-node2</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>Zabbix Agent服务</td></tr><tr><td>agent-node3</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Zabbix Agent服务</td></tr></tbody></table><h1 id="2-部署Zabbix5-0-x"><a href="#2-部署Zabbix5-0-x" class="headerlink" title="2.部署Zabbix5.0.x"></a>2.部署Zabbix5.0.x</h1><p><strong>基于CentOS7.9部署Zabbix5.0.x</strong></p><h2 id="2-1-安装MySQL5-7"><a href="#2-1-安装MySQL5-7" class="headerlink" title="2.1 安装MySQL5.7"></a>2.1 安装MySQL5.7</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台主机安装MySQL</span><span class="token function">vim</span> /etc/yum.repos.d/mysql-community.repo<span class="token punctuation">[</span>mysql-connectors-community<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL Connectors Community<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-connectors-community-el7-<span class="token variable">$basearch</span>/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://repo.mysql.com/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql-tools-community<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL Tools Community<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-tools-community-el7-<span class="token variable">$basearch</span>/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://repo.mysql.com/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql-5.7-community<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.7</span> Community Server<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-<span class="token variable">$basearch</span>/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://repo.mysql.com/RPM-GPG-KEY-mysqlyum <span class="token function">install</span> <span class="token parameter variable">-y</span>  mysql-community-serversystemctl start mysqldsystemctl <span class="token builtin class-name">enable</span> mysqld<span class="token assign-left variable">mysql_pass</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $NF&#125;'</span><span class="token variable">`</span></span>mysql <span class="token parameter variable">-u</span> root -p<span class="token variable">$mysql_pass</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Admin@123'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'Admin@123'</span> WITH GRANT OPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span>quit<span class="token punctuation">;</span><span class="token comment">#2.配置MySQL主从</span><span class="token comment">#2.1 两台主机创建mysql binlog目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/log/mysql<span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql.mysql /var/log/mysql<span class="token comment">#2.2 配置my.cnf（主机mysql-master配置）</span><span class="token builtin class-name">echo</span> <span class="token string">"server-id=1log-bin=mysql-binexpire_logs_days=10sync_binlog=1log_bin=/var/log/mysql/mysql-binbinlog_checksum=nonebinlog_format=mixedauto-increment-increment=2auto-increment-offset=1slave-skip-errors=allvalidate_password=offvalidate_password_policy=0default_password_lifetime=0lower_case_table_names=1sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTIONlog_timestamps=SYSTEM"</span> <span class="token operator">>></span> /etc/my.cnf<span class="token comment">#2.3 重启mysql服务</span>systemctl restart mysqld<span class="token comment">#2.4 配置my.cnf（主机mysql-slave配置）</span><span class="token builtin class-name">echo</span> <span class="token string">"server-id=2log-bin=mysql-binexpire_logs_days= 10sync_binlog=1log_bin=/var/log/mysql/mysql-binbinlog_checksum=nonebinlog_format=mixedauto-increment-increment=2auto-increment-offset=2slave-skip-errors=allvalidate_password=offvalidate_password_policy=0default_password_lifetime=0lower_case_table_names=1sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTIONlog_timestamps=SYSTEM"</span> <span class="token operator">>></span> /etc/my.cnf<span class="token comment">#2.5 重启mysql服务</span>systemctl restart mysqld<span class="token comment">#2.6 创建复制账号（两台主机创建）</span><span class="token comment">#mysql -u root -pAdmin@123</span><span class="token comment">#GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO replication@'%' IDENTIFIED BY 'replication';</span><span class="token comment">#flush privileges;</span><span class="token comment">#show master status;</span><span class="token punctuation">[</span>root@mysql-master ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -pAdmin@123</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">2</span>Server version: <span class="token number">5.7</span>.42-log MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2023</span>, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO replication@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'replication'</span><span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> show master status<span class="token punctuation">;</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>      <span class="token number">606</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token punctuation">[</span>root@mysql-slave ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -pAdmin@123</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">2</span>Server version: <span class="token number">5.7</span>.42-log MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2023</span>, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO replication@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'replication'</span><span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> show master status<span class="token punctuation">;</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>      <span class="token number">606</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#2.7 配置mysql复制（主机mysql-master配置）</span>mysql <span class="token parameter variable">-u</span> root -pAdmin@123stop slave<span class="token punctuation">;</span>change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">'192.168.1.62'</span>,master_port<span class="token operator">=</span><span class="token number">3306</span>,master_user<span class="token operator">=</span><span class="token string">'replication'</span>,master_password<span class="token operator">=</span><span class="token string">'replication'</span>,master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span>,master_log_pos<span class="token operator">=</span><span class="token number">606</span><span class="token punctuation">;</span>start slave<span class="token punctuation">;</span>show slave status<span class="token punctuation">\</span>G*************************** <span class="token number">1</span>. row ***************************               Slave_IO_State: Waiting <span class="token keyword">for</span> master to send event                  Master_Host: <span class="token number">192.168</span>.1.65                  Master_User: replication                  Master_Port: <span class="token number">3306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: <span class="token number">606</span>               Relay_Log_File: mysql-master-relay-bin.000002                Relay_Log_Pos: <span class="token number">312</span>        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes<span class="token comment">#2.8 配置mysql复制（主机mysql-slave配置）</span>mysql <span class="token parameter variable">-u</span> root -pAdmin@123stop slave<span class="token punctuation">;</span>change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">'192.168.1.61'</span>,master_port<span class="token operator">=</span><span class="token number">3306</span>,master_user<span class="token operator">=</span><span class="token string">'replication'</span>,master_password<span class="token operator">=</span><span class="token string">'replication'</span>,master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span>,master_log_pos<span class="token operator">=</span><span class="token number">606</span><span class="token punctuation">;</span>start slave<span class="token punctuation">;</span>show slave status<span class="token punctuation">\</span>G*************************** <span class="token number">1</span>. row ***************************               Slave_IO_State: Waiting <span class="token keyword">for</span> master to send event                  Master_Host: <span class="token number">192.168</span>.1.64                  Master_User: replication                  Master_Port: <span class="token number">3306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: <span class="token number">606</span>               Relay_Log_File: mysql-slave-relay-bin.000002                Relay_Log_Pos: <span class="token number">312</span>        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes</code></pre></div></figure><h2 id="2-2-安装Zabbix-Server"><a href="#2-2-安装Zabbix-Server" class="headerlink" title="2.2 安装Zabbix Server"></a>2.2 安装Zabbix Server</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Install Zabbix repository</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># rpm -Uvh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># yum clean all</span><span class="token comment">#2.安装Zabbix server，Web前端，agent</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># yum install zabbix-server-mysql zabbix-agent</span><span class="token comment">#3.Install Zabbix frontend</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># yum install centos-release-scl</span><span class="token comment">#编辑配置文件 /etc/yum.repos.d/zabbix.repo and enable zabbix-frontend repository.</span><span class="token punctuation">[</span>zabbix-frontend<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">..</span>.<span class="token comment">#Install Zabbix frontend packages.</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl</span><span class="token comment">#4.创建初始数据库</span><span class="token punctuation">[</span>root@mysql-master ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p</span>mysql<span class="token operator">></span> create database zabbix character <span class="token builtin class-name">set</span> utf8 collate utf8_bin<span class="token punctuation">;</span>mysql<span class="token operator">></span> create user <span class="token string">'zabbix'</span>@<span class="token string">'%'</span> identified by <span class="token string">'zabbix'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> grant all privileges on zabbix.* to <span class="token string">'zabbix'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment">#导入初始架构和数据，系统将提示您输入新创建的密码。</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># yum -y install mariadb</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># zcat /usr/share/doc/zabbix-server-mysql-5.0.33/create.sql.gz | mysql -uzabbix -h 192.168.1.64 -p zabbix</span>Enter password: <span class="token comment">#Disable log_bin_trust_function_creators option after importing database schema.</span><span class="token comment"># mysql -uroot -p</span>passwordmysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment">#5.为Zabbix server配置数据库,编辑配置文件 /etc/zabbix/zabbix_server.conf</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/zabbix/zabbix_server.conf </span><span class="token assign-left variable">DBHost</span><span class="token operator">=</span><span class="token number">192.168</span>.1.61<span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPort</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">#6.为Zabbix前端配置PHP</span><span class="token comment">#编辑配置文件 /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf uncomment and set 'listen' and 'server_name' directives.</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</span>        listen          <span class="token number">80</span><span class="token punctuation">;</span>        server_name     zabbix.chsblogs.com<span class="token punctuation">;</span>        <span class="token comment">#编辑配置文件 /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf add nginx to listen.acl_users directive.</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</span>listen.acl_users <span class="token operator">=</span> apache,nginx<span class="token comment">#然后取消注释并为您设置正确的时区。</span>php_value<span class="token punctuation">[</span>date.timezone<span class="token punctuation">]</span> <span class="token operator">=</span> Asia/Shanghai<span class="token comment">#6.启动Zabbix server和agent进程,启动Zabbix server和agent进程，并为它们设置开机自启：</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><span class="token comment">#7.访问测试</span>http://zabbix.chsblogs.com/</code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163005521.png" alt="image-20230418163005521"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163023896.png" alt="image-20230418163023896"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163055808.png" alt="image-20230418163055808"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163139743.png" alt="image-20230418163139743"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163156406.png" alt="image-20230418163156406"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163214343.png" alt="image-20230418163214343"> </p><p><strong>默认账号Admin密码zabbix</strong> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418163302325.png" alt="image-20230418163302325"> </p><h2 id="2-3-UI中文乱码处理"><a href="#2-3-UI中文乱码处理" class="headerlink" title="2.3 UI中文乱码处理"></a>2.3 UI中文乱码处理</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#中文乱码问题处理</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/share/zabbix/assets/fonts/</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># chown 777 /usr/share/zabbix/assets/fonts/</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># chown 777 simkai.ttf </span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># cp graphfont.ttf graphfont.ttf.bak</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># rm -rf graphfont.ttf</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># mv simkai.ttf graphfont.ttf</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/alternatives/zabbix-web-font</span><span class="token punctuation">[</span>root@zabbix-server fonts<span class="token punctuation">]</span><span class="token comment"># ln -sv /usr/share/zabbix/assets/fonts/graphfont.ttf /etc/alternatives/zabbix-web-font</span></code></pre></div></figure><h1 id="3-部署Zabbix6-0-x"><a href="#3-部署Zabbix6-0-x" class="headerlink" title="3.部署Zabbix6.0.x"></a>3.部署Zabbix6.0.x</h1><p><strong>基于Ubuntu20.04部署Zabbix6.0.x</strong></p><h2 id="3-1-安装MySQL8-0"><a href="#3-1-安装MySQL8-0" class="headerlink" title="3.1 安装MySQL8.0"></a>3.1 安装MySQL8.0</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台主机安装MySQL</span>root@mysql-master:~<span class="token comment"># vim /etc/apt/sources.list.d/mysql-community.list</span>deb https://mirrors.tuna.tsinghua.edu.cn/mysql/apt/ubuntu focal mysql-8.0 mysql-toolsroot@mysql-master:~<span class="token comment"># apt update</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>W: GPG error: https://mirrors.tuna.tsinghua.edu.cn/mysql/apt/ubuntu focal InRelease: The following signatures couldn<span class="token string">'t be verified because the public key is not available: NO_PUBKEY 467B942D3A79BD29......root@mysql-master:~# apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 467B942D3A79BD29root@mysql-master:~# apt updateroot@mysql-master:~# apt -y install mysql-server#登录mysqlroot@mysql-master:~# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type '</span><span class="token builtin class-name">help</span><span class="token punctuation">;</span><span class="token string">' or '</span><span class="token punctuation">\</span>h<span class="token string">' for help. Type '</span><span class="token punctuation">\</span>c<span class="token string">' to clear the current input statement.mysql> #修改密码mysql> ALTER USER '</span>root<span class="token string">'@'</span>localhost<span class="token string">' IDENTIFIED BY '</span>Admin@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)#配置远程登录mysql> CREATE USER '</span>root<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED BY '</span>Admin@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> GRANT ALL PRIVILEGES ON *.* TO '</span>root<span class="token string">'@'</span>%<span class="token string">' WITH GRANT OPTION;Query OK, 0 rows affected (0.00 sec)#更改加密规则mysql> ALTER USER '</span>root<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>Admin@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)#2.配置MySQL主从#2.1 配置my.cnf（主机mysql-master配置）root@mysql-master:~# vim /etc/mysql/mysql.conf.d/mysqld.cnfserver-id=1log-bin=mysql-binbinlog_format=mixedslave_skip_errors=alllog_timestamps=SYSTEMinnodb_adaptive_flushing_lwm = 30innodb_autoextend_increment = 128Minnodb_buffer_pool_size = 8Ginnodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5Ginnodb_write_io_threads = 4innodb_read_io_threads = 8thread_cache_size = 128#2.2 配置my.cnf（主机mysql-slave配置）root@mysql-slave:~# vim /etc/mysql/mysql.conf.d/mysqld.cnfserver-id=2log-bin=mysql-binbinlog_format=mixedslave_skip_errors=alllog_timestamps=SYSTEMinnodb_adaptive_flushing_lwm = 30innodb_autoextend_increment = 128Minnodb_buffer_pool_size = 8Ginnodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5Ginnodb_write_io_threads = 4innodb_read_io_threads = 8thread_cache_size = 128#2.3 重启mysql服务systemctl restart mysql#2.4 创建复制账号（两台主机创建）#CREATE USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED BY '</span>Repli@123<span class="token string">';#GRANT REPLICATION SLAVE ON *.* TO '</span>replication<span class="token string">'@'</span>%<span class="token string">';#ALTER USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>Repli@123<span class="token string">';#flush privileges;#show master status;root@mysql-master:~# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 9Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type '</span><span class="token builtin class-name">help</span><span class="token punctuation">;</span><span class="token string">' or '</span><span class="token punctuation">\</span>h<span class="token string">' for help. Type '</span><span class="token punctuation">\</span>c<span class="token string">' to clear the current input statement.mysql> CREATE USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED BY '</span>Repli@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> GRANT REPLICATION SLAVE ON *.* TO '</span>replication<span class="token string">'@'</span>%<span class="token string">';Query OK, 0 rows affected (0.00 sec)mysql> ALTER USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>Repli@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> flush privileges;Query OK, 0 rows affected (0.01 sec)mysql> show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |     1160 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)root@mysql-slave:~# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type '</span><span class="token builtin class-name">help</span><span class="token punctuation">;</span><span class="token string">' or '</span><span class="token punctuation">\</span>h<span class="token string">' for help. Type '</span><span class="token punctuation">\</span>c<span class="token string">' to clear the current input statement.mysql> CREATE USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED BY '</span>Repli@123<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> GRANT REPLICATION SLAVE ON *.* TO '</span>replication<span class="token string">'@'</span>%<span class="token string">';Query OK, 0 rows affected (0.01 sec)mysql> ALTER USER '</span>replication<span class="token string">'@'</span>%<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>Repli@123<span class="token string">';Query OK, 0 rows affected (0.00 sec)mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)mysql> show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |     1160 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.01 sec)mysql> #2.5 配置mysql复制（主机mysql-master配置）stop slave;change master to master_host='</span><span class="token number">192.168</span>.1.32<span class="token string">',master_port=3306,master_user='</span>replication<span class="token string">',master_password='</span>Repli@123<span class="token string">',master_log_file='</span>mysql-bin.000001<span class="token string">',master_log_pos=1160;start slave;show slave status\G*************************** 1. row ***************************               Slave_IO_State: Waiting for source to send event                  Master_Host: 192.168.1.35                  Master_User: replication                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 1160               Relay_Log_File: mysql-master-relay-bin.000002                Relay_Log_Pos: 326        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes#2.6 配置mysql复制（主机mysql-slave配置）stop slave;change master to master_host='</span><span class="token number">192.168</span>.1.31<span class="token string">',master_port=3306,master_user='</span>replication<span class="token string">',master_password='</span>Repli@123<span class="token string">',master_log_file='</span>mysql-bin.000001',master_log_pos<span class="token operator">=</span><span class="token number">1160</span><span class="token punctuation">;</span>start slave<span class="token punctuation">;</span>show slave status<span class="token punctuation">\</span>G*************************** <span class="token number">1</span>. row ***************************               Slave_IO_State: Waiting <span class="token keyword">for</span> <span class="token builtin class-name">source</span> to send event                  Master_Host: <span class="token number">192.168</span>.1.34                  Master_User: replication                  Master_Port: <span class="token number">3306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: <span class="token number">1160</span>               Relay_Log_File: mysql-slave-relay-bin.000002                Relay_Log_Pos: <span class="token number">326</span>        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes</code></pre></div></figure><h2 id="3-2-安装Zabbix-Server"><a href="#3-2-安装Zabbix-Server" class="headerlink" title="3.2 安装Zabbix Server"></a>3.2 安装Zabbix Server</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Install Zabbix repository</span>root@zabbix-server:~<span class="token comment"># wget https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4%2Bubuntu20.04_all.deb</span>root@zabbix-server:~<span class="token comment"># dpkg -i zabbix-release_6.0-4+ubuntu20.04_all.deb</span>root@zabbix-server:~<span class="token comment"># apt update</span><span class="token comment">#2.安装Zabbix server，Web前端，agent</span><span class="token punctuation">[</span>root@zabbix-server ~<span class="token punctuation">]</span><span class="token comment"># apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent</span><span class="token comment">#3.创建初始数据库</span>root@zabbix-server:~<span class="token comment"># mysql -u root -p</span>mysql<span class="token operator">></span> create database zabbix character <span class="token builtin class-name">set</span> utf8mb4 collate utf8mb4_bin<span class="token punctuation">;</span>mysql<span class="token operator">></span> create user <span class="token string">'zabbix'</span>@<span class="token string">'%'</span> identified by <span class="token string">'zabbix'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> grant all privileges on zabbix.* to <span class="token string">'zabbix'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment">#导入初始架构和数据，系统将提示您输入新创建的密码。</span>root@zabbix-server:~<span class="token comment"># apt install mysql-client</span>root@zabbix-server:~<span class="token comment"># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -h 192.168.1.34 -uzabbix -p zabbix</span>Enter password: <span class="token comment">#Disable log_bin_trust_function_creators option after importing database schema.</span><span class="token comment"># mysql -uroot -p</span>passwordmysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment">#5.为Zabbix server配置数据库,编辑配置文件 /etc/zabbix/zabbix_server.conf</span>root@zabbix-server:~<span class="token comment"># vim /etc/zabbix/zabbix_server.conf </span><span class="token assign-left variable">DBHost</span><span class="token operator">=</span><span class="token number">192.168</span>.1.31<span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">DBPort</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">#6.为Zabbix前端配置PHP</span><span class="token comment">#编辑配置文件 /etc/zabbix/nginx.conf uncomment and set 'listen' and 'server_name' directives.</span>root@zabbix-server:~<span class="token comment"># vim /etc/zabbix/nginx.conf</span>        listen          <span class="token number">80</span><span class="token punctuation">;</span>        server_name     zabbix.chsblogs.com<span class="token punctuation">;</span>        <span class="token comment">#7.启动Zabbix server和agent进程,启动Zabbix server和agent进程，并为它们设置开机自启：</span>root@zabbix-server:~<span class="token comment"># systemctl restart zabbix-server zabbix-agent nginx php7.4-fpm</span>root@zabbix-server:~<span class="token comment"># systemctl enable zabbix-server zabbix-agent nginx php7.4-fpm</span><span class="token comment">#7.访问测试</span>http://zabbix.chsblogs.com/</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装中文语言包</span>root@zabbix-server:~<span class="token comment"># sudo apt install language-pack-zh-hans</span><span class="token comment">#找到zh_CN.UTF-8 UTF-8 并取消#号注释，然后保存并退出</span>root@zabbix-server:~<span class="token comment"># sudo vim /etc/locale.gen</span><span class="token comment">#编译语言包</span>root@zabbix-server:~<span class="token comment"># sudo locale-gen</span><span class="token comment">#修改默认语言为中文</span>root@zabbix-server:~<span class="token comment"># sudo vi /etc/default/locale</span><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8<span class="token comment">#重启系统</span></code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160344882.png" alt="image-20230418160344882"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160407644.png" alt="image-20230418160407644"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160501239.png" alt="image-20230418160501239"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160648114.png" alt="image-20230418160648114"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160712150.png" alt="image-20230418160712150"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160733030.png" alt="image-20230418160733030"> </p><p><strong>默认账号Admin密码zabbix</strong> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418160822886.png" alt="image-20230418160822886"> </p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418161021381.png" alt="image-20230418161021381"> </p><p><strong>Zabbix6.0 UI中文乱码</strong></p><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418161724013.png" alt="image-20230418161724013"> </p><h2 id="3-3-UI中文乱码处理"><a href="#3-3-UI中文乱码处理" class="headerlink" title="3.3 UI中文乱码处理"></a>3.3 UI中文乱码处理</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在Windows系统中找到C:\Windows\Fonts中的楷体(常规)复制到Windows桌面上,通过xftp上传到/usr/share/zabbix/assets/fonts/目录下</span>root@zabbix-server:~<span class="token comment"># ll /usr/share/zabbix/assets/fonts/</span>总用量 <span class="token number">11512</span>drwxr-xr-x <span class="token number">2</span> root root       <span class="token number">45</span> <span class="token number">4</span>月  <span class="token number">18</span> 08:19 ./drwxr-xr-x <span class="token number">5</span> root root       <span class="token number">44</span> <span class="token number">4</span>月  <span class="token number">18</span> 07:32 <span class="token punctuation">..</span>/lrwxrwxrwx <span class="token number">1</span> root root       <span class="token number">38</span> <span class="token number">4</span>月  <span class="token number">18</span> 07:33 graphfont.ttf -<span class="token operator">></span> /etc/alternatives/zabbix-frontend-font-rw-r--r-- <span class="token number">1</span> root root <span class="token number">11787328</span> <span class="token number">4</span>月  <span class="token number">18</span> 08:19 simkai.ttfroot@zabbix-server:~<span class="token comment"># chown 777 /usr/share/zabbix/assets/fonts/</span>root@zabbix-server:~<span class="token comment"># chown 777 /usr/share/zabbix/assets/fonts/simkai.ttf</span>root@zabbix-server:~<span class="token comment"># cd /usr/share/zabbix/assets/fonts/</span>root@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># ls</span>graphfont.ttf  simkai.ttfroot@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># cp graphfont.ttf graphfont.ttf.bak</span>root@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># rm -rf graphfont.ttf</span>root@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># mv simkai.ttf graphfont.ttf</span>root@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># rm -rf /etc/alternatives/zabbix-frontend-font </span>root@zabbix-server:/usr/share/zabbix/assets/fonts<span class="token comment"># ln -s /usr/share/zabbix/assets/fonts/graphfont.ttf /etc/alternatives/zabbix-frontend-font</span></code></pre></div></figure><p><img src="/2023/04/17/Monitor/Zabbix/zabbix02/image-20230418162737149.png" alt="image-20230418162737149"> </p><h1 id="4-编译安装Zabbix-Server"><a href="#4-编译安装Zabbix-Server" class="headerlink" title="4.编译安装Zabbix Server"></a>4.编译安装Zabbix Server</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Zabbix简介</title>
    <link href="/2023/04/17/Monitor/Zabbix/zabbix01/"/>
    <url>/2023/04/17/Monitor/Zabbix/zabbix01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zabbix简介"><a href="#1-Zabbix简介" class="headerlink" title="1.Zabbix简介"></a>1.Zabbix简介</h1><p>Zabbix 是一个企业级的开源分布式监控解决方案。  </p><p>Zabbix 是一款监控网络的众多参数以及服务器、虚拟机、应用程序、服务、数据库、网站、云等的健康和完整性的软件。 Zabbix 使用灵活的通知机制，允许用户为几乎任何事件配置基于电子邮件的告警，以实现对服务器问题做出快速反应。 Zabbix 基于存储的数据提供出色的报告和数据可视化功能。这使得 Zabbix 成为容量规划的理想选择。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方地址</span>https://www.zabbix.com/cn/<span class="token comment">#zabbix官方手册</span>https://www.zabbix.com/documentation/6.0/zh/manual</code></pre></div></figure><h2 id="1-1-常见的监控方案"><a href="#1-1-常见的监控方案" class="headerlink" title="1.1 常见的监控方案"></a>1.1 常见的监控方案</h2><ul><li><p>老牌监控</p></li><li><ul><li>Cacti</li><li>Nagios</li><li>smokeping</li></ul></li><li><p>流行监控</p></li><li><ul><li>Zabbix</li><li>OpenFalcon</li><li>Prometheus+Grafana</li><li>滴滴开源夜莺Nightingale</li><li>smartping(专用于网络监控)</li><li>LEPUS天兔(专用于监控数据库)</li><li>自研</li></ul></li><li><p>第三方监控</p></li><li><ul><li>监控宝</li><li>听云</li><li>newrelic</li></ul></li></ul><h2 id="1-2-监控流程"><a href="#1-2-监控流程" class="headerlink" title="1.2 监控流程"></a>1.2 监控流程</h2><ul><li><p>数据采集：通过SNMP、Agent、ICMP、SSH、IPMI等对系统进行数据采集。</p></li><li><p>数据存储：各类数据库服务，MySQL、PostgreSQL等。</p></li><li><p>数据分析：提供图形及时间线情况信息，方便我们定位故障所在</p></li><li><p>数据展示：指标信息、指标趋势展示。</p></li><li><p>报警机制：电话、邮件、微信、短信、报警升级机制</p></li><li><p>报警处理：故障级别判定，找响应人员进行快速处理</p></li></ul><h2 id="1-3-监控指标"><a href="#1-3-监控指标" class="headerlink" title="1.3 监控指标"></a>1.3 监控指标</h2><p><strong>硬件监控</strong></p><ul><li>机器硬件:CPU温度、物理磁盘、虚拟磁盘、主板温度、磁盘阵列</li></ul><p><strong>系统监控</strong></p><ul><li>主机存活</li><li>CPU、内存、硬盘、使用率</li><li>inode</li><li>负载</li><li>网卡出入带宽</li><li>TCP连接数</li><li>磁盘读写、只读</li></ul><p><strong>应用监控</strong></p><ul><li>MySQL</li><li>Redis</li><li>Nginx</li></ul><p><strong>网络监控</strong></p><ul><li>网络质量</li><li>公网出口</li><li>专线带宽</li><li>网络设备</li></ul><p><strong>流量分析</strong></p><p><strong>日志监控</strong></p><p><strong>安全监控</strong></p><p><strong>性能监控(APM)java|php|go|nodejs|分布式链路追踪</strong></p><ul><li>PinPoint</li><li>Zipkin</li><li>SkyWalking</li><li>CAT、Jaeger</li></ul><p><strong>业务监控</strong></p><p>电商业务为例：</p><ul><li>每分钟产生多少订单</li><li>每分钟注册多少用户</li><li>每分钟多少活跃用户</li><li>每天有多少推广活动</li><li>推广活动引入多少用户</li><li>推广活动引入多少流量</li><li>推广活动引入多少利润</li></ul><p><strong>其他</strong></p><ul><li>SSL证书监控</li><li>存活性 进程是否还在，端口监听、Log滚动</li><li>健康指标 MQ消息堆积量</li><li>接口监控 API成功率，延迟情况，QPS等等</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(09).启用Ceph Dashboard并通过Prometheus监控Ceph集群状态</title>
    <link href="/2023/04/17/Storage/Ceph/ceph09/"/>
    <url>/2023/04/17/Storage/Ceph/ceph09/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(08).Ceph集群管理及工作原理</title>
    <link href="/2023/04/17/Storage/Ceph/ceph08/"/>
    <url>/2023/04/17/Storage/Ceph/ceph08/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(07).Ceph-RadosGW部署和使用</title>
    <link href="/2023/04/17/Storage/Ceph/ceph07/"/>
    <url>/2023/04/17/Storage/Ceph/ceph07/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(06).CephFS部署和使用</title>
    <link href="/2023/04/17/Storage/Ceph/ceph06/"/>
    <url>/2023/04/17/Storage/Ceph/ceph06/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(05).Ceph-RBD部署和使用</title>
    <link href="/2023/04/17/Storage/Ceph/ceph05/"/>
    <url>/2023/04/17/Storage/Ceph/ceph05/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(04).CephX认证机制</title>
    <link href="/2023/04/17/Storage/Ceph/ceph04/"/>
    <url>/2023/04/17/Storage/Ceph/ceph04/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03).基于ceph-deploy在Ubuntu18.04部署Ceph 16.2.x集群</title>
    <link href="/2023/04/17/Storage/Ceph/ceph03/"/>
    <url>/2023/04/17/Storage/Ceph/ceph03/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02).基于ceph-deploy在CentOS7.9部署Ceph 13.2.x集群</title>
    <link href="/2023/04/15/Storage/Ceph/ceph02/"/>
    <url>/2023/04/15/Storage/Ceph/ceph02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于ceph-deploy部署Ceph-13-2-x集群"><a href="#1-基于ceph-deploy部署Ceph-13-2-x集群" class="headerlink" title="1.基于ceph-deploy部署Ceph 13.2.x集群"></a>1.基于ceph-deploy部署Ceph 13.2.x集群</h1><h2 id="1-1-部署方式"><a href="#1-1-部署方式" class="headerlink" title="1.1 部署方式"></a>1.1 部署方式</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ceph-ansible：https://github.com/ceph/ceph-ansible     <span class="token comment">#python</span>ceph-salt：https://github.com/ceph/ceph-salt           <span class="token comment">#python</span>ceph-container：https://github.com/ceph/ceph-container <span class="token comment">#shell</span>ceph-chef：https://github.com/ceph/ceph-chef           <span class="token comment">#Ruby</span>cephadm: https://docs.ceph.com/en/latest/cephadm       <span class="token comment">#ceph官方在ceph 15版本加入的ceph部署工具</span>ceph-deploy：https://github.com/ceph/ceph-deploy <span class="token comment">#python</span>是一个ceph官方维护的基于ceph-deploy命令行部署ceph集群的工具，基于ssh执行可以sudo权限的shell命令以及一些python脚本 实现ceph集群的部署和管理维护。ceph-deploy只用于部署和管理ceph集群，客户端需要访问ceph，需要部署客户端工具。</code></pre></div></figure><h2 id="1-2-服务器准备"><a href="#1-2-服务器准备" class="headerlink" title="1.2 服务器准备"></a>1.2 服务器准备</h2><p>构建可靠的、低成本的、可扩展的、 与业务紧密结合使用的高性能分布式存储系统。</p><p><strong>Ceph分布式存储集群规划原则&#x2F;目标：</strong></p><ul><li><p>较低的 TCO (Total Cost of Ownership,总拥有成本):使用廉价的 X86 服务器。</p></li><li><p>较高的 IOPS (Input&#x2F;Output Operations Per Second,每秒可完成的读写次数)。</p></li><li><p>使用 SSD&#x2F;PCI-E SSD&#x2F;NVMe 硬盘提高存储集群数据以提高读写性能。</p></li><li><p>较大的存储空间：使用单块 2T&#x2F;4T 或更大容量的磁盘，提高单台服务器的总空间，节省服务器总数，降低机柜使用量。</p></li><li><p>较快的网络吞吐：使用 10G、40G、100G 或更快的光纤网络。</p></li><li><p>更好的数据冗余：数据可以以三副本机制分别保存到不同的主机，宕机 2 台也不会丢失数据。</p></li></ul><p><strong>服务器硬件选型：</strong></p><ul><li><p>monitor、mgr、radosgw：<br>小型，专用虚拟机:4C 8-16G<br>中型，专用虚拟机:8C 16-32G<br>大型&#x2F;超大型，专用物理机:32-64C 64-96G</p></li><li><p>MDS(相对配置更高一个等级):</p><p>小型，专用虚拟机:8C 8-16G<br>中型，专用虚拟机:16C 16-32G<br>大型&#x2F;超大型，专用物理机:16-32C 32-64G</p></li><li><p>OSD节点</p><ul><li>CPU:每个 OSD 进程至少有一个 CPU 核心或以上，比如服务器一共 2 颗 CPU 每个 12 核心 24线程，那么服务器总计有 48 核心 CPU，这样最多最多最多可以放 48 块磁盘。(物理 CPU 数量 乘以 每颗 CPU 核心) &#x2F; OSD 磁盘数量 &#x3D; X&#x2F;每 OSD CPU 核心 &gt;&#x3D; 1 核心 CPU 比如：(2 颗*每颗 24 核心) &#x2F; 24 OSD 磁盘数量&#x3D; 2&#x2F;每 OSD CPU 核心 &gt;&#x3D; 1 核心 CPU。</li><li>内存:OSD 硬盘空间在 2T 或以内的时候每个硬盘 2G 内存，4T 的空间每个 OSD 磁盘 4G 内存，即大约每 1T 的磁盘空间(最少)分配 1G 的内存空间做数据读写缓存。(总内存&#x2F;OSD 磁盘总空间)&#x3D; X &gt; 1G内存比如： (总内存 128G&#x2F;36T 磁盘总空间 )&#x3D; 3G&#x2F;每 T &gt; 1G 内存。</li></ul></li></ul><h2 id="1-3-服务器和网络环境"><a href="#1-3-服务器和网络环境" class="headerlink" title="1.3 服务器和网络环境"></a>1.3 <strong>服务器和网络环境</strong></h2><ul><li>一台服务器用于部署ceph集群即安装ceph-deploy</li><li>三台服务器作为ceph集群Mon监视服务器，每台服务器可以和ceph集群的cluster网络通信。</li><li>两台ceph-mgr管理服务器，每台服务器可以和ceph集群的cluster网络通信。</li><li>三台服务器作为ceph集群OSD存储服务器，每台三块或以上的磁盘。本次部署准备五块磁盘。&#x2F;dev&#x2F;sdb &#x2F;dev&#x2F;sdc &#x2F;dev&#x2F;sdd &#x2F;dev&#x2F;sde &#x2F;dev&#x2F;sdf，每块硬盘200G。</li><li>三台客户端服务器，用于测试RBD、RGW、CephFS。</li><li>网络：每台服务器支持两个网络，public网络针对客户端访问，cluster网络用于集群管理及数据同步。</li></ul><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>ceph-deploy</td><td>192.168.1.10&#x2F;172.31.1.10</td><td>CentOS7.9</td><td>ceph-deploy集群部署服务器</td></tr><tr><td>ceph-mon1</td><td>192.168.1.11&#x2F;172.31.1.11</td><td>CentOS7.9</td><td>Mon监视服务器</td></tr><tr><td>ceph-mon2</td><td>192.168.1.12&#x2F;172.31.1.12</td><td>CentOS7.9</td><td>Mon监视服务器</td></tr><tr><td>ceph-mon3</td><td>192.168.1.13&#x2F;172.31.1.13</td><td>CentOS7.9</td><td>Mon监视服务器</td></tr><tr><td>ceph-mgr1</td><td>192.168.1.14&#x2F;172.31.1.14</td><td>CentOS7.9</td><td>Mgr管理服务器</td></tr><tr><td>ceph-mgr1</td><td>192.168.1.15&#x2F;172.31.1.15</td><td>CentOS7.9</td><td>Mgr管理服务器</td></tr><tr><td>ceph-node1</td><td>192.168.1.16&#x2F;172.31.1.16</td><td>CentOS7.9</td><td>OSD存储服务器</td></tr><tr><td>ceph-node1</td><td>192.168.1.17&#x2F;172.31.1.17</td><td>CentOS7.9</td><td>OSD存储服务器</td></tr><tr><td>ceph-node1</td><td>192.168.1.18&#x2F;172.31.1.18</td><td>CentOS7.9</td><td>OSD存储服务器</td></tr><tr><td>ceph-client1</td><td>192.168.1.19&#x2F;172.31.1.19</td><td>CentOS7.9</td><td>Client1</td></tr><tr><td>ceph-client2</td><td>192.168.1.20&#x2F;172.31.1.20</td><td>CentOS7.9</td><td>Client2</td></tr><tr><td>ceph-client3</td><td>192.168.1.21&#x2F;172.31.1.21</td><td>CentOS7.9</td><td>Client3</td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/15/Storage/Ceph/ceph02/image-20230415224113313.png" alt="image-20230415224113313"> </p><h2 id="1-4-环境准备"><a href="#1-4-环境准备" class="headerlink" title="1.4 环境准备"></a>1.4 环境准备</h2><h3 id="1-4-1-配置主机名及解析"><a href="#1-4-1-配置主机名及解析" class="headerlink" title="1.4.1 配置主机名及解析"></a>1.4.1 配置主机名及解析</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#各服务器主机名配置</span>hostnamectl set-hostname ceph-deploy.chsblogs.comhostnamectl set-hostname ceph-mon1.chsblogs.comhostnamectl set-hostname ceph-mon2.chsblogs.comhostnamectl set-hostname ceph-mon3.chsblogs.comhostnamectl set-hostname ceph-mgr1.chsblogs.comhostnamectl set-hostname ceph-mgr2.chsblogs.comhostnamectl set-hostname ceph-node1.chsblogs.comhostnamectl set-hostname ceph-node2.chsblogs.comhostnamectl set-hostname ceph-node3.chsblogs.comhostnamectl set-hostname ceph-client1.chsblogs.comhostnamectl set-hostname ceph-client2.chsblogs.comhostnamectl set-hostname ceph-client3.chsblogs.com<span class="token comment">#各服务器主机名解析</span><span class="token function">vi</span> /etc/hosts<span class="token number">172.31</span>.1.10 ceph-deploy.chsblogs.com ceph-deploy<span class="token number">172.31</span>.1.11 ceph-mon1.chsblogs.com ceph-mon1<span class="token number">172.31</span>.1.12 ceph-mon2.chsblogs.com ceph-mon2<span class="token number">172.31</span>.1.13 ceph-mon3.chsblogs.com ceph-mon3<span class="token number">172.31</span>.1.14 ceph-mgr1.chsblogs.com ceph-mgr1<span class="token number">172.31</span>.1.15 ceph-mgr2.chsblogs.com ceph-mgr2<span class="token number">172.31</span>.1.16 ceph-node1.chsblogs.com ceph-node1<span class="token number">172.31</span>.1.17 ceph-node2.chsblogs.com ceph-node2<span class="token number">172.31</span>.1.18 ceph-node3.chsblogs.com ceph-node3</code></pre></div></figure><h3 id="1-4-2-系统初始化"><a href="#1-4-2-系统初始化" class="headerlink" title="1.4.2 系统初始化"></a>1.4.2 系统初始化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#所有主机系统初始化</span>systemctl stop firewalldsystemctl disable firewalldsetenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/configyum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> ntpdate telnet lrzsz</code></pre></div></figure><h3 id="1-4-3-网络配置"><a href="#1-4-3-网络配置" class="headerlink" title="1.4.3 网络配置"></a>1.4.3 网络配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-ens36<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens36systemctl restart network<span class="token punctuation">[</span>root@ceph-deploy ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.10 <span class="token number">172.31</span>.1.10<span class="token punctuation">[</span>root@ceph-mon1 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 <span class="token number">172.31</span>.1.11<span class="token punctuation">[</span>root@ceph-mon2 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.12 <span class="token number">172.31</span>.1.12<span class="token punctuation">[</span>root@ceph-mon3 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.13 <span class="token number">172.31</span>.1.13<span class="token punctuation">[</span>root@ceph-mgr1 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.14 <span class="token number">172.31</span>.1.14<span class="token punctuation">[</span>root@ceph-mgr2 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.15 <span class="token number">172.31</span>.1.15<span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.16 <span class="token number">172.31</span>.1.16<span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.17 <span class="token number">172.31</span>.1.17<span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.18 <span class="token number">172.31</span>.1.18<span class="token punctuation">[</span>root@ceph-client1 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.19 <span class="token number">172.31</span>.1.19<span class="token punctuation">[</span>root@ceph-client2 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.20 <span class="token number">172.31</span>.1.20<span class="token punctuation">[</span>root@ceph-client3 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.21 <span class="token number">172.31</span>.1.21</code></pre></div></figure><h3 id="1-4-4-OSD存储服务器磁盘配置"><a href="#1-4-4-OSD存储服务器磁盘配置" class="headerlink" title="1.4.4 OSD存储服务器磁盘配置"></a>1.4.4 OSD存储服务器磁盘配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># lsblk </span>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda      <span class="token number">8</span>:0    <span class="token number">0</span>  100G  <span class="token number">0</span> disk ├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> part /boot└─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>   98G  <span class="token number">0</span> part /sdb      <span class="token number">8</span>:16   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdc      <span class="token number">8</span>:32   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdd      <span class="token number">8</span>:48   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sde      <span class="token number">8</span>:64   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdf      <span class="token number">8</span>:80   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">4</span>.4G  <span class="token number">0</span> rom<span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># lsblk </span>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda      <span class="token number">8</span>:0    <span class="token number">0</span>  100G  <span class="token number">0</span> disk ├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>   99G  <span class="token number">0</span> part /sdb      <span class="token number">8</span>:16   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdc      <span class="token number">8</span>:32   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdd      <span class="token number">8</span>:48   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sde      <span class="token number">8</span>:64   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdf      <span class="token number">8</span>:80   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">4</span>.4G  <span class="token number">0</span> rom<span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># lsblk </span>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda      <span class="token number">8</span>:0    <span class="token number">0</span>  100G  <span class="token number">0</span> disk ├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>   99G  <span class="token number">0</span> part /sdb      <span class="token number">8</span>:16   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdc      <span class="token number">8</span>:32   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdd      <span class="token number">8</span>:48   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sde      <span class="token number">8</span>:64   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sdf      <span class="token number">8</span>:80   <span class="token number">0</span>  200G  <span class="token number">0</span> disk sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">4</span>.4G  <span class="token number">0</span> rom </code></pre></div></figure><h3 id="1-4-5-配置epel-x2F-yum源"><a href="#1-4-5-配置epel-x2F-yum源" class="headerlink" title="1.4.5 配置epel&#x2F;yum源"></a>1.4.5 配置epel&#x2F;yum源</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#仓库地址</span><span class="token comment">#阿里云镜像仓库：https://mirrors.aliyun.com/ceph/</span><span class="token comment">#网易云镜像仓库：http://mirrors.163.com/ceph/</span><span class="token comment">#清华大学镜像源：https://mirrors.tuna.tsinghua.edu.cn/ceph/</span><span class="token comment">#1.每个服务器安装epel源</span>yum <span class="token function">install</span> epel-release <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s!^metalink=!#metalink=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!^#baseurl=!baseurl=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://download\.fedoraproject\.org/pub/epel!https://mirrors.tuna.tsinghua.edu.cn/epel!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://download\.example/pub/epel!https://mirrors.tuna.tsinghua.edu.cn/epel!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-i</span> /etc/yum.repos.d/epel*.repo<span class="token comment">#2.每个服务器安装ceph源</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-mimic/el7/noarch/ceph-release-1-1.el7.noarch.rpm<span class="token comment">#修改ceph镜像源</span><span class="token function">vim</span> /etc/yum.repos.d/ceph.repo<span class="token punctuation">[</span>Ceph<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Ceph packages <span class="token keyword">for</span> <span class="token variable">$basearch</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-mimic/el7/<span class="token variable">$basearch</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">type</span><span class="token operator">=</span>rpm-md<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc<span class="token punctuation">[</span>Ceph-noarch<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Ceph noarch packages<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-mimic/el7/noarch<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">type</span><span class="token operator">=</span>rpm-md<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc<span class="token punctuation">[</span>ceph-source<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Ceph <span class="token builtin class-name">source</span> packages<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-mimic/el7/SRPMS<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">type</span><span class="token operator">=</span>rpm-md<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc </code></pre></div></figure><h3 id="1-4-6-配置sudo"><a href="#1-4-6-配置sudo" class="headerlink" title="1.4.6 配置sudo"></a>1.4.6 配置sudo</h3><p>推荐使用指定的普通用户部署和运行 ceph 集群，普通用户只要能以非交互方式执行 sudo命令执行一些特权命令即可，新版的 ceph-deploy 可以指定包含 root 的在内只要可以执行 sudo 命令的用户，不过仍然推荐使用普通用户，<strong>ceph 集群安装完成后会自动创建ceph 用户(ceph 集群默认会使用 ceph 用户运行各服务进程,如 ceph-osd 等)，因此推荐使用除了ceph 之外的比如 cephuser、cephadmin 这样的普通用户去部署和管理ceph集群。</strong></p><p>cephadmin 仅用于通过 ceph-deploy 部署和管理 ceph 集群的时候使用，比如首次初始化集群和部署集群、添加节点、删除节点等，ceph 集群在 node 节点、mgr 等节点会使用ceph 用户启动服务进程。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在ceph-deploy、ceph-mon-mg、OSD存储服务器创建ceph用户</span><span class="token function">groupadd</span> ceph <span class="token parameter variable">-g</span> <span class="token number">2023</span> <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> <span class="token parameter variable">-u</span> <span class="token number">2023</span> <span class="token parameter variable">-g</span> <span class="token number">2023</span> ceph <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"123456"</span> <span class="token operator">|</span> <span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> ceph<span class="token comment">#echo "ceph    ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers</span><span class="token function">vim</span> /etc/sudoersroot    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALLceph    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD:ALL</code></pre></div></figure><h3 id="1-4-7-配置免密认证"><a href="#1-4-7-配置免密认证" class="headerlink" title="1.4.7 配置免密认证"></a>1.4.7 配置免密认证</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.ceph-deploy服务器生成密钥</span><span class="token punctuation">[</span>root@ceph-deploy ~<span class="token punctuation">]</span><span class="token comment"># su - ceph</span><span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-keygen Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/ceph/.ssh/id_rsa<span class="token punctuation">)</span>: Created directory <span class="token string">'/home/ceph/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /home/ceph/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /home/ceph/.ssh/id_rsa.pub.The key fingerprint is:SHA256:OMl4EdeWu4h+MjhWeGBHZ/DA7Iu5l8ldl+DgA9vHybY ceph@ceph-deploy.chsblogs.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>     o+<span class="token punctuation">..</span>. <span class="token builtin class-name">.</span>     <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">+=</span>o +      <span class="token operator">|</span><span class="token operator">|</span>     o.o<span class="token punctuation">..</span> <span class="token builtin class-name">.</span>     <span class="token operator">|</span><span class="token operator">|</span>    oo++. o      <span class="token operator">|</span><span class="token operator">|</span>   <span class="token punctuation">..</span>**BS* + <span class="token builtin class-name">.</span>   <span class="token operator">|</span><span class="token operator">|</span>    +.*.<span class="token operator">=</span> X o    <span class="token operator">|</span><span class="token operator">|</span>     B + <span class="token operator">=</span> o     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">=</span> O o E      <span class="token operator">|</span><span class="token operator">|</span>   <span class="token builtin class-name">.</span> o +         <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token comment">#2.分发密钥</span><span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.10<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.11<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.12<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.13<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.14<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.15<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.16<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.17<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ssh-copy-id ceph@172.31.1.18</code></pre></div></figure><h2 id="1-5-部署ceph-13-2-x集群"><a href="#1-5-部署ceph-13-2-x集群" class="headerlink" title="1.5 部署ceph 13.2.x集群"></a>1.5 部署ceph 13.2.x集群</h2><h3 id="1-5-1-安装ceph部署工具"><a href="#1-5-1-安装ceph部署工具" class="headerlink" title="1.5.1 安装ceph部署工具"></a>1.5.1 安装ceph部署工具</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ceph-deploy ~<span class="token punctuation">]</span><span class="token comment"># su - ceph</span><span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ceph-deploy python-setuptools python2-subprocess3<span class="token comment">#ceph-deploy命令</span>new                 <span class="token comment">#开始部署一个新的ceph存储集群，并生成 CLUSTER.conf 集群配置文件和keyring认证文件</span><span class="token function">install</span>             <span class="token comment">#在远程主机上安装 ceph 相关的软件包, 可以通过--release 指定安装的版本。</span>rgw                 <span class="token comment">#管理 RGW 守护程序(RADOSGW,对象存储网关)。</span>mgr                 <span class="token comment">#管理 MGR 守护程序(ceph-mgr,Ceph Manager DaemonCeph 管理器守护程序)。</span>mds                 <span class="token comment">#管理 MDS 守护程序(Ceph Metadata Server，ceph 源数据服务器)。</span>mon                 <span class="token comment">#管理 MON 守护程序(ceph-mon,ceph 监视器)。</span>gatherkeys          <span class="token comment">#从指定获取提供新节点的验证 keys，这些 keys 会在添加新的 MON/OSD/MD 加入的时候使用。</span>disk                <span class="token comment">#管理远程主机磁盘。</span>osd                 <span class="token comment">#在远程主机准备数据磁盘，即将指定远程主机的指定磁盘添加到 ceph 集群作为 osd 使用。</span>repo                <span class="token comment">#远程主机仓库管理。</span>admin               <span class="token comment">#推送 ceph 集群配置文件和 client.admin 认证文件到远程主机。</span>config              <span class="token comment">#将 ceph.conf 配置文件推送到远程主机或从远程主机拷贝。</span>uninstall           <span class="token comment">#从远端主机删除安装包。</span>purgedata           <span class="token comment">#从/var/lib/ceph 删除 ceph 数据,会删除/etc/ceph 下的内容。</span>purge               <span class="token comment">#删除远端主机的安装包和所有数据。</span>forgetkeys          <span class="token comment">#从本地主机删除所有的验证 keyring, 包括 client.admin, monitor, bootstrap 等认证文件。</span>pkg                 <span class="token comment">#管理远端主机的安装包。</span>calamari            <span class="token comment">#安装并配置一个 calamari web 节点，calamari 是一个 web 监控平台。</span></code></pre></div></figure><h3 id="1-5-2-初始化Mon节点"><a href="#1-5-2-初始化Mon节点" class="headerlink" title="1.5.2 初始化Mon节点"></a>1.5.2 初始化Mon节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#业务网络：192.168.0.0/21，存储网络：172.31.0.0/21</span><span class="token comment">#--cluster-network 指定ceph集群管理网络</span><span class="token comment">#--public-network 指定ceph后端存储业务网络</span><span class="token comment">#ceph-mon1 指定mon1节点的域名\主机名</span><span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> ceph-cluster<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> ceph-cluster/<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy new --cluster-network <span class="token number">172.31</span>.0.0/21 --public-network <span class="token number">192.168</span>.0.0/21 ceph-mon1<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy new --cluster-network <span class="token number">172.31</span>.0.0/21 --public-network <span class="token number">192.168</span>.0.0/21 ceph-mon1<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function new at 0x7f2b7ac0cde<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7f2b7a3838c<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ssh_copykey                   <span class="token builtin class-name">:</span> True<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  mon                           <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'ceph-mon1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  public_network                <span class="token builtin class-name">:</span> <span class="token number">192.168</span>.0.0/21<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster_network               <span class="token builtin class-name">:</span> <span class="token number">172.31</span>.0.0/21<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  fsid                          <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Creating new cluster named ceph<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> making sure passwordless SSH succeeds<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-deploy.chsblogs.com <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">ssh</span> <span class="token parameter variable">-CT</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">BatchMode</span><span class="token operator">=</span>yes ceph-mon1<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>WARNIN<span class="token punctuation">]</span> could not connect via SSH<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> will connect again with password promptThe authenticity of <span class="token function">host</span> <span class="token string">'ceph-mon1 (172.31.1.11)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:sYs5WBulENawEr0qNwI3IxkgPF+m+xbQdaNb8hWmYn4.ECDSA key fingerprint is MD5:c5:e0:68:74:b6:e4:cd:c4:9a:8c:80:61:f2:1a:da:30.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>ceph-mon1<span class="token string">' (ECDSA) to the list of known hosts.[ceph-mon1][DEBUG ] connected to host: ceph-mon1 [ceph-mon1][DEBUG ] detect platform information from remote host[ceph-mon1][DEBUG ] detect machine type[ceph_deploy.new][INFO  ] adding public keys to authorized_keys[ceph-mon1][DEBUG ] append contents to file[ceph-mon1][DEBUG ] connection detected need for sudo[ceph-mon1][DEBUG ] connected to host: ceph-mon1 [ceph-mon1][DEBUG ] detect platform information from remote host[ceph-mon1][DEBUG ] detect machine type[ceph-mon1][DEBUG ] find the location of an executable[ceph-mon1][INFO  ] Running command: sudo /usr/sbin/ip link show[ceph-mon1][INFO  ] Running command: sudo /usr/sbin/ip addr show[ceph-mon1][DEBUG ] IP addresses found: [u'</span><span class="token number">172.31</span>.1.11<span class="token string">', u'</span><span class="token number">192.168</span>.1.11<span class="token string">'][ceph_deploy.new][DEBUG ] Resolving host ceph-mon1[ceph_deploy.new][DEBUG ] Monitor ceph-mon1 at 192.168.1.11[ceph_deploy.new][DEBUG ] Monitor initial members are ['</span>ceph-mon1<span class="token string">'][ceph_deploy.new][DEBUG ] Monitor addrs are [u'</span><span class="token number">192.168</span>.1.11'<span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Creating a random mon key<span class="token punctuation">..</span>.<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Writing monitor keyring to ceph.mon.keyring<span class="token punctuation">..</span>.<span class="token punctuation">[</span>ceph_deploy.new<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Writing initial config to ceph.conf<span class="token punctuation">..</span>.<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ lltotal <span class="token number">12</span>-rw-rw-r-- <span class="token number">1</span> ceph ceph  <span class="token number">263</span> Apr <span class="token number">16</span> <span class="token number">10</span>:53 ceph.conf <span class="token comment">#配置文件</span>-rw-rw-r-- <span class="token number">1</span> ceph ceph <span class="token number">3900</span> Apr <span class="token number">16</span> <span class="token number">10</span>:53 ceph-deploy-ceph.log <span class="token comment">#初始化日志</span>-rw------- <span class="token number">1</span> ceph ceph   <span class="token number">73</span> Apr <span class="token number">16</span> <span class="token number">10</span>:53 ceph.mon.keyring <span class="token comment">#节点内部通信认证密钥</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">cat</span> ceph.conf <span class="token punctuation">[</span>global<span class="token punctuation">]</span>fsid <span class="token operator">=</span> 47cb4a4d-a2d6-4557-8fce-472e72053dd2 <span class="token comment">#ceph集群ID</span>public_network <span class="token operator">=</span> <span class="token number">192.168</span>.0.0/21cluster_network <span class="token operator">=</span> <span class="token number">172.31</span>.0.0/21mon_initial_members <span class="token operator">=</span> ceph-mon1-mgr1mon_host <span class="token operator">=</span> <span class="token number">192.168</span>.1.11auth_cluster_required <span class="token operator">=</span> cephxauth_service_required <span class="token operator">=</span> cephxauth_client_required <span class="token operator">=</span> cephx<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">cat</span> ceph.mon.keyring <span class="token punctuation">[</span>mon.<span class="token punctuation">]</span>key <span class="token operator">=</span> AQAxYztkAAAAABAA8L7HvK0m/qlotkZMc7Hk+g<span class="token operator">==</span>caps mon <span class="token operator">=</span> allow *</code></pre></div></figure><h3 id="1-5-3-初始化OSD存储节点"><a href="#1-5-3-初始化OSD存储节点" class="headerlink" title="1.5.3 初始化OSD存储节点"></a>1.5.3 初始化OSD存储节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.存储节点缓存包，加快安装速度</span><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># yum makecache fast</span><span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># yum makecache fast</span><span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># yum makecache fast</span><span class="token comment">#2.初始化ceph-node1和ceph-node2存储节点</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy <span class="token function">install</span> --no-adjust-repos <span class="token parameter variable">--nogpgcheck</span> ceph-node1 ceph-node2<span class="token comment">#3.后期加入ceph-node3存储节点，初始化</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy <span class="token function">install</span> --no-adjust-repos <span class="token parameter variable">--nogpgcheck</span> ceph-node3</code></pre></div></figure><h3 id="1-5-4-配置mon节点"><a href="#1-5-4-配置mon节点" class="headerlink" title="1.5.4 配置mon节点"></a>1.5.4 配置mon节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.mon节点安装ceph-mon服务</span><span class="token punctuation">[</span>root@ceph-mon1 ~<span class="token punctuation">]</span><span class="token comment"># yum install ceph-mon -y</span><span class="token comment">#2.通过读取当前目录下的ceph.conf配置文件初始化mon节点，mon节点高可用可以后期横向扩容</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy mon create-initial<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy mon create-initial<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  subcommand                    <span class="token builtin class-name">:</span> create-initial<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7f4cf9dc2cf<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function mon at 0x7f4cf9db041<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  keyrings                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Deploying mon, cluster ceph hosts ceph-mon1<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detecting platform <span class="token keyword">for</span> <span class="token function">host</span> ceph-mon1 <span class="token punctuation">..</span>.<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-mon1 <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">find</span> the location of an executable<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> distro info: CentOS Linux <span class="token number">7.9</span>.2009 Core<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> determining <span class="token keyword">if</span> provided <span class="token function">host</span> has same <span class="token function">hostname</span> <span class="token keyword">in</span> remote<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> get remote short <span class="token function">hostname</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> deploying mon to ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> get remote short <span class="token function">hostname</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> remote hostname: ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">write</span> cluster configuration to /etc/ceph/<span class="token punctuation">&#123;</span>cluster<span class="token punctuation">&#125;</span>.conf<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> create the mon path <span class="token keyword">if</span> it does not exist<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> checking <span class="token keyword">for</span> <span class="token keyword">done</span> path: /var/lib/ceph/mon/ceph-ceph-mon1/done<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token keyword">done</span> path does not exist: /var/lib/ceph/mon/ceph-ceph-mon1/done<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> creating keyring file: /var/lib/ceph/tmp/ceph-ceph-mon1.mon.keyring<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> create the monitor keyring <span class="token function">file</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> ceph-mon <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--mkfs</span> <span class="token parameter variable">-i</span> ceph-mon1 <span class="token parameter variable">--keyring</span> /var/lib/ceph/tmp/ceph-ceph-mon1.mon.keyring <span class="token parameter variable">--setuser</span> <span class="token number">2023</span> <span class="token parameter variable">--setgroup</span> <span class="token number">2023</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> unlinking keyring <span class="token function">file</span> /var/lib/ceph/tmp/ceph-ceph-mon1.mon.keyring<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> create a <span class="token keyword">done</span> <span class="token function">file</span> to avoid re-doing the mon deployment<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> create the init path <span class="token keyword">if</span> it does not exist<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> ceph.target<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> ceph-mon@ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>WARNIN<span class="token punctuation">]</span> Created symlink from /etc/systemd/system/ceph-mon.target.wants/ceph-mon@ceph-mon1.service to /usr/lib/systemd/system/ceph-mon@.service.<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl start ceph-mon@ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> ceph <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph --admin-daemon /var/run/ceph/ceph-mon.ceph-mon1.asok mon_status<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> ********************************************************************************<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> status <span class="token keyword">for</span> monitor: mon.ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"election_epoch"</span><span class="token builtin class-name">:</span> <span class="token number">3</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"extra_probe_peers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"feature_map"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"mon"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"features"</span><span class="token builtin class-name">:</span> <span class="token string">"0x3ffddff8ffacfffb"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"num"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"release"</span><span class="token builtin class-name">:</span> <span class="token string">"luminous"</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token punctuation">]</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"features"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"quorum_con"</span><span class="token builtin class-name">:</span> <span class="token string">"4611087854031667195"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"quorum_mon"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"kraken"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"luminous"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"mimic"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"osdmap-prune"</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token punctuation">]</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"required_con"</span><span class="token builtin class-name">:</span> <span class="token string">"144115738102218752"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"required_mon"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"kraken"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"luminous"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"mimic"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"osdmap-prune"</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token punctuation">]</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"monmap"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"created"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-04-16 11:00:39.436794"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"epoch"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"features"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"optional"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token string">"persistent"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"kraken"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"luminous"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"mimic"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"osdmap-prune"</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token punctuation">]</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"fsid"</span><span class="token builtin class-name">:</span> <span class="token string">"47cb4a4d-a2d6-4557-8fce-472e72053dd2"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"modified"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-04-16 11:00:39.436794"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token string">"mons"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.11:6789/0"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon1"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"public_addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.11:6789/0"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>         <span class="token string">"rank"</span><span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token punctuation">]</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon1"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"outside_quorum"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"quorum"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>     <span class="token number">0</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token punctuation">]</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"rank"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"state"</span><span class="token builtin class-name">:</span> <span class="token string">"leader"</span>, <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span>   <span class="token string">"sync_provider"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> ********************************************************************************<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> monitor: mon.ceph-mon1 is running<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> ceph <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph --admin-daemon /var/run/ceph/ceph-mon.ceph-mon1.asok mon_status<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> processing monitor mon.ceph-mon1<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-mon1 <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">find</span> the location of an executable<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> ceph <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph --admin-daemon /var/run/ceph/ceph-mon.ceph-mon1.asok mon_status<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> mon.ceph-mon1 monitor has reached quorum<span class="token operator">!</span><span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> all initial monitors are running and have formed quorum<span class="token punctuation">[</span>ceph_deploy.mon<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running gatherkeys<span class="token punctuation">..</span>.<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing keys <span class="token keyword">in</span> temp directory /tmp/tmpf6UBet<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-mon1 <span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> get remote short <span class="token function">hostname</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> fetch remote <span class="token function">file</span><span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph --admin-daemon<span class="token operator">=</span>/var/run/ceph/ceph-mon.ceph-mon1.asok mon_status<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph <span class="token parameter variable">--name</span> mon. <span class="token parameter variable">--keyring</span><span class="token operator">=</span>/var/lib/ceph/mon/ceph-ceph-mon1/keyring auth get client.admin<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph <span class="token parameter variable">--name</span> mon. <span class="token parameter variable">--keyring</span><span class="token operator">=</span>/var/lib/ceph/mon/ceph-ceph-mon1/keyring auth get client.bootstrap-mds<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph <span class="token parameter variable">--name</span> mon. <span class="token parameter variable">--keyring</span><span class="token operator">=</span>/var/lib/ceph/mon/ceph-ceph-mon1/keyring auth get client.bootstrap-mgr<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph <span class="token parameter variable">--name</span> mon. <span class="token parameter variable">--keyring</span><span class="token operator">=</span>/var/lib/ceph/mon/ceph-ceph-mon1/keyring auth get client.bootstrap-osd<span class="token punctuation">[</span>ceph-mon1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> /usr/bin/ceph --connect-timeout<span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">--cluster</span><span class="token operator">=</span>ceph <span class="token parameter variable">--name</span> mon. <span class="token parameter variable">--keyring</span><span class="token operator">=</span>/var/lib/ceph/mon/ceph-ceph-mon1/keyring auth get client.bootstrap-rgw<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing ceph.client.admin.keyring<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing ceph.bootstrap-mds.keyring<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing ceph.bootstrap-mgr.keyring<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> keyring <span class="token string">'ceph.mon.keyring'</span> already exists<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing ceph.bootstrap-osd.keyring<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Storing ceph.bootstrap-rgw.keyring<span class="token punctuation">[</span>ceph_deploy.gatherkeys<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Destroy temp directory /tmp/tmpf6UBet<span class="token comment">#mon节点密钥</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ lltotal <span class="token number">284</span>-rw------- <span class="token number">1</span> ceph ceph    <span class="token number">113</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph.bootstrap-mds.keyring-rw------- <span class="token number">1</span> ceph ceph    <span class="token number">113</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph.bootstrap-mgr.keyring-rw------- <span class="token number">1</span> ceph ceph    <span class="token number">113</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph.bootstrap-osd.keyring-rw------- <span class="token number">1</span> ceph ceph    <span class="token number">113</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph.bootstrap-rgw.keyring-rw------- <span class="token number">1</span> ceph ceph    <span class="token number">151</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph.client.admin.keyring-rw-rw-r-- <span class="token number">1</span> ceph ceph    <span class="token number">263</span> Apr <span class="token number">16</span> <span class="token number">10</span>:53 ceph.conf-rw-rw-r-- <span class="token number">1</span> ceph ceph <span class="token number">206243</span> Apr <span class="token number">16</span> <span class="token number">11</span>:00 ceph-deploy-ceph.log-rw------- <span class="token number">1</span> ceph ceph     <span class="token number">73</span> Apr <span class="token number">16</span> <span class="token number">10</span>:53 ceph.mon.keyring<span class="token comment">#3.验证mon节点</span><span class="token punctuation">[</span>root@ceph-mon1 ~<span class="token punctuation">]</span><span class="token comment"># ps -aux | grep ceph-mon</span>ceph       <span class="token number">2110</span>  <span class="token number">0.6</span>  <span class="token number">2.2</span> <span class="token number">471632</span> <span class="token number">42284</span> ?        Ssl  <span class="token number">11</span>:00   <span class="token number">0</span>:00 /usr/bin/ceph-mon <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> ceph-mon1 <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephroot       <span class="token number">2408</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">976</span> pts/0    S+   <span class="token number">11</span>:01   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto ceph-mon</code></pre></div></figure><h3 id="1-5-5-分发admin密钥"><a href="#1-5-5-分发admin密钥" class="headerlink" title="1.5.5 分发admin密钥"></a>1.5.5 分发admin密钥</h3><p>把配置文件和admin密钥拷贝至Ceph集群需要执行ceph管理命令的节点，从而后期不需要通过ceph命令访问与对ceph集群进行管理配置的时候每次都需要指定ceph-mon节点地址和ceph.client.admin.keyring文件。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.ceph-deploy服务器分发admin密钥</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy admin ceph-node1 ceph-node2 ceph-node3<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy admin ceph-node1 ceph-node2 ceph-node3<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7fd45eb2b48<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  client                        <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'ceph-node1'</span>, <span class="token string">'ceph-node2'</span>, <span class="token string">'ceph-node3'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function admin at 0x7fd45f65323<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.admin<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Pushing admin keys and conf to ceph-node1<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-node1 <span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">write</span> cluster configuration to /etc/ceph/<span class="token punctuation">&#123;</span>cluster<span class="token punctuation">&#125;</span>.conf<span class="token punctuation">[</span>ceph_deploy.admin<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Pushing admin keys and conf to ceph-node2<span class="token punctuation">[</span>ceph-node2<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-node2<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-node2 <span class="token punctuation">[</span>ceph-node2<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-node2<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-node2<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">write</span> cluster configuration to /etc/ceph/<span class="token punctuation">&#123;</span>cluster<span class="token punctuation">&#125;</span>.conf<span class="token punctuation">[</span>ceph_deploy.admin<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Pushing admin keys and conf to ceph-node3<span class="token punctuation">[</span>ceph-node3<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-node3<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-node3 <span class="token punctuation">[</span>ceph-node3<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-node3<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-node3<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">write</span> cluster configuration to /etc/ceph/<span class="token punctuation">&#123;</span>cluster<span class="token punctuation">&#125;</span>.conf<span class="token comment">#2.ceph节点验证密钥</span><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># ll /etc/ceph/</span>total <span class="token number">12</span>-rw------- <span class="token number">1</span> root root <span class="token number">151</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.client.admin.keyring-rw-r--r-- <span class="token number">1</span> root root <span class="token number">263</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.conf-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">92</span> Apr <span class="token number">24</span>  <span class="token number">2020</span> rbdmap-rw------- <span class="token number">1</span> root root   <span class="token number">0</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 tmpdPazQ3<span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># ll /etc/ceph/</span>total <span class="token number">12</span>-rw------- <span class="token number">1</span> root root <span class="token number">151</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.client.admin.keyring-rw-r--r-- <span class="token number">1</span> root root <span class="token number">263</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.conf-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">92</span> Apr <span class="token number">24</span>  <span class="token number">2020</span> rbdmap-rw------- <span class="token number">1</span> root root   <span class="token number">0</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 tmprFkTGT<span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># ll /etc/ceph/</span>total <span class="token number">12</span>-rw------- <span class="token number">1</span> root root <span class="token number">151</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.client.admin.keyring-rw-r--r-- <span class="token number">1</span> root root <span class="token number">263</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 ceph.conf-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">92</span> Apr <span class="token number">24</span>  <span class="token number">2020</span> rbdmap-rw------- <span class="token number">1</span> root root   <span class="token number">0</span> Apr <span class="token number">16</span> <span class="token number">11</span>:03 tmpX_jxwb<span class="token comment">#认证文件的属主和属组为了安全考虑，默认设置为了 root 用户和 root 组，如果需要 ceph 用户也能执行 ceph 命令，那么就需要对ceph用户进行授权。</span><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># setfacl -m u:ceph:rw /etc/ceph/ceph.client.admin.keyring</span><span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># setfacl -m u:ceph:rw /etc/ceph/ceph.client.admin.keyring</span><span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># setfacl -m u:ceph:rw /etc/ceph/ceph.client.admin.keyring</span></code></pre></div></figure><h3 id="1-5-6-部署mgr节点"><a href="#1-5-6-部署mgr节点" class="headerlink" title="1.5.6 部署mgr节点"></a>1.5.6 部署mgr节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.mgr节点安装ceph-mgr服务</span><span class="token punctuation">[</span>root@ceph-mgr1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ceph-mgr</span><span class="token comment">#2.部署mgr节点，mgr节点需要读取ceph的配置文件。即/etc/ceph目录中的配置文件。ceph的Luminious及以上版本有manager节点，早期的版本没有。</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy mgr create ceph-mgr1<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy mgr create ceph-mgr1<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  mgr                           <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'ceph-mgr1'</span>, <span class="token string">'ceph-mgr1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  subcommand                    <span class="token builtin class-name">:</span> create<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7fa3a9c7c90<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function mgr at 0x7fa3aa4f714<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.mgr<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Deploying mgr, cluster ceph hosts ceph-mgr1:ceph-mgr1The authenticity of <span class="token function">host</span> <span class="token string">'ceph-mgr1 (172.31.1.14)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:l/fArLmMqkkWoZIfEFEtXbrTgQEs/I/m2cp2S6GZiV4.ECDSA key fingerprint is MD5:47:52:e3:5f:f2:f4:ec:50:c6:00:6b:e9:f6:f9:10:73.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>ceph-mgr1<span class="token string">' (ECDSA) to the list of known hosts.[ceph-mgr1][DEBUG ] connection detected need for sudo[ceph-mgr1][DEBUG ] connected to host: ceph-mgr1 [ceph-mgr1][DEBUG ] detect platform information from remote host[ceph-mgr1][DEBUG ] detect machine type[ceph_deploy.mgr][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mgr][DEBUG ] remote host will use systemd[ceph_deploy.mgr][DEBUG ] deploying mgr bootstrap to ceph-mgr1[ceph-mgr1][DEBUG ] write cluster configuration to /etc/ceph/&#123;cluster&#125;.conf[ceph-mgr1][WARNIN] mgr keyring does not exist yet, creating one[ceph-mgr1][DEBUG ] create a keyring file[ceph-mgr1][DEBUG ] create path recursively if it doesn'</span>t exist<span class="token punctuation">[</span>ceph-mgr1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> ceph <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--name</span> client.bootstrap-mgr <span class="token parameter variable">--keyring</span> /var/lib/ceph/bootstrap-mgr/ceph.keyring auth get-or-create mgr.ceph-mgr1 mon allow profile mgr osd allow * mds allow * <span class="token parameter variable">-o</span> /var/lib/ceph/mgr/ceph-ceph-mgr1/keyring<span class="token punctuation">[</span>ceph-mgr1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> ceph-mgr@ceph-mgr1<span class="token punctuation">[</span>ceph-mgr1<span class="token punctuation">]</span><span class="token punctuation">[</span>WARNIN<span class="token punctuation">]</span> Created symlink from /etc/systemd/system/ceph-mgr.target.wants/ceph-mgr@ceph-mgr1.service to /usr/lib/systemd/system/ceph-mgr@.service.<span class="token punctuation">[</span>ceph-mgr1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl start ceph-mgr@ceph-mgr1<span class="token punctuation">[</span>ceph-mgr1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> ceph.target<span class="token comment">#3.验证mgr节点</span><span class="token punctuation">[</span>root@ceph-mgr1 ~<span class="token punctuation">]</span><span class="token comment"># ps -aux | grep ceph-mgr</span>ceph       <span class="token number">2055</span>  <span class="token number">9.2</span>  <span class="token number">4.5</span> <span class="token number">723568</span> <span class="token number">84668</span> ?        Ssl  <span class="token number">11</span>:07   <span class="token number">0</span>:01 /usr/bin/ceph-mgr <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> ceph-mgr1 <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephroot       <span class="token number">2115</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">980</span> pts/0    S+   <span class="token number">11</span>:07   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto ceph-mgr</code></pre></div></figure><h3 id="1-5-7-ceph-deploy管理ceph集群"><a href="#1-5-7-ceph-deploy管理ceph集群" class="headerlink" title="1.5.7 ceph_deploy管理ceph集群"></a>1.5.7 ceph_deploy管理ceph集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在ceph-deploy节点配置一下系统环境，以方便后期可以执行ceph管理命令。</span><span class="token comment">#1.安装ceph-common</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ceph-common<span class="token comment">#2.将认证证书同步给自己</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy admin ceph-deploy<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy admin ceph-deploy<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7f5e3dd8b63<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  client                        <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'ceph-deploy'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function admin at 0x7f5e3e8b323<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.admin<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> Pushing admin keys and conf to ceph-deploy<span class="token punctuation">[</span>ceph-deploy<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-deploy<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-deploy <span class="token punctuation">[</span>ceph-deploy<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-deploy<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-deploy<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">write</span> cluster configuration to /etc/ceph/<span class="token punctuation">&#123;</span>cluster<span class="token punctuation">&#125;</span>.conf<span class="token comment">#3.ceph用户进行授权</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">su</span> - rootPassword: Last login: Sun Apr <span class="token number">16</span> <span class="token number">10</span>:39:47 CST <span class="token number">2023</span> from <span class="token number">192.168</span>.1.200 on pts/0<span class="token punctuation">[</span>root@ceph-deploy ~<span class="token punctuation">]</span><span class="token comment"># setfacl -m u:ceph:rw /etc/ceph/ceph.client.admin.keyring</span><span class="token comment">#4.测试ceph命令</span><span class="token punctuation">[</span>root@ceph-deploy ~<span class="token punctuation">]</span><span class="token comment"># su - ceph</span>Last login: Sun Apr <span class="token number">16</span> <span class="token number">10</span>:51:10 CST <span class="token number">2023</span> on pts/0<span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-s</span>  cluster:    id:     47cb4a4d-a2d6-4557-8fce-472e72053dd2    health: HEALTH_WARN            OSD count <span class="token number">0</span> <span class="token operator">&lt;</span> osd_pool_default_size <span class="token number">3</span>   services:    mon: <span class="token number">1</span> daemons, quorum ceph-mon1    mgr: ceph-mgr1<span class="token punctuation">(</span>active<span class="token punctuation">)</span>    osd: <span class="token number">0</span> osds: <span class="token number">0</span> up, <span class="token number">0</span> <span class="token keyword">in</span>   data:    pools:   <span class="token number">0</span> pools, <span class="token number">0</span> pgs    objects: <span class="token number">0</span>  objects, <span class="token number">0</span> B    usage:   <span class="token number">0</span> B used, <span class="token number">0</span> B / <span class="token number">0</span> B avail    pgs:</code></pre></div></figure><h3 id="1-5-8-配置OSD节点"><a href="#1-5-8-配置OSD节点" class="headerlink" title="1.5.8 配置OSD节点"></a>1.5.8 配置OSD节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.列出存储节点磁盘信息</span><span class="token punctuation">[</span>ceph@ceph-deploy ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> ceph-cluster/<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk list ceph-node1<span class="token punctuation">[</span>ceph_deploy.conf<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> found configuration <span class="token function">file</span> at: /home/ceph/.cephdeploy.conf<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Invoked <span class="token punctuation">(</span><span class="token number">2.0</span>.1<span class="token punctuation">)</span>: /bin/ceph-deploy disk list ceph-node1<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> ceph-deploy options:<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  username                      <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  verbose                       <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  debug                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  overwrite_conf                <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  subcommand                    <span class="token builtin class-name">:</span> list<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  quiet                         <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cd_conf                       <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>ceph_deploy.conf.cephdeploy.Conf instance at 0x7f354f6dcf8<span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  cluster                       <span class="token builtin class-name">:</span> ceph<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  <span class="token function">host</span>                          <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'ceph-node1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  func                          <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>function disk at 0x7f354f6b093<span class="token operator"><span class="token file-descriptor important">8</span>></span><span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  ceph_conf                     <span class="token builtin class-name">:</span> None<span class="token punctuation">[</span>ceph_deploy.cli<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span>  default_release               <span class="token builtin class-name">:</span> False<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connection detected need <span class="token keyword">for</span> <span class="token function">sudo</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> connected to host: ceph-node1 <span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect platform information from remote <span class="token function">host</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> detect machine <span class="token builtin class-name">type</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>DEBUG <span class="token punctuation">]</span> <span class="token function">find</span> the location of an executable<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Running command: <span class="token function">sudo</span> <span class="token function">fdisk</span> <span class="token parameter variable">-l</span><span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sda: <span class="token number">107.4</span> GB, <span class="token number">107374182400</span> bytes, <span class="token number">209715200</span> sectors<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sdd: <span class="token number">214.7</span> GB, <span class="token number">214748364800</span> bytes, <span class="token number">419430400</span> sectors<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sde: <span class="token number">214.7</span> GB, <span class="token number">214748364800</span> bytes, <span class="token number">419430400</span> sectors<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sdc: <span class="token number">214.7</span> GB, <span class="token number">214748364800</span> bytes, <span class="token number">419430400</span> sectors<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sdb: <span class="token number">214.7</span> GB, <span class="token number">214748364800</span> bytes, <span class="token number">419430400</span> sectors<span class="token punctuation">[</span>ceph-node1<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO  <span class="token punctuation">]</span> Disk /dev/sdf: <span class="token number">214.7</span> GB, <span class="token number">214748364800</span> bytes, <span class="token number">419430400</span> sectors<span class="token comment">#2.使用ceph-deploy disk zap擦除各ceph node的ceph数据磁盘</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sdf<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node1 /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node2 /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node2 /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node2 /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node2 /dev/sdf <span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node3 /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node3 /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node3 /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node3 /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy disk zap ceph-node3 /dev/sdf<span class="token comment">#3.添加OSD</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node1 <span class="token parameter variable">--data</span> /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node1 <span class="token parameter variable">--data</span> /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node1 <span class="token parameter variable">--data</span> /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node1 <span class="token parameter variable">--data</span> /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node1 <span class="token parameter variable">--data</span> /dev/sdf<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node2 <span class="token parameter variable">--data</span> /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node2 <span class="token parameter variable">--data</span> /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node2 <span class="token parameter variable">--data</span> /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node2 <span class="token parameter variable">--data</span> /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node2 <span class="token parameter variable">--data</span> /dev/sdf<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node3 <span class="token parameter variable">--data</span> /dev/sdb<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node3 <span class="token parameter variable">--data</span> /dev/sdc<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node3 <span class="token parameter variable">--data</span> /dev/sdd<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node3 <span class="token parameter variable">--data</span> /dev/sde<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy osd create ceph-node3 <span class="token parameter variable">--data</span> /dev/sdf<span class="token comment">#4.验证OSD</span><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># ps -aux | grep ceph-osd</span>ceph        <span class="token number">9265</span>  <span class="token number">1.9</span>  <span class="token number">2.4</span> <span class="token number">839912</span> <span class="token number">45524</span> ?        Ssl  <span class="token number">11</span>:16   <span class="token number">0</span>:03 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">0</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">9790</span>  <span class="token number">1.6</span>  <span class="token number">2.3</span> <span class="token number">839908</span> <span class="token number">43928</span> ?        Ssl  <span class="token number">11</span>:16   <span class="token number">0</span>:02 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">1</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">10312</span>  <span class="token number">1.8</span>  <span class="token number">2.1</span> <span class="token number">839916</span> <span class="token number">40624</span> ?        Ssl  <span class="token number">11</span>:16   <span class="token number">0</span>:02 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">2</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">10836</span>  <span class="token number">1.8</span>  <span class="token number">2.1</span> <span class="token number">839908</span> <span class="token number">40316</span> ?        Ssl  <span class="token number">11</span>:17   <span class="token number">0</span>:02 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">3</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">11350</span>  <span class="token number">1.8</span>  <span class="token number">2.1</span> <span class="token number">839916</span> <span class="token number">40760</span> ?        Ssl  <span class="token number">11</span>:17   <span class="token number">0</span>:02 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">4</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephroot       <span class="token number">11464</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">980</span> pts/0    S+   <span class="token number">11</span>:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto ceph-osd<span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># ps -aux | grep ceph-osd</span>ceph        <span class="token number">3113</span>  <span class="token number">2.2</span>  <span class="token number">2.4</span> <span class="token number">839912</span> <span class="token number">46296</span> ?        Ssl  <span class="token number">11</span>:17   <span class="token number">0</span>:02 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">5</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">3638</span>  <span class="token number">2.0</span>  <span class="token number">2.3</span> <span class="token number">839912</span> <span class="token number">43296</span> ?        Ssl  <span class="token number">11</span>:17   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">6</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">4153</span>  <span class="token number">2.2</span>  <span class="token number">2.3</span> <span class="token number">839912</span> <span class="token number">43344</span> ?        Ssl  <span class="token number">11</span>:17   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">7</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">4675</span>  <span class="token number">2.4</span>  <span class="token number">2.8</span> <span class="token number">839908</span> <span class="token number">52220</span> ?        Ssl  <span class="token number">11</span>:18   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">8</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">5185</span>  <span class="token number">2.1</span>  <span class="token number">2.3</span> <span class="token number">839912</span> <span class="token number">43348</span> ?        Ssl  <span class="token number">11</span>:18   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">9</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephroot        <span class="token number">5300</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">980</span> pts/0    S+   <span class="token number">11</span>:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto ceph-osd<span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># ps -aux | grep ceph-osd</span>ceph        <span class="token number">9159</span>  <span class="token number">2.8</span>  <span class="token number">2.4</span> <span class="token number">839912</span> <span class="token number">46332</span> ?        Ssl  <span class="token number">11</span>:18   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">10</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph        <span class="token number">9686</span>  <span class="token number">2.0</span>  <span class="token number">2.1</span> <span class="token number">839908</span> <span class="token number">40100</span> ?        Ssl  <span class="token number">11</span>:18   <span class="token number">0</span>:01 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">11</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">10209</span>  <span class="token number">2.1</span>  <span class="token number">2.2</span> <span class="token number">839904</span> <span class="token number">41880</span> ?        Ssl  <span class="token number">11</span>:18   <span class="token number">0</span>:00 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">12</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">10723</span>  <span class="token number">2.4</span>  <span class="token number">2.2</span> <span class="token number">839908</span> <span class="token number">41284</span> ?        Ssl  <span class="token number">11</span>:19   <span class="token number">0</span>:00 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">13</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephceph       <span class="token number">11235</span>  <span class="token number">2.7</span>  <span class="token number">2.1</span> <span class="token number">839912</span> <span class="token number">40716</span> ?        Ssl  <span class="token number">11</span>:19   <span class="token number">0</span>:00 /usr/bin/ceph-osd <span class="token parameter variable">-f</span> <span class="token parameter variable">--cluster</span> ceph <span class="token parameter variable">--id</span> <span class="token number">14</span> <span class="token parameter variable">--setuser</span> ceph <span class="token parameter variable">--setgroup</span> cephroot       <span class="token number">11352</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">980</span> pts/0    S+   <span class="token number">11</span>:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto ceph-osd<span class="token comment">#5.设置OSD服务开机自启动</span><span class="token punctuation">[</span>root@ceph-node1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable ceph-osd@0 ceph-osd@1 ceph-osd@2 ceph-osd@3 ceph-osd@4</span>Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@0.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@1.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@2.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@3.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@4.service to /usr/lib/systemd/system/ceph-osd@.service.<span class="token punctuation">[</span>root@ceph-node2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable ceph-osd@5 ceph-osd@6 ceph-osd@7 ceph-osd@8 ceph-osd@9</span>Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@5.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@6.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@7.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@8.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@9.service to /usr/lib/systemd/system/ceph-osd@.service.<span class="token punctuation">[</span>root@ceph-node3 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable ceph-osd@10 ceph-osd@11 ceph-osd@12 ceph-osd@13 ceph-osd@14</span>Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@10.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@11.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@12.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@13.service to /usr/lib/systemd/system/ceph-osd@.service.Created symlink from /etc/systemd/system/ceph-osd.target.wants/ceph-osd@14.service to /usr/lib/systemd/system/ceph-osd@.service.</code></pre></div></figure><h3 id="1-5-9-验证ceph集群"><a href="#1-5-9-验证ceph集群" class="headerlink" title="1.5.9 验证ceph集群"></a>1.5.9 验证ceph集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph healthHEALTH_OK<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-s</span>  cluster:    id:     47cb4a4d-a2d6-4557-8fce-472e72053dd2    health: HEALTH_OK   services:    mon: <span class="token number">1</span> daemons, quorum ceph-mon1    mgr: ceph-mgr1<span class="token punctuation">(</span>active<span class="token punctuation">)</span>    osd: <span class="token number">15</span> osds: <span class="token number">15</span> up, <span class="token number">15</span> <span class="token keyword">in</span>   data:    pools:   <span class="token number">0</span> pools, <span class="token number">0</span> pgs    objects: <span class="token number">0</span>  objects, <span class="token number">0</span> B    usage:   <span class="token number">15</span> GiB used, <span class="token number">2.9</span> TiB / <span class="token number">2.9</span> TiB avail    pgs: </code></pre></div></figure><h3 id="1-5-10-测试上传下载数据"><a href="#1-5-10-测试上传下载数据" class="headerlink" title="1.5.10 测试上传下载数据"></a>1.5.10 测试上传下载数据</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.存取数据时，客户端必须首先连接至 RADOS 集群上某存储池，然后根据对象名称由相关的CRUSH 规则完成数据对象寻址,创建一个用于测试的存储池mypool，并设定其PG数量为32个。</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph osd pool create mypool <span class="token number">32</span> <span class="token number">32</span> <span class="token comment">#32PG和32PGP(备份)</span>pool <span class="token string">'mypool'</span> created<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph osd pool <span class="token function">ls</span>mypool<span class="token comment">#2.当前的ceph环境还没还没有部署使用块存储和文件系统使用ceph，也没有使用对象存储的客户端，但是ceph的rados命令可以实现访问ceph对象存储的功能。把messages文件上传到mypool并指定对象id为msg1</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> rados put msg1 /var/log/messages <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool<span class="token comment">#3.列出文件</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ rados <span class="token function">ls</span> <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypoolmsg1<span class="token comment">#4.文件信息</span><span class="token comment">#1.c833d430：文件放在了存储池为1的c833d430的PG上。</span><span class="token comment">#up ([5,14,0], p5) ：在线的OSD编号5,14,0 主OSD为5</span><span class="token comment">#acting ([5,14,0], p5)：活动的OSD5,14,0 表示数据放在了3个副本</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph osd map mypool msg1osdmap e64 pool <span class="token string">'mypool'</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> object <span class="token string">'msg1'</span> -<span class="token operator">></span> pg <span class="token number">1</span>.c833d430 <span class="token punctuation">(</span><span class="token number">1.10</span><span class="token punctuation">)</span> -<span class="token operator">></span> up <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5,14</span>,0<span class="token punctuation">]</span>, p5<span class="token punctuation">)</span> acting <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5,14</span>,0<span class="token punctuation">]</span>, p5<span class="token punctuation">)</span><span class="token comment">#5.下载文件</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> rados get msg1 <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool /opt/messages.txt<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ll /opt/messages.txt -rw-r--r-- <span class="token number">1</span> root root <span class="token number">590465</span> Apr <span class="token number">16</span> <span class="token number">11</span>:23 /opt/messages.txt<span class="token comment">#6.修改文件</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> rados put msg1 /etc/passwd <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> rados get msg1 <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool /opt/passwd.txt<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">cat</span> /opt/passwd.txt root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:999:998:User <span class="token keyword">for</span> polkitd:/:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinchrony:x:998:996::/var/lib/chrony:/sbin/nologinchs:x:1000:1000:chs:/home/chs:/bin/bashntp:x:38:38::/etc/ntp:/sbin/nologinceph:x:2023:2023::/home/ceph:/bin/bash<span class="token comment">#7.删除文件</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ <span class="token function">sudo</span> rados <span class="token function">rm</span> msg1 <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ rados <span class="token function">ls</span> <span class="token parameter variable">--pool</span><span class="token operator">=</span>mypool</code></pre></div></figure><h3 id="1-5-11-扩展ceph-mon节点"><a href="#1-5-11-扩展ceph-mon节点" class="headerlink" title="1.5.11 扩展ceph-mon节点"></a>1.5.11 扩展ceph-mon节点</h3><p>ceph-mon是原生具备自选举以实现高可用机制的ceph服务，节点数量通常是奇数。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.mon节点(ceph-mon2\ceph-mon3)安装ceph-mon服务</span><span class="token punctuation">[</span>root@ceph-mon2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ceph-common ceph-mon</span><span class="token punctuation">[</span>root@ceph-mon3 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ceph-common ceph-mon</span><span class="token punctuation">[</span>root@ceph-mon3 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status ceph-mon@ceph-mon1-mgr1 #查看ceph-mon状态</span><span class="token comment">#2.ceph-deploy服务器上增加mon节点</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy mon <span class="token function">add</span> ceph-mon2<span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy mon <span class="token function">add</span> ceph-mon3<span class="token comment">#3.验证ceph-mon节点</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph quorum_status <span class="token parameter variable">--format</span> json-pretty<span class="token punctuation">&#123;</span>    <span class="token string">"election_epoch"</span><span class="token builtin class-name">:</span> <span class="token number">12</span>,    <span class="token string">"quorum"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token number">0</span>,        <span class="token number">1</span>,        <span class="token number">2</span>    <span class="token punctuation">]</span>,    <span class="token string">"quorum_names"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"ceph-mon1"</span>,        <span class="token string">"ceph-mon2"</span>,        <span class="token string">"ceph-mon3"</span>    <span class="token punctuation">]</span>,    <span class="token string">"quorum_leader_name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon1"</span>, <span class="token comment">#当前leader</span>    <span class="token string">"monmap"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"epoch"</span><span class="token builtin class-name">:</span> <span class="token number">3</span>,        <span class="token string">"fsid"</span><span class="token builtin class-name">:</span> <span class="token string">"47cb4a4d-a2d6-4557-8fce-472e72053dd2"</span>,        <span class="token string">"modified"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-04-16 11:27:08.142535"</span>,        <span class="token string">"created"</span><span class="token builtin class-name">:</span> <span class="token string">"2023-04-16 11:00:39.436794"</span>,        <span class="token string">"features"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"persistent"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"kraken"</span>,                <span class="token string">"luminous"</span>,                <span class="token string">"mimic"</span>,                <span class="token string">"osdmap-prune"</span>            <span class="token punctuation">]</span>,            <span class="token string">"optional"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"mons"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"rank"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token comment">#节点等级</span>                <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon1"</span>, <span class="token comment">#节点名称</span>                <span class="token string">"addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.11:6789/0"</span>, <span class="token comment">#监听地址</span>                <span class="token string">"public_addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.11:6789/0"</span> <span class="token comment">#监听地址</span>            <span class="token punctuation">&#125;</span>,            <span class="token punctuation">&#123;</span>                <span class="token string">"rank"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,                <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon2"</span>,                <span class="token string">"addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.12:6789/0"</span>,                <span class="token string">"public_addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.12:6789/0"</span>            <span class="token punctuation">&#125;</span>,            <span class="token punctuation">&#123;</span>                <span class="token string">"rank"</span><span class="token builtin class-name">:</span> <span class="token number">2</span>,                <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ceph-mon3"</span>,                <span class="token string">"addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.13:6789/0"</span>,                <span class="token string">"public_addr"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.13:6789/0"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#4.验证ceph集群</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-s</span>  cluster:    id:     47cb4a4d-a2d6-4557-8fce-472e72053dd2    health: HEALTH_WARN            too few PGs per OSD <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">&lt;</span> min <span class="token number">30</span><span class="token punctuation">)</span>   services:    mon: <span class="token number">3</span> daemons, quorum ceph-mon1,ceph-mon2,ceph-mon3    mgr: ceph-mgr1<span class="token punctuation">(</span>active<span class="token punctuation">)</span>    osd: <span class="token number">15</span> osds: <span class="token number">15</span> up, <span class="token number">15</span> <span class="token keyword">in</span>   data:    pools:   <span class="token number">1</span> pools, <span class="token number">32</span> pgs    objects: <span class="token number">0</span>  objects, <span class="token number">0</span> B    usage:   <span class="token number">15</span> GiB used, <span class="token number">2.9</span> TiB / <span class="token number">2.9</span> TiB avail    pgs:     <span class="token number">32</span> active+clean</code></pre></div></figure><h3 id="1-5-12-扩展ceph-mgr节点"><a href="#1-5-12-扩展ceph-mgr节点" class="headerlink" title="1.5.12 扩展ceph-mgr节点"></a>1.5.12 扩展ceph-mgr节点</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.mgr节点(ceph-mgr2)安装ceph-mgr服务</span><span class="token punctuation">[</span>root@ceph-mgr2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ceph-mgr</span><span class="token punctuation">[</span>root@ceph-mgr2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status ceph-mgr@ceph-mon1-mgr1 #查看ceph-mgr状态</span><span class="token comment">#2.ceph-deploy服务器上增加mgr节点</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy mgr create ceph-mgr2<span class="token comment">#3.分发admin密钥</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph-deploy admin ceph-mgr2<span class="token comment">#4.验证ceph集群</span><span class="token punctuation">[</span>ceph@ceph-deploy ceph-cluster<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-s</span>  cluster:    id:     47cb4a4d-a2d6-4557-8fce-472e72053dd2    health: HEALTH_WARN            too few PGs per OSD <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">&lt;</span> min <span class="token number">30</span><span class="token punctuation">)</span>   services:    mon: <span class="token number">3</span> daemons, quorum ceph-mon1,ceph-mon2,ceph-mon3    mgr: ceph-mgr1<span class="token punctuation">(</span>active<span class="token punctuation">)</span>, standbys: ceph-mgr2    osd: <span class="token number">15</span> osds: <span class="token number">15</span> up, <span class="token number">15</span> <span class="token keyword">in</span>   data:    pools:   <span class="token number">1</span> pools, <span class="token number">32</span> pgs    objects: <span class="token number">0</span>  objects, <span class="token number">0</span> B    usage:   <span class="token number">15</span> GiB used, <span class="token number">2.9</span> TiB / <span class="token number">2.9</span> TiB avail    pgs:     <span class="token number">32</span> active+clean</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01).Ceph核心组件介绍</title>
    <link href="/2023/04/15/Storage/Ceph/ceph01/"/>
    <url>/2023/04/15/Storage/Ceph/ceph01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ceph核心组件介绍"><a href="#1-Ceph核心组件介绍" class="headerlink" title="1.Ceph核心组件介绍"></a>1.Ceph核心组件介绍</h1><h2 id="1-1-Ceph简介"><a href="#1-1-Ceph简介" class="headerlink" title="1.1 Ceph简介"></a>1.1 Ceph简介</h2><p>Ceph是一个开源的分布式存储系统，同时支持对象存储、块存储、文件系统。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方网址</span>https://docs.ceph.com/<span class="token comment">#github地址</span>https://github.com/ceph/ceph</code></pre></div></figure><p><img src="/2023/04/15/Storage/Ceph/ceph01/image-20230415210051524.png" alt="image-20230415210051524"> </p><h2 id="1-2-Ceph架构"><a href="#1-2-Ceph架构" class="headerlink" title="1.2 Ceph架构"></a>1.2 Ceph架构</h2><p><img src="/2023/04/15/Storage/Ceph/ceph01/image-20230415210307289.png" alt="image-20230415210307289"> </p><h3 id="1-2-1-Ceph集群组成部分"><a href="#1-2-1-Ceph集群组成部分" class="headerlink" title="1.2.1 Ceph集群组成部分"></a>1.2.1 Ceph集群组成部分</h3><ul><li><p>若干个Ceph OSD（对象存储守护程序），每台存储服务器的磁盘组成的存储空间。</p></li><li><p>至少需要一个Ceph Monitors，Ceph的监视器，维护OSD和PG的集群状态，可以是一三五七等奇数个。</p></li><li><p>至少需要一个Ceph Managers，负责跟踪运行时指标和Ceph集群的当前状态，包括存储利用率，当前性能指标和系统负载等。</p></li><li><p>运行Ceph文件系统客户端时还需要高可用的Ceph Metedata Server（文件系统元数据服务器）</p></li></ul><p><strong>Ceph监视器：Monitor(ceph-mon)：</strong></p><p>在一个主机上运行的一个守护进程，用于维护集群状态映射（maintains maps of the cluster state），比如ceph集群中有多少存储池，每个存储池有多少PG以及存储池和PG的映射关系等，monitor map，manager map，the OSD map，the MDS map，and the CRUSH map，这些映射是Ceph守护程序相互协调所需的关键集群状态，此外监视器还负责管理守护程序和客户端之间的身份验证（认证使用CephX协议），通常至少需要三个监视器才能实现冗余和高可用性。</p><p><strong>Ceph管理器：Managers(ceph-mgr)：</strong></p><p>在一个主机上运行的一个守护进程，Ceph Manager守护程序(ceph-mgr)负责追踪运行时指标和Ceph集群的当前状态，包括存储利用率，当前性能指标和系统负载，Ceph manager守护程序还托管基于python的模块来管理和公开Ceph集群信息，包括基于Web的Ceph仪表板和REST API，高可用性通常至少需要两个管理器。</p><p><strong>Ceph OSDs：对象存储守护程序(ceph-osd)：</strong></p><p>提供存储数据，操作系统上的一个磁盘就是一个OSD守护程序，OSD用于处理Ceph集群数据复制，恢复，重新平衡，并通过检查其他Ceph OSD守护程序的心跳来向Ceph监视器和管理器提供一些监视信息。通常至少需要3个Ceph OSD才能实现冗余和高可用性。</p><p><strong>MDS：Ceph元数据服务器(ceph-mds)：</strong></p><p>代表ceph文件系统（NFS&#x2F;CIFS）存储元数据，（即Ceph块设备和Ceph对象存储不使用MDS）</p><p>**Ceph的管理节点(ceph-deploy)**：</p><p>Ceph的常用管理接口是一组命令行工具程序，例如rados、ceph、rbd等命令，ceph管理员可以从，某个特定的ceph-mon节点执行管理操作。推荐使用部署专用的管理节点对ceph进行配置管理、升级与后期维护，方便后期权限管理，管理节点的权限只对管理人员开放，可以避免一些不必要的误操作的发生。</p><p><strong>CRUSH算法[Controllers Replication Under Scalable Hashing]：</strong></p><p>可控的、可复制的、可伸缩的一致性hash算法。是Ceph使用的数据分布算法，类似一致性哈希，让数据分配到预期的地方。Ceph使用CURSH算法来存放和管理数据，它是Ceph的智能数据分发机制。Ceph使用CRUSH算法来准确计算数据应该被保存到哪里，以及应该从哪里读取,和保存元数据不同的是,CRUSH按需计算出元数据，因此它就消除了对中心式的服务器／网关的需求,它使得 Ceph客户端能够计算出元数据，该过程也称为CRUSH查找，然后和OSD直接通信。</p><ul><li>如果是把对象直接映射到 OSD 之上会导致对象与 OSD 的对应关系过于紧密和耦合，当OSD由于故障发生变更时将会对整个Ceph集群产生影响。</li><li>于是Ceph将一个对象映射到RADOS集群的时候分为两步走：首先使用一致性hash算法将对象名称映射到PG然后将PG ID基于CRUSH算法映射到OSD即可查到对象。</li><li>以上两个过程都是以”实时计算”的方式完成，而没有使用传统的查询数据与块设备的对应表的方式，这样有效避免了组件的”中心化”问题，也解决了查询性能和冗余问题。使得 Ceph集群扩展不再受查询的性能限制。</li></ul><h3 id="1-2-2-Ceph逻辑组织架构"><a href="#1-2-2-Ceph逻辑组织架构" class="headerlink" title="1.2.2 Ceph逻辑组织架构"></a>1.2.2 Ceph逻辑组织架构</h3><p>Pool：存储池，分区，存储池的大小取决于底层的存储空间。</p><p>PG（placement group）：一个pool内部可以有多个PG存在，pool和PG都是抽象的逻辑概念，一个Pool中有多少个PG可以通过公式计算。</p><p>OSD（Object Storage Daemon，对象存储设备）：每一块磁盘都是一个OSD，一个主机由一个或多个OSD组成。</p><p>RADOS：RADOS全称Reliable Autonomic Distributed Object Store，是Ceph集群的精华，用户实现数据分配、Failover等集群操作。</p><p>RBD：RADOS block device，是Ceph对外提供的块设备服务。</p><p>RGW：RADOS gateway，是Ceph对外提供的对象存储服务，接口与S3和Swift兼容</p><p>CephFS：Ceph File System，是Ceph对外提供的文件系统服务。</p><p>Ceph集群部署好之后，要先创建存储池才能向ceph写入数据，文件在向ceph保存之前要进行一致性hash计算，计算后会把文件保存在某个对应的PG的，此文件一定属于某个pool的一个PG，在通过PG保存在OSD上。数据对象在写到OSD之后再同步对从OSD以实现数据的高可用。</p><p><img src="/2023/04/15/Storage/Ceph/ceph01/image-20230415213129659.png" alt="image-20230415213129659"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ceph</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(7).ELK-FileBeat部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk07/"/>
    <url>/2023/04/05/Log/ELK/elk07/</url>
    
    <content type="html"><![CDATA[<h1 id="1-FileBeat部署及使用"><a href="#1-FileBeat部署及使用" class="headerlink" title="1.FileBeat部署及使用"></a>1.FileBeat部署及使用</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>logstash1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>redis</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Redis 5.0.7</td><td></td></tr><tr><td>kafka1</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>logstash2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; FileBeat</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; FileBeat</td><td></td></tr></tbody></table><h2 id="1-1-FileBeat简介及使用"><a href="#1-1-FileBeat简介及使用" class="headerlink" title="1.1 FileBeat简介及使用"></a>1.1 FileBeat简介及使用</h2><p>官方地址：<a href="https://www.elastic.co/cn/beats/">https://www.elastic.co/cn/beats/</a></p><p>Beats 是一个免费且开放的平台，集合了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。</p><p>FileBeat：用于采集日志和其他数据的轻量型采集器。</p><h2 id="1-2-FileBeat基于Kafka收集日志"><a href="#1-2-FileBeat基于Kafka收集日志" class="headerlink" title="1.2 FileBeat基于Kafka收集日志"></a>1.2 FileBeat基于Kafka收集日志</h2><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk07/image-20230408181603916.png" alt="image-20230408181603916"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机编写Filebeat配置</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/beats/filebeat/7.12/kafka-output.html</span>root@web1:~<span class="token comment"># grep -v "#" /etc/filebeat/filebeat.yml | grep -v "^$"</span>filebeat.inputs:- type: log  enabled: <span class="token boolean">true</span>  paths:    - /apps/nginx/logs/access.log  fields:    project: nginx-access-log    - type: log  enabled: <span class="token boolean">true</span>  paths:    - /apps/nginx/logs/error.log  fields:    project: nginx-error-logfilebeat.config.modules:  path: <span class="token variable">$&#123;path.config&#125;</span>/modules.d/*.yml  reload.enabled: <span class="token boolean">false</span>setup.template.settings:  index.number_of_shards: <span class="token number">1</span>setup.kibana:output.kafka:  hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.37:9092"</span>,<span class="token string">"192.168.1.38:9092"</span>,<span class="token string">"192.168.1.39:9092"</span><span class="token punctuation">]</span>  topic: <span class="token string">'filebeat-nginx-log'</span>  partition.round_robin:    reachable_only: <span class="token boolean">true</span>  required_acks: <span class="token number">1</span>  compression: <span class="token function">gzip</span>  max_message_bytes: <span class="token number">1000000</span>processors:  - add_host_metadata:      when.not.contains.tags: forwarded  - add_cloud_metadata: ~  - add_docker_metadata: ~  - add_kubernetes_metadata: ~   root@web1:~<span class="token comment"># systemctl restart filebeat</span><span class="token comment">#2.配置logstash2将kafka中的日志写入es集群</span>root@logstash2:~<span class="token comment"># vim /etc/logstash/conf.d/kafka-to-es.conf</span>input <span class="token punctuation">&#123;</span>  kafka <span class="token punctuation">&#123;</span>    bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.37:9092,192.168.1.38:9092,192.168.1.39:9092"</span>    topics <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"filebeat-nginx-log"</span>    codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>    consumer_threads <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"filebeat-kafka-nginx-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"filebeat-kafka-nginx-error-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@logstash2:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk07/image-20230409192102997.png" alt="image-20230409192102997"> </p><h2 id="1-3-FileBeat基于Redis收集日志"><a href="#1-3-FileBeat基于Redis收集日志" class="headerlink" title="1.3 FileBeat基于Redis收集日志"></a>1.3 FileBeat基于Redis收集日志</h2><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk07/image-20230408181637357.png" alt="image-20230408181637357"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机logstash1安装Logstash</span>hostnamectl set-hostname logstash1.chsblogs.com<span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdkdpkg <span class="token parameter variable">-i</span> logstash-7.12.1-amd64.deb<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/User=logstash/User=root/'</span> <span class="token parameter variable">-e</span> <span class="token string">'s@Group=logstash@Group=root@'</span> /etc/systemd/system/logstash.servicesystemctl daemon-reload<span class="token comment">#2.两台web主机编写Filebeat配置，将日志写入logstash1</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/beats/filebeat/7.12/logstash-output.html</span>root@web1:~<span class="token comment"># grep -v "#" /etc/filebeat/filebeat.yml | grep -v "^$"</span>filebeat.inputs:- type: log  enabled: <span class="token boolean">true</span>  paths:    - /apps/nginx/logs/access.log  fields:    project: nginx-access-log    - type: log  enabled: <span class="token boolean">true</span>  paths:    - /apps/nginx/logs/error.log  fields:    project: nginx-error-logfilebeat.config.modules:  path: <span class="token variable">$&#123;path.config&#125;</span>/modules.d/*.yml  reload.enabled: <span class="token boolean">false</span>setup.template.settings:  index.number_of_shards: <span class="token number">1</span>setup.kibana:output.logstash:  hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.35:5044"</span><span class="token punctuation">]</span>  enabled: <span class="token boolean">true</span>  worker: <span class="token number">2</span>  compression_level: <span class="token number">3</span>processors:  - add_host_metadata:      when.not.contains.tags: forwarded  - add_cloud_metadata: ~  - add_docker_metadata: ~  - add_kubernetes_metadata: ~   root@web1:~<span class="token comment"># systemctl restart filebeat</span><span class="token comment">#3.配置logstash1将来自web主机中Filebeat写入的日志写入redis</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/logstash/7.12/plugins-inputs-beats.html</span>root@logstash1:~<span class="token comment"># vim /etc/logstash/conf.d/beats-to-redis.conf</span>input <span class="token punctuation">&#123;</span>  beats <span class="token punctuation">&#123;</span>    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5044</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@logstash2:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#4.配置logstash2将来自redis中的日志写入es集群</span>root@logstash2:~<span class="token comment"># vim /etc/logstash/conf.d/redis-to-es.conf</span>input <span class="token punctuation">&#123;</span>  redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>      codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>      codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beats-redis-nginx-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">[</span>project<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beats-redis-nginx-error-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#5.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk07/image-20230409211107684.png" alt="image-20230409211107684"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).ELK-Logstash基于Kafka收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk06/"/>
    <url>/2023/04/05/Log/ELK/elk06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash基于Kafka收集日志"><a href="#1-Logstash基于Kafka收集日志" class="headerlink" title="1.Logstash基于Kafka收集日志"></a>1.Logstash基于Kafka收集日志</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>kafka1</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>logstash2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk06/image-20230408180634922.png" alt="image-20230408180634922"> </p><h2 id="1-1-环境初始化"><a href="#1-1-环境初始化" class="headerlink" title="1.1 环境初始化"></a>1.1 环境初始化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名配置</span>hostnamectl set-hostname kafka1.chsblogs.comhostnamectl set-hostname kafka2.chsblogs.comhostnamectl set-hostname kafka3.chsblogs.com</code></pre></div></figure><h2 id="1-2-安装Kafka服务"><a href="#1-2-安装Kafka服务" class="headerlink" title="1.2 安装Kafka服务"></a>1.2 安装Kafka服务</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考前文kafka章节</span>https://chsblogs.com/2023/03/25/MQ/Kafka/kafka01/</code></pre></div></figure><h2 id="1-3-基于Kafka收集日志"><a href="#1-3-基于Kafka收集日志" class="headerlink" title="1.3 基于Kafka收集日志"></a>1.3 基于Kafka收集日志</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机编写Logstash配置</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/logstash/7.12/plugins-outputs-kafka.html</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/nginx-to-kafka.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/access.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-access-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span>    <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/error.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-error-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    kafka  <span class="token punctuation">&#123;</span>      bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.37:9092,192.168.1.38:9092,192.168.1.39:9092"</span>      topic_id <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>      codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    kafka  <span class="token punctuation">&#123;</span>      bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.37:9092,192.168.1.38:9092,192.168.1.39:9092"</span>      topic_id <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>      codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.配置logstash2将kafka中的日志写入es集群</span>root@logstash2:~<span class="token comment"># vim /etc/logstash/conf.d/kafka-to-es.conf</span>input <span class="token punctuation">&#123;</span>  kafka <span class="token punctuation">&#123;</span>    bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.37:9092,192.168.1.38:9092,192.168.1.39:9092"</span>    topics <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>    codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>    consumer_threads <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>    kafka <span class="token punctuation">&#123;</span>    bootstrap_servers <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.37:9092,192.168.1.38:9092,192.168.1.39:9092"</span>    topics <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>    codec <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"json"</span>    consumer_threads <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-kafka-nginx-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-kafka-nginx-error-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@logstash2:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#4.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk06/image-20230409111846299.png" alt="image-20230409111846299"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).ELK-Logstash基于Redis收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk05/"/>
    <url>/2023/04/05/Log/ELK/elk05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash基于Redis收集日志"><a href="#1-Logstash基于Redis收集日志" class="headerlink" title="1.Logstash基于Redis收集日志"></a>1.Logstash基于Redis收集日志</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>redis</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Redis 5.0.7</td><td></td></tr><tr><td>logstash2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk05/image-20230408180550190.png" alt="image-20230408180550190"> </p><h2 id="1-1-环境初始化"><a href="#1-1-环境初始化" class="headerlink" title="1.1 环境初始化"></a>1.1 环境初始化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名配置</span>hostnamectl set-hostname redis.chsblogs.comhostnamectl set-hostname logstash2.chsblogs.com</code></pre></div></figure><h2 id="1-2-安装Redis服务"><a href="#1-2-安装Redis服务" class="headerlink" title="1.2 安装Redis服务"></a>1.2 安装Redis服务</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@redis:~<span class="token comment"># apt update &amp;&amp; apt install redis</span>root@redis:~<span class="token comment"># sed -i -e 's/^bind .*/bind 0.0.0.0/' -e 's@protected-mode yes@protected-mode no@' -e 's/# requirepass foobared/requirepass 123456/' /etc/redis/redis.conf</span>root@redis:~<span class="token comment"># systemctl start redis</span></code></pre></div></figure><h2 id="1-3-安装配置Logstash"><a href="#1-3-安装配置Logstash" class="headerlink" title="1.3 安装配置Logstash"></a>1.3 安装配置Logstash</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#主机logstash2安装Logstash</span><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdkdpkg <span class="token parameter variable">-i</span> logstash-7.12.1-amd64.deb<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/User=logstash/User=root/'</span> <span class="token parameter variable">-e</span> <span class="token string">'s@Group=logstash@Group=root@'</span> /etc/systemd/system/logstash.servicesystemctl daemon-reload</code></pre></div></figure><h2 id="1-4-基于Redis收集日志"><a href="#1-4-基于Redis收集日志" class="headerlink" title="1.4 基于Redis收集日志"></a>1.4 基于Redis收集日志</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机编写Logstash配置</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/logstash/7.12/plugins-outputs-redis.html</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/nginx-to-redis.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/access.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-access-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span>    <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/error.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-error-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#2.验证redis数据</span>root@redis:~<span class="token comment"># redis-cli</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> AUTH <span class="token number">123456</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> KEYS *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chsblogs-nginx-error-log"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"chsblogs-nginx-access-log"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> LPOP chsblogs-nginx-access-log<span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:0,<span class="token entity" title="\&quot;">\"</span>xff<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>-<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>type<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>nginx-access-log<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>responsetime<span class="token entity" title="\&quot;">\"</span>:0.0,<span class="token entity" title="\&quot;">\"</span>host<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>192.168.1.41<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>@version<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>1<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>upstreamtime<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>-<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>domain<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>192.168.1.41<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>referer<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>-<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>upstreamhost<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>-<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>http_host<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>192.168.1.41<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>clientip<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>192.168.1.200<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>url<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>/index.html<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>status<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>304<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>path<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>/apps/nginx/logs/access.log<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>@timestamp<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>2023-04-08T15:29:26.000Z<span class="token entity" title="\&quot;">\"</span>&#125;"</span><span class="token comment">#3.配置logstash2将redis中的日志写入es集群</span>root@logstash2:~<span class="token comment"># vim /etc/logstash/conf.d/redis-to-es.conf</span>input <span class="token punctuation">&#123;</span>  redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>      codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span>    redis <span class="token punctuation">&#123;</span>      data_type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"list"</span>      key <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log"</span>      <span class="token function">host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.1.36"</span>      port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"6379"</span>      db <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0"</span>      password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123456"</span>      codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-redis-nginx-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-redis-nginx-error-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@logstash2:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#4.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk05/image-20230408234034737.png" alt="image-20230408234034737"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).ELK-基于Logstash收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk04/"/>
    <url>/2023/04/05/Log/ELK/elk04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于Logstash收集日志"><a href="#1-基于Logstash收集日志" class="headerlink" title="1.基于Logstash收集日志"></a>1.基于Logstash收集日志</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408175516557.png" alt="image-20230408175516557"> </p><h2 id="1-1-Logstash收集系统日志"><a href="#1-1-Logstash收集系统日志" class="headerlink" title="1.1 Logstash收集系统日志"></a>1.1 Logstash收集系统日志</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机编写Logstash配置</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/system.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/var/log/vmware-vmsvc-root*.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"vmware-vmsvc-root"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>  <span class="token punctuation">&#125;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/var/log/syslog"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"syslog"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"vmware-vmsvc-root"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-vmware-vmsvc-root-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"syslog"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-syslog-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#2.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408154914886.png" alt="image-20230408154914886"> </p><h2 id="1-2-Logstash收集Tomcat日志"><a href="#1-2-Logstash收集Tomcat日志" class="headerlink" title="1.2 Logstash收集Tomcat日志"></a>1.2 Logstash收集Tomcat日志</h2><h3 id="1-2-1-收集Tomcat访问日志"><a href="#1-2-1-收集Tomcat访问日志" class="headerlink" title="1.2.1 收集Tomcat访问日志"></a>1.2.1 收集Tomcat访问日志</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机安装Tomcat</span><span class="token function">mkdir</span> /apps<span class="token builtin class-name">cd</span> /apps/<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> apache-tomcat-9.0.72.tar.gz<span class="token function">ln</span> <span class="token parameter variable">-sv</span> apache-tomcat-9.0.72 tomcat<span class="token builtin class-name">echo</span> <span class="token string">'PATH=/apps/tomcat/bin:$PATH'</span> <span class="token operator">></span> /etc/profile.d/tomcat.sh<span class="token builtin class-name">.</span> /etc/profile.d/tomcat.shroot@web1:/apps<span class="token comment"># vim tomcat/conf/server.xml</span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>               <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"tomcat_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".log"</span>               <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"&#123;&amp;quot;clientip&amp;quot;:&amp;quot;%h&amp;quot;,&amp;quot;ClientUser&amp;quot;:&amp;quot;%l&amp;quot;,&amp;quot;authenticated&amp;quot;:&amp;quot;%u&amp;quot;,&amp;quot;AccessTime&amp;quot;:&amp;quot;%t&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;%r&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;%s&amp;quot;,&amp;quot;SendBytes&amp;quot;:&amp;quot;%b&amp;quot;,&amp;quot;Query?string&amp;quot;:&amp;quot; %q&amp;quot;,&amp;quot;partner&amp;quot;:&amp;quot;%&#123;Referer&#125;i&amp;quot;,&amp;quot;AgentVersion&amp;quot;:&amp;quot;%&#123;User-Agent&#125;i&amp;quot;&#125;"</span>/<span class="token operator">></span>root@web1:/apps<span class="token comment"># catalina.sh start</span><span class="token comment">#2.两台web主机编写Logstash配置</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/tomcat.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/tomcat/logs/tomcat_access_log.*.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"tomcat-access-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"tomcat-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-tomcat-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408162004952.png" alt="image-20230408162004952">  </p><h3 id="1-2-2-收集Java日志"><a href="#1-2-2-收集Java日志" class="headerlink" title="1.2.2 收集Java日志"></a>1.2.2 收集Java日志</h3><p>使用codec的multiline插件实现多行匹配，这是一个可以将多行进行合并的插件，而且可以使用what指定将匹配到的行与前面的行合并还是和后面的行合并。</p><p>官方文档：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-codecs-multiline.html">https://www.elastic.co/guide/en/logstash/current/plugins-codecs-multiline.html</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机编写Logstash配置</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/java_log.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/var/log/logstash/logstash-plain.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"java-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> multiline <span class="token punctuation">&#123;</span>      pattern <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"^\["</span>   <span class="token comment">#当遇到[开头的行时候将多行进行合并</span>      negate <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"true"</span>   <span class="token comment">#true为匹配成功进行操作，false为不成功进行操作。</span>      what <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"previous"</span> <span class="token comment">#与以前的行合并，如果是下面的行合并就是next。</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"java-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-java-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408165223819.png" alt="image-20230408165223819"> </p><h2 id="1-3-Logstash收集Nginx日志"><a href="#1-3-Logstash收集Nginx日志" class="headerlink" title="1.3 Logstash收集Nginx日志"></a>1.3 Logstash收集Nginx日志</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.两台web主机安装Nginx</span><span class="token function">wget</span> http://nginx.org/download/nginx-1.22.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> nginx-1.22.1.tar.gz<span class="token builtin class-name">cd</span> nginx-1.22.1/./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/apps/nginx<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment">#配置nginx为json日志</span>root@web1:/apps<span class="token comment"># vim /apps/nginx/conf/nginx.conf</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>http <span class="token punctuation">&#123;</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/octet-stream<span class="token punctuation">;</span>    log_format access_json <span class="token string">'&#123;"@timestamp":"$time_iso8601",'</span>    <span class="token string">'"host":"$server_addr",'</span>    <span class="token string">'"clientip":"$remote_addr",'</span>    <span class="token string">'"size":$body_bytes_sent,'</span>    <span class="token string">'"responsetime":$request_time,'</span>    <span class="token string">'"upstreamtime":"$upstream_response_time",'</span>    <span class="token string">'"upstreamhost":"$upstream_addr",'</span>    <span class="token string">'"http_host":"$host",'</span>    <span class="token string">'"url":"$uri",'</span>    <span class="token string">'"domain":"$host",'</span>    <span class="token string">'"xff":"$http_x_forwarded_for",'</span>    <span class="token string">'"referer":"$http_referer",'</span>    <span class="token string">'"status":"$status"&#125;'</span><span class="token punctuation">;</span>    access_log  logs/access.log  access_json<span class="token punctuation">;</span>    access_log  logs/error.log  access_json<span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#2.两台web主机编写Logstash配置</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/nginx.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/access.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-access-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json  <span class="token punctuation">&#125;</span>    <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/apps/nginx/logs/error.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-error-log"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span>    codec <span class="token operator">=</span><span class="token operator">></span> json <span class="token comment">#解析json日志</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-access-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-access-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"nginx-error-log"</span> <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>      hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>      index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-nginx-error-log-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.kibana创建索引查看</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408174615436.png" alt="image-20230408174615436"> </p><p><img src="/2023/04/05/Log/ELK/elk04/image-20230408175009831.png" alt="image-20230408175009831"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).ELK-Kibana部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk03/"/>
    <url>/2023/04/05/Log/ELK/elk03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Kibana部署及使用"><a href="#1-Kibana部署及使用" class="headerlink" title="1.Kibana部署及使用"></a>1.Kibana部署及使用</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Logstash</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Logstash</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408120402052.png" alt="image-20230408120402052"> </p><h2 id="1-1-安装Kibana"><a href="#1-1-安装Kibana" class="headerlink" title="1.1 安装Kibana"></a>1.1 安装Kibana</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@es1:~<span class="token comment"># ll kibana-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">285027022</span> Apr  <span class="token number">8</span> <span class="token number">10</span>:47 kibana-7.12.1-amd64.deb<span class="token comment">#2.安装Kibana</span>root@es1:~<span class="token comment"># dpkg -i kibana-7.12.1-amd64.deb</span><span class="token comment">#3.修改配置文件</span>root@es1:~<span class="token comment"># vim /etc/kibana/kibana.yml</span>server.host: <span class="token string">"192.168.1.32"</span>elasticsearch.hosts: <span class="token punctuation">[</span><span class="token string">"http://192.168.1.32:9200"</span><span class="token punctuation">]</span>i18n.locale: <span class="token string">"zh-CN"</span><span class="token comment">#4.启动kibana</span>root@es1:~<span class="token comment"># systemctl restart kibana</span><span class="token comment">#5.访问测试</span>http://192.168.1.32:5601/</code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408105601043.png" alt="image-20230408105601043"> </p><h2 id="1-2-创建索引模式"><a href="#1-2-创建索引模式" class="headerlink" title="1.2 创建索引模式"></a>1.2 创建索引模式</h2><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408110001537.png" alt="image-20230408110001537"> </p><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408110051391.png" alt="image-20230408110051391"> </p><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408110129323.png" alt="image-20230408110129323"> </p><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408110240493.png" alt="image-20230408110240493"> </p><h2 id="1-3-反向代理Kibana"><a href="#1-3-反向代理Kibana" class="headerlink" title="1.3 反向代理Kibana"></a>1.3 反向代理Kibana</h2><h3 id="1-3-1-Haproxy反向代理"><a href="#1-3-1-Haproxy反向代理" class="headerlink" title="1.3.1 Haproxy反向代理"></a>1.3.1 Haproxy反向代理</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen 5601_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode tcp  log global  server kibana1 <span class="token number">192.168</span>.1.32:5601 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-3-2-Nginx反向代理"><a href="#1-3-2-Nginx反向代理" class="headerlink" title="1.3.2 Nginx反向代理"></a>1.3.2 Nginx反向代理</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装配置nginx</span>root@es1:~<span class="token comment"># wget http://nginx.org/download/nginx-1.22.1.tar.gz</span>root@es1:~<span class="token comment"># mkdir /apps</span>root@es1:~<span class="token comment"># mv nginx-1.22.1.tar.gz /apps/</span>root@es1:~<span class="token comment"># cd /apps/</span>root@es1:/apps<span class="token comment"># tar -xvf nginx-1.22.1.tar.gz</span>root@es1:/apps<span class="token comment"># cd nginx-1.22.1/</span>root@es1:/apps/nginx-1.22.1<span class="token comment"># ./configure --with-http_ssl_module --prefix=/apps/nginx</span>root@es1:/apps/nginx-1.22.1<span class="token comment"># make &amp;&amp; make install</span>root@es1:/apps/nginx-1.22.1<span class="token comment"># cd /apps/nginx/conf/</span>root@es1:/apps/nginx/conf<span class="token comment"># mkdir conf.d</span>root@es1:/apps/nginx/conf<span class="token comment"># vim nginx.conf</span>include /apps/nginx/conf/conf.d/*.conf<span class="token punctuation">;</span><span class="token comment">#实现登录认证</span>root@es1:/apps/nginx/conf<span class="token comment"># apt install apache2-utils</span><span class="token comment">#第一次加上-c参数添加用户</span>root@es1:/apps/nginx/conf<span class="token comment"># htpasswd -bc /apps/nginx/.kibana.users zhangsan 123456</span>Adding password <span class="token keyword">for</span> user zhangsanroot@es1:/apps/nginx/conf<span class="token comment"># htpasswd -b /apps/nginx/.kibana.users lisi 123456</span>Adding password <span class="token keyword">for</span> user lisiroot@es1:/apps/nginx/conf<span class="token comment"># vim conf.d/kibana.conf</span>upstream kibana_server <span class="token punctuation">&#123;</span>  server <span class="token number">127.0</span>.0.1:5601 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">max_fails</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">fail_timeout</span><span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  server_name kibana.chsblogs.com<span class="token punctuation">;</span>  auth_basic <span class="token string">"Restricted Access"</span><span class="token punctuation">;</span>  auth_basic_user_file /apps/nginx/.kibana.users<span class="token punctuation">;</span>  location / <span class="token punctuation">&#123;</span>    proxy_pass http://kibana_server<span class="token punctuation">;</span>    proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>    proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    proxy_set_header Connection <span class="token string">'upgrade'</span><span class="token punctuation">;</span>    proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>    proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#2.配置kibana本机访问</span>root@es1:~<span class="token comment"># vim /etc/kibana/kibana.yml</span>server.host: <span class="token string">"127.0.0.1"</span>root@es1:~<span class="token comment"># systemctl restart kibana</span><span class="token comment">#3.访问测试</span>http://kibana.chsblogs.com/</code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk03/image-20230408114131494.png" alt="image-20230408114131494"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).ELK-Logstash部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk02/"/>
    <url>/2023/04/05/Log/ELK/elk02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash部署及使用"><a href="#1-Logstash部署及使用" class="headerlink" title="1.Logstash部署及使用"></a>1.Logstash部署及使用</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/04/05/Log/ELK/elk02/image-20230408084214092.png" alt="image-20230408084214092"> </p><h2 id="1-1-环境初始化"><a href="#1-1-环境初始化" class="headerlink" title="1.1 环境初始化"></a>1.1 环境初始化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名配置</span>hostnamectl set-hostname web1.chsblogs.comhostnamectl set-hostname web2.chsblogs.com</code></pre></div></figure><h2 id="1-2-安装Logstash"><a href="#1-2-安装Logstash" class="headerlink" title="1.2 安装Logstash"></a>1.2 安装Logstash</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装JDK</span>root@web1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span>root@web2:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#2.安装Logstash</span>root@web1:~<span class="token comment"># ll logstash-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">370433202</span> Apr  <span class="token number">8</span> 09:27 logstash-7.12.1-amd64.debroot@web1:~<span class="token comment"># dpkg -i logstash-7.12.1-amd64.deb</span>root@web2:~<span class="token comment"># ll logstash-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">370433202</span> Apr  <span class="token number">8</span> 09:27 logstash-7.12.1-amd64.debroot@web2:~<span class="token comment"># dpkg -i logstash-7.12.1-amd64.deb</span><span class="token comment">#3.修改配置文件以root启动</span>root@web1:~<span class="token comment"># vim /etc/systemd/system/logstash.service</span><span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">Group</span><span class="token operator">=</span>rootroot@web1:~<span class="token comment"># systemctl daemon-reload</span></code></pre></div></figure><h2 id="1-3-测试Logstash"><a href="#1-3-测试Logstash" class="headerlink" title="1.3 测试Logstash"></a>1.3 测试Logstash</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.测试Logstash</span><span class="token comment">#官方文档：stdin和stdout命令</span><span class="token comment">#https://www.elastic.co/guide/en/logstash/7.12/plugins-inputs-stdin.html</span><span class="token comment">#https://www.elastic.co/guide/en/logstash/7.12/plugins-outputs-stdout.html</span>root@web1:~<span class="token comment"># /usr/share/logstash/bin/logstash -e 'input &#123; stdin &#123;&#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span>Using bundled JDK: /usr/share/logstash/jdkOpenJDK <span class="token number">64</span>-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class="token keyword">in</span> version <span class="token number">9.0</span> and will likely be removed <span class="token keyword">in</span> a future release.WARNING: Could not <span class="token function">find</span> logstash.yml <span class="token function">which</span> is typically located <span class="token keyword">in</span> <span class="token variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaultsCould not <span class="token function">find</span> log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="token function">which</span> logs errors to the console<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:45.638 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> runner - Starting Logstash <span class="token punctuation">&#123;</span><span class="token string">"logstash.version"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"7.12.1"</span>, <span class="token string">"jruby.version"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"jruby 9.2.13.0 (2.5.7) 2020-08-03 9a89c94bcc OpenJDK 64-Bit Server VM 11.0.10+9 on 11.0.10+9 +indy +jit [linux-x86_64]"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:45.783 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> writabledirectory - Creating directory <span class="token punctuation">&#123;</span>:setting<span class="token operator">=</span><span class="token operator">></span><span class="token string">"path.queue"</span>, :path<span class="token operator">=</span><span class="token operator">></span><span class="token string">"/usr/share/logstash/data/queue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:45.799 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> writabledirectory - Creating directory <span class="token punctuation">&#123;</span>:setting<span class="token operator">=</span><span class="token operator">></span><span class="token string">"path.dead_letter_queue"</span>, :path<span class="token operator">=</span><span class="token operator">></span><span class="token string">"/usr/share/logstash/data/dead_letter_queue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>WARN <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:46.397 <span class="token punctuation">[</span>LogStash::Runner<span class="token punctuation">]</span> multilocal - Ignoring the <span class="token string">'pipelines.yml'</span> <span class="token function">file</span> because modules or <span class="token builtin class-name">command</span> line options are specified<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:46.440 <span class="token punctuation">[</span>LogStash::Runner<span class="token punctuation">]</span> agent - No persistent UUID <span class="token function">file</span> found. Generating new UUID <span class="token punctuation">&#123;</span>:uuid<span class="token operator">=</span><span class="token operator">></span><span class="token string">"838cf2e0-923c-40e9-af48-60c683833d74"</span>, :path<span class="token operator">=</span><span class="token operator">></span><span class="token string">"/usr/share/logstash/data/uuid"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:47.960 <span class="token punctuation">[</span>Api Webserver<span class="token punctuation">]</span> agent - Successfully started Logstash API endpoint <span class="token punctuation">&#123;</span>:port<span class="token operator">=</span><span class="token operator">></span><span class="token number">9600</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:49.274 <span class="token punctuation">[</span>Converge PipelineAction::Create<span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">]</span> Reflections - Reflections took <span class="token number">72</span> ms to scan <span class="token number">1</span> urls, producing <span class="token number">23</span> keys and <span class="token number">47</span> values <span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:50.230 <span class="token punctuation">[</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span>-pipeline-manager<span class="token punctuation">]</span> javapipeline - Starting pipeline <span class="token punctuation">&#123;</span>:pipeline_id<span class="token operator">=</span><span class="token operator">></span><span class="token string">"main"</span>, <span class="token string">"pipeline.workers"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span>, <span class="token string">"pipeline.batch.size"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">125</span>, <span class="token string">"pipeline.batch.delay"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">50</span>, <span class="token string">"pipeline.max_inflight"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">250</span>, <span class="token string">"pipeline.sources"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"config string"</span><span class="token punctuation">]</span>, :thread<span class="token operator">=</span><span class="token operator">></span><span class="token string">"#&lt;Thread:0x6f6798e1 run>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:51.766 <span class="token punctuation">[</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span>-pipeline-manager<span class="token punctuation">]</span> javapipeline - Pipeline Java execution initialization <span class="token function">time</span> <span class="token punctuation">&#123;</span><span class="token string">"seconds"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1.53</span><span class="token punctuation">&#125;</span>WARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by com.jrubystdinchannel.StdinChannelLibrary<span class="token variable">$Reader</span> <span class="token punctuation">(</span>file:/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/jruby-stdin-channel-0.2.0-java/lib/jruby_stdin_channel/jruby_stdin_channel.jar<span class="token punctuation">)</span> to field java.io.FilterInputStream.inWARNING: Please consider reporting this to the maintainers of com.jrubystdinchannel.StdinChannelLibrary<span class="token variable">$Reader</span>WARNING: Use --illegal-access<span class="token operator">=</span>warn to <span class="token builtin class-name">enable</span> warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied <span class="token keyword">in</span> a future release<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:51.865 <span class="token punctuation">[</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span>-pipeline-manager<span class="token punctuation">]</span> javapipeline - Pipeline started <span class="token punctuation">&#123;</span><span class="token string">"pipeline.id"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"main"</span><span class="token punctuation">&#125;</span>The stdin plugin is now waiting <span class="token keyword">for</span> input:<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:41:52.068 <span class="token punctuation">[</span>Agent thread<span class="token punctuation">]</span> agent - Pipelines running <span class="token punctuation">&#123;</span>:count<span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span>, :running_pipelines<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span>:main<span class="token punctuation">]</span>, :non_running_pipelines<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>Hello World<span class="token punctuation">&#123;</span>    <span class="token string">"@timestamp"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2023</span>-04-08T01:42:22.612Z,       <span class="token string">"message"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Hello World"</span>,      <span class="token string">"@version"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1"</span>,          <span class="token string">"host"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"web1.chsblogs.com"</span><span class="token punctuation">&#125;</span><span class="token comment">#2.编写Logstash配置文件测试</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/test.conf</span>input <span class="token punctuation">&#123;</span>   stdin <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>   stdout <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">#-t检查配置</span>root@web1:~<span class="token comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/test.conf -t</span>Using bundled JDK: /usr/share/logstash/jdkOpenJDK <span class="token number">64</span>-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class="token keyword">in</span> version <span class="token number">9.0</span> and will likely be removed <span class="token keyword">in</span> a future release.WARNING: Could not <span class="token function">find</span> logstash.yml <span class="token function">which</span> is typically located <span class="token keyword">in</span> <span class="token variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaultsCould not <span class="token function">find</span> log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="token function">which</span> logs errors to the console<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:47:40.320 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> runner - Starting Logstash <span class="token punctuation">&#123;</span><span class="token string">"logstash.version"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"7.12.1"</span>, <span class="token string">"jruby.version"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"jruby 9.2.13.0 (2.5.7) 2020-08-03 9a89c94bcc OpenJDK 64-Bit Server VM 11.0.10+9 on 11.0.10+9 +indy +jit [linux-x86_64]"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>WARN <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:47:41.193 <span class="token punctuation">[</span>LogStash::Runner<span class="token punctuation">]</span> multilocal - Ignoring the <span class="token string">'pipelines.yml'</span> <span class="token function">file</span> because modules or <span class="token builtin class-name">command</span> line options are specified<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:47:42.645 <span class="token punctuation">[</span>LogStash::Runner<span class="token punctuation">]</span> Reflections - Reflections took <span class="token number">94</span> ms to scan <span class="token number">1</span> urls, producing <span class="token number">23</span> keys and <span class="token number">47</span> values Configuration OK<span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">2023</span>-04-08 09:47:43.333 <span class="token punctuation">[</span>LogStash::Runner<span class="token punctuation">]</span> runner - Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash<span class="token comment">#启动Logstash测试</span>root@web1:~<span class="token comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/test.conf</span><span class="token comment">#3.日志输出至elasticsearch</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/logstash/7.12/plugins-outputs-elasticsearch.html</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/test.conf</span>input <span class="token punctuation">&#123;</span>  stdin <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  elasticsearch <span class="token punctuation">&#123;</span>    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>    index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-test-%&#123;+YYYY.MM.dd&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@web1:~<span class="token comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/test.conf</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>www.chsblogs.comHello World<span class="token comment">#查看数据</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk02/image-20230408095741094.png" alt="image-20230408095741094"> </p><h2 id="1-4-Logstash收集指定文件"><a href="#1-4-Logstash收集指定文件" class="headerlink" title="1.4 Logstash收集指定文件"></a>1.4 Logstash收集指定文件</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Logstash收集/var/log/vmware-vmsvc-root日志</span><span class="token comment">#官方文档：https://www.elastic.co/guide/en/logstash/7.12/plugins-inputs-file.html</span>root@web1:~<span class="token comment"># vim /etc/logstash/conf.d/test.conf</span>input <span class="token punctuation">&#123;</span>  <span class="token function">file</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/var/log/vmware-vmsvc-root*.log"</span>    <span class="token builtin class-name">type</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"vmware-vmsvc-root"</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span> <span class="token comment">#从开始收集日志</span>    stat_interval <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"3"</span> <span class="token comment">#每隔3秒收集一次</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>  elasticsearch <span class="token punctuation">&#123;</span>    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.32:9200"</span><span class="token punctuation">]</span>    index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"chsblogs-vmware-vmsvc-root-%&#123;+YYYY.MM.dd&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#2.重启logstash</span>root@web1:~<span class="token comment"># systemctl restart logstash</span><span class="token comment">#3.生成测试数据</span>root@web1:/etc/logstash/conf.d<span class="token comment"># echo "test1" >> /var/log/vmware-vmsvc-root.log </span>root@web1:/etc/logstash/conf.d<span class="token comment"># echo "test2" >> /var/log/vmware-vmsvc-root.log</span><span class="token comment">#4.查看数据</span></code></pre></div></figure><p><img src="/2023/04/05/Log/ELK/elk02/image-20230408104431723.png" alt="image-20230408104431723"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).ELK-Elasticsearch简介及集群部署</title>
    <link href="/2023/03/26/Log/ELK/elk01/"/>
    <url>/2023/03/26/Log/ELK/elk01/</url>
    
    <content type="html"><![CDATA[<p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>logstash1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>redis</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Redis 5.0.7</td><td></td></tr><tr><td>kafka1</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>logstash2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash | FileBeat</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash | FileBeat</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/03/26/Log/ELK/elk01/image-20230408120302196.png" alt="image-20230408120302196">  </p><h1 id="1-Elasticsearch简介及安装"><a href="#1-Elasticsearch简介及安装" class="headerlink" title="1.Elasticsearch简介及安装"></a>1.Elasticsearch简介及安装</h1><h2 id="1-1-Elasticsearch简介"><a href="#1-1-Elasticsearch简介" class="headerlink" title="1.1 Elasticsearch简介"></a>1.1 Elasticsearch简介</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方介绍</span>https://www.elastic.co/cn/what-is/elk-stack</code></pre></div></figure><p>ELK，作为大数据时代的宠儿，是日志分析界中的”扛把子”，在实际应用场景中，ELK起到了日志收集、日志归档、日志存储、日志分析的作用。</p><p>ELK实际上是一整套的解决方案，由三个开源软件组成：Elasticsearch , Logstash, Kibana。</p><p>Elasticsearch是实时全文搜索和分析引擎，主要负责日志搜索、分析。</p><p>Logstash是一个对日志进行搜集、过滤的工具。</p><p>Kibana可以为 Logstash 和 ElasticSearch 提供web前端显示界面，让日志分析变得方便明了。</p><h2 id="1-2-安装配置Haproxy"><a href="#1-2-安装配置Haproxy" class="headerlink" title="1.2 安装配置Haproxy"></a>1.2 安装配置Haproxy</h2><p><strong>主机ha1【192.168.1.30】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha1:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin  listen es_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9200  mode tcp  log global  server es1 <span class="token number">192.168</span>.1.32:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server es2 <span class="token number">192.168</span>.1.33:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server es3 <span class="token number">192.168</span>.1.34:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha1:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha1:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha1:~<span class="token comment"># systemctl start keepalived</span>root@ha1:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><p><strong>主机ha2【192.168.1.31】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha2:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin  listen es_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9200  mode tcp  log global  server es1 <span class="token number">192.168</span>.1.32:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server es2 <span class="token number">192.168</span>.1.33:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server es3 <span class="token number">192.168</span>.1.34:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha2:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha2:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha2:~<span class="token comment"># systemctl start keepalived</span>root@ha2:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><h2 id="1-3-Elasticsearch集群部署"><a href="#1-3-Elasticsearch集群部署" class="headerlink" title="1.3 Elasticsearch集群部署"></a>1.3 Elasticsearch集群部署</h2><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406210653759.png" alt="image-20230406210653759"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址：</span>https://github.com/elastic/elasticsearch<span class="token comment">#Elasticsearch服务器配置</span>万兆 PCI-E扩展网口<span class="token number">8</span>块 600G 15k Raid1032G Memory</code></pre></div></figure><h3 id="1-3-1-环境初始化"><a href="#1-3-1-环境初始化" class="headerlink" title="1.3.1 环境初始化"></a>1.3.1 环境初始化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名配置</span>hostnamectl set-hostname es1.chsblogs.comhostnamectl set-hostname es2.chsblogs.comhostnamectl set-hostname es3.chsblogs.com<span class="token comment">#2.三台主机上添加一块单独的数据磁盘为100G并格式化挂载到/data</span>root@es1:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es1:~<span class="token comment"># mkdir /data</span>root@es1:~<span class="token comment"># blkid /dev/sdb </span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"28bfab7d-5443-4447-b78b-e0f6a5486647"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es1:~<span class="token comment"># echo 'UUID="28bfab7d-5443-4447-b78b-e0f6a5486647" /data xfs defaults 0 0' >> /etc/fstab</span>root@es1:~<span class="token comment"># reboot</span>root@es2:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es2:~<span class="token comment"># mkdir /data</span>root@es2:~<span class="token comment"># blkid /dev/sdb</span>root@es2:~<span class="token comment"># blkid /dev/sdb </span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"413a0cca-e9a3-4165-8607-76713a95939f"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es2:~<span class="token comment"># echo 'UUID="413a0cca-e9a3-4165-8607-76713a95939f" /data xfs defaults 0 0' >> /etc/fstab</span>root@es2:~<span class="token comment"># reboot</span>root@es3:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es3:~<span class="token comment"># mkdir /data</span>root@es3:~<span class="token comment"># blkid /dev/sdb</span>root@es3:~<span class="token comment"># blkid /dev/sdb</span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"26ccdb0b-ae65-45a1-9e3b-eb89c471e480"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es3:~<span class="token comment"># echo 'UUID="26ccdb0b-ae65-45a1-9e3b-eb89c471e480" /data xfs defaults 0 0' >> /etc/fstab</span>root@es3:~<span class="token comment"># reboot</span></code></pre></div></figure><h3 id="1-3-2-安装Elasticsearch集群"><a href="#1-3-2-安装Elasticsearch集群" class="headerlink" title="1.3.2 安装Elasticsearch集群"></a>1.3.2 安装Elasticsearch集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@es1:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.debroot@es2:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.debroot@es3:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.deb<span class="token comment">#2.安装Elasticsearch</span>root@es1:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span>root@es2:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span>root@es3:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span><span class="token comment">#3.更改Elasticsearch配置文件，官方文档内存最大不超过32G</span>root@es1:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-1path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.32http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span>root@es2:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-2path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.33http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span><span class="token comment">#bootstrap.memory_lock: true #如果启动这个参数需要启动文件中/usr/lib/systemd/system/elasticsearch.service添加LimitMEMLOCK=infinity，无限制使用内存</span>root@es3:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-3path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.34http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span><span class="token comment">#4.启动Elasticsearch</span>root@es1:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es2:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es3:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es1:~<span class="token comment"># systemctl start elasticsearch</span>root@es1:~<span class="token comment"># systemctl enable elasticsearch</span>root@es2:~<span class="token comment"># systemctl start elasticsearch</span>root@es2:~<span class="token comment"># systemctl enable elasticsearch</span>root@es3:~<span class="token comment"># systemctl start elasticsearch</span>root@es3:~<span class="token comment"># systemctl enable elasticsearch</span></code></pre></div></figure><h3 id="1-3-3-安装head插件"><a href="#1-3-3-安装head插件" class="headerlink" title="1.3.3 安装head插件"></a>1.3.3 安装head插件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址</span>https://github.com/mobz/elasticsearch-head<span class="token comment">#1.安装head插件</span>root@es1:~<span class="token comment"># apt update &amp;&amp; apt install npm</span>root@es1:~<span class="token comment"># ls</span>elasticsearch-head-5.0.0.tar.gzroot@es1:~<span class="token comment"># tar -xvf elasticsearch-head-5.0.0.tar.gz</span>root@es1:~<span class="token comment"># cd elasticsearch-head-5.0.0/</span>root@es1:~/elasticsearch-head-5.0.0<span class="token comment"># npm install</span>root@es1:~/elasticsearch-head-5.0.0<span class="token comment"># npm run start</span><span class="token comment">#2.修改elasticsearch服务配置文件</span>root@es1:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>http.cors.enabled: <span class="token boolean">true</span>     <span class="token comment">#开启支持跨域访问</span>http.cors.allow-origin: <span class="token string">"*"</span> <span class="token comment">#指定允许访问范围</span>root@es1:~<span class="token comment"># systemctl restart elasticsearch</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker启动head插件</span><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token comment"># step 2: 安装GPG证书</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># Step 3: 写入软件源信息</span><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-cesystemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9100</span>:9100 mobz/elasticsearch-head:5<span class="token comment">#访问测试,</span>http://192.168.1.33:9100/集群状态：  绿色<span class="token punctuation">(</span>green）：所有的主分片和副本分片都已分配。你的集群是 <span class="token number">100</span>% 可用的。  黄色（yellow）：所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果更多  的分片消失，你就会丢数据了。把yellow想象成一个需要及时调查的警告。  红色（red）：至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</code></pre></div></figure><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406215428017.png" alt="image-20230406215428017"> </p><h3 id="1-3-4-安装cerebro插件"><a href="#1-3-4-安装cerebro插件" class="headerlink" title="1.3.4 安装cerebro插件"></a>1.3.4 安装cerebro插件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址</span>https://github.com/lmenezes/cerebro<span class="token comment">#1.安装cerebro插件</span>root@ha1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-11-jdk</span>root@ha1:~<span class="token comment"># ll cerebro-0.9.4.zip </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">57251010</span> Apr  <span class="token number">6</span> <span class="token number">14</span>:21 cerebro-0.9.4.ziproot@ha1:~<span class="token comment"># mkdir /apps</span>root@ha1:~<span class="token comment"># mv cerebro-0.9.4.zip /apps/</span>root@ha1:~<span class="token comment"># cd /apps/</span>root@ha1:/apps<span class="token comment"># unzip cerebro-0.9.4.zip</span>root@ha1:/apps<span class="token comment"># ln -sv cerebro-0.9.4 cerebro</span>root@ha1:/apps<span class="token comment"># cd cerebro</span>root@ha1:/apps/cerebro<span class="token comment"># vim conf/application.conf</span>hosts <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">"http://192.168.1.33:9200"</span>    name <span class="token operator">=</span> <span class="token string">"chsblogs-cluster1"</span>  <span class="token comment">#  headers-whitelist = [ "x-proxy-user", "x-proxy-roles", "X-Forwarded-For" ]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment"># Example of host with authentication</span>  <span class="token comment">#&#123;</span>  <span class="token comment">#  host = "http://some-authenticated-host:9200"</span>  <span class="token comment">#  name = "Secured Cluster"</span>  <span class="token comment">#  auth = &#123;</span>  <span class="token comment">#    username = "username"</span>  <span class="token comment">#    password = "secret-password"</span>  <span class="token comment">#  &#125;</span>  <span class="token comment">#&#125;</span><span class="token punctuation">]</span>root@ha1:/apps/cerebro<span class="token comment"># ./bin/cerebro</span><span class="token comment">#2.访问测试</span>http://192.168.1.30:9000/</code></pre></div></figure><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406222635679.png" alt="image-20230406222635679"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Nexus简介及安装</title>
    <link href="/2023/03/25/Service/Nexus/nexus01/"/>
    <url>/2023/03/25/Service/Nexus/nexus01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Nexus简介及安装"><a href="#1-Nexus简介及安装" class="headerlink" title="1.Nexus简介及安装"></a>1.Nexus简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>nexus</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Nexus 3.49.0-02</td><td></td></tr></tbody></table><h2 id="1-1-Nexus简介"><a href="#1-1-Nexus简介" class="headerlink" title="1.1 Nexus简介"></a>1.1 Nexus简介</h2><p>Nexus是Sonatype公司发布的一款仓库（Repository）管理软件，常用来搭建Maven私服，所以也有人将Nexus称为“Maven仓库管理器”。</p><h2 id="1-2-Nexus安装"><a href="#1-2-Nexus安装" class="headerlink" title="1.2 Nexus安装"></a>1.2 Nexus安装</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Maven官方仓库</span>https://repo.maven.apache.org/maven2/<span class="token comment">#官方地址</span>https://help.sonatype.com/repomanager3/product-information/download<span class="token comment">#Nexus服务器配置建议</span>16C、32G</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.服务器优化</span>root@nexus:~<span class="token comment"># vim /etc/security/limits.conf</span>root - nofile <span class="token number">65536</span><span class="token comment">#2.安装JDK</span>root@nexus:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#3.安装nexus</span>root@nexus:~<span class="token comment"># mkdir /apps</span>root@nexus:~<span class="token comment"># cd /apps/</span>root@nexus:/apps<span class="token comment"># ls</span>nexus-3.49.0-02-unix.tar.gzroot@nexus:/apps<span class="token comment"># tar -xvf nexus-3.49.0-02-unix.tar.gz </span>root@nexus:/apps<span class="token comment"># ln -sv /apps/nexus-3.49.0-02 /apps/nexus</span>root@nexus:/apps<span class="token comment"># vim /lib/systemd/system/nexus.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>nexus <span class="token function">service</span><span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65536</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/nexus/bin/nexus start<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/apps/nexus/bin/nexus stop<span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.targetroot@nexus:~<span class="token comment"># systemctl daemon-reload</span>root@nexus:~<span class="token comment"># systemctl start nexus</span><span class="token comment">#登录测试</span>http://192.168.1.35:8081/</code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190256985.png" alt="image-20230326190256985"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190412108.png" alt="image-20230326190412108"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190515372.png" alt="image-20230326190515372"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190550253.png" alt="image-20230326190550253"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326192913654.png" alt="image-20230326192913654"> </p><h2 id="1-3-Nexus使用"><a href="#1-3-Nexus使用" class="headerlink" title="1.3 Nexus使用"></a>1.3 Nexus使用</h2><h3 id="1-3-1-基于Nexus构建私有yum仓库"><a href="#1-3-1-基于Nexus构建私有yum仓库" class="headerlink" title="1.3.1 基于Nexus构建私有yum仓库"></a>1.3.1 基于Nexus构建私有yum仓库</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建存储目录</span>root@nexus:~<span class="token comment"># mkdir /data/nexus/yum -p</span><span class="token comment">#2.创建存储路径</span></code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194040550.png" alt="image-20230326194040550"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.创建仓库</span></code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194534321.png" alt="image-20230326194534321"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194557972.png" alt="image-20230326194557972"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194616034.png" alt="image-20230326194616034"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.配置源测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/yum.repos.d/zabbix.repo</span><span class="token punctuation">[</span>zabbix<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.1.35:8081/repository/zabbix-nexus/<span class="token assign-left variable">enable</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># yum -y install zabbix-agent</span></code></pre></div></figure><h2 id="1-4-Nexus数据备份"><a href="#1-4-Nexus数据备份" class="headerlink" title="1.4 Nexus数据备份"></a>1.4 Nexus数据备份</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Nexus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Dubbo简介及安装</title>
    <link href="/2023/03/25/Service/Dubbo/dubbo01/"/>
    <url>/2023/03/25/Service/Dubbo/dubbo01/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Kafka简介及安装</title>
    <link href="/2023/03/25/MQ/Kafka/kafka01/"/>
    <url>/2023/03/25/MQ/Kafka/kafka01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Kafka简介及安装"><a href="#1-Kafka简介及安装" class="headerlink" title="1.Kafka简介及安装"></a>1.Kafka简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>kafka1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr></tbody></table><h2 id="1-1-Kafka简介"><a href="#1-1-Kafka简介" class="headerlink" title="1.1 Kafka简介"></a>1.1 Kafka简介</h2><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。</p><h2 id="1-2-Kafka集群部署"><a href="#1-2-Kafka集群部署" class="headerlink" title="1.2 Kafka集群部署"></a>1.2 Kafka集群部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方地址</span>https://kafka.apache.org/downloads<span class="token comment">#1.三台主机安装Zookeeper</span>参考链接：https://chsblogs.com/2023/03/25/Service/Zookeeper/zookeeper01/<span class="token comment">#2.三台主机安装Kafka</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/kafka/2.7.1/kafka_2.13-2.7.1.tgz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf kafka_2.13-2.7.1.tgz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/kafka_2.13-2.7.1 /apps/kafka</span>root@zookeeper1:/apps<span class="token comment"># cd kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># mkdir /data/kafka -p</span><span class="token comment">#3.三台主机配置Kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181root@zookeeper2:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181root@zookeeper3:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181<span class="token comment">#4.三台主机启动Kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span>root@zookeeper2:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span>root@zookeeper3:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Zookeeper简介及安装</title>
    <link href="/2023/03/25/Service/Zookeeper/zookeeper01/"/>
    <url>/2023/03/25/Service/Zookeeper/zookeeper01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zookeeper简介及安装"><a href="#1-Zookeeper简介及安装" class="headerlink" title="1.Zookeeper简介及安装"></a>1.Zookeeper简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>zookeeper1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr><tr><td>zookeeper2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr><tr><td>zookeeper3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr></tbody></table><h2 id="1-1-Zookeeper简介"><a href="#1-1-Zookeeper简介" class="headerlink" title="1.1 Zookeeper简介"></a>1.1 Zookeeper简介</h2><p>Zookeeper是一个分布式服务框架（即：为其它分布式程序提供服务），主要是用来解决分布式应用中遇到的一些数据管理问题如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><h2 id="1-2-Zookeeper单机部署"><a href="#1-2-Zookeeper单机部署" class="headerlink" title="1.2 Zookeeper单机部署"></a>1.2 Zookeeper单机部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方地址</span>https://archive.apache.org/dist/zookeeper/<span class="token comment">#1.配置JDK环境</span>root@zookeeper1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#2.安装Zookeeper</span>root@zookeeper1:~<span class="token comment"># mkdir /apps</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf zookeeper-3.4.14.tar.gz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/zookeeper-3.4.14 /apps/zookeeper</span>root@zookeeper1:/apps<span class="token comment"># cd zookeeper/conf/</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># cp zoo_sample.cfg zoo.cfg </span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># mkdir /data/zookeeper -p #创建数据目录</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># vim zoo.cfg</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span> <span class="token comment">#服务器与服务器之间的单次心跳检测时间间隔，单位为毫秒</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#集群中leader服务器与follower服务器初始连接心跳次数，即多少个2000毫秒。</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#leader与follower之间连接完成之后，后期检测发送和应答的心跳次数，如果该follower在设置的时间内(5*2000)不能与leader进行通信，那么此follower将被视为不可用。</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/data/zookeeper <span class="token comment">#数据目录</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span> <span class="token comment">#端口</span><span class="token comment">#3.启动Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span><span class="token comment">#4.验证Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: standalone</code></pre></div></figure><h2 id="1-3-Zookeeper集群部署"><a href="#1-3-Zookeeper集群部署" class="headerlink" title="1.3 Zookeeper集群部署"></a>1.3 Zookeeper集群部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.三台服务器安装JDK</span>root@zookeeper1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#2.三台服务器安装配置Zookeeper</span>root@zookeeper1:~<span class="token comment"># mkdir /apps</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf zookeeper-3.4.14.tar.gz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/zookeeper-3.4.14 /apps/zookeeper</span>root@zookeeper1:/apps<span class="token comment"># cd zookeeper/conf/</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># cp zoo_sample.cfg zoo.cfg </span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># mkdir /data/zookeeper -p #创建数据目录</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># vim zoo.cfg</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/data/zookeeper<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">120</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span><span class="token number">192.168</span>.1.31:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span><span class="token number">192.168</span>.1.32:2888:3888<span class="token comment">#3.三台服务器在数据目录下创建myid</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># echo 1 > /data/zookeeper/myid</span>root@zookeeper2:/apps/zookeeper/conf<span class="token comment"># echo 2 > /data/zookeeper/myid</span>root@zookeeper3:/apps/zookeeper/conf<span class="token comment"># echo 3 > /data/zookeeper/myid</span><span class="token comment">#4.三台服务器启动Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span>root@zookeeper2:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span>root@zookeeper3:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span><span class="token comment">#5.验证Zookeeper集群状态</span><span class="token comment">#leader服务器会开启2888和3888端口</span><span class="token comment">#follower服务器开启3888端口</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: followerroot@zookeeper2:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: followerroot@zookeeper3:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: leader</code></pre></div></figure><h2 id="1-4-Zookeeper集群选举"><a href="#1-4-Zookeeper集群选举" class="headerlink" title="1.4 Zookeeper集群选举"></a>1.4 Zookeeper集群选举</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.节点角色状态</span>LOOKING：寻找leader状态，处于该状态需要进入选举流程LEADING:领导者状态，处于该状态的节点说明是角色已经是leaderFOLLOWING:跟随着状态，表示leader已经选举出来，当前节点角色是followerOBSERVER:观察者状态，表明当前节点角色是observer<span class="token comment">#2.选举ID</span>myid：服务器的唯一标识，通过配置myid文件指定，集群中唯一。Zxid<span class="token punctuation">(</span>Zookeeper transaction <span class="token function">id</span><span class="token punctuation">)</span>：每次改变Zookeeper状态的操作都会形成一个对应的Zxid。<span class="token comment">#3.leader选举过程</span>每个zookeeper都会发出投票，由于是第一次选举leader，因此每个节点都会把自己当作leader角色进行选举，每个zookeeper的投票中都会包括自己的myid和zxid，此时zookeeper1的投票myid为1，初始zxid为一个初始化，后期会随着数据更新而自动更新、zookeeper2的投票myid为2，初始zxid为一个初始化，后期会随着数据更新而自动更新、zookeeper3的投票myid为3，初始zxid为一个初始化，后期会随着数据更新而自动更新。每个节点接收并检查对方的投票信息，比如投票时间，是否状态为LOOKING状态的投票。对比投票，优先检查zxid，如果zxid不一样则zxid大的为leader，如果zxid相同则继续比myid，myid大的为leader。成为leader的必要条件：leader要具有最高的zxid，当集群的规则是n时，集群中大多数的机器<span class="token punctuation">(</span>至少n/2+1<span class="token punctuation">)</span>得到响应并follow选出的leader。心跳机制：leader与follower利用PING来感知对方是否存活，当leader无法响应PING时，将重新发起leader选举。</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).RabbitMQ简介及安装</title>
    <link href="/2023/03/23/MQ/RabbitMQ/rabbitmq01/"/>
    <url>/2023/03/23/MQ/RabbitMQ/rabbitmq01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-RabbitMQ简介及安装"><a href="#1-RabbitMQ简介及安装" class="headerlink" title="1.RabbitMQ简介及安装"></a>1.RabbitMQ简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>rabbitmq1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr><tr><td>rabbitmq2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr><tr><td>rabbitmq3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr></tbody></table><h2 id="1-1-RabbitMQ简介"><a href="#1-1-RabbitMQ简介" class="headerlink" title="1.1 RabbitMQ简介"></a>1.1 RabbitMQ简介</h2><p>MQ定义：消息队列的目的是为了实现各个APP之间的通讯，APP基于MQ实现消息的发送和接收实现应用程序之间的通讯，这样多个应用程序可以运行在不同的主机上，通过MQ就可以实现跨网络通信，因此MQ实现了业务的解耦和异步机制。</p><p>MQ场景：消息队列作为高并发系统的核心组件之一，能够帮助业务系统结构提升开发效率和系统稳定性，消息队列主要具有以下特点：</p><ul><li>削峰填谷：主要解决瞬时写压力大于应用服务能力导致消息丢失，系统奔溃等问题。</li><li>系统解耦：解决不同重要程度，不同能力级别系统之间依赖导致一死全死。</li><li>提升性能：当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统。</li><li>蓄流压测：线上有些链路不好压测，可以通过堆积一定量消息再放开来压测。</li></ul><p>RabbitMQ简介：RabbitMQ是一款使用Erlang语言开发的，实现AMQP(高级消息队列协议)的开源消息中间件。特点：</p><ul><li>消息可靠性</li><li>支持集群</li><li>多种协议</li><li>支持多种语言客户端</li><li>可视化管理界面</li><li>插件机制</li></ul><p>RabbitMQ工作原理：</p><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326112346201.png" alt="image-20230326112346201"> </p><p>生产者(Producer)：发送消息的应用。</p><p>连接(Connection)：Producer&#x2F;Consumer和Broker之间的TCP连接。</p><p>信道(Channel)：Channel是在Connection内部建立的逻辑连接，如果应用程序支持多线程，通常每个Thread创建单独的Channel进行通讯，AMQP Method包含了Channel ID帮助客户端和Message Broker识别Channel，所以Channel之间是完全隔离的。Channel作为轻量级的Connection极大减少了操作系统建TCP Connection的开销。</p><p>代理(Broker)：接收和分发消息的应用，RabbitMQ Server就是Message Broker。</p><p>虚拟主机(Virtual Host)：出于多租户和安全因素设计的，把AMQP的基本组件划分到一个虚拟的分组中，类似于网络中的Namespace概念。当多个不同的用户使用同一个RabbitMQ Server提供的服务时，可以划分出多个Virtual Host，每个用户在自己的Virtual Host创建Exchange&#x2F;Queue等。</p><p>交换机(Exchange)：Message到达Broker的第一站，根据分发规则，匹配查询表中的Routing Key，分发消息到Queue中去。</p><p>队列(Queue)：存储消息的缓存。</p><p>绑定(Binding)：队列和交换机的一个关联连接。</p><p>路由键(Routing Key)：供交换机查看并根据键来决定如何分发消息到队列的一个键，路由键可以说是消息的目的地址。</p><p>消费者(Consumer)：接收消息的应用。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官网地址</span>https://www.rabbitmq.com/<span class="token comment">#github地址</span>https://github.com/rabbitmq/rabbitmq-server/releases</code></pre></div></figure><h2 id="1-2-RabbitMQ单机部署"><a href="#1-2-RabbitMQ单机部署" class="headerlink" title="1.2 RabbitMQ单机部署"></a>1.2 RabbitMQ单机部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04安装RabbitMQ</span>https://www.rabbitmq.com/install-debian.html<span class="token comment">#1.主机名解析，在当前RabbitMQ服务器配置本地主机名解析</span>root@node30:~<span class="token comment"># hostnamectl set-hostname rabbitmq1.chsblogs.com</span>root@rabbitmq1:~<span class="token comment"># vim /etc/hosts</span><span class="token number">192.168</span>.1.30 rabbitmq1 rabbitmq1.chsblogs.com<span class="token comment">#2.安装RabbitMQ,安装相应版本的Erlang和RabbitMQ</span><span class="token comment">#https://www.rabbitmq.com/which-erlang.html</span>root@rabbitmq1:~<span class="token comment"># apt-cache madison erlang</span>    erlang <span class="token operator">|</span> <span class="token number">1</span>:22.2.7+dfsg-1 <span class="token operator">|</span> https://mirrors.aliyun.com/ubuntu focal/universe amd64 Packagesroot@rabbitmq1:~<span class="token comment"># apt update &amp;&amp; apt -y install erlang</span>root@rabbitmq1:~<span class="token comment"># cd /opt</span>root@rabbitmq1:/opt<span class="token comment"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:/opt<span class="token comment"># apt install /opt/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl enable rabbitmq-server</span><span class="token comment">#3.启用可视化插件</span><span class="token comment">#https://www.rabbitmq.com/management.html</span><span class="token comment"># 5672  消费者访问端口</span><span class="token comment"># 15672 Web管理端口</span><span class="token comment"># 25672 集群状态通信端口</span>root@rabbitmq1:~<span class="token comment"># rabbitmq-plugins enable rabbitmq_management</span><span class="token comment">#4.创建用户、设置权限，在其他机器不能使用guest账号了，因为guest账号只能在本机登录</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl add_user admin admin</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl set_user_tags admin administrator</span>root@rabbitmq1:~<span class="token comment"># systemctl restart rabbitmq-server</span><span class="token comment">#5.登录测试</span>http://192.168.1.30:15672/</code></pre></div></figure><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326135951634.png" alt="image-20230326135951634"> </p><h2 id="1-3-RabbitMQ常用命令"><a href="#1-3-RabbitMQ常用命令" class="headerlink" title="1.3 RabbitMQ常用命令"></a>1.3 RabbitMQ常用命令</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.服务的启动与关闭</span><span class="token comment">#1.1 启动</span>rabbitmqctl start_appsystemctl start rabbitmq-server<span class="token comment">#1.2 关闭</span>rabbitmqctl stop_appsystemctl stop rabbitmq-server<span class="token comment">#1.3 重启</span>systemctl restart rabbitmq-server<span class="token comment">#2.用户管理</span><span class="token comment">#2.1 创建用户</span>rabbitmqctl add_user <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span><span class="token comment">#2.2 删除用户</span>rabbitmqctl delete_user <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token comment">#2.3 修改密码</span>rabbitmqctl change_password <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>newPassword<span class="token punctuation">&#125;</span><span class="token comment">#2.4 用户列表</span>rabbitmqctl  list_users<span class="token comment">#2.5 设置角色 tag可选administrator monitoring policymaker management</span>rabbitmqctl set_user_tags <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>tag <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token comment">#3.插件管理</span><span class="token comment">#3.1 开启某个插件</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token punctuation">&#123;</span>pluginName<span class="token punctuation">&#125;</span><span class="token comment">#3.2 关闭某个插件</span>rabbitmq-plugins disable <span class="token punctuation">&#123;</span>pluginName<span class="token punctuation">&#125;</span><span class="token comment">#4.权限管理</span><span class="token comment">#4.1 设置权限</span><span class="token comment">#Vhostpath：Vhost路径</span><span class="token comment">#user：用户名</span><span class="token comment">#Conf：一个正则表达式match哪些配置资源能够被该用户访问</span><span class="token comment">#Write：一个正则表达式match哪些配置资源能够被该用户读</span><span class="token comment">#Read：一个正则表达式match哪些配置资源能够被该用户访问</span>set_permissions <span class="token punctuation">[</span>-p vhostpath<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>conf<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>write<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>read<span class="token punctuation">&#125;</span><span class="token comment">#5.策略</span><span class="token comment">#5.1 查看当前策略</span>rabbitmqctl list_policies<span class="token comment">#5.2 添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hei'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> <span class="token comment">#5.3 删除策略</span>rabbitmqctl clear_policy ha-all</code></pre></div></figure><h2 id="1-4-RabbitMQ集群部署"><a href="#1-4-RabbitMQ集群部署" class="headerlink" title="1.4 RabbitMQ集群部署"></a>1.4 RabbitMQ集群部署</h2><h3 id="1-4-1-RabbitMQ集群方式"><a href="#1-4-1-RabbitMQ集群方式" class="headerlink" title="1.4.1 RabbitMQ集群方式"></a>1.4.1 RabbitMQ集群方式</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RabbitMQ集群分为两种方式：</span>普通模式：RabbitMQ集群默认模式。以两个节点（rabbitmq1、rabbitmq2）为例，对于Queue来说，消息实体只存在于其中一个节点rabbitmq1（或者 rabbitmq2），rabbitmq1和rabbitmq2两个节点仅有相同的元数据，即队列的结构。当消息进入rabbitmq1的Queue后，Consumer从rabbitmq2 消费时，RabbitMQ会临时在 rabbitmq1、rabbitmq2间进行消息传输，把A中的消息实体取出并经过B发送给Consumer。Consumer可以连接每一个节点，从中取消息，该模式存在一个问题就是当rabbitmq1节点故障后，rabbitmq2节点无法取到rabbitmq1节点中还未消费的消息实体。镜像模式：把需要的队列做成镜像队列，存在与多个节点属于RabbitMQ的HA方案。该模式解决了普通模式中的问题，其实质和普通模式不同之处在于，消息实体会主动在镜像节点间同步，而不是在Consumer取数据时临时拉取。该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉。所以在对可靠性要求较高的场合中适用。一个队列想做成镜像队列，需要先设置Policy，然后客户端创建队列的时候，RabbitMQ集群根据<span class="token string">"队列名称"</span>自动设置是普通集群模式或镜像队列。<span class="token comment">#RabbitMQ集群中有两种节点类型</span>内存节点磁盘节点</code></pre></div></figure><h3 id="1-4-2-RabbitMQ集群部署"><a href="#1-4-2-RabbitMQ集群部署" class="headerlink" title="1.4.2 RabbitMQ集群部署"></a>1.4.2 RabbitMQ集群部署</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名解析配置，三台RabbitMQ服务器配置本地主机名解析</span><span class="token function">vim</span> /etc/hosts<span class="token number">192.168</span>.1.30 rabbitmq1 rabbitmq1.chsblogs.com<span class="token number">192.168</span>.1.31 rabbitmq2 rabbitmq2.chsblogs.com<span class="token number">192.168</span>.1.32 rabbitmq3 rabbitmq3.chsblogs.com<span class="token comment">#2.三台服务器安装RabbitMQ</span>root@rabbitmq1:~<span class="token comment"># apt update &amp;&amp; apt -y install erlang</span>root@rabbitmq1:~<span class="token comment"># cd /opt</span>root@rabbitmq1:/opt<span class="token comment"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:/opt<span class="token comment"># apt install /opt/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl enable rabbitmq-server</span><span class="token comment">#3.同步Cookie文件</span><span class="token comment">#将rabbitmq1机器的.erlang.cookie文件复制到rabbitmq2和rabbitmq3机器（此文件在rabbitmq服务启动时自动生成），因为节点之间需要通过此文件来判断是否允许交流（判断是否属于集群内部节点），如果三台机器的此文件内容不一致则集群无法启动成功。</span>root@rabbitmq1:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># scp /var/lib/rabbitmq/.erlang.cookie root@192.168.1.31:/var/lib/rabbitmq/</span>root@rabbitmq1:~<span class="token comment"># scp /var/lib/rabbitmq/.erlang.cookie root@192.168.1.32:/var/lib/rabbitmq/</span><span class="token comment">#4.启动rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl start rabbitmq-server</span><span class="token comment">#5.在从节点rabbitmq2和rabbitmq3执行加入集群命令</span><span class="token comment">#rabbitmqctl stop_app #先停止服务（注：这里的参数stop_app和stop是不一样的，stop是停掉服务，stop_app是停掉这个节点，但是并没有停止rabbitmq依赖的erlang进程</span><span class="token comment">#rabbitmqctl reset #重置状态（注：这里重置节点将会把此节点下的所有数据全部清除，包括队列、交换器、虚拟主机和用户等）</span><span class="token comment">#rabbitmqctl join_cluster rabbit@rabbitmq1 --ram #节点加入集群, 初次加入集群必须通过这种加入基准节点的方式。--ram内存节点</span><span class="token comment">#rabbitmqctl start_app</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl stop_app</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl reset</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl join_cluster rabbit@rabbitmq1</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl start_app</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl stop_app</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl reset</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl join_cluster rabbit@rabbitmq1</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl start_app</span><span class="token comment">#6.重新启动rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl restart rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl restart rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl restart rabbitmq-server</span><span class="token comment">#7.查看集群状态</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl cluster_status</span>Cluster status of <span class="token function">node</span> rabbit@rabbitmq1 <span class="token punctuation">..</span>.BasicsCluster name: rabbit@rabbitmq1Disk Nodesrabbit@rabbitmq1rabbit@rabbitmq2rabbit@rabbitmq3Running Nodesrabbit@rabbitmq1rabbit@rabbitmq2rabbit@rabbitmq3Versionsrabbit@rabbitmq1: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7rabbit@rabbitmq2: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7rabbit@rabbitmq3: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7Maintenance statusNode: rabbit@rabbitmq1, status: not under maintenanceNode: rabbit@rabbitmq2, status: not under maintenanceNode: rabbit@rabbitmq3, status: not under maintenanceAlarms<span class="token punctuation">(</span>none<span class="token punctuation">)</span>Network Partitions<span class="token punctuation">(</span>none<span class="token punctuation">)</span>ListenersNode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APINode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APINode: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APIFeature flagsFlag: drop_unroutable_metric, state: enabledFlag: empty_basic_get_metric, state: enabledFlag: implicit_default_bindings, state: enabledFlag: maintenance_mode_status, state: enabledFlag: quorum_queue, state: enabledFlag: virtual_host_metadata, state: enabled<span class="token comment">#8.将集群设置为镜像模式，只需要在一台节点执行一下命令即可</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl set_policy ha-all '^' '&#123;"ha-mode":"all"&#125;'</span>Setting policy <span class="token string">"ha-all"</span> <span class="token keyword">for</span> pattern <span class="token string">"^"</span> to <span class="token string">"&#123;"</span>ha-mode<span class="token string">":"</span>all<span class="token string">"&#125;"</span> with priority <span class="token string">"0"</span> <span class="token keyword">for</span> vhost <span class="token string">"/"</span> <span class="token punctuation">..</span>.</code></pre></div></figure><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326145942533.png" alt="image-20230326145942533"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Goの学习笔记(大纲)</title>
    <link href="/2023/03/20/StudyNotes/Go/"/>
    <url>/2023/03/20/StudyNotes/Go/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(2).Pythonの学习笔记(大纲)</title>
    <link href="/2023/03/20/StudyNotes/Python/"/>
    <url>/2023/03/20/StudyNotes/Python/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(05).Git常用命令</title>
    <link href="/2023/03/19/CICD/JG/jg05/"/>
    <url>/2023/03/19/CICD/JG/jg05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-git-config"><a href="#1-git-config" class="headerlink" title="1.git config"></a>1.git config</h1><h2 id="1-1-git-config"><a href="#1-1-git-config" class="headerlink" title="1.1 git config"></a>1.1 git config</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有的配置以及它们所在的文件</span><span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin<span class="token comment">#设置你的用户名和邮件地址</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"陈怀森"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"1285780460@qq.com"</span><span class="token comment">#查看你的用户名和邮件地址</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span></code></pre></div></figure><h2 id="1-2-获取Git仓库"><a href="#1-2-获取Git仓库" class="headerlink" title="1.2 获取Git仓库"></a>1.2 获取Git仓库</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#初始化的Git仓库</span><span class="token function">git</span> init<span class="token comment">#克隆现有的仓库</span><span class="token function">git</span> clone git@gitee.com:huaisen/test.git<span class="token comment">#检查当前文件状态</span><span class="token function">git</span> status</code></pre></div></figure><h2 id="1-3-git-add"><a href="#1-3-git-add" class="headerlink" title="1.3 git add"></a>1.3 git add</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-4-git-commit"><a href="#1-4-git-commit" class="headerlink" title="1.4 git commit"></a>1.4 git commit</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-5-git-push"><a href="#1-5-git-push" class="headerlink" title="1.5 git push"></a>1.5 git push</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#推送到远程仓库</span><span class="token function">git</span> push origin master</code></pre></div></figure><h2 id="1-6-git-pull"><a href="#1-6-git-pull" class="headerlink" title="1.6 git pull"></a>1.6 git pull</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#从远程仓库拉取</span><span class="token function">git</span> pull git@gitee.com:huaisen/test.git</code></pre></div></figure><h2 id="1-7-git-log"><a href="#1-7-git-log" class="headerlink" title="1.7 git log"></a>1.7 git log</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-8-git-reset"><a href="#1-8-git-reset" class="headerlink" title="1.8 git reset"></a>1.8 git reset</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-9-git-remote"><a href="#1-9-git-remote" class="headerlink" title="1.9 git remote"></a>1.9 git remote</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@gitee.com:huaisen/chs.git<span class="token comment">#移除远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> origin</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(04).代码部署实战</title>
    <link href="/2023/03/19/CICD/JG/jg04/"/>
    <url>/2023/03/19/CICD/JG/jg04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于Jenkins实现灰度部署"><a href="#1-基于Jenkins实现灰度部署" class="headerlink" title="1.基于Jenkins实现灰度部署"></a>1.基于Jenkins实现灰度部署</h1><h2 id="1-1-主机清单"><a href="#1-1-主机清单" class="headerlink" title="1.1 主机清单"></a>1.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>开发人员</td><td></td></tr><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66&#x2F;67&#x2F;77</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66&#x2F;67&#x2F;77</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>sonarqube</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>SonarQube 8.9.0.43852</td><td></td></tr><tr><td>test-web1</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>test-web2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>test-web3</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr></tbody></table><h2 id="1-2-部署拓扑图"><a href="#1-2-部署拓扑图" class="headerlink" title="1.2 部署拓扑图"></a>1.2 部署拓扑图</h2><p><img src="/2023/03/19/CICD/JG/jg04/image-20230324185516008.png" alt="image-20230324185516008"> </p><h2 id="1-3-GitLab创建项目"><a href="#1-3-GitLab创建项目" class="headerlink" title="1.3 GitLab创建项目"></a>1.3 GitLab创建项目</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.GitLab上创建test项目</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230324231515848.png" alt="image-20230324231515848"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.新建README.md</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230324234845880.png" alt="image-20230324234845880"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.创建develop分支</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230324235019735.png" alt="image-20230324235019735"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.开发提交v1代码至develop分支</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># mkdir code</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd code/</span><span class="token punctuation">[</span>root@client code<span class="token punctuation">]</span><span class="token comment"># git clone -b develop http://192.168.1.30/chsblogs/test.git</span>Cloning into <span class="token string">'test'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> remote: Enumerating objects: <span class="token number">3</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>root@client code<span class="token punctuation">]</span><span class="token comment"># cd test/</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim sonar-project.properties</span><span class="token assign-left variable">sonar.projectKey</span><span class="token operator">=</span>chsblogs-test-key<span class="token assign-left variable">sonar.projectName</span><span class="token operator">=</span>chsblogs-test-name<span class="token assign-left variable">sonar.projectVersion</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">sonar.sources</span><span class="token operator">=</span>./<span class="token assign-left variable">sonar.language</span><span class="token operator">=</span>py<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v1"</span><span class="token punctuation">[</span>develop a360769<span class="token punctuation">]</span> chsblogs v1 <span class="token number">2</span> files changed, <span class="token number">7</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> index.html create mode <span class="token number">100644</span> sonar-project.properties<span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Delta compression using up to <span class="token number">2</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">4</span>/4<span class="token punctuation">)</span>, <span class="token number">456</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">4</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/test/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/test.git   c7d63c7<span class="token punctuation">..</span>a360769  develop -<span class="token operator">></span> develop</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.合并分支</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325010127093.png" alt="image-20230325010127093"> </p><h2 id="1-4-Jenkins创建任务"><a href="#1-4-Jenkins创建任务" class="headerlink" title="1.4 Jenkins创建任务"></a>1.4 Jenkins创建任务</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Jenkins创建chsblogs-test任务</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325000025624.png" alt="image-20230325000025624"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.添加选项参数，是部署deploy还是回滚rollback_last_version</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325000437857.png" alt="image-20230325000437857"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.添加选项参数,分支master和develop</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325000744346.png" alt="image-20230325000744346"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.添加选项参数,获取服务器分组IP列表</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325000828345.png" alt="image-20230325000828345"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.编写shell脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/chsblogs_test.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d_%H-%M-%S<span class="token variable">`</span></span><span class="token comment">#部署还是回滚</span><span class="token assign-left variable">METHOD</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token comment">#分支master和develop</span><span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token comment">#获取服务器分组IP列表</span><span class="token assign-left variable">GROUP_LIST</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token keyword">function</span> <span class="token function-name function">IP_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP1"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产灰度服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.35"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>     <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> disable server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> disable server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP2"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产除灰度外剩余服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.36 192.168.1.37"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>     <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP3"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产全部服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.35 192.168.1.36 192.168.1.37"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP4"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#测试全部服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.39 192.168.1.40 192.168.1.41"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">clone_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将开始clone <span class="token variable">$&#123;BRANCH&#125;</span>分支的代码"</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">test</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> clone <span class="token parameter variable">-b</span>  <span class="token variable">$&#123;BRANCH&#125;</span> git@192.168.1.30:chsblogs/test.git  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;BRANCH&#125;</span>分支代码cllone完成"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">scanner_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs/test <span class="token operator">&amp;&amp;</span> /apps/sonar-scanner/bin/sonar-scanner  <span class="token builtin class-name">echo</span> <span class="token string">"代码扫描完成,请打开sonarqube查看扫描结果"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">code_maven</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span>  <span class="token string">"/data/git/chsblogs/test &amp;&amp; mvn clean package -Dmaven.test.skip=true"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"代码编译完成"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">make_gz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs/test <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> code.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-czvf</span> code.tar.gz ./*  <span class="token builtin class-name">echo</span> <span class="token string">"代码打包完成"</span><span class="token punctuation">&#125;</span><span class="token function-name function">down_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">"echo "</span>disable server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 从负载均衡192.168.1.33下线成功"</span>    <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">"echo "</span>disable server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 从负载均衡192.168.1.34下线成功"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">scp_gzfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">scp</span> /data/git/chsblogs/test/code.tar.gz tomcat@<span class="token variable">$&#123;node&#125;</span>:/data/tomcat/tomcat_appdir/code-<span class="token variable">$&#123;DATE&#125;</span>.tar.gz    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"mkdir /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> &amp;&amp; tar -xvf /data/tomcat/tomcat_appdir/code-<span class="token variable">$&#123;DATE&#125;</span>.tar.gz -C /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> &amp;&amp; rm -rf  /data/tomcat/tomcat_webapps/myapp &amp;&amp; ln -sv  /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> /data/tomcat/tomcat_webapps/myapp"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">stop_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span>   <span class="token string">"/etc/init.d/tomcat stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">start_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span>   <span class="token string">"/etc/init.d/tomcat start"</span>    <span class="token comment">#sleep 5</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">web_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">sleep</span> <span class="token number">10</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span>  <span class="token parameter variable">-I</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span class="token parameter variable">-o</span> /dev/null  <span class="token parameter variable">-w</span> %<span class="token punctuation">&#123;</span>http_code<span class="token punctuation">&#125;</span>  http://$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>:8080/myapp/index.html<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;NUM&#125;</span> <span class="token parameter variable">-eq</span> <span class="token number">200</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>       <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> myapp URL 测试通过,即将添加到负载"</span>       add_node <span class="token variable">$&#123;node&#125;</span>    <span class="token keyword">else</span>       <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 测试失败,请检查该服务器是否成功启动tomcat"</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">add_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">node</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;node&#125;</span>,<span class="token string">"----->"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP3"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span>  server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>      <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span>  server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;node&#125;</span> <span class="token operator">==</span> <span class="token string">"192.168.1.35"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>       <span class="token builtin class-name">echo</span> <span class="token string">"灰度部署环境服务器[192.168.1.35]部署完毕,请进行代码测试!"</span>    <span class="token keyword">else</span>      <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>      <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">rollback_last_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$node</span>   <span class="token assign-left variable">NOW_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span>  <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webapps/ <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">"->"</span> <span class="token string">'&#123;print $2&#125;'</span>  <span class="token operator">|</span> <span class="token function">tail</span> -n1<span class="token string">""</span><span class="token variable">`</span></span>   <span class="token assign-left variable">NOW_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $<span class="token punctuation">&#123;</span>NOW_VERSION<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>   <span class="token builtin class-name">echo</span> <span class="token variable">$NOW_VERSION</span>,<span class="token string">"NOW_VERSION"</span>    <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span>  tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>  <span class="token string">""</span><span class="token function">ls</span>  <span class="token parameter variable">-l</span>  <span class="token parameter variable">-rt</span>  /data/tomcat/tomcat_webdir/ <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-B</span> <span class="token number">1</span> $<span class="token punctuation">&#123;</span>NOW_VERSION<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $9&#125;'</span><span class="token string">""</span><span class="token variable">`</span></span>   <span class="token builtin class-name">echo</span> <span class="token variable">$NAME</span>,<span class="token string">""</span>NAME   <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf /data/tomcat/tomcat_webapps/myapp &amp;&amp; ln -sv  /data/tomcat/tomcat_webdir/<span class="token variable">$&#123;NAME&#125;</span> /data/tomcat/tomcat_webapps/myapp"</span>  <span class="token keyword">done</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">delete_history_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf /data/tomcat/tomcat_appdir/*"</span>    <span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>  <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span> <span class="token parameter variable">-d</span>   <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webdir/code-* <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token string">""</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> --> <span class="token variable">$&#123;NUM&#125;</span>"</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;NUM&#125;</span> <span class="token parameter variable">-gt</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span> <span class="token parameter variable">-d</span>   <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webdir/code-* <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $9&#125;'</span><span class="token string">""</span><span class="token variable">`</span></span>         <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf <span class="token variable">$&#123;NAME&#125;</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 删除历史版本<span class="token variable">$&#123;NAME&#125;</span>成功!"</span>      <span class="token keyword">fi</span>  <span class="token keyword">done</span> <span class="token punctuation">&#125;</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>      deploy<span class="token punctuation">)</span>        IP_list<span class="token punctuation">;</span>                clone_code<span class="token punctuation">;</span>        scanner_code<span class="token punctuation">;</span>        make_gz<span class="token punctuation">;</span>        down_node<span class="token punctuation">;</span>        stop_tomcat<span class="token punctuation">;</span>        scp_gzfile<span class="token punctuation">;</span>        start_tomcat<span class="token punctuation">;</span>        web_test<span class="token punctuation">;</span>        delete_history_version<span class="token punctuation">;</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>      rollback_last_version<span class="token punctuation">)</span>        IP_list<span class="token punctuation">;</span>        down_node<span class="token punctuation">;</span>        stop_tomcat<span class="token punctuation">;</span>        rollback_last_version<span class="token punctuation">;</span>        start_tomcat<span class="token punctuation">;</span>        web_test<span class="token punctuation">;</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token punctuation">&#125;</span>main <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span>root@jenkins:~<span class="token comment"># chmod +x /data/scripts/chsblogs/chsblogs_test.sh</span>/data/scripts/chsblogs/chsblogs_test.sh <span class="token variable">$METHOD</span> <span class="token variable">$BRANCH</span> <span class="token variable">$GROUP</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325014553627.png" alt="image-20230325014553627">  </p><p> <img src="/2023/03/19/CICD/JG/jg04/image-20230325001227886.png" alt="image-20230325001227886"></p><h2 id="1-5-配置负载均衡"><a href="#1-5-配置负载均衡" class="headerlink" title="1.5 配置负载均衡"></a>1.5 配置负载均衡</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#生产环境</span>listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.35 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.36 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.37 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#测试环境</span>listen web_port_test  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.77:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.39 <span class="token number">192.168</span>.1.39:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#测试访问灰度环境</span>listen web_test  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.67:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.35 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-6-升级测试环境"><a href="#1-6-升级测试环境" class="headerlink" title="1.6 升级测试环境"></a>1.6 升级测试环境</h2><p>将测试环境test-web1、test-web2、test-web3升级至开发分支的V1版本。</p><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325005047938.png" alt="image-20230325005047938"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.77/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com V<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h2 id="1-7-生产环境灰度部署"><a href="#1-7-生产环境灰度部署" class="headerlink" title="1.7 生产环境灰度部署"></a>1.7 生产环境灰度部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.将192.168.1.35灰度部署</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325011336989.png" alt="image-20230325011336989"> </p><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325011756070.png" alt="image-20230325011756070"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.生产环境除灰度外(192.168.1.35)剩余服务器升级(192.168.1.36 192.168.1.37)</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325012008368.png" alt="image-20230325012008368"> </p><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325011941710.png" alt="image-20230325011941710"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.生产全部服务器升级</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325012110489.png" alt="image-20230325012110489"> </p><h2 id="1-8-部署V2版本"><a href="#1-8-部署V2版本" class="headerlink" title="1.8 部署V2版本"></a>1.8 部署V2版本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.开发人员提交V2版本</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com V<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v2"</span><span class="token punctuation">[</span>develop 32203f7<span class="token punctuation">]</span> chsblogs v2 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Delta compression using up to <span class="token number">2</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">348</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/test/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/test.git   a360769<span class="token punctuation">..</span>32203f7  develop -<span class="token operator">></span> develop</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.将V2版本部署至测试环境</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325012652770.png" alt="image-20230325012652770"> </p><p> <img src="/2023/03/19/CICD/JG/jg04/image-20230325013141011.png" alt="image-20230325013141011"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.合并分支</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.将V2版本灰度部署</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325013824160.png" alt="image-20230325013824160"></p><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325013948756.png" alt="image-20230325013948756"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.生产除灰度外剩余服务器部署V2版本</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325014011404.png" alt="image-20230325014011404"> </p><h2 id="1-9-回退版本"><a href="#1-9-回退版本" class="headerlink" title="1.9 回退版本"></a>1.9 回退版本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将生产环境V2版本回退至V1版本</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325014307090.png" alt="image-20230325014307090"> </p><p><img src="/2023/03/19/CICD/JG/jg04/image-20230325014459248.png" alt="image-20230325014459248"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03).SonarQube简介及安装</title>
    <link href="/2023/03/19/CICD/JG/jg03/"/>
    <url>/2023/03/19/CICD/JG/jg03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SonarQube简介及安装"><a href="#1-SonarQube简介及安装" class="headerlink" title="1.SonarQube简介及安装"></a>1.SonarQube简介及安装</h1><p>前文已经安装完了GitLab和Jenkins，接下来就开始安装和使用SonarQube：</p><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>sonarqube</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>SonarQube 8.9.0.43852</td><td></td></tr></tbody></table><h2 id="1-1-SonarQube简介"><a href="#1-1-SonarQube简介" class="headerlink" title="1.1 SonarQube简介"></a>1.1 SonarQube简介</h2><p>SonarQube是一个用于代码质量管理的开放平台，通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，例如Jenkins等。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方网站：</span>http://www.sonarqube.org/https://docs.sonarqube.org/8.9/</code></pre></div></figure><h2 id="1-2-SonarQube安装"><a href="#1-2-SonarQube安装" class="headerlink" title="1.2 SonarQube安装"></a>1.2 SonarQube安装</h2><h3 id="1-2-1-SonarQube下载"><a href="#1-2-1-SonarQube下载" class="headerlink" title="1.2.1 SonarQube下载"></a>1.2.1 SonarQube下载</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">https://www.sonarqube.org/downloads/</code></pre></div></figure><h3 id="1-2-2-SonarQube安装"><a href="#1-2-2-SonarQube安装" class="headerlink" title="1.2.2 SonarQube安装"></a>1.2.2 SonarQube安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装jdk11</span>root@sonarqube:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-11-jdk</span><span class="token comment">#2.安装PostgreSQL</span>root@sonarqube:~<span class="token comment"># apt install postgresql -y</span>root@sonarqube:~<span class="token comment"># vim /etc/postgresql/12/main/postgresql.conf</span>listen_addresses <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span>max_connections <span class="token operator">=</span> <span class="token number">1000</span>root@sonarqube:~<span class="token comment"># vim /etc/postgresql/12/main/pg_hba.conf</span><span class="token function">host</span>    all             all             <span class="token number">0.0</span>.0.0/0            md5root@sonarqube:~<span class="token comment"># systemctl restart postgresql</span>root@sonarqube:~<span class="token comment"># su - postgres</span>postgres@sonarqube:~$ psql <span class="token parameter variable">-U</span> postgrespsql <span class="token punctuation">(</span><span class="token number">12.14</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">12.14</span>-0ubuntu0.20.04.1<span class="token punctuation">))</span>Type <span class="token string">"help"</span> <span class="token keyword">for</span> help.<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment">#</span><span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># CREATE DATABASE sonar; #创建数据库</span>CREATE DATABASE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># CREATE USER sonar WITH ENCRYPTED PASSWORD '123456'; #创建用户</span>CREATE ROLE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># GRANT ALL PRIVILEGES ON DATABASE sonar TO sonar; #授权用户</span>GRANT<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># ALTER DATABASE sonar OWNER TO sonar; #执行变更</span>ALTER DATABASE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># \q #退出</span><span class="token comment">#3.系统优化</span>root@sonarqube:~<span class="token comment"># vim /etc/sysctl.conf</span><span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">524288</span>fs.file-max<span class="token operator">=</span><span class="token number">131072</span>root@sonarqube:~<span class="token comment"># sysctl -p</span>root@sonarqube:~<span class="token comment"># vim /etc/security/limits.conf</span>sonarqube - nofile <span class="token number">100000</span>sonarqube - nproc <span class="token number">100000</span><span class="token comment">#4.创建sonarqube用户，不能用root账号启动</span>root@sonarqube:~<span class="token comment"># useradd -s /bin/bash -m sonarqube</span><span class="token comment">#5.上传安装包</span>root@sonarqube:~<span class="token comment"># mkdir /apps</span>root@sonarqube:~<span class="token comment"># cd /apps/</span>root@sonarqube:/apps<span class="token comment"># ls</span>sonarqube-8.9.0.43852.ziproot@sonarqube:/apps<span class="token comment"># chown sonarqube.sonarqube /apps/ -R</span>root@sonarqube:/apps<span class="token comment"># su - sonarqube</span>sonarqube@sonarqube:~$ <span class="token builtin class-name">cd</span> /apps/sonarqube@sonarqube:/apps$ <span class="token function">ls</span>sonarqube-8.9.0.43852.zipsonarqube@sonarqube:/apps$ <span class="token function">unzip</span> sonarqube-8.9.0.43852.zipsonarqube@sonarqube:/apps$ <span class="token function">ln</span> <span class="token parameter variable">-sv</span> sonarqube-8.9.0.43852 sonarqube<span class="token comment">#6.配置sonarqube</span>sonarqube@sonarqube:/apps$ <span class="token builtin class-name">cd</span> sonarqubesonarqube@sonarqube:/apps/sonarqube$ <span class="token function">vim</span> conf/sonar.properties<span class="token assign-left variable">sonar.jdbc.username</span><span class="token operator">=</span>sonar<span class="token assign-left variable">sonar.jdbc.password</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">sonar.jdbc.url</span><span class="token operator">=</span>jdbc:postgresql://192.168.1.38/sonar<span class="token comment">#7.启动sonarqube</span>sonarqube@sonarqube:/apps/sonarqube$ ./bin/linux-x86-64/sonar.sh start<span class="token comment">#8.访问测试</span><span class="token comment">#账号密码 admin</span>http://192.168.1.38:9000/</code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230321000302252.png" alt="image-20230321000302252"> </p><p><img src="/2023/03/19/CICD/JG/jg03/image-20230321000348068.png" alt="image-20230321000348068"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更改中文，可以直接去github下载，放到/apps/sonarqube/extensions/plugins目录下，重启sonarqube服务</span>https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-8.9</code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230321000517485.png" alt="image-20230321000517485"> </p><p><img src="/2023/03/19/CICD/JG/jg03/image-20230321001230603.png" alt="image-20230321001230603"> </p><h2 id="1-3-Jenkins部署sonar-scanner"><a href="#1-3-Jenkins部署sonar-scanner" class="headerlink" title="1.3 Jenkins部署sonar-scanner"></a>1.3 Jenkins部署sonar-scanner</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载地址</span>https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/<span class="token comment">#官方文档</span>https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@jenkins:~<span class="token comment"># mkdir /apps</span>root@jenkins:~<span class="token comment"># cd /apps/</span>root@jenkins:/apps<span class="token comment"># ls</span>sonar-scanner-cli-4.6.2.2472-linux.ziproot@jenkins:/apps<span class="token comment"># unzip sonar-scanner-cli-4.6.2.2472-linux.zip </span>root@jenkins:/apps<span class="token comment"># ln -sv /apps/sonar-scanner-4.6.2.2472-linux/ /apps/sonar-scanner</span>root@jenkins:/apps/sonar-scanner<span class="token comment"># vim conf/sonar-scanner.properties</span><span class="token assign-left variable">sonar.host.url</span><span class="token operator">=</span>http://192.168.1.38:9000<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token comment">#2.上传测试代码</span>root@jenkins:/opt<span class="token comment"># ls</span>sonar-examples-master.ziproot@jenkins:/opt<span class="token comment"># unzip sonar-examples-master.zip</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.SonarQube服务关闭Force user authentication</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230322195439103.png" alt="image-20230322195439103"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.测试代码扫描</span>root@jenkins:~<span class="token comment"># cd /opt/sonar-examples-master/projects/languages/python/python-sonar-runner</span>root@jenkins:/opt/sonar-examples-master/projects/languages/python/python-sonar-runner<span class="token comment"># /apps/sonar-scanner/bin/sonar-scanner</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>INFO: ------------------------------------------------------------------------INFO: EXECUTION SUCCESSINFO: ------------------------------------------------------------------------INFO: Total time: <span class="token number">30</span>.165sINFO: Final Memory: 7M/27MINFO: ------------------------------------------------------------------------</code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230322195818510.png" alt="image-20230322195818510"> </p><h3 id="1-3-1-脚本执行代码扫描"><a href="#1-3-1-脚本执行代码扫描" class="headerlink" title="1.3.1 脚本执行代码扫描"></a>1.3.1 脚本执行代码扫描</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.开发上传代码</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># ls</span>index.html  Jenkinsfile<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim sonar-project.properties</span><span class="token assign-left variable">sonar.projectKey</span><span class="token operator">=</span>chsblogs-web2-key<span class="token assign-left variable">sonar.projectName</span><span class="token operator">=</span>chsblogs-web2-name<span class="token assign-left variable">sonar.projectVersion</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">sonar.sources</span><span class="token operator">=</span>./<span class="token assign-left variable">sonar.language</span><span class="token operator">=</span>py<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "sonar-project.properties"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span><span class="token comment">#2.新建任务</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone git@192.168.1.30:chsblogs/web2.git<span class="token builtin class-name">cd</span> /data/git/chsblogs/web2 <span class="token operator">&amp;&amp;</span> /apps/sonar-scanner/bin/sonar-scanner<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230322203027160.png" alt="image-20230322203027160"> </p><p><img src="/2023/03/19/CICD/JG/jg03/image-20230322203756678.png" alt="image-20230322203756678"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.立即构建，查看SonarQube扫描结果</span></code></pre></div></figure><p><img src="/2023/03/19/CICD/JG/jg03/image-20230322204414733.png" alt="image-20230322204414733"> </p><h3 id="1-3-2-Jenkins执行代码扫描"><a href="#1-3-2-Jenkins执行代码扫描" class="headerlink" title="1.3.2 Jenkins执行代码扫描"></a>1.3.2 Jenkins执行代码扫描</h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02).Jenkins简介及安装</title>
    <link href="/2023/03/12/CICD/JG/jg02/"/>
    <url>/2023/03/12/CICD/JG/jg02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Jenkins简介及安装"><a href="#1-Jenkins简介及安装" class="headerlink" title="1.Jenkins简介及安装"></a>1.Jenkins简介及安装</h1><p>前文已经安装完了GitLab，接下来就开始安装和使用Jenkins：</p><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr></tbody></table><h2 id="1-1-Jenkins简介"><a href="#1-1-Jenkins简介" class="headerlink" title="1.1 Jenkins简介"></a>1.1 Jenkins简介</h2><p>Jenkins是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</p><h2 id="1-2-Jenkins之Web环境准备"><a href="#1-2-Jenkins之Web环境准备" class="headerlink" title="1.2 Jenkins之Web环境准备"></a>1.2 Jenkins之Web环境准备</h2><h3 id="1-2-1-安装配置Haproxy"><a href="#1-2-1-安装配置Haproxy" class="headerlink" title="1.2.1 安装配置Haproxy"></a>1.2.1 安装配置Haproxy</h3><p><strong>主机ha1【192.168.1.33】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha1:~<span class="token comment"># apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode http  log global  option httplog  server web1 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server web3 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha1:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha1:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha1:~<span class="token comment"># systemctl start keepalived</span>root@ha1:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><p><strong>主机ha2【192.168.1.34】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha2:~<span class="token comment"># apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode http  log global  option httplog  server web1 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server web3 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha2:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha2:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha2:~<span class="token comment"># systemctl start keepalived</span>root@ha2:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><h3 id="1-2-2-安装配置Tomcat"><a href="#1-2-2-安装配置Tomcat" class="headerlink" title="1.2.2 安装配置Tomcat"></a>1.2.2 安装配置Tomcat</h3><p>三台Web服务器安装Tomcat</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装JDK</span>root@web1:~<span class="token comment"># vim install_jdk.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token punctuation">&#125;</span>install_jdkroot@web1:~<span class="token comment"># chmod +x install_jdk.sh</span>root@web1:~<span class="token comment"># sh install_jdk.sh</span>root@web2:~<span class="token comment"># . /etc/profile.d/jdk.sh </span>root@web2:~<span class="token comment"># java -version</span><span class="token comment">#2.安装Tomcat</span>root@web1:~<span class="token comment"># mkdir /apps</span>root@web1:~<span class="token comment"># cd /apps/</span>root@web1:/apps<span class="token comment"># ls</span>apache-tomcat-9.0.72.tar.gzroot@web1:/apps<span class="token comment"># tar -xvf apache-tomcat-9.0.72.tar.gz</span>root@web1:/apps<span class="token comment"># ln -sv /apps/apache-tomcat-9.0.72 /apps/tomcat</span><span class="token comment">#3.配置tomcat启动脚本</span>root@web1:/apps<span class="token comment"># vim /etc/init.d/tomcat</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">JDK_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token assign-left variable">CATALINA_HOME</span><span class="token operator">=</span>/apps/tomcat<span class="token builtin class-name">export</span> JDK_HOME CATALINA_HOME<span class="token builtin class-name">source</span> /etc/profile<span class="token comment">#PID=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;'`</span><span class="token comment">#NUM=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;' | wc -l`</span><span class="token comment">#case $1 in</span><span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"正在判断服务状态，请稍等！"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"请稍等3秒钟"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>   <span class="token keyword">if</span><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null     <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"Tomcat已经正在运行了！"</span>    <span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Tomcat没有运行，1秒后启动！"</span><span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>    <span class="token variable">$CATALINA_HOME</span>/bin/catalina.sh start   <span class="token builtin class-name">echo</span>  <span class="token string">"Tomcat 已经成功启动完成,5秒后判断是否启动成功"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"5"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"4"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>        <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null    <span class="token keyword">then</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  tomcat <span class="token operator">|</span> <span class="token function">grep</span> jdk <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  tomcat <span class="token operator">|</span> <span class="token function">grep</span> jdk <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat 已经成功启动<span class="token variable">$&#123;NUM&#125;</span> 个Tomcat进程!,PID为<span class="token variable">$&#123;PID&#125;</span>"</span>    <span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat启动失败，请重新启动！"</span>        <span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token keyword">fi</span> <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token string">"color"</span>  <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"正在判断服务状态，请稍等3秒钟！"</span><span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null    <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat运行中，1秒后关闭！"</span><span class="token builtin class-name">echo</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span> <span class="token string">"即将关闭Tomcat服务，请稍等！"</span>         <span class="token variable">$CATALINA_HOME</span>/bin/catalina.sh stop <span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"已经执行关闭命令,正在检查关闭了多少Tomcat进程，请稍等5秒钟！"</span><span class="token function">sleep</span> <span class="token number">2</span>        <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token function">pkill</span> <span class="token function">java</span> <span class="token operator">&amp;&amp;</span> <span class="token function">pkill</span> tomcat<span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token string">"color"</span>  <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$PID</span> <span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"已成功关闭<span class="token variable">$&#123;NUM&#125;</span> 个tomcat进程"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span>  <span class="token string">"Tomcat 已经关闭完成！"</span>         <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span> <span class="token keyword">fi</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat 没有运行"</span><span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span>            <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span>            <span class="token comment">#NUM=`ps -ef | grep  -v "color"  | grep tomcat | awk '&#123;print $2&#125;' | wc -l`</span>            <span class="token builtin class-name">echo</span> <span class="token string">"关闭失败，即将强制删除tomcat进程!"</span>            <span class="token function">sleep</span> <span class="token number">2</span>            <span class="token function">pkill</span> tomcat <span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">2</span>             <span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span>                <span class="token builtin class-name">echo</span> <span class="token string">"强制关闭失败，即将再次强制删除tomcat进程!"</span>                <span class="token function">pkill</span> <span class="token function">java</span><span class="token punctuation">;</span> <span class="token function">sleep</span> <span class="token number">2</span>            <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stop start  <span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span> start<span class="token punctuation">)</span> start <span class="token punctuation">;</span><span class="token punctuation">;</span> stop<span class="token punctuation">)</span> stop <span class="token punctuation">;</span><span class="token punctuation">;</span> restart<span class="token punctuation">)</span> restart <span class="token punctuation">;</span><span class="token punctuation">;</span> *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> $<span class="token string">"Usage: <span class="token variable">$0</span> &#123;start|stop|restart|status&#125;"</span> <span class="token keyword">esac</span>root@web1:/apps<span class="token comment"># chmod +x /etc/init.d/tomcat</span><span class="token comment">#4.配置tomcat目录</span>root@web1:~<span class="token comment"># groupadd -g 2023 tomcat &amp;&amp; useradd -m -g tomcat -u 2023 -s /bin/bash tomcat</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_appdir -p #保存web目录</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webdir    #保存解压后的web目录</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webapps   #tomcat app加载目录</span>root@web1:/apps<span class="token comment"># vim /apps/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/tomcat/tomcat_webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webdir/myapp #测试目录</span>root@web1:/apps<span class="token comment"># echo "web1 192.168.1.35" > /data/tomcat/tomcat_webdir/myapp/index.html</span>root@web1:/apps<span class="token comment"># ln -sv /data/tomcat/tomcat_webdir/myapp/ /data/tomcat/tomcat_webapps/</span>root@web1:/apps<span class="token comment"># chown tomcat.tomcat /apps/ /data/ -R</span>root@web1:~<span class="token comment"># su - tomcat</span>tomcat@web1:~$ /etc/init.d/tomcat start<span class="token comment">#5.访问测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web2 <span class="token number">192.168</span>.1.36<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web1 <span class="token number">192.168</span>.1.35<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web3 <span class="token number">192.168</span>.1.37</code></pre></div></figure><h2 id="1-3-Jenkins安装"><a href="#1-3-Jenkins安装" class="headerlink" title="1.3 Jenkins安装"></a>1.3 Jenkins安装</h2><h3 id="1-3-1-Jenkins下载"><a href="#1-3-1-Jenkins下载" class="headerlink" title="1.3.1 Jenkins下载"></a>1.3.1 Jenkins下载</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/<span class="token comment">#清华源</span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/<span class="token comment">#历史版本下载</span>https://mirrors.jenkins.io/</code></pre></div></figure><h3 id="1-3-2-Jenkins安装"><a href="#1-3-2-Jenkins安装" class="headerlink" title="1.3.2 Jenkins安装"></a>1.3.2 Jenkins安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@jenkins:~<span class="token comment"># ll jenkins_2.277.4_all.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">68308504</span> Mar <span class="token number">18</span> <span class="token number">15</span>:40 jenkins_2.277.4_all.deb<span class="token comment">#2.安装jdk</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u341-linux-x64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.0_341/ jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/usr/local/jdkexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/EOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh root@jenkins:~<span class="token comment"># ln -s /usr/local/jdk1.8.0_341/bin/java /usr/bin/java</span>root@jenkins:~<span class="token comment"># apt update &amp;&amp; apt install fontconfig daemon net-tools</span><span class="token comment">#3.安装Jenkins</span>root@jenkins:~<span class="token comment"># dpkg -i jenkins_2.277.4_all.deb</span>Selecting previously unselected package jenkins.<span class="token punctuation">(</span>Reading database <span class="token punctuation">..</span>. <span class="token number">72080</span> files and directories currently installed.<span class="token punctuation">)</span>Preparing to unpack jenkins_2.277.4_all.deb <span class="token punctuation">..</span>.Unpacking jenkins <span class="token punctuation">(</span><span class="token number">2.277</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.Setting up jenkins <span class="token punctuation">(</span><span class="token number">2.277</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.Processing triggers <span class="token keyword">for</span> systemd <span class="token punctuation">(</span><span class="token number">245.4</span>-4ubuntu3.15<span class="token punctuation">)</span> <span class="token punctuation">..</span>.</code></pre></div></figure><h3 id="1-3-3-Jenkins配置"><a href="#1-3-3-Jenkins配置" class="headerlink" title="1.3.3 Jenkins配置"></a>1.3.3 Jenkins配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.修改jenkins配置文件</span>root@node31:~<span class="token comment"># vim /etc/default/jenkins</span><span class="token assign-left variable">JENKINS_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">JENKINS_GROUP</span><span class="token operator">=</span>root<span class="token comment">#2.启动jenkins</span>root@jenkins:~<span class="token comment"># systemctl start jenkins</span><span class="token comment">#3.访问测试</span>http://192.168.1.31:8080/</code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230318155225321.png" alt="image-20230318155225321"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230318155351364.png" alt="image-20230318155351364"> </p><p>选择安装推荐的插件</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230318161128345.png" alt="image-20230318161128345"> </p><p>这里网不好的话插件可能会下载失败</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319103656662.png" alt="image-20230319103656662"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319104634975.png" alt="image-20230319104634975"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319104647558.png" alt="image-20230319104647558"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319104659568.png" alt="image-20230319104659568"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319105257151.png" alt="image-20230319105257151"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319105433190.png" alt="image-20230319105433190"> </p><h3 id="1-3-4-Jenkins相关目录"><a href="#1-3-4-Jenkins相关目录" class="headerlink" title="1.3.4 Jenkins相关目录"></a>1.3.4 Jenkins相关目录</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># cd /var/lib/jenkins/</span>root@jenkins:/var/lib/jenkins<span class="token comment"># ll</span>total <span class="token number">68</span>drwxr-xr-x <span class="token number">12</span> jenkins jenkins <span class="token number">4096</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 ./drwxr-xr-x <span class="token number">42</span> root    root    <span class="token number">4096</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 <span class="token punctuation">..</span>/-rw-r--r--  <span class="token number">1</span> root    root    <span class="token number">1597</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 config.xml-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">156</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 hudson.model.UpdateCenter.xml-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">370</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 hudson.plugins.git.GitTool.xml-rw-------  <span class="token number">1</span> jenkins jenkins <span class="token number">1712</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 identity.key.encdrwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">19</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 .java/-rw-r--r--  <span class="token number">1</span> root    root    <span class="token number">1701</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 jenkins.install.InstallUtil.installingPlugins-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">7</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 jenkins.install.InstallUtil.lastExecVersion-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">7</span> Mar <span class="token number">19</span> <span class="token number">10</span>:47 jenkins.install.UpgradeWizard.state-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">182</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 jenkins.model.JenkinsLocationConfiguration.xml-rw-r--r--  <span class="token number">1</span> jenkins jenkins  <span class="token number">171</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 jenkins.telemetry.Correlator.xmldrwxr-xr-x  <span class="token number">2</span> jenkins jenkins    <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 jobs/-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">0</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 .lastStarteddrwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">19</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 logs/-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">907</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 nodeMonitors.xmldrwxr-xr-x  <span class="token number">2</span> jenkins jenkins    <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 nodes/drwxr-xr-x <span class="token number">81</span> jenkins jenkins <span class="token number">8192</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 plugins/-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">129</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 queue.xml.bak-rw-r--r--  <span class="token number">1</span> jenkins jenkins   <span class="token number">64</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 secret.key-rw-r--r--  <span class="token number">1</span> jenkins jenkins    <span class="token number">0</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 secret.key.not-so-secretdrwx------  <span class="token number">4</span> jenkins jenkins  <span class="token number">237</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 secrets/drwxr-xr-x  <span class="token number">2</span> root    root     <span class="token number">182</span> Mar <span class="token number">19</span> <span class="token number">10</span>:50 updates/drwxr-xr-x  <span class="token number">2</span> jenkins jenkins   <span class="token number">24</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 userContent/drwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">56</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 users/drwxr-xr-x  <span class="token number">2</span> root    root       <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 workflow-libs/</code></pre></div></figure><h3 id="1-3-5-Jenkins升级"><a href="#1-3-5-Jenkins升级" class="headerlink" title="1.3.5 Jenkins升级"></a>1.3.5 Jenkins升级</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载jenkins.war包，将/usr/share/jenkins的jenkins.war替换重启jenkins即可</span>root@jenkins:/usr/share/jenkins<span class="token comment"># pwd</span>/usr/share/jenkinsroot@jenkins:/usr/share/jenkins<span class="token comment"># ls</span>jenkins.war</code></pre></div></figure><h1 id="2-Jenkins使用"><a href="#2-Jenkins使用" class="headerlink" title="2.Jenkins使用"></a>2.Jenkins使用</h1><h2 id="2-1-Jenkins插件管理"><a href="#2-1-Jenkins插件管理" class="headerlink" title="2.1 Jenkins插件管理"></a>2.1 Jenkins插件管理</h2><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319110000497.png" alt="image-20230319110000497"> </p><p>搜索需要的插件名并安装，安装完后需重启Jenkins</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319110058812.png" alt="image-20230319110058812"> </p><h2 id="2-2-Jenkins基本Job配置"><a href="#2-2-Jenkins基本Job配置" class="headerlink" title="2.2 Jenkins基本Job配置"></a>2.2 Jenkins基本Job配置</h2><h3 id="2-2-1-配置免密认证"><a href="#2-2-1-配置免密认证" class="headerlink" title="2.2.1 配置免密认证"></a>2.2.1 配置免密认证</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.三台Tomcat配置密码</span>root@web1:~<span class="token comment"># passwd tomcat</span>New password: Retype new password: passwd: password updated successfully<span class="token comment">#2.Jenkins生成密钥</span>root@jenkins:~<span class="token comment"># ssh-keygen </span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsaYour public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pubThe key fingerprint is:SHA256:bBe7uNTkAr/Qek3RsLoyWM0oWjM+c4c+NULNGzb0Y24 root@jenkinsThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">3072</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>                 <span class="token operator">|</span><span class="token operator">|</span>        <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>      <span class="token operator">|</span><span class="token operator">|</span>       + <span class="token punctuation">..</span>+     <span class="token operator">|</span><span class="token operator">|</span>      <span class="token punctuation">..</span>* *o.    <span class="token operator">|</span><span class="token operator">|</span>     <span class="token punctuation">..</span><span class="token operator">=</span>SB+o     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">=</span> <span class="token operator">+=</span>B*E.     <span class="token operator">|</span><span class="token operator">|</span>   + *.+**+      <span class="token operator">|</span><span class="token operator">|</span>  <span class="token builtin class-name">.</span> <span class="token operator">=</span> *+++.      <span class="token operator">|</span><span class="token operator">|</span>     <span class="token operator">=</span>o*o        <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token comment">#3.分发密钥</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.35</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.36</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.37</span><span class="token comment">#4.创建测试index.html</span>root@jenkins:~<span class="token comment"># mkdir /opt/web1</span>root@jenkins:~<span class="token comment"># vim /opt/web1/index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-2-2-创建Job"><a href="#2-2-2-创建Job" class="headerlink" title="2.2.2 创建Job"></a>2.2.2 创建Job</h3><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319123541454.png" alt="image-20230319123541454"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319123608295.png" alt="image-20230319123608295"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319123800058.png" alt="image-20230319123800058"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319130946637.png" alt="image-20230319130946637"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319131027285.png" alt="image-20230319131027285"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319131227206.png" alt="image-20230319131227206"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h2 id="2-3-Jenkins用户管理"><a href="#2-3-Jenkins用户管理" class="headerlink" title="2.3 Jenkins用户管理"></a>2.3 Jenkins用户管理</h2><p>创建chsblogs-app1、chsblogs-app2、python-app1、python-app2任务，创建zhangsan、lisi用户，将zhangsan用户分配至chsblogs-项目，将lisi用户分配至python-项目。</p><h3 id="2-3-1-创建Job"><a href="#2-3-1-创建Job" class="headerlink" title="2.3.1 创建Job"></a>2.3.1 创建Job</h3><p>创建chsblogs-app1、chsblogs-app2、python-app1、python-app2任务</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165543113.png" alt="image-20230319165543113"> </p><h3 id="2-3-2-安装Role-based插件"><a href="#2-3-2-安装Role-based插件" class="headerlink" title="2.3.2 安装Role-based插件"></a>2.3.2 安装Role-based插件</h3><p>安装Role-based Authorization Strategy插件</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165246857.png" alt="image-20230319165246857"> </p><h3 id="2-3-4-创建用户"><a href="#2-3-4-创建用户" class="headerlink" title="2.3.4 创建用户"></a>2.3.4 创建用户</h3><p>创建zhangsan、lisi用户</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165638507.png" alt="image-20230319165638507"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165702556.png" alt="image-20230319165702556"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165747084.png" alt="image-20230319165747084"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319165829191.png" alt="image-20230319165829191"> </p><h3 id="2-3-5-创建角色"><a href="#2-3-5-创建角色" class="headerlink" title="2.3.5 创建角色"></a>2.3.5 创建角色</h3><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319173909270.png" alt="image-20230319173909270"> </p><p>将登录用户可以做任何事改为Role-Base Strategy</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319173939602.png" alt="image-20230319173939602"> </p><p>创建角色</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319174135447.png" alt="image-20230319174135447"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319174828664.png" alt="image-20230319174828664"> </p><p>将用户和角色关联</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319175121208.png" alt="image-20230319175121208"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319175229130.png" alt="image-20230319175229130"> </p><p>zhangsan用户登录查看是否有权限：</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319175351208.png" alt="image-20230319175351208"> </p><h2 id="2-4-Jenkins邮件配置"><a href="#2-4-Jenkins邮件配置" class="headerlink" title="2.4 Jenkins邮件配置"></a>2.4 Jenkins邮件配置</h2><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319181129879.png" alt="image-20230319181129879"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319181153245.png" alt="image-20230319181153245"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319181236205.png" alt="image-20230319181236205"> </p><h2 id="2-5-Jenkins-SSH"><a href="#2-5-Jenkins-SSH" class="headerlink" title="2.5 Jenkins SSH"></a>2.5 Jenkins SSH</h2><p>基于SSH Key拉取代码</p><h3 id="2-5-1-方式一"><a href="#2-5-1-方式一" class="headerlink" title="2.5.1 方式一"></a>2.5.1 方式一</h3><h4 id="2-5-1-1-GitLab创建项目"><a href="#2-5-1-1-GitLab创建项目" class="headerlink" title="2.5.1.1 GitLab创建项目"></a>2.5.1.1 GitLab创建项目</h4><p>GitLab创建web2项目</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319185750341.png" alt="image-20230319185750341"> </p><p>提交v1代码</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web2.git</span>Cloning into <span class="token string">'web2'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> warning: You appear to have cloned an empty repository.<span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v1"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push -u origin master</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsan Password <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">238</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.30/chsblogs/web2.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> masterBranch master <span class="token builtin class-name">set</span> up to track remote branch master from origin.</code></pre></div></figure><h4 id="2-5-1-2-GitLab配置公钥"><a href="#2-5-1-2-GitLab配置公钥" class="headerlink" title="2.5.1.2 GitLab配置公钥"></a>2.5.1.2 GitLab配置公钥</h4><p>将Jenkins服务器的公钥配置至GitLab</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Jenkins服务器的公钥</span>root@jenkins:~<span class="token comment"># cat /root/.ssh/id_rsa.pub </span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7gjifemfwJG++KPvaQ0ANxIgTp+PwLZ5doKW4eBrjfSWSmoGWR297fUGz2rou5AHcOI74feF5GDX9JzS0+yXXNQglUKNSDYLmboYcmsAJJw2n8umQVVgZSwJBS4NQxUOGnOEkkRRzvH/hS3O36UibWeBawAEd42FbOxgos2XM4jvjaNKDWS0BsAHSd4dqX2u0rFWXOUTg7e2/+fv9k3FhOp456po2Pzz8aBCqCDOKRuCo7BnAdi053hMvom3PaQDjOgdrJJGqtwTSmDsK4aazJfMZlYgSryNwfbyZGAMReAza96ctwrKe4Z6syb++UGnxhBuiSr82KsZ6BmzICwLcFdJpD7G1rugslLoMw9hMm6+HO5KPcpvj0MpIUZMxT0AkkOlFa/Ewfm2OnHRW4NEICXqSSjwplLVQtDrz2noG2QCHYNtpH2nEiXMFD/n4WUCFVmHneG4BuJMn/AXPkU8wfCSIXmYoLqBu4AS+UOj7u/Wyn6sb4x4M4z1gZ1RTf4c<span class="token operator">=</span> root@jenkins</code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319190550280.png" alt="image-20230319190550280"> </p><h4 id="2-5-1-3-配置执行Job"><a href="#2-5-1-3-配置执行Job" class="headerlink" title="2.5.1.3 配置执行Job"></a>2.5.1.3 配置执行Job</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建git克隆项目目录</span>root@jenkins:~<span class="token comment"># mkdir /data/git/chsblogs -p</span><span class="token comment">#创建脚本执行目录</span>root@jenkins:~<span class="token comment"># mkdir /data/scripts/chsblogs -p</span><span class="token comment">#编写执行脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> <span class="token function">mkdir</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone git@192.168.1.30:chsblogs/web2.git<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token comment">#赋予脚本执行权限</span>root@jenkins:~<span class="token comment"># chmod +x /data/scripts/chsblogs/web2_deploy.sh</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319191606520.png" alt="image-20230319191606520"> </p><p>立即构建：</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319191750401.png" alt="image-20230319191750401"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-5-2-方式二"><a href="#2-5-2-方式二" class="headerlink" title="2.5.2 方式二"></a>2.5.2 方式二</h3><p>使用Jenkins Job拉取代码</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#提交v2版本代码</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># ls</span>index.html<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v2"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span><span class="token comment">#查看Jenkins私钥</span>root@jenkins:~<span class="token comment"># cat /root/.ssh/id_rsa</span>-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAu4I4n3pn8CRvvij72kNADcSIE6fj8C2eXaCluHga430lkpqBlkdve31Bs9q6LuQB3DiO+H3heRg1/Sc0tPsl1zUIJVCjUg2C5m6GHJrACScNp/LpkFVYGUsCQUuDUMVDhpzhJJEUc7x/4Utzt+lIm1ngWsABHeNhWzsYKLNlzOI742jSg1ktAbAB0neHal9rtKxVlzlE4O3tv/n7/ZNxYTqeOeqaNj88/GgQqggzikbgqOwZwHYtOd4TL6Jtz2kA4zoHaySRqrcE0pg7CuGmsyXzGZWIEq8jcH28mRgDEXgM2venLcKynuGerMm/vlBp8YQbokq/NirGegZsyAsC3BXSaQ+xta7oLJS6DMPYTJuvhzuSj3Kb49DKSFGTMU9AJJDpRWvxMH5tjpx0VuDRCAl6kko8KZS1ULQ689p6BtkAh2DbaR9pxIlzBQ/5+FlAhVZh53huAbiTJ/wFz5FPMHwkiF5mKC6gbuAEvlDo+7v1sp+rG+MeDOM9YGdUU3+HAAAFiOG/pAHhv6QBAAAAB3NzaC1yc2EAAAGBALuCOJ96Z/Akb74o+9pDQA3EiBOn4/Atnl2gpbh4GuN9JZKagZZHb3t9QbPaui7kAdw4jvh94XkYNf0nNLT7Jdc1CCVQo1INguZuhhyawAknDafy6ZBVWBlLAkFLg1DFQ4ac4SSRFHO8f+FLc7fpSJtZ4FrAAR3jYVs7GCizZcziO+No0oNZLQGwAdJ3h2pfa7SsVZc5RODt7b/5+/2TcWE6njnqmjY/PPxoEKoIM4pG4KjsGcB2LTneEy+ibc9pAOM6B2skkaq3BNKYOwrhprMl8xmViBKvI3B9vJkYAxF4DNr3py3Csp7hnqzJv75QafGEG6JKvzYqxnoGbMgLAtwV0mkPsbWu6CyUugzD2Eybr4c7ko9ym+PQykhRkzFPQCSQ6UVr8TB+bY6cdFbg0QgJepJKPCmUtVC0OvPaegbZAIdg22kfacSJcwUP+fhZQIVWYed4bgG4kyf8Bc+RTzB8JIheZiguoG7gBL5Q6Pu79bKfqxvjHgzjPWBnVFN/hwAAAAMBAAEAAAGAXAzwmTHxRo3MoZDjGuI61sdteiDIoIb0oMgVsvqbUKSGRnM9PLYy/2+dSpsNHannU+IcJdc+UkFVd8LAeDx29jBdoFv24Xgqk88cXXyG27dlV9bDXIzZJAmTwNQ+Ue+VV8c6K8ZhQPP/3204EMggUcuMfWCW68JNcAkRsiFnz24csmYqOjsUAikSq+zr+IeBi3+ywPtnWfjT55PkZjb0ySOKu6n1LL5cxRidXauLCc4Dykml1rrtNuRTjOXzfIfyBGfv9LuaMpmPBmYpo2cMnH3ySyJKO9FNxk/lKUakmjYr+SbotS+ifBph6OLlH8LvoP038e1jRl+ORcFPjsphlOKxJLheiWLB5sXghEYJ+HbBpiU3l8AI7MOhtgnt/IC24RhghljM+8c440VEw2YtUkcuG565Z4sq/zUukptQ98aRniouD9Efky40Bq5eEUvOI3FZ1MJzy1R0YTZ9CL38BsKfACj+og5AmZ0b5DeUt9csB1kJjPk0WxxGCutG0bfZAAAAwQDX/TwI7F5eYPoFD8WwiGZj+weftyjj54/Jukc0tegmoRHUbk5QOhNknz+P96fxQM9POtC3CBXMVgU+KLEcJxWLAqGCDynbtw1QC3coyRqFN9it8MZaMVlgu7GC3zWgZx7mUsFYcdAWRSDzHhx4nRu77DQ4s75H7o5k85KhPRlUPrfMCxK+LCdFZerKuF2Uc2W6IvRWHxJ8EZ5GuTPcabfxclPFClg/D532fHTKe8kkAg4qwce57+Ct8LOSm2NxqhwAAADBAPI2LAdFidQbehotfzBnNjr1GPnoAxAChdhoHQOLoNVTGqrbMZTpwJap/DNntZOHTnD3Thrc9SDW8YolEOHvmOCSbLc0By8ciTMafC3q8fKbEBk0HMljpA3hYBgVV60rhjBAPJbS9f6C8rDtEla+vKWiOrtJOu2twFKpOgwqSPQBBk33fj6SmWOzSlWXs10r3irtHf2aZ+JS4+MTXhM83Lj8FnqQH/p9FVpEyhEX9WQi2jms99kSMvrzz3y26AGCEwAAAMEAxi7YfxRkBLJFHvkVe/3ZSly0Zif3dnvf1snB+xjRRpoB+NW/LK1wdGjTGuc/WrXCylQP566MtoeB2w9pWGjdQthu6+yOhulcxjBFccCrOiknnUVT4phdKVgFftRKS/tHKx7sLEiSw2DvIy4dCDO04Y1J5CBW104xzfkykv64+F3ToIcY7Vn3OtPr3wJ5hIJEDQ62cAD7hIlThx6yc662hl/nEwyolQQPV6+ge9BVaXbgnlRVTgubOB+v6C6rsps9AAAADHJvb3RAamVua2lucwECAwQFBg<span class="token operator">==</span>-----END OPENSSH PRIVATE KEY-----</code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319192740789.png" alt="image-20230319192740789"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319192922104.png" alt="image-20230319192922104"> </p><p> <img src="/2023/03/12/CICD/JG/jg02/image-20230319193127300.png" alt="image-20230319193127300"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写执行脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token comment">#立即构建Job后，测试访问</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-5-3-参数化构建"><a href="#2-5-3-参数化构建" class="headerlink" title="2.5.3 参数化构建"></a>2.5.3 参数化构建</h3><p>执行脚本时可以传递参数，拉取master分支还是develop分支</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> <span class="token function">mkdir</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token variable">$&#123;BRANCH&#125;</span> git@192.168.1.30:chsblogs/web2.git<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p> <img src="/2023/03/12/CICD/JG/jg02/image-20230319195832049.png" alt="image-20230319195832049"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319195915693.png" alt="image-20230319195915693"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319200026809.png" alt="image-20230319200026809"> </p><h2 id="2-6-Jenkins触发器"><a href="#2-6-Jenkins触发器" class="headerlink" title="2.6 Jenkins触发器"></a>2.6 Jenkins触发器</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#生成身份验证令牌</span>root@jenkins:~<span class="token comment"># echo $RANDOM |md5sum |cut -c 1-32</span>4b8b12eadfdcc25574fc18070f13685a</code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319214711213.png" alt="image-20230319214711213"> </p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319214734466.png" alt="image-20230319214734466"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#触发执行Job</span>root@jenkins:~<span class="token comment"># curl http://192.168.1.31:8080/job/chsblogs-app1/build?token=4b8b12eadfdcc25574fc18070f13685a</span></code></pre></div></figure><p>执行chsblogs-app1后触发chsblogs-app2执行</p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319215735968.png" alt="image-20230319215735968"> </p><h2 id="2-7-Jenkins分布式"><a href="#2-7-Jenkins分布式" class="headerlink" title="2.7 Jenkins分布式"></a>2.7 Jenkins分布式</h2><p>创建Jenkins-Slave1，由Jenkins-Slave1执行任务</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装JDK环境</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u341-linux-x64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.0_341/ jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/usr/local/jdkexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/EOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh <span class="token comment">#创建/var/lib/jenkins目录</span>root@jenkins-slave:~<span class="token comment"># mkdir /var/lib/jenkins -p</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319221231930.png" alt="image-20230319221231930"></p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319220827811.png" alt="image-20230319220827811"></p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319220937051.png" alt="image-20230319220937051"></p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230319221102077.png" alt="image-20230319221102077"></p><h2 id="2-8-Jenkins视图"><a href="#2-8-Jenkins视图" class="headerlink" title="2.8 Jenkins视图"></a>2.8 Jenkins视图</h2><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320215950831.png" alt="image-20230320215950831"></p><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320220022218.png" alt="image-20230320220022218"></p><h1 id="3-Jenkins之Pipeline"><a href="#3-Jenkins之Pipeline" class="headerlink" title="3.Jenkins之Pipeline"></a>3.Jenkins之Pipeline</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/doc/book/pipeline/</code></pre></div></figure><h2 id="3-1-Pipeline语法"><a href="#3-1-Pipeline语法" class="headerlink" title="3.1 Pipeline语法"></a>3.1 Pipeline语法</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/doc/book/pipeline/syntax/</code></pre></div></figure><h2 id="3-2-脚本化流水线"><a href="#3-2-脚本化流水线" class="headerlink" title="3.2 脚本化流水线"></a>3.2 脚本化流水线</h2><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320195332239.png" alt="image-20230320195332239"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以自动生成Pipeline</span>http://192.168.1.31:8080/job/test-pipeline1/pipeline-syntax/</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">&#123;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码克隆'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码打包'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'停止Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码拷贝'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码替换'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'启动Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320205024130.png" alt="image-20230320205024130"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让Jenkins节点执行任务，需配置免密钥认证</span>node<span class="token punctuation">(</span><span class="token string">'Jenkins-Slave1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span class="token comment">#jenkins-slave生成密钥</span>root@jenkins-slave:~<span class="token comment"># ssh-keygen</span><span class="token comment">#分发密钥</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.35</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.36</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.37</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320210547288.png" alt="image-20230320210547288"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#把Jenkinsfile保存至GitLab</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim Jenkinsfile</span>node<span class="token punctuation">(</span><span class="token string">'Jenkins-Slave1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码克隆'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码打包'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'停止Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码拷贝'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码替换'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'启动Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v4 and Jenkinsfile"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320211711903.png" alt="image-20230320211711903"> </p><h2 id="3-3-声明式流水线"><a href="#3-3-声明式流水线" class="headerlink" title="3.3 声明式流水线"></a>3.3 声明式流水线</h2><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320213815990.png" alt="image-20230320213815990"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">pipeline <span class="token punctuation">&#123;</span>  agent <span class="token punctuation">&#123;</span> label <span class="token string">'Jenkins-Slave1'</span> <span class="token punctuation">&#125;</span>  stages<span class="token punctuation">&#123;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码克隆"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; rm -rf ./*"</span>        <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码打包"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"停止Web服务"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码拷贝"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码替换"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"启动Web服务"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg02/image-20230320214057798.png" alt="image-20230320214057798"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01).GitLab简介及安装</title>
    <link href="/2023/03/12/CICD/JG/jg01/"/>
    <url>/2023/03/12/CICD/JG/jg01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-GitLab简介及安装"><a href="#1-GitLab简介及安装" class="headerlink" title="1.GitLab简介及安装"></a>1.GitLab简介及安装</h1><h2 id="1-1-GitLab简介"><a href="#1-1-GitLab简介" class="headerlink" title="1.1 GitLab简介"></a>1.1 GitLab简介</h2><p>极狐GitLab 是支持并发 DevOps 的软件开发、安全和操作的单一应用程序，使软件生命周期更快，并从根本上提高了业务速度。</p><h2 id="1-2-GitLab安装"><a href="#1-2-GitLab安装" class="headerlink" title="1.2 GitLab安装"></a>1.2 GitLab安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官网文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//docs.gitlab.cn/jh/index.html</span></span></code></pre></div></figure><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td></tr></tbody></table><h3 id="1-2-1-GitLab下载"><a href="#1-2-1-GitLab下载" class="headerlink" title="1.2.1 GitLab下载"></a>1.2.1 GitLab下载</h3><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//packages.gitlab.com/gitlab/gitlab-ce</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/focal/main/g/gitlab-ce/</span></span></code></pre></div></figure><h3 id="1-2-2-GitLab安装"><a href="#1-2-2-GitLab安装" class="headerlink" title="1.2.2 GitLab安装"></a>1.2.2 GitLab安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@gitlab:~<span class="token comment"># ll gitlab-ce_13.11.3-ce.0_amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">899088542</span> Mar <span class="token number">13</span> <span class="token number">10</span>:27 gitlab-ce_13.11.3-ce.0_amd64.deb<span class="token comment">#2.安装GitLab</span>root@gitlab:~<span class="token comment"># dpkg -i gitlab-ce_13.11.3-ce.0_amd64.deb </span></code></pre></div></figure><h3 id="1-2-3-GitLab配置"><a href="#1-2-3-GitLab配置" class="headerlink" title="1.2.3 GitLab配置"></a>1.2.3 GitLab配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.修改配置文件</span>root@gitlab:~<span class="token comment"># vim /etc/gitlab/gitlab.rb</span>external_url <span class="token string">'http://192.168.1.30'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"804214916@qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你的授权码"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'804214916@qq.com'</span>user<span class="token punctuation">[</span><span class="token string">'git_user_email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"804214916@qq.com"</span><span class="token comment">#2.初始化服务,修改完配置文件要执行此操作</span>root@gitlab:~<span class="token comment"># gitlab-ctl reconfigure</span><span class="token comment">#3.访问测试</span>http://192.168.1.30/</code></pre></div></figure><h3 id="1-2-4-GitLab相关目录"><a href="#1-2-4-GitLab相关目录" class="headerlink" title="1.2.4 GitLab相关目录"></a>1.2.4 GitLab相关目录</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/gitlab       <span class="token comment">#配置文件目录</span>/run/gitlab       <span class="token comment">#运行PID目录</span>/opt/gitlab       <span class="token comment">#安装目录</span>/var/opt/gitlab   <span class="token comment">#数据目录 </span>/var/log/gitlab   <span class="token comment">#日志目录</span></code></pre></div></figure><h3 id="1-2-5-GitLab命令"><a href="#1-2-5-GitLab命令" class="headerlink" title="1.2.5 GitLab命令"></a>1.2.5 GitLab命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">gitlab-rake           <span class="token comment">#数据备份恢复等数据操作</span>gitlab-ctl            <span class="token comment">#客户端命令行操作行</span>gitlab-ctl stop       <span class="token comment">#停止gitlab</span>gitlab-ctl start      <span class="token comment">#启动gitlab</span>gitlab-ctl restart    <span class="token comment">#重启gitlab</span>gitlab-ctl status     <span class="token comment">#查看组件运行状态 </span>gitlab-ctl <span class="token function">tail</span> nginx <span class="token comment">#查看某个组件的日志 </span></code></pre></div></figure><h2 id="1-3-GitLab使用"><a href="#1-3-GitLab使用" class="headerlink" title="1.3 GitLab使用"></a>1.3 GitLab使用</h2><h3 id="1-3-1-设置中文"><a href="#1-3-1-设置中文" class="headerlink" title="1.3.1 设置中文"></a>1.3.1 设置中文</h3><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313214045730.png" alt="image-20230313214045730"> </p><h3 id="1-3-2-新建群组"><a href="#1-3-2-新建群组" class="headerlink" title="1.3.2 新建群组"></a>1.3.2 新建群组</h3><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313220050696.png" alt="image-20230313220050696"> </p><h3 id="1-3-3-新建项目"><a href="#1-3-3-新建项目" class="headerlink" title="1.3.3 新建项目"></a>1.3.3 新建项目</h3><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313220222781.png" alt="image-20230313220222781"> </p><h3 id="1-3-4-新建用户"><a href="#1-3-4-新建用户" class="headerlink" title="1.3.4 新建用户"></a>1.3.4 新建用户</h3><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313220731502.png" alt="image-20230313220731502"> </p><h3 id="1-3-5-用户添加至群组"><a href="#1-3-5-用户添加至群组" class="headerlink" title="1.3.5 用户添加至群组"></a>1.3.5 用户添加至群组</h3><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313221401832.png" alt="image-20230313221401832"> </p><h3 id="1-3-6-上传代码"><a href="#1-3-6-上传代码" class="headerlink" title="1.3.6 上传代码"></a>1.3.6 上传代码</h3><p>zhangsan用户上传v1版本至chsblogs&#x2F;web1</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装git</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install git</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "zhangsan"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.email "zhangsan@test.com"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web1.git</span>Cloning into <span class="token string">'web1'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> warning: You appear to have cloned an empty repository.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  web1<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd web1/</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git commit -m "v1"</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> <span class="token number">6212610</span><span class="token punctuation">]</span> v1 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> index.html<span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git push -u origin master</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">212</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.30/chsblogs/web1.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> masterBranch master <span class="token builtin class-name">set</span> up to track remote branch master from origin.</code></pre></div></figure><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313222806015.png" alt="image-20230313222806015"> </p><h3 id="1-3-7-分支管理"><a href="#1-3-7-分支管理" class="headerlink" title="1.3.7 分支管理"></a>1.3.7 分支管理</h3><p><strong>新建develop分支：</strong></p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313231753781.png" alt="image-20230313231753781"> </p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313231859633.png" alt="image-20230313231859633"> </p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313232024511.png" alt="image-20230313232024511"></p><p><strong>提交develop分支v2版本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@node10 opt<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web1.git</span>Cloning into <span class="token string">'web1'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> remote: Enumerating objects: <span class="token number">3</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>root@node10 opt<span class="token punctuation">]</span><span class="token comment"># cd web1/</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git checkout develop</span>Branch develop <span class="token builtin class-name">set</span> up to track remote branch develop from origin.Switched to a new branch <span class="token string">'develop'</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git branch</span>* develop  master<span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git commit -m "v2"</span><span class="token punctuation">[</span>develop 693ff34<span class="token punctuation">]</span> v2 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsan     Password <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">248</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/web1/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/web1.git   <span class="token number">6212610</span><span class="token punctuation">..</span>693ff34  develop -<span class="token operator">></span> develop</code></pre></div></figure><p><strong>lisi提交合并代码请求：</strong></p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313233129391.png" alt="image-20230313233129391"> </p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313233318929.png" alt="image-20230313233318929"> </p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313233530526.png" alt="image-20230313233530526"> </p><p><strong>zhangsan合并代码：</strong></p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313233656946.png" alt="image-20230313233656946"> </p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230313233752467.png" alt="image-20230313233752467"> </p><h2 id="1-4-GitLab数据备份与恢复"><a href="#1-4-GitLab数据备份与恢复" class="headerlink" title="1.4 GitLab数据备份与恢复"></a>1.4 GitLab数据备份与恢复</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.停止GitLab数据服务</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop unicorn</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop sidekiq</span>ok: down: sidekiq: 0s, normally up<span class="token comment">#2.手动备份数据，在任意目录即可备份当前GitLab数据，备份完成后启动GitLab。</span>root@gitlab:~<span class="token comment"># gitlab-rake gitlab:backup:create</span>root@gitlab:~<span class="token comment"># gitlab-ctl start </span><span class="token comment">#3.查看要恢复的文件</span>/var/opt/gitlab/backups/        <span class="token comment">#GitLab数据备份目录，需要使用命令备份的</span>/var/opt/gitlab/nginx/conf      <span class="token comment">#nginx 配置文件</span>/etc/gitlab/gitlab.rb           <span class="token comment">#GitLab配置文件</span>/etc/gitlab/gitlab-secrets.json <span class="token comment">#key文件</span>root@gitlab:~<span class="token comment"># ll /var/opt/gitlab/backups/</span>total <span class="token number">284</span>drwx------  <span class="token number">2</span> <span class="token function">git</span>  root     <span class="token number">61</span> Mar <span class="token number">13</span> <span class="token number">23</span>:52 ./drwxr-xr-x <span class="token number">21</span> root root   <span class="token number">4096</span> Mar <span class="token number">13</span> <span class="token number">15</span>:07 <span class="token punctuation">..</span>/-rw-------  <span class="token number">1</span> <span class="token function">git</span>  <span class="token function">git</span>  <span class="token number">286720</span> Mar <span class="token number">13</span> <span class="token number">23</span>:52 1678722762_2023_03_13_13.11.3_gitlab_backup.tar<span class="token comment">#4.恢复GitLab数据服务</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop unicorn</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop sidekiq</span>root@gitlab:~<span class="token comment"># gitlab-rake gitlab:backup:restore BACKUP=1678722762_2023_03_13_13.11.3</span>root@gitlab:~<span class="token comment"># gitlab-ctl start </span></code></pre></div></figure><h1 id="2-常见的代码部署方式"><a href="#2-常见的代码部署方式" class="headerlink" title="2.常见的代码部署方式"></a>2.常见的代码部署方式</h1><h2 id="2-1-蓝绿部署"><a href="#2-1-蓝绿部署" class="headerlink" title="2.1 蓝绿部署"></a>2.1 蓝绿部署</h2><p>蓝绿部署（Blue&#x2F;Green Deployment）：不停老版本代码(不影响上一个版本访问)，而是在另外一套环境部署新 版本然后进行测试，测试通过后将用户流量切到新版本。</p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230314203310707.png" alt="image-20230314203310707"> </p><h2 id="2-2-金丝雀-x2F-灰度发布"><a href="#2-2-金丝雀-x2F-灰度发布" class="headerlink" title="2.2 金丝雀&#x2F;灰度发布"></a>2.2 金丝雀&#x2F;灰度发布</h2><p>金丝雀&#x2F;灰度发布：在黑与白之间，能够平滑过渡的一种发布方式。金丝雀部署也就是灰度发布的一种方式，是增量发布的一种。在原有版本可用的情况下，同时部署一个新版本应用作为「金丝雀」服务器来测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。同时运行同一个软件产品的多个版本，需要软件针对配置和完美自动化部署进行特别设计。</p><p>灰度发布中，常常按照用户设置路由权重，例如90%的用户维持使用老版本，10%的用户尝鲜新版本。不同版本应用共存，经常与A&#x2F;B测试一起使用，用于测试选择多种方案。灰度发布还应该可以动态调整不同的权重来进行新老版本的验证。</p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230314203608925.png" alt="image-20230314203608925"> </p><h2 id="2-3-滚动发布"><a href="#2-3-滚动发布" class="headerlink" title="2.3 滚动发布"></a>2.3 滚动发布</h2><p>滚动发布（Rolling Update）：一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。</p><p><img src="/2023/03/12/CICD/JG/jg01/image-20230314203507713.png" alt="image-20230314203507713"> </p><h2 id="2-4-A-x2F-B测试"><a href="#2-4-A-x2F-B测试" class="headerlink" title="2.4 A&#x2F;B测试"></a>2.4 A&#x2F;B测试</h2><p>A&#x2F;B测试：A&#x2F;B 测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等等。</p><h2 id="2-5-代码部署方式对比"><a href="#2-5-代码部署方式对比" class="headerlink" title="2.5 代码部署方式对比"></a>2.5 代码部署方式对比</h2><table><thead><tr><th><strong>部署方式</strong></th><th><strong>简述</strong></th><th><strong>优势</strong></th><th><strong>劣势</strong></th></tr></thead><tbody><tr><td>蓝绿部署</td><td>停止老版本，额外搞一套新版本，等测试发现新版本OK后，将用户流量切到新版本。</td><td>1.同一时间对外服务的只有一个版本，容易定位问题；2.升级和回滚以集群为粒度，操作相对简单</td><td>需要维护两个集群，成本高</td></tr><tr><td>滚动发布</td><td>按批次停止老版本实例，启动新版本实例。</td><td>只需要维护一个集群，成本低。</td><td>1. 上线过程中，两个版本同时对外服务，不易定位问题，且容易造成数据错乱；2.升级和回滚以节点为粒度，操作相对复杂</td></tr><tr><td>金丝雀&#x2F;灰度发布</td><td>不停止老版本，额外搞一套新版本，按照用户设置路由权重，如90%的用户维持使用老版本，10%的用户尝鲜新版本</td><td>不同版本应用共存，常用于A&#x2F;B测试；新版本尝鲜体验反馈；用户体验影响小，灰度发布过程出现问题只影响少量用户</td><td>实现方案相对复杂，需要实现发布自动化</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Memcached简介及安装</title>
    <link href="/2023/03/06/NoSQL/Memcached/memcached01/"/>
    <url>/2023/03/06/NoSQL/Memcached/memcached01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Memcached"><a href="#1-Memcached" class="headerlink" title="1.Memcached"></a>1.Memcached</h1><h2 id="1-1-Memcached简介"><a href="#1-1-Memcached简介" class="headerlink" title="1.1 Memcached简介"></a>1.1 Memcached简介</h2><p>Memcached 官网：<a href="http://memcached.org/">http://memcached.org/</a>  </p><p>Memcached 只支持能序列化的数据类型，不支持持久化，基于Key-Value的内存缓存系统。</p><p>Memcached 虽然没有像redis所具备的数据持久化功能，比如RDB和AOF都没有，但是可以通过做集群同步的方式，让各memcached服务器的数据进行同步，从而实现数据的一致性，即保证各memcached的数据是一样的，即使有任何一台 memcached 发生故障，只要集群中有一台 memcached 可用就不会出现数据丢失，当其他memcached 重新加入到集群的时候,可以自动从有数据的memcached 当中自动获取数据并提供服务。</p><p>Memcached 借助了操作系统的 libevent 工具做高效的读写。libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能封装成统一的接口。即使对服务器的连接数增加，也能发挥高性能。memcached使用这个libevent库，因此能在Linux、BSD、Solaris等操作系统上发挥其高性能。</p><p>Memcached 支持最大的内存存储对象为1M，超过1M的数据可以使用客户端压缩或拆分报包放到多个key中，比较大的数据在进行读取的时候需要消耗的时间比较长，memcached 最适合保存用户的session实现session共享。</p><p>Memcached存储数据时, Memcached会去申请1MB的内存, 把该块内存称为一个slab, 也称为一个page。</p><p><strong>Memcached和Redis比较：</strong></p><table><thead><tr><th>比较类别</th><th>Redis</th><th>memcached</th></tr></thead><tbody><tr><td>支持的数 据结构</td><td>哈希、列表、集合、有序集合</td><td>纯kev-value</td></tr><tr><td>持久化支持</td><td>有</td><td>无</td></tr><tr><td>高可用支持</td><td>redis支持集群功能，可以实现主动复制，读写分离。 官方也提供了sentinel集群管理工具，能够实现主从 服务监控，故障自动转移，这一切，对于客户端都是 透明的，无需程序改动，也无需人工介入</td><td>需要二次开发</td></tr><tr><td>存储value 容量</td><td>最大512M</td><td>最大1M</td></tr><tr><td>内存分配</td><td>临时申请空间，可能导致碎片</td><td>预分配内存池的方式管理内 存，能够省去内存分配时间</td></tr><tr><td>虚拟内存使用</td><td>有自己的VM机制，理论上能够存储比物理内存更多 的数据，当数据超量时，会引发swap，把冷数据刷 到磁盘上</td><td>所有的数据存储在物理内存里</td></tr><tr><td>网络模型</td><td>非阻塞IO复用模型,提供一些非KV存储之外的排序， 聚合功能，在执行这些功能时，复杂的CPU计算，会 阻塞整个IO调度</td><td>非阻塞IO复用模型</td></tr><tr><td>水平扩展的支持</td><td>redis cluster 可以横向扩展</td><td>暂无</td></tr><tr><td>多线程</td><td>Redis6.0之前是只支持单线程</td><td>Memcached支持多线程,CPU 利用方面Memcache优于 Redis</td></tr><tr><td>过期策略</td><td>有专门线程，清除缓存数据</td><td>懒淘汰机制：每次往缓存放入 数据的时候，都会存一个时 间，在读取的时候要和设置的 时间做TTL比较来判断是否过 期</td></tr><tr><td>单机QPS</td><td>约10W</td><td>约60W</td></tr><tr><td>源代码可 读性</td><td>代码清爽简洁</td><td>可能是考虑了太多的扩展性， 多系统的兼容性，代码不清爽</td></tr><tr><td>适用场景</td><td>复杂数据结构、有持久化、高可用需求、value存储 内容较大</td><td>纯KV，数据量非常大，并发量 非常大的业务</td></tr></tbody></table><h2 id="1-2-Memcached工作机制"><a href="#1-2-Memcached工作机制" class="headerlink" title="1.2 Memcached工作机制"></a>1.2 Memcached工作机制</h2><ul><li>内存分配机制</li></ul><p>应用程序运行需要使用内存存储数据，但对于一个缓存系统来说，申请内存、释放内存将十分频繁，非常容易导致大量内存碎片，最后导致无连续可用内存可用。</p><p>Page：分配给Slab的内存空间，默认为1MB，分配后就得到一个Slab。Slab分配之后内存按照固定字节大小等分成chunk。 </p><p>Chunk：用于缓存记录k&#x2F;v值的内存空间。Memcached会根据数据大小选择存到哪一个chunk中，假设chunk有128bytes、64bytes等多种，数据只有100bytes存储在128bytes中，存在少许浪费。Chunk最大就是Page的大小，即一个Page中就一个Chunk。</p><p>Slab Class：Slab按照Chunk的大小分组，就组成不同的Slab Class, 第一个Chunk大小为 96B的Slab为Class1,Chunk 120B为Class 2,如果有100bytes要存，那么Memcached会选择下图中SlabClass 2 存储，因为它是120bytes的Chunk。Slab之间的差异可以使用Growth Factor 控制，默认1.25。</p><ul><li>懒过期 Lazy Expiration</li></ul><p>memcached不会监视数据是否过期，而是在取数据时才看是否过期，如果过期,把数据有效期限标识为0，并不清除该数据。以后可以覆盖该位置存储其它数据。</p><ul><li>LRU</li></ul><p>当内存不足时，memcached会使用LRU（Least Recently Used）机制来查找可用空间，分配给新记录使用。</p><ul><li>集群</li></ul><p>Memcached集群，称为基于客户端的分布式集群，即由客户端实现集群功能，即Memcached本身不支持集群。Memcached集群内部并不互相通信，一切都需要客户端连接到Memcached服务器后自行组织这些节点，并决定数据存储的节点。</p><h2 id="1-3-Memcached安装"><a href="#1-3-Memcached安装" class="headerlink" title="1.3 Memcached安装"></a>1.3 Memcached安装</h2><h3 id="1-3-1-yum安装"><a href="#1-3-1-yum安装" class="headerlink" title="1.3.1 yum安装"></a>1.3.1 yum安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install memcached</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now memcached</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/memcached</span><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"11211"</span> <span class="token comment">#监听端口</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"memcached"</span> <span class="token comment">#启用用户</span><span class="token assign-left variable">MAXCONN</span><span class="token operator">=</span><span class="token string">"1024"</span> <span class="token comment">#最大连接数</span><span class="token assign-left variable">CACHESIZE</span><span class="token operator">=</span><span class="token string">"64"</span> <span class="token comment">#最大使用内存</span><span class="token assign-left variable">OPTIONS</span><span class="token operator">=</span><span class="token string">""</span> <span class="token comment">#其他选项</span></code></pre></div></figure><h3 id="1-3-2-编译安装"><a href="#1-3-2-编译安装" class="headerlink" title="1.3.2 编译安装"></a>1.3.2 编译安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc libevent-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://memcached.org/files/memcached-1.6.6.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf memcached-1.6.6.tar.gz </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd memcached-1.6.6</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/apps/memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/memcached/bin:$PATH' > /etc/profile.d/memcached.sh</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/memcached.sh</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># vim cat /etc/sysconfig/memcached</span><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"11211"</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"memcached"</span><span class="token assign-left variable">MAXCONN</span><span class="token operator">=</span><span class="token string">"1024"</span><span class="token assign-left variable">CACHESIZE</span><span class="token operator">=</span><span class="token string">"64"</span><span class="token assign-left variable">OPTIONS</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/memcached.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>memcached daemon<span class="token assign-left variable">Before</span><span class="token operator">=</span>httpd.service<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/etc/sysconfig/memcached<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/memcached/bin/memcached <span class="token parameter variable">-p</span> <span class="token variable">$&#123;PORT&#125;</span> <span class="token parameter variable">-u</span> <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> <span class="token parameter variable">-m</span> <span class="token variable">$&#123;CACHESIZE&#125;</span> <span class="token parameter variable">-c</span> <span class="token variable">$&#123;MAXCONN&#125;</span> <span class="token variable">$OPTIONS</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># systemctl start memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># memcached --version</span>memcached <span class="token number">1.6</span>.6</code></pre></div></figure><p><strong>Memcached启动程序说明：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改memcached运行参数，可以使用下面的选项修改/etc/sysconfig/memcached文件memcached常见选项</span><span class="token parameter variable">-u</span> username memcached运行的用户身份，必须普通用户<span class="token parameter variable">-p</span> 绑定的端口，默认11211<span class="token parameter variable">-m</span> num 最大内存，单位MB，默认64MB<span class="token parameter variable">-c</span> num 最大连接数，缺省1024<span class="token parameter variable">-d</span> 守护进程方式运行<span class="token parameter variable">-f</span> 增长因子Growth Factor，默认1.25<span class="token parameter variable">-v</span> 详细信息，-vv能看到详细信息<span class="token parameter variable">-M</span> 使用内存直到耗尽，不许LRU<span class="token parameter variable">-U</span> 设置UDP监听端口，0表示禁用UDP</code></pre></div></figure><h2 id="1-4-Memcached使用"><a href="#1-4-Memcached使用" class="headerlink" title="1.4 Memcached使用"></a>1.4 Memcached使用</h2><ul><li>memcached开发库和工具</li></ul><p>与memcached通信的不同语言的连接器。libmemcached提供了C库和命令行工具。</p><ul><li>memcached操作命令</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#五种基本memcached命令执行最简单的操作：</span><span class="token builtin class-name">set</span><span class="token function">add</span>replacegetdelete</code></pre></div></figure><h2 id="1-5-Memcached集群部署"><a href="#1-5-Memcached集群部署" class="headerlink" title="1.5 Memcached集群部署"></a>1.5 Memcached集群部署</h2><h3 id="1-5-1-Repcached实现"><a href="#1-5-1-Repcached实现" class="headerlink" title="1.5.1 Repcached实现"></a>1.5.1 Repcached实现</h3><p>项目站点：<a href="http://repcached.sourceforge.net/">http://repcached.sourceforge.net/</a></p><p>在master上可以通过 -X 选项指定 replication port(默认为11212&#x2F;tcp)，在 slave上通过 -x 指定复制的master并连接，事实上，如果同时指定了 -x&#x2F;-X， repcached先会尝试连接对端的master，但如果连接失败，它就会用 -X参数来自己 listen（成为master）；如果 master坏掉， slave侦测到连接断了，它会自动 listen而成为 master；而如果 slave坏掉，master也会侦测到连接断开，它就会重新 listen等待新的 slave加入。从这方案的技术实现来看，其实它是一个单 master单 slave的方案，但它的 master&#x2F;slave都是可读写的，而且可以相互同步，所以从功能上看，也可以认为它是双机 master-master方案。</p><h3 id="1-5-2-Memcached集群部署"><a href="#1-5-2-Memcached集群部署" class="headerlink" title="1.5.2 Memcached集群部署"></a>1.5.2 Memcached集群部署</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Haproxy+Keepalived</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Haproxy+Keepalived</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Memcached</td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Memcached</td></tr></tbody></table><p><img src="/2023/03/06/NoSQL/Memcached/memcached01/image-20230313004405401.png" alt="image-20230313004405401">   </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装配置Haproxy+Keepalived</span>参考链接：https://chsblogs.com/2022/09/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/<span class="token comment">#%E2%97%8E-Keepalived</span><span class="token comment">#2.部署repcached</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc libevent libevent-devel</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># wget https://jaist.dl.sourceforge.net/project/repcached/repcached/2.2.1-1.2.8/memcached-1.2.8-repcached-2.2.1.tar.gz</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf memcached-1.2.8-repcached-2.2.1.tar.gz </span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># cd memcached-1.2.8-repcached-2.2.1</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/apps/repcached --enable-replication</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># vim memcached.c</span>  <span class="token number">56</span> <span class="token comment">#ifndef IOV_MAX</span>  <span class="token number">57</span> <span class="token comment">#if defined(__FreeBSD__) || defined(__APPLE__)</span>  <span class="token number">58</span> <span class="token comment"># define IOV_MAX 1024</span>  <span class="token number">59</span> <span class="token comment">#endif</span>  <span class="token number">60</span> <span class="token comment">#endif</span>    <span class="token comment">#改为如下内容，即删除原有的原第57，59行</span>  <span class="token number">56</span> <span class="token comment">#ifndef IOV_MAX</span>  <span class="token number">57</span> <span class="token comment"># define IOV_MAX 1024</span>  <span class="token number">58</span> <span class="token comment">#endif</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/repcached/bin:$PATH' > /etc/profile.d/repcached.sh</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/repcached.sh</span><span class="token comment">#3.安装启动memcached A，-x 192.168.1.13为对端memcached的地址</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># memcached -d -m 2048 -p 11211 -u memcached -c 2048 -x 192.168.1.13</span><span class="token comment">#4.安装启动memcached B</span>memcached <span class="token parameter variable">-d</span> <span class="token parameter variable">-m</span> <span class="token number">2048</span> <span class="token parameter variable">-p</span> <span class="token number">11211</span> <span class="token parameter variable">-u</span> memcached <span class="token parameter variable">-c</span> <span class="token number">2048</span> <span class="token parameter variable">-x</span> <span class="token number">192.168</span>.1.12<span class="token comment">#5.测试</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Memcached</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Memcached</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).Tomcat性能优化</title>
    <link href="/2023/03/02/Web/Tomcat/tomcat04/"/>
    <url>/2023/03/02/Web/Tomcat/tomcat04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat性能优化"><a href="#1-Tomcat性能优化" class="headerlink" title="1.Tomcat性能优化"></a>1.Tomcat性能优化</h1><h2 id="1-1-JMX"><a href="#1-1-JMX" class="headerlink" title="1.1 JMX"></a>1.1 JMX</h2><p>JMX（Java Management Extensions，即Java管理扩展）是一个为JAVA应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。  </p><p>JMX最常见的场景是监控Java程序的基本信息和运行情况，任何Java程序都可以开启JMX，然后使用JConsole或Visual VM进行预览。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#为Java程序开启JMX很简单，只要在运行Java程序的命令后面指定如下命令即可</span><span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">10.0</span>.0.100 <span class="token comment">#指定自已监听的IP</span><span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token comment">#指定监听的PORT</span><span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false<span class="token comment">#在tomcat开启远程JMX支持Zabbix监控，如下配置</span><span class="token function">vim</span> /usr/local/tomcat/bin/catalina.sh<span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CATALINA__OPTS</span>-Dcom.sun.management.jmxremote #启用远程监控JMX-Dcom.sun.management.jmxremote.port=XXXXX #默认启动的JMX端口号，要和zabbix添加主机时候的端口一致即可-Dcom.sun.management.jmxremote.authenticate=false #不使用用户名密码-Dcom.sun.management.jmxremote.ss1=false #不使用ssl认证-Djava.rmi.server.hostname=&lt;JAVA主机IP>"</span> <span class="token comment">#tomcat主机自己的IP地址,不要写zabbix服务器的地址</span></code></pre></div></figure><h2 id="1-2-Tomcat性能优化"><a href="#1-2-Tomcat性能优化" class="headerlink" title="1.2 Tomcat性能优化"></a>1.2 Tomcat性能优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#内存空间优化</span><span class="token assign-left variable">AVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms4g -Xmx4g -XX:NewSize= -XX:MaxNewSize= "</span>-server：服务器模式-Xms：堆内存初始化大小-Xmx：堆内存空间上限<span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span>：新生代空间初始化大小<span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span>：新生代空间最大值<span class="token comment">#示例，一台tomcat服务器并发连接数不高,生产建议分配物理内存通常4G到8G较多,如果需要更多连接,一般会利用虚拟化技术实现多台tomcat。</span><span class="token function">vim</span> /usr/local/tomcat/bin/catalina.sh<span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms4g -Xmx4g -Xss512k -Xmn1g -XX:CMSInitiatingOccupancyFraction=65 -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=10 -XX:NewRatio=2 -XX:PermSize=128m -XX:MaxPermSize=512m -XX:CMSFullGCsBeforeCompaction=5 -XX:+ExplicitGCInvokesConcurrent -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods"</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#线程池调整</span><span class="token function">vim</span> /usr/local/tomcat/conf/server.xml<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span> <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>  <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#常用属性</span>connectionTimeout  <span class="token comment">#连接超时时长,单位ms</span>maxThreads  <span class="token comment">#最大线程数，默认200</span>minSpareThreads  <span class="token comment">#最小空闲线程数</span>maxSpareThreads  <span class="token comment">#最大空闲线程数</span>acceptCount  <span class="token comment">#当启动线程满了之后，等待队列的最大长度，默认100</span>URIEncoding  <span class="token comment">#URI 地址编码格式，建议使用 UTF-8</span>enableLookups  <span class="token comment">#是否启用客户端主机名的DNS反向解析，缺省禁用，建议禁用，就使用客户端IP就行</span>compression  <span class="token comment">#是否启用传输压缩机制，建议 "on"，CPU和流量的平衡</span>  compressionMinSize  <span class="token comment">#启用压缩传输的数据流最小值，单位是字节</span>  compressableMimeType  <span class="token comment">#定义启用压缩功能的MIME类型text/html, text/xml, text/css,text/javascript</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Tomcat集群部署</title>
    <link href="/2023/03/02/Web/Tomcat/tomcat03/"/>
    <url>/2023/03/02/Web/Tomcat/tomcat03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat集群部署"><a href="#1-Tomcat集群部署" class="headerlink" title="1.Tomcat集群部署"></a>1.Tomcat集群部署</h1><h2 id="1-1-基于Nginx反向代理至Tomcat"><a href="#1-1-基于Nginx反向代理至Tomcat" class="headerlink" title="1.1 基于Nginx反向代理至Tomcat"></a>1.1 基于Nginx反向代理至Tomcat</h2><p>基于Nginx反向代理功能，将用户请求全部转发至指定的同一个tomcat主机。</p><h3 id="1-1-1-配置清单"><a href="#1-1-1-配置清单" class="headerlink" title="1.1.1 配置清单"></a>1.1.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Nginx</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Tomcat</td></tr></tbody></table><h3 id="1-1-2-安装配置Nginx"><a href="#1-1-2-安装配置Nginx" class="headerlink" title="1.1.2 安装配置Nginx"></a>1.1.2 安装配置Nginx</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装nginx服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  nginx-1.22.0-1.el7.ngx.x86_64.rpm  pcre2-10.23-2.el7.x86_64.rpm<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install pcre2-10.23-2.el7.x86_64.rpm nginx-1.22.0-1.el7.ngx.x86_64.rpm </span><span class="token comment">#2.配置nginx</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/nginx/nginx.conf </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/nginx/conf.d/tomcat.conf</span>server <span class="token punctuation">&#123;</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  server_name <span class="token number">192.168</span>.1.10<span class="token punctuation">;</span>  location / <span class="token punctuation">&#123;</span>    proxy_pass http://web1.chsblogs.com:8080<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#3.配置hosts域名解析</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.11 web1.chsblogs.com web2.chsblogs.com<span class="token comment">#4.启动nginx服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now nginx</span></code></pre></div></figure><h3 id="1-1-3-安装配置Tomcat"><a href="#1-1-3-安装配置Tomcat" class="headerlink" title="1.1.3 安装配置Tomcat"></a>1.1.3 安装配置Tomcat</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装tomcat</span>参考前文：https://chsblogs.com/2023/03/01/Tomcat/【2】Tomcat安装及配置/<span class="token comment">#1-1-Tomcat安装</span><span class="token comment">#2.配置tomcat</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web1.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/web1/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web2.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/web2/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/&#123;web1,web2&#125;/ROOT -p</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /data/</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/web1/ROOT/index.jsp</span><span class="token operator">&lt;</span>%@ page <span class="token assign-left variable">language</span><span class="token operator">=</span><span class="token string">"java"</span> <span class="token assign-left variable">contentType</span><span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    <span class="token assign-left variable">pageEncoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>jsp<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>%out.println<span class="token punctuation">(</span><span class="token string">"web1.chsblogs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>%<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>%<span class="token operator">=</span>request.getRequestURL<span class="token punctuation">(</span><span class="token punctuation">)</span>%<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/web2/ROOT/index.jsp</span><span class="token operator">&lt;</span>%@ page <span class="token assign-left variable">language</span><span class="token operator">=</span><span class="token string">"java"</span> <span class="token assign-left variable">contentType</span><span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    <span class="token assign-left variable">pageEncoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>jsp<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>%out.println<span class="token punctuation">(</span><span class="token string">"web2.chsblogs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>%<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>%<span class="token operator">=</span>request.getRequestURL<span class="token punctuation">(</span><span class="token punctuation">)</span>%<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#4.启动tomcat</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now tomcat</span><span class="token comment">#5.访问测试</span>http://192.168.1.10/</code></pre></div></figure><h2 id="1-2-Tomcat负载均衡部署"><a href="#1-2-Tomcat负载均衡部署" class="headerlink" title="1.2 Tomcat负载均衡部署"></a>1.2 Tomcat负载均衡部署</h2><h2 id="1-3-Tomcat-Session-Replication-Cluster"><a href="#1-3-Tomcat-Session-Replication-Cluster" class="headerlink" title="1.3 Tomcat Session Replication Cluster"></a>1.3 Tomcat Session Replication Cluster</h2><h2 id="1-4-Session共享服务器"><a href="#1-4-Session共享服务器" class="headerlink" title="1.4 Session共享服务器"></a>1.4 Session共享服务器</h2><h3 id="1-4-1-msm简介"><a href="#1-4-1-msm简介" class="headerlink" title="1.4.1 msm简介"></a>1.4.1 msm简介</h3><p>msm（memcached session manager）提供将Tomcat的session保持到memcached或redis的程序，可以实现高可用。项目早期托管在google code,目前在Github。</p><p>github网站链接: <a href="https://github.com/magro/memcached-session-manager">https://github.com/magro/memcached-session-manager</a></p><p>支持Tomcat的 6.x、7.x、8.x、9.x</p><p><strong>安装：</strong></p><p>参考链接: <a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><p>将spymemcached.jar、memcached-session-manage、kyro相关的jar文件都放到Tomcat的lib目录中去，这个目录是 $CATALINA_HOME&#x2F;lib&#x2F; ，对应本次安装就是&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">kryo-3.0.3.jarasm-5.2.jarobjenesis-2.6.jarreflectasm-1.11.9.jarminlog-1.3.1.jarkryo-serializers-0.45.jarmsm-kryo-serializer-2.3.2.jarmemcached-session-manager-tc8-2.3.2.jarspymemcached-2.12.3.jarmemcached-session-manager-2.3.2.jar</code></pre></div></figure><h3 id="1-4-2-sticky模式"><a href="#1-4-2-sticky模式" class="headerlink" title="1.4.2 sticky模式"></a>1.4.2 sticky模式</h3><p>sticky 模式即前端tomcat和后端memcached有关联(粘性)关系。</p><p>参考文档:<a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><h3 id="1-4-3-non-sticky模式"><a href="#1-4-3-non-sticky模式" class="headerlink" title="1.4.3 non-sticky模式"></a>1.4.3 non-sticky模式</h3><p>non-sticky 模式即前端tomcat和后端memcached无关联(无粘性)关系。从msm 1.4.0之后版本开始支持non-sticky模式。Tomcat session为中转Session，对每一个SessionID随机选中后端的memcached节点n1(或者n2)为主session，而另一个memcached节点n2(或者是n1)为备session。产生的新的Session会发送给主、备memcached，并清除本地Session。后端两个memcached服务器对一个session来说是一个是主,一个是备,但对所有session信息来说每个memcached即是主同时也是备。如果n1下线，n2则转正。n1再次上线，n2依然是主Session存储节点。  </p><p><strong>Memcached配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#$CATALINA_HOME/conf/context.xml 中</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>Manager <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token assign-left variable">memcachedNodes</span><span class="token operator">=</span><span class="token string">"n1:10.0.0.101:11211,n2:10.0.0.102:11211"</span><span class="token assign-left variable">sticky</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">sessionBackupAsync</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">lockingMode</span><span class="token operator">=</span><span class="token string">"uriPattern:/path1|/path2"</span><span class="token assign-left variable">requestUriIgnorePattern</span><span class="token operator">=</span><span class="token string">".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token assign-left variable">transcoderFactoryClass</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/Context<span class="token operator">></span></code></pre></div></figure><p><strong>Redis配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载jedis.jar，放到 $CATALINA_HOME/lib/ ，对应本次安装就是/usr/local/tomcat/lib</span><span class="token comment">#$CATALINA_HOME/conf/context.xml中</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>Manager <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token assign-left variable">memcachedNodes</span><span class="token operator">=</span><span class="token string">"redis://:password@redis.example.com:portnumber"</span><span class="token assign-left variable">sticky</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">sessionBackupAsync</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">lockingMode</span><span class="token operator">=</span><span class="token string">"uriPattern:/path1|/path2"</span><span class="token assign-left variable">requestUriIgnorePattern</span><span class="token operator">=</span><span class="token string">".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token assign-left variable">transcoderFactoryClass</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/Context<span class="token operator">></span></code></pre></div></figure><h3 id="1-4-4-Session问题方案总结"><a href="#1-4-4-Session问题方案总结" class="headerlink" title="1.4.4 Session问题方案总结"></a>1.4.4 Session问题方案总结</h3><ul><li>session绑定，基于IP或session cookie的。其部署简单，尤其基于session黏性的方式，粒度小，对负载均衡影响小。但一旦后端服务器有故障，其上的session丢失。</li><li>session复制集群，基于tomcat实现多个服务器内共享同步所有session。此方法可以保证任意一台后端服务器故障，其余各服务器上还都存有全部session，对业务无影响。但是它基于多播实现心跳，TCP单播实现复制，当设备节点过多，这种复制机制不是很好的解决方案。且并发连接多的时候，单机上的所有session占据的内存空间非常巨大，甚至耗尽内存。</li><li>session服务器，将所有的session存储到一个共享的内存空间中，使用多个冗余节点保存，session，这样做到session存储服务器的高可用，且占据业务服务器内存较小。是一种比较好的解决session持久的解决方案。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Tomcat安装及配置</title>
    <link href="/2023/03/01/Web/Tomcat/tomcat02/"/>
    <url>/2023/03/01/Web/Tomcat/tomcat02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat安装及配置"><a href="#1-Tomcat安装及配置" class="headerlink" title="1.Tomcat安装及配置"></a>1.Tomcat安装及配置</h1><h2 id="1-1-Tomcat安装"><a href="#1-1-Tomcat安装" class="headerlink" title="1.1 Tomcat安装"></a>1.1 Tomcat安装</h2><p>官网：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.72/bin/apache-tomcat-9.0.72.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf apache-tomcat-9.0.72.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># ln -s apache-tomcat-9.0.72/ tomcat</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/tomcat.sh</span><span class="token comment">#启动tomcat</span><span class="token comment">#或者使用：[root@node10 local]# catalina.sh start</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># startup.sh </span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/local/jdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span class="token comment">#关闭tomcat</span><span class="token comment">#或者使用：[root@node10 local]# catalina.sh stop</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># shutdown.sh </span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/local/jdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarUsing CATALINA_OPTS: <span class="token comment">#配置tomcat自启动的service文件</span></code></pre></div></figure><p><strong>配置tomcat自启动的service文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建tomcat用户</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin tomcat</span><span class="token comment">#准备service文件中相关环境文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/tomcat.conf</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span><span class="token comment">#创建tomcat.service文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/tomcat.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Tomcat<span class="token comment">#After=syslog.target network.target remote-fs.target nss-lookup.target</span><span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking<span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/usr/local/tomcat/conf/tomcat.conf<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/tomcat/bin/startup.sh<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/usr/local/tomcat/bin/shutdown.sh<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true<span class="token assign-left variable">User</span><span class="token operator">=</span>tomcat<span class="token assign-left variable">Group</span><span class="token operator">=</span>tomcat<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now tomcat</span></code></pre></div></figure><p><strong>一键安装 tomcat脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_tomcat.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">TOMCAT_FILE</span><span class="token operator">=</span><span class="token string">"apache-tomcat-9.0.72.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token assign-left variable">TOMCAT_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span><span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span><span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span><span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span><span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span><span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">" OK "</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span><span class="token keyword">else</span>  <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span><span class="token keyword">fi</span>  <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>  <span class="token builtin class-name">echo</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"JDK 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"JDK 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$TOMCAT_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$TOMCAT_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$TOMCAT_DIR</span>/tomcat <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"TOMCAT 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$TOMCAT_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$TOMCAT_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xf <span class="token variable">$DIR</span>/<span class="token variable">$TOMCAT_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$TOMCAT_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$TOMCAT_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> apache-tomcat-*/ tomcat<span class="token builtin class-name">echo</span> <span class="token string">"PATH=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin:"</span><span class="token string">'$PATH'</span> <span class="token operator">></span> /etc/profile.d/tomcat.sh<span class="token function">id</span> tomcat <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin tomcat<span class="token function">cat</span> <span class="token operator">></span> <span class="token variable">$TOMCAT_DIR</span>/tomcat/conf/tomcat.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFJAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkEOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> tomcat.tomcat <span class="token variable">$TOMCAT_DIR</span>/tomcat/<span class="token function">cat</span> <span class="token operator">></span> /lib/systemd/system/tomcat.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Tomcat#After=syslog.target network.target remote-fs.target nss-lookup.targetAfter=syslog.target network.target[Service]Type=forkingEnvironmentFile=<span class="token variable">$TOMCAT_DIR</span>/tomcat/conf/tomcat.confExecStart=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin/startup.shExecStop=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin/shutdown.shRestartSec=3PrivateTmp=trueUser=tomcatGroup=tomcat[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> tomcat.service <span class="token operator">&amp;></span> /dev/nullsystemctl is-active tomcat.service <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"TOMCAT 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"TOMCAT 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>install_jdkinstall_tomcat<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  apache-tomcat-9.0.72.tar.gz  install_tomcat.sh  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_tomcat.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_tomcat.sh</span></code></pre></div></figure><h2 id="1-2-Tomcat配置"><a href="#1-2-Tomcat配置" class="headerlink" title="1.2 Tomcat配置"></a>1.2 Tomcat配置</h2><h3 id="1-2-1-Tomcat目录结构"><a href="#1-2-1-Tomcat目录结构" class="headerlink" title="1.2.1 Tomcat目录结构"></a>1.2.1 Tomcat目录结构</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── bin <span class="token comment">#服务启动、停止等相关程序和文件</span>├── BUILDING.txt├── conf <span class="token comment">#配置文件</span>├── CONTRIBUTING.md├── lib <span class="token comment">#库目录</span>├── LICENSE├── logs <span class="token comment">#日志目录</span>├── NOTICE├── README.md├── RELEASE-NOTES├── RUNNING.txt├── temp├── webapps <span class="token comment">#应用程序，应用部署目录</span>└── work <span class="token comment">#jsp编译后的结果文件，建议提前预热访问</span><span class="token number">7</span> directories, <span class="token number">7</span> files<span class="token comment">#当访问后，work目录中生成新文件，tomcat会自动的将jsp文件生成java源文件，再编译成class文件</span><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree work/Catalina/localhost/</span>work/Catalina/localhost/├── docs├── examples├── host-manager├── manager└── ROOT    └── org        └── apache            └── jsp                ├── index_jsp.class <span class="token comment">#字节码文件</span>                └── index_jsp.java  <span class="token comment">#servlet文件</span><span class="token number">8</span> directories, <span class="token number">2</span> files</code></pre></div></figure><h3 id="1-2-2-Tomcat配置文件"><a href="#1-2-2-Tomcat配置文件" class="headerlink" title="1.2.2 Tomcat配置文件"></a>1.2.2 Tomcat配置文件</h3><p>官方帮助文档：<a href="https://tomcat.apache.org/tomcat-9.0-doc/index.html">https://tomcat.apache.org/tomcat-9.0-doc/index.html</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree conf/</span>conf/├── Catalina│   └── localhost├── catalina.policy <span class="token comment">#当使用security选项启动tomcat时，用于为tomcat设置安全策略</span>├── catalina.properties <span class="token comment">#Tomcat 环境变量的配置，用于设定类加载器路径，以及一些与JVM调优相关参数。</span>├── context.xml <span class="token comment">#用于定义所有web应用均需加载的Context配置，此文件为所有的webapps提供默认配置，每个web应用也可以使用自已专用的配置，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中,覆盖全局的文件。</span>├── jaspic-providers.xml├── jaspic-providers.xsd├── logging.properties <span class="token comment">#Tomcat 日志系统相关的配置，可以修改日志级别和日志路径等。</span>├── server.xml <span class="token comment">#主配置文件。</span>├── tomcat.conf├── tomcat-users.xml <span class="token comment">#用户认证的账号和密码文件。</span>├── tomcat-users.xsd└── web.xml <span class="token comment">#每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置,每个web应用也可以使用专用配置文件,来覆盖全局文件。</span><span class="token number">2</span> directories, <span class="token number">11</span> files</code></pre></div></figure><p><strong>日志文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考文档：https://cwiki.apache.org/confluence/display/TOMCAT/Logging</span><span class="token comment">#日志格式：https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging</span>%a - Remote IP address%A - Local IP address%b - Bytes sent, excluding HTTP headers, or <span class="token string">'-'</span> <span class="token keyword">if</span> zero%B - Bytes sent, excluding HTTP headers%h - Remote <span class="token function">host</span> name <span class="token punctuation">(</span>or IP address <span class="token keyword">if</span> enableLookups <span class="token keyword">for</span> the connector is<span class="token boolean">false</span><span class="token punctuation">)</span>%H - Request protocol%l - Remote logical username from identd <span class="token punctuation">(</span>always returns <span class="token string">'-'</span><span class="token punctuation">)</span>%m - Request method <span class="token punctuation">(</span>GET, POST, etc.<span class="token punctuation">)</span>%p - Local port on <span class="token function">which</span> this request was received. See also %<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>p below.%q - Query string <span class="token punctuation">(</span>prepended with a <span class="token string">'?'</span> <span class="token keyword">if</span> it exists<span class="token punctuation">)</span>%r - First line of the request <span class="token punctuation">(</span>method and request URI<span class="token punctuation">)</span>%s - HTTP status code of the response%S - User session ID%t - Date and time, <span class="token keyword">in</span> Common Log Format%u - Remote user that was authenticated <span class="token punctuation">(</span>if any<span class="token punctuation">)</span>, <span class="token keyword">else</span> <span class="token string">'-'</span>%U - Requested URL path%v - Local server name%D - Time taken to process the request <span class="token keyword">in</span> millis. Note: In httpd %D ismicroseconds. Behaviour will be aligned to httpd <span class="token keyword">in</span> Tomcat <span class="token number">10</span> onwards.%T - Time taken to process the request, <span class="token keyword">in</span> seconds. Note: This value hasmillisecond resolution whereas <span class="token keyword">in</span> httpd it has second resolution. Behaviour willbe align to httpd <span class="token keyword">in</span> Tomcat <span class="token number">10</span> onwards.%F - Time taken to commit the response, <span class="token keyword">in</span> millis%I - Current request thread name <span class="token punctuation">(</span>can compare later with stacktraces<span class="token punctuation">)</span>%X - Connection status when response is completed:X <span class="token operator">=</span> Connection aborted before the response completed.+ <span class="token operator">=</span> Connection may be kept alive after the response is sent.- <span class="token operator">=</span> Connection will be closed after the response is sent.There is also support to <span class="token function">write</span> information incoming or outgoing headers, cookies,session or request attributes and special timestamp formats. It is modeled afterthe Apache HTTP Server log configuration syntax. Each of them can be usedmultiple <span class="token builtin class-name">times</span> with different xxx keys:%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>i <span class="token function">write</span> value of incoming header with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>o <span class="token function">write</span> value of outgoing header with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>c <span class="token function">write</span> value of cookie with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>r <span class="token function">write</span> value of ServletRequest attribute with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>s <span class="token function">write</span> value of HttpSession attribute with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>p <span class="token function">write</span> <span class="token builtin class-name">local</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> port <span class="token punctuation">(</span>xxx<span class="token operator">==</span>local<span class="token punctuation">)</span> or remote <span class="token punctuation">(</span>client<span class="token punctuation">)</span> port<span class="token punctuation">(</span>xxx<span class="token operator">=</span>remote<span class="token punctuation">)</span>%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>t <span class="token function">write</span> timestamp at the end of the request formatted using the enhancedSimpleDateFormat pattern xxx<span class="token comment">#tomcat中的日志文件</span><span class="token punctuation">[</span>root@node10 conf<span class="token punctuation">]</span><span class="token comment"># cat /usr/local/tomcat/conf/logging.properties</span><span class="token comment">#tomcat的访问日志格式</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Access log processes all example.             Documentation at: /docs/config/valve.html             Note: The pattern used is equivalent to using <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"common"</span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>               <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>               <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span><span class="token comment">#查看访问日志</span><span class="token punctuation">[</span>root@node10 conf<span class="token punctuation">]</span><span class="token comment"># cat /usr/local/tomcat/logs/localhost_access_log.2023-03-01.txt </span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">11230</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /tomcat.svg HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">67795</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /tomcat.css HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5542</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /bg-nav.png HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">1401</span></code></pre></div></figure><h3 id="1-2-3-Tomcat组件"><a href="#1-2-3-Tomcat组件" class="headerlink" title="1.2.3 Tomcat组件"></a>1.2.3 Tomcat组件</h3><p><img src="/2023/03/01/Web/Tomcat/tomcat02/image-20230301193155195.png" alt="image-20230301193155195">  </p><ul><li>顶级组件：Server，代表整个Tomcat容器，一台主机可以启动多个tomcat实例，确保端口不冲突。</li><li>服务类组件：Service，实现组织Engine和Connector，建立两者之间的联系，Service里面只能包含一个Engine</li><li>连接器组件：Connector，有HTTP（默认端口8080&#x2F;tcp）、HTTPS（默认端口8443&#x2F;tcp）  、AJP（默认端口8009&#x2F;tcp）协议的连接器，AJP（Apache Jserv protocol）是一种基于TCP的二进制通讯协议。  </li><li>容器类：Engine、Host（虚拟主机）、Context(上下文件,解决路径映射)都是容器类组件，可以嵌入其它组件，内部配置如何运行应用程序。  <ul><li>Engine：引擎，用来响应并处理用户请求。一个Engine上可以绑定多个Connector</li><li>Host：虚拟主机，可以实现多虚拟主机，例如使用不同的主机头区分。</li><li>Context：应用的上下文，配置特定url路径映射和目录的映射关系：url &#x3D;&gt; directory</li></ul></li><li>内嵌类： 可以内嵌到其他组件内，valve、logger、realm、loader、manager等。以logger举例，在不同容器组件内分别定义。</li><li>集群类组件：listener、cluster。</li></ul><p><strong>Tomcat核心组件：</strong></p><ol><li>Tomcat启动一个Server进程。可以启动多个Server，即Tomcat多实例。</li><li>创建一个Service提供服务。可以创建多个Service。每个Service中，是Engine和其连接器Connector的关联配置。</li><li>可以为这个Service提供多个连接器Connector，这些Connector使用了不同的协议，绑定了不同的端口。其作用就是处理来自客户端的不同的连接请求或响应。</li><li>Service内部还定义了Engine，引擎才是真正的处理请求的入口，其内部定义多个虚拟主机Host。Engine对请求头做了分析，将请求发送给相应的虚拟主机，如果没有匹配，数据就发往Engine上的defaultHost缺省虚拟主机，Engine上的缺省虚拟主机可以修改。</li><li>Host 定义虚拟主机，虚拟主机有name名称，通过名称匹配。</li><li>Context 定义应用程序单独的路径映射和配置。</li></ol><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">executor</span><span class="token operator">=</span><span class="token string">"tomcatThreadPool"</span>               <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span>               <span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">SSLEnabled</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/Connector<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"org.apache.coyote.http11.Http11AprProtocol"</span>               <span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">SSLEnabled</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">></span>     <span class="token operator">&lt;</span>/Connector<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"AJP/1.3"</span>               <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">"::1"</span>               <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8009"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">jvmRoute</span><span class="token operator">=</span><span class="token string">"jvm1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span></code></pre></div></figure><p><strong>Tomcat处理请求过程：</strong></p><p>请求地址：<a href="http://localhost:8080/test/index.jsp">http://localhost:8080/test/index.jsp</a> 过程：</p><ol><li>浏览器端的请求被发送到服务器的端口为8080，Tomcat进程监听在此端口上。通过侦听的HTTP&#x2F;1.1 Connector获得此请求。</li><li>Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的响应。</li><li>Engine获得请求localhost:8080&#x2F;test&#x2F;index.jsp，遍历它所有虚拟主机Host。</li><li>Engine匹配到名为localhost的Host。如果匹配不到,就把请求交给该Engine中的defaultHost处理。</li><li>localhost Host获得请求&#x2F;test&#x2F;index.jsp，匹配它所拥有的所有Context。</li><li>Host匹配到路径为&#x2F;test的Context。</li><li>path&#x3D;&#x2F;test的Context获得请求index.jsp，在它的mapping table中寻找对应的servlet。</li><li>Context匹配到URL PATTERN为 *.jsp 的servlet，对应于JspServlet类构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法。</li><li>Context把执行完了之后的HttpServletResponse对象返回给Host。</li><li>Host把HttpServletResponse对象返回给Engine。</li><li>Engine把HttpServletResponse对象返回给Connector。</li><li>Connector把HttpServletResponse对象返回给浏览器端。</li></ol><h3 id="1-2-4-Tomcat常见配置"><a href="#1-2-4-Tomcat常见配置" class="headerlink" title="1.2.4 Tomcat常见配置"></a>1.2.4 Tomcat常见配置</h3><ul><li>8005端口安全配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#8005是Tomcat的管理端口，默认监听在127.0.0.1上。无需验证就可发送SHUTDOWN (大小写敏感)这个字符串，tomcat接收到后就会关闭此Server。</span><span class="token comment">#此管理功能建议禁用，可将SHUTDOWN改为一串猜不出的字符串实现。或者port修改成 0, 会使用随机端口,如:40357。</span><span class="token comment">#port设为-1等无效端口,将关闭此功能。</span><span class="token comment">#此行不能被注释,否则无法启动tomcat服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span></code></pre></div></figure><ul><li>显示指定的http服务器版本信息</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#默认不显示tomcat的http的Server头信息, 可以指定tomcat的http的Server头信息为相应的值。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token comment">#修改配置,指定想显示的tomcat版本,添加Server="chsblogs"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token string">"chsblogs"</span>/<span class="token operator">></span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -I 192.168.1.10:8080</span>HTTP/1.1 <span class="token number">200</span> Content-Type: text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Transfer-Encoding: chunkedDate: Wed, 01 Mar <span class="token number">2023</span> <span class="token number">12</span>:02:46 GMTServer: chsblogs</code></pre></div></figure><ul><li>多虚拟主机配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多虚拟主机配置说明:</span><span class="token comment">#name:必须是主机名，用主机名来匹配。</span><span class="token comment">#appBase:当前主机的网页根目录，是相对于 $CATALINA_HOME ，也可以使用绝对路径。</span><span class="token comment">#unpackWARs:是否自动解压war格式。</span><span class="token comment">#autoDeploy:热部署，自动加载并运行应用。</span><span class="token comment">#再添加和配置一个新的虚拟主机，并将myapp部署到/data/chsblogs目录下</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span>      <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web1.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/chsblogs/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>            <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"web1_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span> <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s%b"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token comment">#准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/chsblogs/ROOT -pv</span>mkdir: created directory ‘/data’mkdir: created directory ‘/data/chsblogs’mkdir: created directory ‘/data/chsblogs/ROOT’<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /data/chsblogs/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># echo "web1.chsblogs.com" > /data/chsblogs/ROOT/index.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token comment">#测试</span>http://web1.chsblogs.com:8080/</code></pre></div></figure><ul><li>修改tomcat端口为80</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意: 因为以tomcat用户运行,不能直接使用1024以下的端口,需要修改tomcat的运行身份,否则会出现下面错误。</span><span class="token comment">#/usr/local/tomcat/logs/catalina.out文件：Caused by: java.net.SocketException: Permission denied</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">jvmRoute</span><span class="token operator">=</span><span class="token string">"jvm1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/tomcat.service</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token comment">#User=tomcat</span><span class="token comment">#Group=tomcat</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span></code></pre></div></figure><ul><li>Context配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Context作用:路径映射：将url映射至指定路径，而非使用appBase下的物理目录，实现虚拟目录功能。应用独立配置，例如单独配置应用日志、单独配置应用访问控制。</span><span class="token comment">#path：指的是访问的URL路径，如果path与appBase下面的子目录同名，context的docBase路径优先更高。</span><span class="token comment">#docBase：可以是磁盘文件的绝对路径，也可以是相对路径（相对于Host的appBase）。</span><span class="token comment">#reloadable：true表示如果WEB-INF/classes或META-INF/lib目录下.class文件有改动，就会将WEB应用重新加载。生产环境中，建议使用false来禁用。</span><span class="token comment">#映射指定路径</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/test"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/test"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span><span class="token comment">#映射站点的根目录</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/website"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span><span class="token comment">#还可以添加日志等独立的配置</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/test"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/test"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>    <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_test_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>    <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/Context<span class="token operator">></span>  <span class="token comment">#Valve组件:可以定义日志</span><span class="token comment">#定义访问日志：org.apache.catalina.valves.AccessLogValve</span><span class="token comment">#定义访问控制：org.apache.catalina.valves.RemoteAddrValve</span><span class="token comment">#例如：</span><span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.RemoteAddrValve"</span><span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token string">"10\.0\.0\.\d+"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>  <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>  <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.虚拟主机上利用context实现虚拟目录：准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/myapp-v1</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/myapp-v1/index.jsp</span>myapp-v1<span class="token comment">#使用了软链接，原因方便后期版升级或回滚，如是是版本升级，需要将软链接指向myapp-v2，重新启动。如果新版上线后，出现问题，重新修改软链接到上一个版本的目录，并重启，就可以实现回滚。</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -sv myapp-v1 myapp</span>‘myapp’ -<span class="token operator">></span> ‘myapp-v1’<span class="token comment">#2.配置server.xml</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"myapp.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/chsblogs/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/myapp"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/myapp"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>            <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"web1_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span> <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s%b"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.访问测试</span>http://myapp.chsblogs.com:8080/myapp/<span class="token comment">#4.myapp版本升级</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/myapp-v2</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># echo "myapp-v2" > /data/myapp-v2/index.jsp</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /data/</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># rm -rf myapp #删除软链接，仍然可以访问旧版本</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -s myapp-v2 myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ls</span>chsblogs  myapp  myapp-v1  myapp-v2<span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token comment">#5.访问测试</span>http://myapp.chsblogs.com:8080/myapp/<span class="token comment">#6.myapp版本回退</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># rm -rf myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -s myapp-v1 myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span></code></pre></div></figure><ul><li><p>基于Web方式的Host Manager虚拟主机管理</p></li><li><p>基于Web的管理Server status和Manager App实现应用部署  </p></li><li><p>其它配置</p></li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Service配置：一般情况下，一个Server实例配置一个Service，name属性相当于该Service的ID</span><span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span><span class="token comment">#2.连接器配置：redirectPort，如果访问HTTPS协议，自动转向这个连接器。但大多数时候，Tomcat并不会开启HTTPS，因为Tomcat往往部署在内部，HTTPS性能较差</span><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>  <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>  <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span class="token comment">#3.引擎配置</span><span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span><span class="token comment">#4.defaultHost配置：defaultHost指向内部定义某虚拟主机。缺省虚拟主机可以改动，默认localhost</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></code></pre></div></figure><h2 id="1-3-基于Tomcat应用部署"><a href="#1-3-基于Tomcat应用部署" class="headerlink" title="1.3 基于Tomcat应用部署"></a>1.3 基于Tomcat应用部署</h2><h3 id="1-3-1-应用归档格式"><a href="#1-3-1-应用归档格式" class="headerlink" title="1.3.1 应用归档格式"></a>1.3.1 应用归档格式</h3><ul><li>.war：Webapp打包，类似zip格式文件。通常包括一个应用的所有资源，比如jsp，html，配置文件等。</li><li>.jar：EJB类文件的打包压缩类zip格式文件，,包括很多的class文件。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#传统应用开发测试后，通常打包为war格式，这种文件部署到Tomcat的webapps目录下，并默认会自动解包展开和部署上线。</span> <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></code></pre></div></figure><h3 id="1-3-2-部署方式"><a href="#1-3-2-部署方式" class="headerlink" title="1.3.2 部署方式"></a>1.3.2 部署方式</h3><ul><li><p>部署：将webapp的源文件放置到目标目录，通过web.xml和context.xml文件中配置的路径就可以访问该webapp，通过类加载器加载其特有的类和依赖的类到JVM上，即：最终用户可以通过浏览器访问该应用。</p><ul><li>自动部署：Tomcat一旦发现多了一个web应用APP.war包，默认会自动把它解压缩，加载并启动起来。</li><li>手动部署：<ul><li>冷部署：将webapp放到指定目录，才去启动Tomcat服务  </li><li>热部署：Tomcat服务不停止，需要依赖manager、ant脚本、tcd（tomcat client  deployer）等工具。</li></ul></li></ul></li><li><p>反部署：停止webapp运行，并从JVM上清除已经加载的类，从Tomcat应用目录中移除部署的文件。</p></li><li><p>启动：webapp能够访问  </p></li><li><p>停止：webapp不能访问，不能提供服务，但是JVM并不清除它。</p></li></ul><h3 id="1-3-3-部署Webapp目录结构"><a href="#1-3-3-部署Webapp目录结构" class="headerlink" title="1.3.3 部署Webapp目录结构"></a>1.3.3 部署Webapp目录结构</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#目录结构一般由开发用工具自动生成，以下模拟生成相关目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir projects/myapp/&#123;WEB-INF,META-INF,classes,lib&#125; -pv</span>mkdir: created directory ‘projects’mkdir: created directory ‘projects/myapp’mkdir: created directory ‘projects/myapp/WEB-INF’mkdir: created directory ‘projects/myapp/META-INF’mkdir: created directory ‘projects/myapp/classes’mkdir: created directory ‘projects/myapp/lib’<span class="token comment">#创建应用首页</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim projects/myapp/index.jsp</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>%      out.println<span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    %<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#手动复制项目目录到webapps目录下去</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp -r projects/myapp/ /usr/local/tomcat/webapps/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /usr/local/tomcat/webapps/myapp/</span><span class="token comment">#访问测试s</span>http://192.168.1.10:8080/myapp/</code></pre></div></figure><h3 id="1-3-4-自动部署war包"><a href="#1-3-4-自动部署war包" class="headerlink" title="1.3.4 自动部署war包"></a>1.3.4 自动部署war包</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#制作应用的war包文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir app1</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># touch app1/test.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># touch app1/test.jsp</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim app1/test.jsp </span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>%      out.println<span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    %<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim app1/test.html</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#生成war包文件app1.war,此文件的名称决定了tomcat子目录的名称</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># jar cvf app1.war *</span>added manifestadding: test.html<span class="token punctuation">(</span>in <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out<span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deflated <span class="token number">39</span>%<span class="token punctuation">)</span>adding: test.jsp<span class="token punctuation">(</span>in <span class="token operator">=</span> <span class="token number">132</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out<span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deflated <span class="token number">32</span>%<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># ls</span>app1.war  test.html  test.jsp<span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># chown tomcat.tomcat app1.war</span><span class="token comment">#自动应用部署上面的war包</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># cp -p app1.war /usr/local/tomcat/webapps/</span><span class="token comment">#tomcat将app1.war自动解压缩</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>app1  app1.war  docs  examples  host-manager  manager  myapp  ROOT<span class="token comment">#访问测试，访问jsp文件后，tomcat会自动将jsp转换和编译生成work目录下对应的java和class文件</span>http://192.168.1.10:8080/app1/test.jsp<span class="token comment">#自动删除（反部署），过几秒再查看，发现app1目录也随之删除</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/tomcat/webapps/</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>app1  app1.war  docs  examples  host-manager  manager  myapp  ROOT<span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># rm -rf app1.war</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>docs  examples  host-manager  manager  myapp  ROOT</code></pre></div></figure><h3 id="1-3-5-部署基于JAVA的博客系统-JPress"><a href="#1-3-5-部署基于JAVA的博客系统-JPress" class="headerlink" title="1.3.5 部署基于JAVA的博客系统 JPress"></a>1.3.5 部署基于JAVA的博客系统 JPress</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ll jpress-v5.0.8.war </span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">127888242</span> Mar  <span class="token number">1</span> <span class="token number">17</span>:04 jpress-v5.0.8.war<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp jpress-v5.0.8.war /usr/local/tomcat/webapps/</span><span class="token comment">#自动解压缩生成jpress-v5.0.8目录</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>docs  examples  host-manager  jpress-v5.0.8  jpress-v5.0.8.war  manager  myapp  ROOT<span class="token comment">#生成软链接</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ln -s jpress-v5.0.8 jpress</span><span class="token comment">#访问链接配置</span>http://192.168.1.10:8080/jpress</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Tomcat之JDK安装</title>
    <link href="/2023/02/28/Web/Tomcat/tomcat01/"/>
    <url>/2023/02/28/Web/Tomcat/tomcat01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1.JDK安装"></a>1.JDK安装</h1><h2 id="1-1-安装OpenJDK"><a href="#1-1-安装OpenJDK" class="headerlink" title="1.1 安装OpenJDK"></a>1.1 安装OpenJDK</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># java -version</span>openjdk version <span class="token string">"1.8.0_362"</span>OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_362-b08<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.362</span>-b08, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="1-2-二进制安装JDK"><a href="#1-2-二进制安装JDK" class="headerlink" title="1.2 二进制安装JDK"></a>1.2 二进制安装JDK</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载安装包：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf jdk-8u341-linux-x64.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># ln -s jdk1.8.0_341/ jdk</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># vim /etc/profile.d/jdk.sh</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/<span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/jdk.sh </span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="1-3-一键安装二进制JDK脚本"><a href="#1-3-一键安装二进制JDK脚本" class="headerlink" title="1.3 一键安装二进制JDK脚本"></a>1.3 一键安装二进制JDK脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_jdk.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>  <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>  <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>  <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>  <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>  <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">" OK "</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>  <span class="token keyword">else</span>    <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>  <span class="token keyword">fi</span>  <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>  <span class="token builtin class-name">echo</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"JDK 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"JDK 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>install_jdk<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_jdk.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  install_jdk.sh  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_jdk.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/jdk.sh </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).Redis之Cluster集群</title>
    <link href="/2023/02/19/NoSQL/Redis/redis06/"/>
    <url>/2023/02/19/NoSQL/Redis/redis06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis之Cluster集群"><a href="#1-Redis之Cluster集群" class="headerlink" title="1.Redis之Cluster集群"></a>1.Redis之Cluster集群</h1><h2 id="1-1-Redis-Cluster工作原理"><a href="#1-1-Redis-Cluster工作原理" class="headerlink" title="1.1 Redis Cluster工作原理"></a>1.1 Redis Cluster工作原理</h2><p>在哨兵sentinel机制中，可以解决Redis高可用问题，即当MASTER故障后可以自动将SLAVE提升为MASTER，从而可以保证Redis服务的正常使用，但是无法解决Redis单机写入的瓶颈问题，即单机Redis写入性能受限于单机的内存大小、并发数量、网卡速率等因素。</p><p>为了解决单机性能的瓶颈，提高Redis 性能，可以使用分布式集群的解决方案。Redis 3.0版本之后推出了无中心架构的Redis Cluster机制，在无中心的Redis集群当中，其每个节点保存当前节点数据和整个集群状态,每个节点都和其他所有节点连接。</p><p><strong>Redis Cluster特点：</strong></p><ul><li>所有Redis节点使用(PING机制)互联。</li><li>集群中某个节点是否失效，是由整个集群中超过半数的节点监测都失效，才能算真正的失效。</li><li>客户端不需要Proxy即可直接连接Redis，应用程序中需要配置全部的Redis服务器IP。</li><li>Redis Cluster把所有的Redis Node平均映射到0-166383个槽位(Slot)上，读写需要到指定的Redis Node上进行操作，因此有多个Redis Node相当于Redis并发扩展了多倍，每个Redis Node承担16384&#x2F;N个槽位。</li><li>Redis Cluster预先分配16384个(Slot)槽位，当需要在Redis集群中写入一个Key-Value的时候，会使用CRC16(Key)Mode 16384之后的值，决定将Key写入哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。</li></ul><p><strong>Redis Cluster 架构：</strong></p><p><img src="/2023/02/19/NoSQL/Redis/redis06/image-20230219170743768.png" alt="image-20230219170743768">  </p><h1 id="2-手动部署"><a href="#2-手动部署" class="headerlink" title="2 手动部署"></a>2 手动部署</h1><p>基于原生命令手动部署Redis Cluster集群：</p><h2 id="2-1-部署清单"><a href="#2-1-部署清单" class="headerlink" title="2.1 部署清单"></a>2.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node20</td><td>192.168.1.20</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node21</td><td>192.168.1.21</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node22</td><td>192.168.1.22</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node23</td><td>192.168.1.23</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node24</td><td>192.168.1.24</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node25</td><td>192.168.1.25</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr></tbody></table><h2 id="2-2-安装配置Redis-5-0-3"><a href="#2-2-安装配置Redis-5-0-3" class="headerlink" title="2.2 安装配置Redis 5.0.3"></a>2.2 安装配置Redis 5.0.3</h2><p><strong>6个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#node20节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node21节点</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node22节点</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node23节点</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node24节点</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node25节点</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span></code></pre></div></figure><p><strong>6个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis.conf</span><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0masterauth <span class="token number">123456</span>requirepass <span class="token number">123456</span>cluster-enabled <span class="token function">yes</span> <span class="token comment">#取消此行注释,必须开启集群，开启后redis 进程会有cluster标识。</span>cluster-config-file nodes-6379.conf <span class="token comment">#取消此行注释,此为集群状态文件,记录主从关系及slot范围信息,由redis cluster 集群自动创建和维护。</span>cluster-require-full-coverage no <span class="token comment">#默认值为yes,设为no可以防止一个节点不可用导致整个cluster不可用。</span><span class="token comment">#批量修改配置文件</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span></code></pre></div></figure><p><strong>执行meet操作实现相互通信：</strong></p> <figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在任一节点上和其它所有节点进行meet通信</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.21 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.22 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.23 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.24 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.25 6379</span>OK<span class="token comment">#所有节点之间可以相互连接通信</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779617172</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676779618000</span> <span class="token number">2</span> connected292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779616164</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779616000</span> <span class="token number">0</span> connectedfb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779617000</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779618186</span> <span class="token number">1</span> connected<span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:failcluster_slots_assigned:0 <span class="token comment">#无槽位分配</span>cluster_slots_ok:0cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:0 <span class="token comment">#无集群成员</span>cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:452cluster_stats_messages_pong_sent:509cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:966cluster_stats_messages_ping_received:509cluster_stats_messages_pong_received:457cluster_stats_messages_received:966</code></pre></div></figure><p><strong>为各个master 节点指派槽位范围：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># vim addslot.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">start</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token variable">$4</span><span class="token assign-left variable">pass</span><span class="token operator">=</span><span class="token number">123456</span><span class="token keyword">for</span> <span class="token for-or-select variable">slot</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $<span class="token punctuation">&#123;</span>start<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> slot:<span class="token variable">$slot</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$&#123;host&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$port</span> <span class="token parameter variable">-a</span> <span class="token variable">$&#123;pass&#125;</span> --no-auth-warning cluster addslots <span class="token variable">$&#123;slot&#125;</span><span class="token keyword">done</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x addslot.sh</span><span class="token comment">#为三个master分配槽位,共16364/3=5,461.333333333333,平均每个master分配5,461个槽位。</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.20 6379 0 5461</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.21 6379 5462 10922</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.22 6379 10922 16383</span><span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780325000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327710</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:776cluster_stats_messages_pong_sent:873cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:1654cluster_stats_messages_ping_received:873cluster_stats_messages_pong_received:781cluster_stats_messages_received:1654</code></pre></div></figure><p><strong>指定各个节点的主从关系：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过cluster nodes查看master的ID信息,将对应的slave指定相应的master节点,实现三对主从节点。</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780325000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327710</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token comment">#将192.168.1.23指定192.168.1.20的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.23 -a 123456 --no-auth-warning cluster replicate d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83</span>OK<span class="token comment">#将192.168.1.24指定192.168.1.21的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.24 -a 123456 --no-auth-warning cluster replicate 03a760a1a1041517103d306813a22f93a52c88e5</span>OK<span class="token comment">#将192.168.1.25指定192.168.1.22的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.25 -a 123456 --no-auth-warning cluster replicate fc5349739b52484c613a48e621da3e1363439c6b</span>OK<span class="token comment">#查看状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 slave 03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 slave fc5349739b52484c613a48e621da3e1363439c6b <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780745141</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 slave d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">0</span> <span class="token number">1676780744129</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780746149</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:1259cluster_stats_messages_pong_sent:1424cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:2688cluster_stats_messages_ping_received:1424cluster_stats_messages_pong_received:1264cluster_stats_messages_received:2688<span class="token comment">#查看主从节关系及槽位信息</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster slots</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5461</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.20"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.23"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"fb4f1757251753caa2142bbd4bd22e5b204acf46"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10923</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">16383</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.22"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"fc5349739b52484c613a48e621da3e1363439c6b"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.25"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"292b2d637d7a2c8db6a169ed29f1fa37ca8695fb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5462</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10922</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.21"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"03a760a1a1041517103d306813a22f93a52c88e5"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.24"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"4c709246f80b88b0b051deb2e04b56f3e0f4590c"</span></code></pre></div></figure><p><strong>验证 Redis Cluster访问：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定选项-c表示以集群方式连接</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.20 -a 123456 --no-auth-warning set chs www.chsblogs.com</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.20 -a 123456 --no-auth-warning get chs</span><span class="token string">"www.chsblogs.com"</span></code></pre></div></figure><h1 id="3-Redis-4部署"><a href="#3-Redis-4部署" class="headerlink" title="3 Redis 4部署"></a>3 Redis 4部署</h1><p>基于Redis 4部署Redis Cluster集群：</p><h2 id="3-1-部署清单"><a href="#3-1-部署清单" class="headerlink" title="3.1 部署清单"></a>3.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node14</td><td>192.168.1.14</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node15</td><td>192.168.1.15</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node16</td><td>192.168.1.16</td><td>CentOS7.9</td><td>Redis4.0.9</td><td>集群动态扩容</td></tr><tr><td>node17</td><td>192.168.1.17</td><td>CentOS7.9</td><td>Redis4.0.9</td><td>集群动态扩容</td></tr></tbody></table><h2 id="3-2-安装配置Redis-4-0-9"><a href="#3-2-安装配置Redis-4-0-9" class="headerlink" title="3.2 安装配置Redis 4.0.9"></a>3.2 安装配置Redis 4.0.9</h2><p><strong>8个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#shell脚本一键安装Redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-4.0.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span></code></pre></div></figure><p><strong>8个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /apps/redis/etc/redis.conf</span><span class="token comment">#重启redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart redis</span></code></pre></div></figure><p><strong>安装redis-trib.rb工具：</strong></p><p>Redis 3和4版本需要使用到集群管理工具redis-trib.rb，这个工具是redis官方推出的管理redis集群的工具，集成在redis的源码src目录下，是基于redis提供的集群命令封装成简单、便捷、实用的操作工具，redis-trib.rb是redis作者用ruby开发完成的，需要安装ruby的redis模块,但是centos 7 系统yum安装的ruby存在版本较低问题，如下：  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># find / -name "redis-trib.rb"</span>/root/redis-4.0.9/src/redis-trib.rb<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp /root/redis-4.0.9/src/redis-trib.rb /usr/bin/</span><span class="token comment">#缺少ruby环境无法运行rb脚本</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb </span>/usr/bin/env: ruby: No such <span class="token function">file</span> or directory<span class="token comment">#CentOS 7带的ruby版本过低,无法运行上面ruby脚本,需要安装2.3以上版本,安装rubygems依赖ruby自动安装</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install rubygems</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install redis</span>Fetching: connection_pool-2.3.0.gem <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>ERROR:  Error installing redis:connection_pool requires Ruby version <span class="token operator">>=</span> <span class="token number">2.5</span>.0.<span class="token comment">#编译安装高版本的ruby</span><span class="token comment">#ruby 官网: http://www.ruby-lang.org/zh_cn</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc openssl-devel zlib-devel</span><span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># ls</span>ruby-2.5.9.tar.gz<span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># tar -xvf ruby-2.5.9.tar.gz </span><span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># cd ruby-2.5.9</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># ./configure</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># make -j 2 &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># ruby -v</span>ruby <span class="token number">2.5</span>.9p229 <span class="token punctuation">(</span><span class="token number">2021</span>-04-05 revision <span class="token number">67939</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux<span class="token punctuation">]</span><span class="token comment">#安装ruby中redis模块</span><span class="token comment">#无法在线安装，可以下载redis模块安装包离线安装：https://rubygems.org/gems/redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install -l redis-4.1.3.gem </span>Successfully installed redis-4.1.3Parsing documentation <span class="token keyword">for</span> redis-4.1.3Installing ri documentation <span class="token keyword">for</span> redis-4.1.3Done installing documentation <span class="token keyword">for</span> redis after <span class="token number">1</span> seconds<span class="token number">1</span> gem installed</code></pre></div></figure><p><strong>redis-trib.rb 命令用法：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb</span>Usage: redis-trib <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>arguments <span class="token punctuation">..</span>.<span class="token operator">></span>  create          host1:port1 <span class="token punctuation">..</span>. hostN:portN                  <span class="token parameter variable">--replicas</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span> <span class="token comment">#指定每个master的副本数量,即对应slave数量,一般为1</span>  check           host:port <span class="token comment">#检查集群信息</span>  info            host:port <span class="token comment">#查看集群主机信息</span>  fix             host:port <span class="token comment">#修复集群</span>                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  reshard         host:port <span class="token comment">#在线热迁移集群指定主机的slots数据</span>                  <span class="token parameter variable">--from</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--to</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--slots</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--yes</span>                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--pipeline</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  rebalance       host:port <span class="token comment">#平衡集群中各主机的slot数量</span>                  <span class="token parameter variable">--weight</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  --auto-weights                  --use-empty-masters                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--simulate</span>                  <span class="token parameter variable">--pipeline</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--threshold</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  add-node        new_host:new_port existing_host:existing_port <span class="token comment">#添加主机到集群</span>                  <span class="token parameter variable">--slave</span>                  --master-id <span class="token operator">&lt;</span>arg<span class="token operator">></span>  del-node        host:port node_id <span class="token comment">#删除主机</span>  set-timeout     host:port milliseconds <span class="token comment">#设置节点的超时时间</span>  call            host:port <span class="token builtin class-name">command</span> arg arg <span class="token punctuation">..</span> arg <span class="token comment">#在集群上的所有节点上执行命令</span>  <span class="token function">import</span>          host:port <span class="token comment">#导入外部redis服务器的数据到当前集群</span>                  <span class="token parameter variable">--from</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--copy</span>                  <span class="token parameter variable">--replace</span>  <span class="token builtin class-name">help</span>            <span class="token punctuation">(</span>show this <span class="token builtin class-name">help</span><span class="token punctuation">)</span></code></pre></div></figure><p><strong>创建Redis Cluster集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改redis-trib.rb连接redis的密码</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/lib/ruby/gems/2.5.0/gems/redis-4.1.3/lib/redis/client.rb</span>class Redis  class Client    DEFAULTS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      :url <span class="token operator">=</span><span class="token operator">></span> lambda <span class="token punctuation">&#123;</span> ENV<span class="token punctuation">[</span><span class="token string">"REDIS_URL"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>,      :scheme <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"redis"</span>,      :host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"127.0.0.1"</span>,      :port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">6379</span>,      :path <span class="token operator">=</span><span class="token operator">></span> nil,      :timeout <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5.0</span>,      :password <span class="token operator">=</span><span class="token operator">></span> <span class="token number">123456</span>, <span class="token comment">#此处修改密码</span>      :db <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :driver <span class="token operator">=</span><span class="token operator">></span> nil,      :id <span class="token operator">=</span><span class="token operator">></span> nil,      :tcp_keepalive <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :reconnect_attempts <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>,      :reconnect_delay <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :reconnect_delay_max <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.5</span>,      :inherit_socket <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token comment">#创建集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb create --replicas 1 192.168.1.10:6379 192.168.1.11:6379 192.168.1.12:6379 192.168.1.13:6379 192.168.1.14:6379 192.168.1.15:6379</span><span class="token operator">>></span><span class="token operator">></span> Creating cluster<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Using <span class="token number">3</span> masters:<span class="token number">192.168</span>.1.10:6379<span class="token number">192.168</span>.1.11:6379<span class="token number">192.168</span>.1.12:6379Adding replica <span class="token number">192.168</span>.1.14:6379 to <span class="token number">192.168</span>.1.10:6379Adding replica <span class="token number">192.168</span>.1.15:6379 to <span class="token number">192.168</span>.1.11:6379Adding replica <span class="token number">192.168</span>.1.13:6379 to <span class="token number">192.168</span>.1.12:6379M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:0-5460 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:5461-10922 <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:10923-16383 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dCan I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to join<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:0-5460 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:10923-16383 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:5461-10922 <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#如果有之前的操作导致Redis集群创建报错，则执行清空数据和集群命令：</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALLOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> cluster resetOK</code></pre></div></figure><p><strong>查看Redis Cluster集群状态：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">[root@node10 ~]# redis-trib.rb info 192.168.1.10:6379192.168.1.10:6379 (dca4320a...) -&gt; 0 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (4a3e180a...) -&gt; 0 keys | 5461 slots | 1 slaves.192.168.1.11:6379 (c287bfc8...) -&gt; 0 keys | 5462 slots | 1 slaves.[OK] 0 keys in 3 masters.0.00 keys per slot on average.[root@node10 ~]# redis-trib.rb check 192.168.1.10:6379&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 192.168.1.10:6379   slots:0-5460 (5461 slots) master   1 additional replica(s)S: 555035ef69008b2932e6c0b182f503ed621d1cfd 192.168.1.13:6379   slots: (0 slots) slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 192.168.1.15:6379   slots: (0 slots) slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 192.168.1.14:6379   slots: (0 slots) slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 192.168.1.12:6379   slots:10923-16383 (5461 slots) master   1 additional replica(s)M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d 192.168.1.11:6379   slots:5461-10922 (5462 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.</code></pre></div></figure><h2 id="3-3-Redis-Cluster集群节点维护"><a href="#3-3-Redis-Cluster集群节点维护" class="headerlink" title="3.3 Redis Cluster集群节点维护"></a>3.3 Redis Cluster集群节点维护</h2><h3 id="3-3-1-集群维护之动态扩容"><a href="#3-3-1-集群维护之动态扩容" class="headerlink" title="3.3.1 集群维护之动态扩容"></a>3.3.1 集群维护之动态扩容</h3><p><strong>添加新的master节点到集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将一台新的主机192.168.1.16加入集群,以下示例中192.168.1.10可以是任意存在的集群节点。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb add-node 192.168.1.16:6379 192.168.1.10:6379</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb info 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>dca4320a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>4a3e180a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.11:6379 <span class="token punctuation">(</span>c287bfc8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5462</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>c0ffe8c6<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">0</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">0</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.00</span> keys per slot on average.</code></pre></div></figure><p><strong>在新的master上重新分配槽位：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb reshard 192.168.1.10:6379</span><span class="token comment">#如果迁移失败使用此命令修复集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb fix 192.168.1.10:6379</span></code></pre></div></figure><p><strong>为新的master添加新的slave节点：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向当前的Redis集群中添加一个Redis单机服务器192.168.1.17，用于解决当前192.168.1.16单机的潜在宕机问题</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb add-node --slave --master-id c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4 192.168.1.17:6379 192.168.1.10:6379</span></code></pre></div></figure><h3 id="3-3-2-集群维护之动态缩容"><a href="#3-3-2-集群维护之动态缩容" class="headerlink" title="3.3.2 集群维护之动态缩容"></a>3.3.2 集群维护之动态缩容</h3><p><strong>迁移master 的槽位之其他master ：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下线主节点192.168.1.12及其从节点192.168.1.13</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb check 192.168.1.10:6379</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:1365-5460 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:12288-16383 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:6827-10922 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 59fd0573637bca6de96209ae345afbaf81db73a6 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4M: c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4 <span class="token number">192.168</span>.1.16:6379   slots:0-1364,5461-6826,10923-12287 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb reshard 192.168.1.10:6379</span><span class="token comment">#如果迁移失败使用此命令修复集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb fix 192.168.1.10:6379</span></code></pre></div></figure><p><strong>从集群删除服务器：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis-trib.rb del-node &lt;任意cluster节点的IP:port> &lt;删除节点的ID></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb del-node 192.168.1.10:6379 4a3e180a9805afa1a325523b2b9da68f4b2958b2</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 4a3e180a9805afa1a325523b2b9da68f4b2958b2 from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> SHUTDOWN the node.<span class="token comment">#删除多余的slave从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb del-node 192.168.1.10:6379 555035ef69008b2932e6c0b182f503ed621d1cfd</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 555035ef69008b2932e6c0b182f503ed621d1cfd from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> SHUTDOWN the node.<span class="token comment">#查看集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb info 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>dca4320a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.11:6379 <span class="token punctuation">(</span>c287bfc8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>c0ffe8c6<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5480</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">0</span> keys <span class="token keyword">in</span> <span class="token number">3</span> masters.<span class="token number">0.00</span> keys per slot on average.</code></pre></div></figure><h1 id="4-Redis-6部署"><a href="#4-Redis-6部署" class="headerlink" title="4 Redis 6部署"></a>4 Redis 6部署</h1><p>基于Redis 6部署Redis Cluster集群：</p><p>官方文档：<a href="https://redis.io/topics/cluster-tutorial">https://redis.io/topics/cluster-tutorial</a></p><h2 id="4-1-部署清单"><a href="#4-1-部署清单" class="headerlink" title="4.1 部署清单"></a>4.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node14</td><td>192.168.1.14</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node15</td><td>192.168.1.15</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node16</td><td>192.168.1.16</td><td>CentOS7.9</td><td>Redis6.2.9</td><td>集群动态扩容</td></tr><tr><td>node17</td><td>192.168.1.17</td><td>CentOS7.9</td><td>Redis6.2.9</td><td>集群动态扩容</td></tr></tbody></table><h2 id="4-2-安装配置Redis6-2-9"><a href="#4-2-安装配置Redis6-2-9" class="headerlink" title="4.2 安装配置Redis6.2.9"></a>4.2 安装配置Redis6.2.9</h2><p><strong>8个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#shell脚本一键安装Redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-6.2.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span></code></pre></div></figure><p><strong>8个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /apps/redis/etc/redis.conf</span><span class="token comment">#重启redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart redis</span></code></pre></div></figure><p><strong>创建集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令redis-cli的选项 --cluster-replicas 1 表示每个master对应一个slave节点。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster create 192.168.1.10:6379 192.168.1.11:6379 192.168.1.12:6379 192.168.1.13:6379 192.168.1.14:6379 192.168.1.15:6379 --cluster-replicas 1</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">0</span> - <span class="token number">5460</span>Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>Adding replica <span class="token number">192.168</span>.1.14:6379 to <span class="token number">192.168</span>.1.10:6379Adding replica <span class="token number">192.168</span>.1.15:6379 to <span class="token number">192.168</span>.1.11:6379Adding replica <span class="token number">192.168</span>.1.13:6379 to <span class="token number">192.168</span>.1.12:6379M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   replicates d42907fa14783afc68bbb4a751499a9e0bf032aeCan I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span> <span class="token comment">#输入yes自动创建集群</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token builtin class-name">.</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master <span class="token comment">#已经分配的槽位</span>   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">#分配了一个slave</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates d42907fa14783afc68bbb4a751499a9e0bf032aeS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaM: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration. <span class="token comment">#所有节点槽位分配完成</span><span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>. <span class="token comment">#检查打开的槽位</span><span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>. <span class="token comment">#检查插槽覆盖范围</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered. <span class="token comment">#所有槽位(16384个)分配完成</span><span class="token comment">#查看当前集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster nodes</span>b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379@16379 master - <span class="token number">0</span> <span class="token number">1676790118531</span> <span class="token number">3</span> connected <span class="token number">10923</span>-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676790117000</span> <span class="token number">1</span> connected <span class="token number">0</span>-5460e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379@16379 slave d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">0</span> <span class="token number">1676790118000</span> <span class="token number">2</span> connected4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">0</span> <span class="token number">1676790118000</span> <span class="token number">3</span> connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">0</span> <span class="token number">1676790117000</span> <span class="token number">1</span> connectedd42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379@16379 master - <span class="token number">0</span> <span class="token number">1676790119549</span> <span class="token number">2</span> connected <span class="token number">5461</span>-10922</code></pre></div></figure><p><strong>Python脚本实现Redis Cluster集群写入：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install python3</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># pip3 install redis-py-cluster</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim redis_cluster_test.py</span><span class="token comment">#!/usr/bin/env python3</span>from rediscluster <span class="token function">import</span> RedisClusterstartup_nodes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.10"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.11"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.12"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.13"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.14"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.15"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token assign-left variable">redis_conn</span><span class="token operator">=</span> RedisCluster<span class="token punctuation">(</span>startup_nodes<span class="token operator">=</span>startup_nodes,password<span class="token operator">=</span><span class="token string">'123456'</span>,<span class="token assign-left variable">decode_responses</span><span class="token operator">=</span>True<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">10000</span><span class="token punctuation">)</span>:  redis_conn.set<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>,<span class="token string">'value'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">))</span>  print<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>+<span class="token string">':'</span>,redis_conn.get<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x redis_cluster_test.py </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ./redis_cluster_test.py</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>key9998: value9998key9999: value9999</code></pre></div></figure><p><strong>模拟MASTER故障，对应的SLAVE节点自动提升为新MASTER：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">#查看集群状态，模拟192.168.1.11故障。[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791104491 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791102000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 slave d42907fa14783afc68bbb4a751499a9e0bf032ae 0 1676791103000 2 connected4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791102000 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791102000 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 master - 0 1676791103480 2 connected 5461-10922[root@node11 ~]# systemctl stop redis[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791428000 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791427000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676791425556 7 connected 5461-10922 #192.168.1.15为新的MASTER4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791427594 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791428608 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 master,fail - 1676791204544 1676791201000 2 disconnected#恢复192.168.1.11故障。自动成为SLAVE节点。[root@node11 ~]# systemctl start redis[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791577584 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791576000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676791575568 7 connected 5461-109224a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791576576 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791578595 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 slave e94943e4670476e4c39bf0d7acc7a8ad114314da 0 1676791578000 7 connected #从节点</code></pre></div></figure><h2 id="4-3-Redis-Cluster集群节点维护"><a href="#4-3-Redis-Cluster集群节点维护" class="headerlink" title="4.3 Redis Cluster集群节点维护"></a>4.3 Redis Cluster集群节点维护</h2><h3 id="4-3-1-集群维护之动态扩容"><a href="#4-3-1-集群维护之动态扩容" class="headerlink" title="4.3.1 集群维护之动态扩容"></a>4.3.1 集群维护之动态扩容</h3><p>场景：三主三从的Redis Cluster架构可能无法满足现有业务的并发写入需求，因此将192.168.1.16，  192.168.1.17动态添加到集群中，但不能影响业务使用和数据丢失。</p><p><strong>注意: 生产环境一般建议master节点为奇数个,比如:3,5,7,以防止脑裂现象。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用以下命令添加新节点，要添加的新Redis节点IP和端口添加到的已有的集群中任意节点的IP:端口</span>add-node new_host:new_port existing_host:existing_port <span class="token punctuation">[</span>--slave --master-id<span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">]</span>new_host:new_port <span class="token comment">#为新添加的主机的IP和端口</span>existing_host:existing_port <span class="token comment">#为已有的集群中任意节点的IP和端口</span></code></pre></div></figure><p><strong>添加新的master节点到集群：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">#将一台新的主机192.168.1.16加入集群,以下示例中192.168.1.10可以是任意存在的集群节点。[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster add-node 192.168.1.16:6379 192.168.1.10:6379&gt;&gt;&gt; Adding node 192.168.1.16:6379 to cluster 192.168.1.10:6379&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: b666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379   slots: (0 slots) slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379   slots: (0 slots) slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379   slots: (0 slots) slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.16:6379 to make it join the cluster.[OK] New node added correctly.#观察到该节点已经加入成功，但此节点上没有slot位,也无从节点，而且新的节点是master[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster info 192.168.1.10:6379192.168.1.10:6379 (30825a8a...) -&gt; 3331 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (b666f51a...) -&gt; 3329 keys | 5461 slots | 1 slaves.192.168.1.15:6379 (e94943e4...) -&gt; 3340 keys | 5462 slots | 1 slaves.192.168.1.16:6379 (3773d6d8...) -&gt; 0 keys | 0 slots | 0 slaves.[OK] 10000 keys in 4 masters.0.61 keys per slot on average.[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379192.168.1.10:6379 (30825a8a...) -&gt; 3331 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (b666f51a...) -&gt; 3329 keys | 5461 slots | 1 slaves.192.168.1.15:6379 (e94943e4...) -&gt; 3340 keys | 5462 slots | 1 slaves.192.168.1.16:6379 (3773d6d8...) -&gt; 0 keys | 0 slots | 0 slaves.[OK] 10000 keys in 4 masters.0.61 keys per slot on average.&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: b666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 192.168.1.16:6379   slots: (0 slots) masterS: 4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379   slots: (0 slots) slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379   slots: (0 slots) slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379   slots: (0 slots) slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676792333261 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676792329000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676792331000 7 connected 5461-109223773d6d8b7f679b9d36545af0df3ed2f189aedc3 192.168.1.16:6379@16379 master - 0 1676792334266 0 connected4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676792331000 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676792332249 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 slave e94943e4670476e4c39bf0d7acc7a8ad114314da 0 1676792333000 7 connected[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster infocluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:7cluster_size:3cluster_current_epoch:7cluster_my_epoch:1cluster_stats_messages_ping_sent:2482cluster_stats_messages_pong_sent:2486cluster_stats_messages_fail_sent:4cluster_stats_messages_auth-ack_sent:1cluster_stats_messages_sent:4973cluster_stats_messages_ping_received:2480cluster_stats_messages_pong_received:2482cluster_stats_messages_meet_received:6cluster_stats_messages_fail_received:1cluster_stats_messages_auth-req_received:1cluster_stats_messages_received:4970</code></pre></div></figure><p><strong>在新的master上重新分配槽位：</strong></p><p>新的node节点加到集群之后,默认是master节点，但是没有slots，需要重新分配，添加主机之后需要对添加至集群中的新主机重新分片,否则其没有分片也就无法写入数据。 </p><p><strong>注意: 重新分配槽位需要清空数据,所以需要先备份数据,扩展后再恢复数据。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster reshard 192.168.1.10:6379</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.How many slots <span class="token keyword">do</span> you want to move <span class="token punctuation">(</span>from <span class="token number">1</span> to <span class="token number">16384</span><span class="token punctuation">)</span>?4096 <span class="token comment">#新分配多少个槽位=16384/master个数</span>What is the receiving <span class="token function">node</span> ID? d6e2eca6b338b717923f64866bd31d42e52edc98 <span class="token comment">#新的master的ID</span>Please enter all the <span class="token builtin class-name">source</span> <span class="token function">node</span> IDs.Type <span class="token string">'all'</span> to use all the nodes as <span class="token builtin class-name">source</span> nodes <span class="token keyword">for</span> the <span class="token builtin class-name">hash</span> slots.Type <span class="token string">'done'</span> once you entered all the <span class="token builtin class-name">source</span> nodes IDs.Source <span class="token function">node</span> <span class="token comment">#1: all #输入all,将哪些源主机的槽位分配给新的节点，all是自动在所有的redisnode选择划分，如果是从redis cluster删除某个主机可以使用此方式将指定主机上的槽位全部移动到别的redis主机。</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Do you want to proceed with the proposed reshard plan <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span> <span class="token comment">#确认分配</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Moving slot <span class="token number">12282</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12283</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: <span class="token builtin class-name">.</span>Moving slot <span class="token number">12284</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12285</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: <span class="token builtin class-name">.</span>Moving slot <span class="token number">12286</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12287</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379:<span class="token comment">#确定slot分配成功</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure><p><strong>为新的master添加新的slave节点：</strong></p><p>需要再向当前的Redis集群中添加一个Redis单机服务器192.168.1.17，用于解决当前192.168.1.16单机的潜在宕机问题，即实现相应的高可用功能，有两种方式：  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式一：在新加节点到集群时，直接将之设置为slave</span>redis-cli <span class="token parameter variable">-a</span> <span class="token number">123456</span> <span class="token parameter variable">--cluster</span> add-node <span class="token number">10.0</span>.0.78:6379 <span class="token operator">&lt;</span>任意集群节点<span class="token operator">></span>:6379 --cluster-slave --cluster-master-id <span class="token operator">&lt;</span>master ID<span class="token operator">></span><span class="token comment">#直接加为slave节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster add-node 192.168.1.17:6379 192.168.1.10:6379 --cluster-slave --cluster-master-id 3773d6d8b7f679b9d36545af0df3ed2f189aedc3</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token operator">>></span><span class="token operator">></span> Adding <span class="token function">node</span> <span class="token number">192.168</span>.1.17:6379 to cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token operator">>></span><span class="token operator">></span> Send CLUSTER MEET to <span class="token function">node</span> <span class="token number">192.168</span>.1.17:6379 to <span class="token function">make</span> it <span class="token function">join</span> the cluster.Waiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token operator">>></span><span class="token operator">></span> Configure <span class="token function">node</span> as replica of <span class="token number">192.168</span>.1.16:6379.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> New <span class="token function">node</span> added correctly.<span class="token comment">#验证是否添加成功</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:8cluster_size:4cluster_current_epoch:8cluster_my_epoch:1cluster_stats_messages_ping_sent:3337cluster_stats_messages_pong_sent:3323cluster_stats_messages_fail_sent:4cluster_stats_messages_auth-ack_sent:1cluster_stats_messages_update_sent:9cluster_stats_messages_sent:6674cluster_stats_messages_ping_received:3316cluster_stats_messages_pong_received:7433cluster_stats_messages_meet_received:7cluster_stats_messages_fail_received:1cluster_stats_messages_auth-req_received:1cluster_stats_messages_received:10758</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式二：先将新节点加入集群，再修改为slave</span><span class="token comment">#将192.168.1.17添加到集群中。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster add-node 192.168.1.17:6379 192.168.1.10:6379</span><span class="token comment">#更改新节点更改状态为slave</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.17 -p 6379 -a 123456 --no-auth-warning</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODES <span class="token comment">##查看当前集群节点，找到目标master的ID</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER REPLICATE 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token comment">#将其设置slave，命令格式为CLUSTER REPLICATE MASTER_ID</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODES <span class="token comment">#再次查看集群节点状态，验证节点是否已经更改为指定master的slave</span></code></pre></div></figure><h3 id="4-3-2-集群维护之动态缩容"><a href="#4-3-2-集群维护之动态缩容" class="headerlink" title="4.3.2 集群维护之动态缩容"></a>4.3.2 集群维护之动态缩容</h3><p>场景：由于192.168.1.12服务器故障，需将现有Redis集群的8台主服务器中的master 192.168.1.12和对应的slave 192.168.1.13下线。</p><p><strong>删除节点过程：</strong>添加节点的时候是先添加node节点到集群，然后分配槽位，删除节点的操作与添加节点的操作正好相反，是先将被要删除的Redis node上的槽位迁移到集群中的其他Redis node节点上，然后再将其删除，如果一个Redis node节点上的槽位没有被完全迁移，删除该node的时候会提示有数据且无法删除。  </p><p><strong>注意: 被迁移Redis master源服务器必须保证没有数据，否则迁移报错并会被强制中断。</strong></p><p><strong>迁移master 的槽位之其他master ：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment">#  redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#连接到任意集群节点，#最后1365个slot从192.168.1.12移动到第一个master节点192.168.1.10上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster reshard 192.168.1.10:6379</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.How many slots <span class="token keyword">do</span> you want to move <span class="token punctuation">(</span>from <span class="token number">1</span> to <span class="token number">16384</span><span class="token punctuation">)</span>? <span class="token number">1356</span> <span class="token comment">#共4096/3分别给其它三个master节点</span>What is the receiving <span class="token function">node</span> ID? 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token comment">#要迁移哪个master的ID(192.168.1.10的ID)</span>Please enter all the <span class="token builtin class-name">source</span> <span class="token function">node</span> IDs.  Type <span class="token string">'all'</span> to use all the nodes as <span class="token builtin class-name">source</span> nodes <span class="token keyword">for</span> the <span class="token builtin class-name">hash</span> slots.  Type <span class="token string">'done'</span> once you entered all the <span class="token builtin class-name">source</span> nodes IDs.Source <span class="token function">node</span> <span class="token comment">#1: b666f51a7819dffa33669f5f8a809122e5ce92d6 #输入要删除节点192.168.1.12的ID</span>Source <span class="token function">node</span> <span class="token comment">#2: done</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    Moving slot <span class="token number">13636</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13637</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13638</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13639</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13640</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13641</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13642</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13643</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6Do you want to proceed with the proposed reshard plan <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span><span class="token comment">#非交互式方式:再将1365个slot从192.168.1.12移动到第二个master节点192.168.1.15上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster reshard 192.168.1.10:6379 --cluster-slots 1365 --cluster-from b666f51a7819dffa33669f5f8a809122e5ce92d6 --cluster-to e94943e4670476e4c39bf0d7acc7a8ad114314da --cluster-yes</span><span class="token comment">#最后的slot从192.168.1.12移动到第三个master节点192.168.1.16上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster reshard 192.168.1.10:6379 --cluster-slots 1375 --cluster-from b666f51a7819dffa33669f5f8a809122e5ce92d6 --cluster-to 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 --cluster-yes</span><span class="token comment">#确认192.168.1.12的所有slot都移走了，上面的slave也自动删除，成为其它master的slave</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3351</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">0</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3335</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3314</span> keys <span class="token operator">|</span> <span class="token number">5471</span> slots <span class="token operator">|</span> <span class="token number">2</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">12288</span>-13643<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5452</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> masterM: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13644</span>-15008<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15009</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5471</span> slots<span class="token punctuation">)</span> master   <span class="token number">2</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure><p><strong>从集群删除服务器：</strong></p><p>虽然槽位已经迁移完成，但是服务器IP信息还在集群当中，因此还需要将IP信息从集群删除。</p><p><strong>注意: 删除服务器前,必须清除主机上面的槽位,否则会删除主机失败。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-a</span> <span class="token number">123456</span> <span class="token parameter variable">--cluster</span> del-node <span class="token operator">&lt;</span>任意cluster节点的IP:port<span class="token operator">></span> <span class="token operator">&lt;</span>删除节点的ID<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster del-node 192.168.1.10:6379 b666f51a7819dffa33669f5f8a809122e5ce92d6</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> b666f51a7819dffa33669f5f8a809122e5ce92d6 from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER RESET SOFT to the deleted node.<span class="token comment">#删除多余的slave从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster del-node 192.168.1.10:6379 4a7175160eb05b564006690320e15837e4f2698f</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 4a7175160eb05b564006690320e15837e4f2698f from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER RESET SOFT to the deleted node.<span class="token comment">#查看集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3351</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3335</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3314</span> keys <span class="token operator">|</span> <span class="token number">5471</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">3</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">12288</span>-13643<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5452</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13644</span>-15008<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15009</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5471</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).Redis哨兵机制</title>
    <link href="/2023/02/18/NoSQL/Redis/redis05/"/>
    <url>/2023/02/18/NoSQL/Redis/redis05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis哨兵-Sentinel-机制"><a href="#1-Redis哨兵-Sentinel-机制" class="headerlink" title="1.Redis哨兵(Sentinel)机制"></a>1.Redis哨兵(Sentinel)机制</h1><p>主从架构无法实现master和slave角色的自动切换，即当master出现redis服务异常，主机断电，磁盘损坏等问题导致master无法使用，而redis主从复制无法实现自动的故障转移(将slave自动提升为新master)，需要手动修改配置，才能切换到slave redis服务器，另外当单台Redis服务器性能无法满足业务写入需求的时候，也无法横向扩展redis服务的并行写入性能。</p><h2 id="1-1-Sentinel工作原理"><a href="#1-1-Sentinel工作原理" class="headerlink" title="1.1 Sentinel工作原理"></a>1.1 Sentinel工作原理</h2><ol><li>Sentinel进程是用于监控redis集群中master主服务器工作的状态，在master主服务器发生故障的时候，可以实现master和slave服务器的切换，保证系统的高可用。</li><li>Sentinel是一个分布式系统，可以在一个架构中运行多个Sentinel进程，这些进程使用gossip protocols来接收关于master主服务器是否下线的信息，并使用投票协议(Agreement Protocols)来决定是否执行自动故障迁移，以及选择哪个slave作为新的master。</li><li>每个Sentinel进程会向其它Sentinel、master、slave定时发送消息，以确定对方是否”存活”，如果发现对方在指定配置时间内未得到回应，则暂时认为对方已离线，即宕机。</li><li>当Sentinel集群中多数的Sentinel进程在对master主服务器做出down的判断，并且通过SENTINEL is-master-down-by-addr命令互相交流之后，得出的master服务器下线的判断。</li><li>通过一定的vote算法，从剩下的slave从服务器节点中，选一台提升为master服务器节点，然后自动修改相关配置，并开启故障转移(failover)。</li></ol><ul><li>Sentinel机制可以解决master和slave角色的自动切换问题，但单个 Master 的性能瓶颈问题无法解决,类似于MySQL中的MHA功能。</li><li>Redis Sentinel中的Sentinel节点个数应该为大于等于3且最好为奇数。</li><li>客户端初始化时连接的是Sentinel节点集合，不再是具体的Redis节点，但Sentinel只是配置中心不是代理。</li><li>Redis Sentinel 节点与普通redis 没有区别,要实现读写分离依赖于客户端程序。</li><li>redis 3.0 之前版本中,生产环境一般使用哨兵模式,3.0后推出redis cluster功能,可以支持更大规模的生产环境。</li></ul><p><strong>Sentinel中的三个定时任务：</strong></p><ul><li>每10s每个Sentinel对master和slave执行info<ul><li>发现slave节点</li><li>确认主从关系</li></ul></li><li>每2s每个Sentinel通过master节点的channel交换信息（pub&#x2F;sub）<ul><li>通过sentinel__:hello频道交互。</li><li>交互对节点的“看法”和自身信息。</li></ul></li><li>每1s每个Sentinel对其它Sentinel和redis执行ping</li></ul><p><img src="/2023/02/18/NoSQL/Redis/redis05/image-20230226102632664.png" alt="image-20230226102632664">  </p><h2 id="1-2-配置Sentinel机制"><a href="#1-2-配置Sentinel机制" class="headerlink" title="1.2 配置Sentinel机制"></a>1.2 配置Sentinel机制</h2><h3 id="1-2-1-配置清单"><a href="#1-2-1-配置清单" class="headerlink" title="1.2.1 配置清单"></a>1.2.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>master</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr></tbody></table><h3 id="1-2-2-安装redis配置主从"><a href="#1-2-2-安装redis配置主从" class="headerlink" title="1.2.2 安装redis配置主从"></a>1.2.2 安装redis配置主从</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台主机安装redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span><span class="token comment">#三台主机配置redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e 's/^# masterauth .*/masterauth 123456/' -e 's/^# requirepass .*/requirepass 123456/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/protected-mode yes/protected-mode no/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@daemonize no@daemonize yes@' /etc/redis.conf</span><span class="token comment">#两台从节点配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token comment">#查看master服务器状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:2slave0:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">15</span>,lag<span class="token operator">=</span><span class="token number">1</span>slave1:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">15</span>,lag<span class="token operator">=</span><span class="token number">0</span>master_repl_offset:15repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:14</code></pre></div></figure><h3 id="1-2-3-配置哨兵文件"><a href="#1-2-3-配置哨兵文件" class="headerlink" title="1.2.3 配置哨兵文件"></a>1.2.3 配置哨兵文件</h3><p>Sentinel实际上是一个特殊的redis服务器,有些redis指令支持,但很多指令并不支持，默认监听在26379&#x2F;tcp端口。哨兵可以不和Redis服务器部署在一起，但一般部署在一起以节约成本。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三个哨兵服务器的配置都如下</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># grep -vE "^#|^$" /etc/redis-sentinel.conf</span>port <span class="token number">26379</span><span class="token function">dir</span> /tmpsentinel monitor mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span> <span class="token number">2</span>sentinel auth-pass mymaster <span class="token number">123456</span>sentinel down-after-milliseconds mymaster <span class="token number">3000</span>sentinel parallel-syncs mymaster <span class="token number">1</span>sentinel failover-timeout mymaster <span class="token number">180000</span>logfile /var/log/redis/sentinel.logprotected-mode no<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/redis-sentinel.conf 192.168.1.11:/etc/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/redis-sentinel.conf 192.168.1.12:/etc/</span></code></pre></div></figure><h3 id="1-2-4-启动哨兵"><a href="#1-2-4-启动哨兵" class="headerlink" title="1.2.4 启动哨兵"></a>1.2.4 启动哨兵</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动哨兵服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis-sentinel.service</span><span class="token comment">#验证哨兵端口</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ss -tnl | grep 26379</span>LISTEN     <span class="token number">0</span>      <span class="token number">128</span>          *:26379                    *:*                  LISTEN     <span class="token number">0</span>      <span class="token number">128</span>       <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:26379                 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*<span class="token comment">#当前sentinel状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 26379</span><span class="token number">127.0</span>.0.1:2637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info sentinel<span class="token comment"># Sentinel</span>sentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>ok,address<span class="token operator">=</span><span class="token number">192.168</span>.1.10:6379,slaves<span class="token operator">=</span><span class="token number">2</span>,sentinels<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#两个slave,三个sentinel服务器</span></code></pre></div></figure><h3 id="1-2-5-模拟故障"><a href="#1-2-5-模拟故障" class="headerlink" title="1.2.5 模拟故障"></a>1.2.5 模拟故障</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止Redis Master 节点测试故障转移。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop redis</span><span class="token comment">#查看故障后的master信息</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 -p 26379</span><span class="token number">127.0</span>.0.1:2637<span class="token operator"><span class="token file-descriptor important">9</span>></span> INFO sentinel<span class="token comment"># Sentinel</span>sentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>ok,address<span class="token operator">=</span><span class="token number">192.168</span>.1.11:6379,slaves<span class="token operator">=</span><span class="token number">2</span>,sentinels<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#192.168.1.11成为master</span><span class="token comment">#查看故障转移日志</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.489 <span class="token comment"># +sdown master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +odown master mymaster 192.168.1.10 6379 #quorum 2/2</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +new-epoch 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +try-failover master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.549 <span class="token comment"># +vote-for-leader 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.556 <span class="token comment"># e4d8eb124ef9f7f4da200e1df4120c718ef80cf8 voted for 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.559 <span class="token comment"># 4a808bd8597172995513ffeb6acdca019ce66d77 voted for 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.606 <span class="token comment"># +elected-leader master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.606 <span class="token comment"># +failover-state-select-slave master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.666 <span class="token comment"># +selected-slave slave 192.168.1.11:6379 192.168.1.11 6379 @ mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.667 * +failover-state-send-slaveof-noone slave <span class="token number">192.168</span>.1.11:6379 <span class="token number">192.168</span>.1.11 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.734 * +failover-state-wait-promotion slave <span class="token number">192.168</span>.1.11:6379 <span class="token number">192.168</span>.1.11 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.579 <span class="token comment"># +promoted-slave slave 192.168.1.11:6379 192.168.1.11 6379 @ mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.579 <span class="token comment"># +failover-state-reconf-slaves master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.632 * +slave-reconf-sent slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.603 * +slave-reconf-inprog slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.603 * +slave-reconf-done slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># -odown master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># +failover-end master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># +switch-master mymaster 192.168.1.10 6379 192.168.1.11 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.673 * +slave slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.673 * +slave slave <span class="token number">192.168</span>.1.10:6379 <span class="token number">192.168</span>.1.10 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:52.676 <span class="token comment"># +sdown slave 192.168.1.10:6379 192.168.1.10 6379 @ mymaster 192.168.1.11 6379</span><span class="token comment">#故障转移后的redis配置文件会被自动修改，故障转移后redis.conf中的slaveof行的master IP会被修改</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># grep ^slaveof /etc/redis.conf</span>slaveof <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token comment">#当故障节点恢复后，会自动为从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># grep ^slaveof /etc/redis.conf</span>slaveof <span class="token number">192.168</span>.1.11 <span class="token number">6379</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).Redis主从复制</title>
    <link href="/2023/02/18/NoSQL/Redis/redis04/"/>
    <url>/2023/02/18/NoSQL/Redis/redis04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis主从复制"><a href="#1-Redis主从复制" class="headerlink" title="1.Redis主从复制"></a>1.Redis主从复制</h1><p>虽然Redis可以实现单机的数据持久化，但无论是RDB也好或者AOF也好，都解决不了单点宕机问题。此外,单机的性能也是有极限的,因此需要使用另外的技术来解决单点故障和性能扩展的问题。</p><h2 id="1-1-Redis主从复制架构"><a href="#1-1-Redis主从复制架构" class="headerlink" title="1.1 Redis主从复制架构"></a>1.1 Redis主从复制架构</h2><p>主从模式（master&#x2F;slave），可以实现Redis数据的跨主机备份。  程序端连接到高可用负载的VIP，然后连接到负载服务器设置的Redis后端real server，此模式不需要在程序里面配 置Redis服务器的真实IP地址，当后期Redis服务器IP地址发生变更只需要更改redis 相应的后端real server即可， 可避免更改程序中的IP地址设置。</p><p><img src="/2023/02/18/NoSQL/Redis/redis04/image-20230227210731764.png" alt="image-20230227210731764">  </p><h2 id="1-2-配置Redis主从"><a href="#1-2-配置Redis主从" class="headerlink" title="1.2 配置Redis主从"></a>1.2 配置Redis主从</h2><h3 id="1-2-1-配置清单"><a href="#1-2-1-配置清单" class="headerlink" title="1.2.1 配置清单"></a>1.2.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>master</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr></tbody></table><h3 id="1-2-2-安装redis"><a href="#1-2-2-安装redis" class="headerlink" title="1.2.2 安装redis"></a>1.2.2 安装redis</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台主机安装redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span><span class="token comment">#三台主机配置redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e 's/^# masterauth .*/masterauth 123456/' -e 's/^# requirepass .*/requirepass 123456/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/protected-mode yes/protected-mode no/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@daemonize no@daemonize yes@' /etc/redis.conf</span></code></pre></div></figure><h3 id="1-2-3-配置Redis主从"><a href="#1-2-3-配置Redis主从" class="headerlink" title="1.2.3 配置Redis主从"></a>1.2.3 配置Redis主从</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#两台从节点配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span></code></pre></div></figure><h3 id="1-2-4-查看主从状态"><a href="#1-2-4-查看主从状态" class="headerlink" title="1.2.4 查看主从状态"></a>1.2.4 查看主从状态</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看master状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:2slave0:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">43</span>,lag<span class="token operator">=</span><span class="token number">1</span>slave1:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">43</span>,lag<span class="token operator">=</span><span class="token number">1</span>master_repl_offset:57repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:56<span class="token comment">#查看slave状态</span><span class="token comment">#在从节点执行 REPLIATOF NO ONE 指令可以取消主从复制</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:slavemaster_host:192.168.1.10master_port:6379master_link_status:upmaster_last_io_seconds_ago:0master_sync_in_progress:0slave_repl_offset:85slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0</code></pre></div></figure><h3 id="1-2-5-验证主从数据同步"><a href="#1-2-5-验证主从数据同步" class="headerlink" title="1.2.5 验证主从数据同步"></a>1.2.5 验证主从数据同步</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#master添加key</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> chs <span class="token number">1</span>OK<span class="token comment">#slave查看key</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get chs<span class="token string">"1"</span><span class="token comment">#slave状态只读无法写入数据</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can't <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only slave.</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Redis持久化</title>
    <link href="/2023/02/16/NoSQL/Redis/redis03/"/>
    <url>/2023/02/16/NoSQL/Redis/redis03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis持久化"><a href="#1-Redis持久化" class="headerlink" title="1.Redis持久化"></a>1.Redis持久化</h1><p>Redis虽然是一个内存级别的缓存程序，也就是redis 是使用内存进行数据的缓存的，但是其可以将内存的数据按照一定的策略保存到硬盘上，从而实现数据持久保存的目的。目前Redis支持两种不同方式的数据持久化保存机制，分别是RDB和AOF。</p><h2 id="1-1-RDB模式"><a href="#1-1-RDB模式" class="headerlink" title="1.1 RDB模式"></a>1.1 RDB模式</h2><h3 id="1-1-1-RDB工作原理"><a href="#1-1-1-RDB工作原理" class="headerlink" title="1.1.1 RDB工作原理"></a>1.1.1 RDB工作原理</h3><p>RDB(Redis DataBase)：基于时间的快照，其默认只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前时间点之间未做快照的数据。</p><p>Redis从master主进程先fork出一个子进程，使用写时复制机制，子进程将内存的数据保存为一个临时文件，比如：tmp-.rdb，当数据保存完成之后再将上一次保存的RDB文件替换掉，然后关闭子进程，这样可以保证每一次做RDB快照保存的数据都是完整的。</p><p>因为直接替换RDB文件的时候，可能会出现突然断电等问题，而导致RDB文件还没有保存完整就因为突然关机停止保存，而导致数据丢失的情况，后续可以手动将每次生成的RDB文件进行备份，这样可以最大化保存历史数据。</p><p><img src="/2023/02/16/NoSQL/Redis/redis03/image-20230226094557677.png" alt="image-20230226094557677">  </p><h3 id="1-1-2-RDB相关配置"><a href="#1-1-2-RDB相关配置" class="headerlink" title="1.1.2 RDB相关配置"></a>1.1.2 RDB相关配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SNAPSHOTTING  ################################</span>save <span class="token number">3600</span> <span class="token number">1</span> <span class="token comment">#在900秒内有1个key内容发生更改,就执行快照机制</span>save <span class="token number">300</span> <span class="token number">100</span> <span class="token comment">#在300秒内有10个key内容发生更改,就执行快照机制</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment">#60秒内如果有10000个key以上的变化，就自动快照备份</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment">#默认为yes时,可能会因空间满等原因快照无法保存出错时，会禁止redis写入操作，生产建议为no</span>rdbcompression <span class="token function">yes</span> <span class="token comment">#持久化到RDB文件时，是否压缩，"yes"为压缩，"no"则反之</span>rdbchecksum <span class="token function">yes</span> <span class="token comment">#是否对备份文件开启RC64校验，默认是开启</span>dbfilename dump.rdb <span class="token comment">#快照文件名</span>rdb-del-sync-files no<span class="token function">dir</span> ./ <span class="token comment">#快照文件保存路径</span></code></pre></div></figure><h3 id="1-1-3-配置RDB模式"><a href="#1-1-3-配置RDB模式" class="headerlink" title="1.1.3 配置RDB模式"></a>1.1.3 配置RDB模式</h3><ul><li>save：同步，会阻塞其它命令，不推荐使用。</li><li>bgsave：异步后台执行，不影响其它命令的执行。</li><li>自动：制定规则，自动执行。</li></ul><h3 id="1-1-4-RDB模式优缺点"><a href="#1-1-4-RDB模式优缺点" class="headerlink" title="1.1.4 RDB模式优缺点"></a>1.1.4 RDB模式优缺点</h3><p>优点：</p><ul><li>RDB快照保存了某个时间点的数据，可以通过脚本执行redis指令bgsave(非阻塞，后台执行)或者save(会阻塞写操作,不推荐)命令自定义时间点备份，可以保留多个备份，当出现问题可以恢复到不同时间点的版本,很适合备份,并且此文件格式也支持有不少第三方工具可以进行后续的数据分析。比如: 可以在最近的24小时内，每小时备份一次RDB文件，并且在每个月的每一天，也备份一个RDB文件。这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li><li>RDB可以最大化Redis的性能，父进程在保存 RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I&#x2F;O 操作。</li><li>RDB在大量数据,比如几个G的数据，恢复的速度比AOF的快。</li></ul><p>缺点：</p><ul><li><p>不能实时保存数据，可能会丢失自上一次执行RDB备份到当前的内存数据。</p><p>如果你需要尽量避免在服务器故障时丢失数据，那么RDB并不适合。虽然Redis允许设置不同的保存点（save point）来控制保存RDB文件的频率，但是，因为RDB文件需要保存整个数据集的状态，所以它并不是一个轻松快速的操作。因此一般会超过5分钟以上才保存一次RDB文件。在这种情况下，一旦发生故障停机，你就可能会丢失好几分钟的数据。</p></li><li><p>当数据量非常大的时候，从父进程fork子进程进行保存至RDB文件时需要一点时间，可能是毫秒或者秒，取决于磁盘IO性能。 </p><p>在数据集比较庞大时，fork()可能会非常耗时，造成服务器在一定时间内停止处理客户端﹔如果数据集非常巨大，并且CPU时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒或更久。虽然 AOF重写也需要进行fork()，但无论AOF重写的执行间隔有多长，数据的持久性都不会有任何损失。</p></li></ul><h2 id="1-2-AOF模式"><a href="#1-2-AOF模式" class="headerlink" title="1.2 AOF模式"></a>1.2 AOF模式</h2><h3 id="1-2-1-AOF工作原理"><a href="#1-2-1-AOF工作原理" class="headerlink" title="1.2.1 AOF工作原理"></a>1.2.1 AOF工作原理</h3><p>AOF：AppendOnylFile，按照操作顺序依次将操作追加到指定的日志文件末尾。</p><p>AOF 和 RDB 一样使用了写时复制机制，AOF默认为每秒钟 fsync一次，即将执行的命令保存到AOF文件当中，这样即使redis服务器发生故障最多只丢失1秒钟之内的数据，也可以设置不同的fsync策略always，即设置每次执行命令的时候执行fsync，fsync会在后台执行线程，所以主线程可以继续处理用户的正常请求而不受到写入AOF文件的I&#x2F;O影响。</p><p>同时启用RDB和AOF,进行恢复时,默认AOF文件优先级高于RDB文件,即会使用AOF文件进行恢复。</p><p><img src="/2023/02/16/NoSQL/Redis/redis03/image-20230226100125771.png" alt="image-20230226100125771">  </p><h3 id="1-2-2-AOF相关配置"><a href="#1-2-2-AOF相关配置" class="headerlink" title="1.2.2 AOF相关配置"></a>1.2.2 AOF相关配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment">##是否开启AOF日志记录，默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了，但是redis如果中途宕机，会导致可能有几分钟的数据丢失(取决于dump数据的间隔时间)，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认不启用此功能。</span>appendonly noappendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#文本文件AOF的文件名，存放在dir指令指定的目录中</span><span class="token comment">#aof持久化策略的配置</span><span class="token comment">#no表示由操作系统保证数据同步到磁盘,Linux的默认fsync策略是30秒，最多会丢失30s的数据</span><span class="token comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘,安全性高,性能较差</span><span class="token comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据,此为默认值,也生产建议值</span>appendfsync everysec<span class="token comment">#同时在执行bgrewriteaof操作和主进程写aof文件的操作，两者都会操作磁盘，而bgrewriteaof往往会涉及大量磁盘操作，这样就会造成主进程在写aof文件的时候出现阻塞的情形,以下参数实现控制。</span><span class="token comment">##在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。</span><span class="token comment">#默认为no,表示"不暂缓",新的aof记录仍然会被立即同步到磁盘，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。</span><span class="token comment">#yes,相当于将appendfsync设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候redis挂掉，就会丢失数据。丢失多少数据呢？Linux的默认fsync策略是30秒，最多会丢失30s的数据,但由于yes性能较好而且会避免出现阻塞因此比较推荐。</span><span class="token comment">#rewrite 即对aof文件进行整理,将空闲空间回收,从而可以减少恢复数据时间。</span>no-appendfsync-on-rewrite noauto-aof-rewrite-percentage <span class="token number">100</span> <span class="token comment">#当Aof log增长超过指定百分比例时，重写AOF文件，设置为0表示不自动重写Aof日志，重写是为了使aof体积保持最小，但是还可以确保保存最完整的数据。</span>auto-aof-rewrite-min-size 64mb <span class="token comment">#触发aof rewrite的最小文件大小</span>aof-load-truncated <span class="token function">yes</span> <span class="token comment">#是否加载由于某些原因导致的末尾异常的AOF文件(主进程被kill/断电等)，建议yes。</span><span class="token comment">#redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内容则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</span>aof-use-rdb-preamble <span class="token function">yes</span></code></pre></div></figure><h3 id="1-2-3-配置AOF模式"><a href="#1-2-3-配置AOF模式" class="headerlink" title="1.2.3 配置AOF模式"></a>1.2.3 配置AOF模式</h3><h3 id="1-2-4-AOF模式优缺点"><a href="#1-2-4-AOF模式优缺点" class="headerlink" title="1.2.4 AOF模式优缺点"></a>1.2.4 AOF模式优缺点</h3><p>优点：</p><ul><li>数据安全性相对较高，根据所使用的fsync策略(fsync是同步内存中redis所有已经修改的文件到存储设备)，默认是appendfsync everysec，即每秒执行一次 fsync,在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据( fsync会在后台线程执行，所以主线程可以继续努力地处理命令请求)  。</li><li>由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中不需要seek, 即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，可以通过 redis-check-aof 工具来解决数据一致性的问题。</li><li>Redis可以在 AOF文件体积变得过大时，自动地在后台对AOF进行重写,重写后的新AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建新 AOF文件的过程中，append模式不断的将修改数据追加到现有的 AOF文件里面，即使重写过程中发生停机，现有的 AOF文件也不会丢失。而一旦新AOF文件创建完毕，Redis就会从旧AOF文件切换到新AOF文件，并开始对新AOF文件进行追加操作。</li><li>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，也可以通过该文件完成数据的重建。AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以Redis协议的格式保存，因此 AOF文件的内容非常容易被人读懂，对文件进行分析(parse)也很轻松。导出（export)AOF文件也非常简单:举个例子，如果不小心执行了FLUSHALL.命令，但只要AOF文件未被重写，那么只要停止服务器，移除 AOF文件末尾的FLUSHAL命令，并重启Redis ,就可以将数据集恢复到FLUSHALL执行之前的状态。</li></ul><p>缺点：</p><ul><li>即使有些操作是重复的也会全部记录，AOF 的文件大小要大于 RDB 格式的文件。</li><li>AOF 在恢复大数据集时的速度比 RDB 的恢复速度要慢。</li><li>根据fsync策略不同,AOF速度可能会慢于RDB。</li><li>bug 出现的可能性更多。</li></ul><h2 id="1-3-RDB和AOF的选择"><a href="#1-3-RDB和AOF的选择" class="headerlink" title="1.3 RDB和AOF的选择"></a>1.3 RDB和AOF的选择</h2><ul><li><p>如果主要充当缓存功能,或者可以承受数分钟数据的丢失, 通常生产环境一般只需启用RDB即可，此也是默认值。</p></li><li><p>如果数据需要持久保存,一点不能丢失,可以选择同时开启RDB和AOF。</p></li><li><p>一般不建议只开启AOF。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Redis配置详解</title>
    <link href="/2023/02/16/NoSQL/Redis/redis02/"/>
    <url>/2023/02/16/NoSQL/Redis/redis02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis配置详解"><a href="#1-Redis配置详解" class="headerlink" title="1.Redis配置详解"></a>1.Redis配置详解</h1><h2 id="1-1-Redis配置"><a href="#1-1-Redis配置" class="headerlink" title="1.1 Redis配置"></a>1.1 Redis配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## NETWORK #####################################</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1 <span class="token comment">#监听地址，可以用空格隔开后多个监听IP</span>protected-mode <span class="token function">yes</span> <span class="token comment">#redis3.2之后加入的新特性，在没有设置bind IP和密码的时候,redis只允许访问127.0.0.1:6379，可以远程连接，但当访问将提示警告信息并拒绝远程访问。</span>port <span class="token number">6379</span> <span class="token comment">#监听端口,默认6379/tcp</span>tcp-backlog <span class="token number">511</span> <span class="token comment">#三次握手的时候server端收到client ack确认号之后的队列值，即全连接队列长度</span>unixsocket /run/redis.sock unixsocketperm <span class="token number">700</span><span class="token function">timeout</span> <span class="token number">0</span> <span class="token comment">#客户端和Redis服务端的连接超时时间，默认是0，表示永不超时</span>tcp-keepalive <span class="token number">300</span> <span class="token comment">#tcp 会话保持时间300s</span><span class="token comment">################################# GENERAL #####################################</span>daemonize no <span class="token comment">#默认no,即直接运行redis-server程序时,不作为守护进程运行，而是以前台方式运行，如果想在后台运行需改成yes,当redis作为守护进程运行的时候，它会写一个pid到/var/run/redis.pid文件。</span>supervised auto <span class="token comment">#和OS相关参数，可设置通过upstart和systemd管理Redis守护进程，centos7后都使用systemd。</span>pidfile /var/run/redis_6379.pid <span class="token comment">#pid文件路径</span>loglevel notice <span class="token comment">#日志级别</span>logfile <span class="token string">""</span> <span class="token comment">#日志路径</span>syslog-enabled nosyslog-ident redissyslog-facility local0databases <span class="token number">16</span> <span class="token comment">#设置数据库数量，默认：0-15，共16个库</span>always-show-logo no<span class="token comment">#在启动redis 时是否显示或在日志中记录记录redis的logo</span><span class="token comment">################################ SNAPSHOTTING  ################################</span>save <span class="token number">3600</span> <span class="token number">1</span> <span class="token comment">#在900秒内有1个key内容发生更改,就执行快照机制</span>save <span class="token number">300</span> <span class="token number">100</span> <span class="token comment">#在300秒内有10个key内容发生更改,就执行快照机制</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment">#60秒内如果有10000个key以上的变化，就自动快照备份</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment">#默认为yes时,可能会因空间满等原因快照无法保存出错时，会禁止redis写入操作，生产建议为no</span>rdbcompression <span class="token function">yes</span> <span class="token comment">#持久化到RDB文件时，是否压缩，"yes"为压缩，"no"则反之</span>rdbchecksum <span class="token function">yes</span> <span class="token comment">#是否对备份文件开启RC64校验，默认是开启</span>dbfilename dump.rdb <span class="token comment">#快照文件名</span>rdb-del-sync-files no<span class="token function">dir</span> ./ <span class="token comment">#快照文件保存路径</span><span class="token comment">################################# REPLICATION #################################</span>replicaof <span class="token operator">&lt;</span>masterip<span class="token operator">></span> <span class="token operator">&lt;</span>masterport<span class="token operator">></span> <span class="token comment">#指定复制的master主机地址和端口，5.0版之前的指令为slaveof</span>masteruser <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token comment">#指定复制的master主机的密码</span><span class="token comment">#当从库同主库失去连接或者复制正在进行，从机库有两种运行方式：</span><span class="token comment">#1、设置为yes(默认设置)，从库会继续响应客户端的读请求，此为建议值</span><span class="token comment">#2、设置为no，除去特定命令外的任何请求都会返回一个错误"SYNC with master in progress"。</span>replica-serve-stale-data <span class="token function">yes</span>replica-read-only <span class="token function">yes</span> <span class="token comment">#是否设置从库只读，建议值为yes,否则主库同步从库时可能会覆盖数据，造成数据丢失。</span><span class="token comment">#是否使用socket方式复制数据(无盘同步)，新slave第一次连接master时需要做数据的全量同步，redis server就要从内存dump出新的RDB文件，然后从master传到slave，有两种方式把RDB文件传输给客户端：</span><span class="token comment">#1.基于硬盘（disk-backed）：为no时，master创建一个新进程dump生成RDB磁盘文件，RDB完成之后由父进程（即主进程）将RDB文件发送给slaves，此为默认值。</span><span class="token comment">#2.基于socket（diskless）：master创建一个新进程直接dump RDB至slave的网络socket，不经过主进程和硬盘。</span><span class="token comment">#推荐使用基于硬盘（为no），是因为RDB文件创建后，可以同时传输给更多的slave，但是基于socket(为yes)， 新slave连接到master之后得逐个同步数据。只有当磁盘I/O较慢且网络较快时，可用diskless(yes),否则一般建议使用磁盘(no)</span>repl-diskless-sync no<span class="token comment">#diskless时复制的服务器等待的延迟时间，设置0为关闭，在延迟时间内到达的客户端，会一起通过diskless方式同步数据，但是一旦复制开始，master节点不会再接收新slave的复制请求，直到下一次同步开始才再接收新请求。即无法为延迟时间后到达的新副本提供服务，新副本将排队等待下一次RDB传输，因此服务器会等待一段时间才能让更多副本到达。推荐值：30-60</span>repl-diskless-sync-delay <span class="token number">5</span>repl-diskless-load disabledrepl-ping-replica-period <span class="token number">10</span> <span class="token comment">#slave根据master指定的时间进行周期性的PING master,用于监测master状态,默认10s</span>repl-timeout <span class="token number">60</span> <span class="token comment">#复制连接的超时时间，需要大于repl-ping-slave-period，否则会经常报超时。</span><span class="token comment">#是否在slave套接字发送SYNC之后禁用 TCP_NODELAY，如果选择"yes"，Redis将合并多个报文为一个大的报文，从而使用更少数量的包向slaves发送数据，但是将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒，如果 "no" ，数据传输到slave的延迟将会减少，但要使用更多的带宽。</span>repl-disable-tcp-nodelay no<span class="token comment">#复制缓冲区内存大小，当slave断开连接一段时间后，该缓冲区会累积复制副本数据，因此当slave 重新连接时，通常不需要完全重新同步，只需传递在副本中的断开连接后没有同步的部分数据即可。只有在至少有一个slave连接之后才分配此内存空间,建议建立主从时此值要调大一些或在低峰期配置,否则会导致同步到slave失败。</span>repl-backlog-size 1mbrepl-backlog-ttl <span class="token number">3600</span> <span class="token comment">#多长时间内master没有slave连接，就清空backlog缓冲区</span>replica-priority <span class="token number">100</span> <span class="token comment">#当master不可用，哨兵Sentinel会根据slave的优先级选举一个master，此值最低的slave会优先当选master，而配置成0，永远不会被选举，一般多个slave都设为一样的值，让其自动选择。</span><span class="token comment">################################## SECURITY ###################################</span>acllog-max-len <span class="token number">128</span>requirepass foobared <span class="token comment">#设置redis连接密码，之后需要AUTH pass,如果有特殊符号，用" "引起来,生产建议设置。</span>rename-command CONFIG <span class="token string">""</span> <span class="token comment">#重命名一些高危命令</span><span class="token comment">################################### CLIENTS ####################################</span>maxclients <span class="token number">10000</span> <span class="token comment">#Redis最大连接客户端</span><span class="token comment">############################## MEMORY MANAGEMENT ################################</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span> <span class="token comment">#redis使用的最大内存，单位为bytes字节，0为不限制，建议设为物理内存一半，8G内存的计算方式8(G)*1024(MB)1024(KB)*1024(Kbyte)，需要注意的是缓冲区是不计算在maxmemory内,生产中如果不设置此项,可能会导致OOM。</span>maxmemory-samples <span class="token number">5</span><span class="token comment">############################# LAZY FREEING ####################################</span>lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush nolazyfree-lazy-user-del nolazyfree-lazy-user-flush no<span class="token comment">################################ THREADED I/O #################################</span>io-threads <span class="token number">4</span><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment">##是否开启AOF日志记录，默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了，但是redis如果中途宕机，会导致可能有几分钟的数据丢失(取决于dump数据的间隔时间)，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认不启用此功能。</span>appendonly noappendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#文本文件AOF的文件名，存放在dir指令指定的目录中</span><span class="token comment">#aof持久化策略的配置</span><span class="token comment">#no表示由操作系统保证数据同步到磁盘,Linux的默认fsync策略是30秒，最多会丢失30s的数据</span><span class="token comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘,安全性高,性能较差</span><span class="token comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据,此为默认值,也生产建议值</span>appendfsync everysec<span class="token comment">#同时在执行bgrewriteaof操作和主进程写aof文件的操作，两者都会操作磁盘，而bgrewriteaof往往会涉及大量磁盘操作，这样就会造成主进程在写aof文件的时候出现阻塞的情形,以下参数实现控制。</span><span class="token comment">##在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。</span><span class="token comment">#默认为no,表示"不暂缓",新的aof记录仍然会被立即同步到磁盘，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。</span><span class="token comment">#yes,相当于将appendfsync设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候redis挂掉，就会丢失数据。丢失多少数据呢？Linux的默认fsync策略是30秒，最多会丢失30s的数据,但由于yes性能较好而且会避免出现阻塞因此比较推荐。</span><span class="token comment">#rewrite 即对aof文件进行整理,将空闲空间回收,从而可以减少恢复数据时间。</span>no-appendfsync-on-rewrite noauto-aof-rewrite-percentage <span class="token number">100</span> <span class="token comment">#当Aof log增长超过指定百分比例时，重写AOF文件，设置为0表示不自动重写Aof日志，重写是为了使aof体积保持最小，但是还可以确保保存最完整的数据。</span>auto-aof-rewrite-min-size 64mb <span class="token comment">#触发aof rewrite的最小文件大小</span>aof-load-truncated <span class="token function">yes</span> <span class="token comment">#是否加载由于某些原因导致的末尾异常的AOF文件(主进程被kill/断电等)，建议yes。</span><span class="token comment">#redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内容则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</span>aof-use-rdb-preamble <span class="token function">yes</span><span class="token comment">################################ LUA SCRIPTING  ###############################</span>lua-time-limit <span class="token number">5000</span> <span class="token comment">#lua脚本的最大执行时间，单位为毫秒</span><span class="token comment">################################ REDIS CLUSTER  ###############################</span>cluster-enabled <span class="token function">yes</span> <span class="token comment">#是否开启集群模式，默认不开启,即单机模式。</span>cluster-config-file nodes-6379.conf <span class="token comment">#由node节点自动生成的集群配置文件名称。</span>cluster-node-timeout <span class="token number">15000</span> <span class="token comment">#集群中node节点连接超时时间，单位ms,超过此时间，会踢出集群。</span><span class="token comment">#单位为次,在执行故障转移的时候可能有些节点和master断开一段时间导致数据比较旧，这些节点就不适用于选举为master，超过这个时间的就不会被进行故障转移,不能当选master，计算公式：(node-timeout * replica-validity-factor) + repl-pingreplica-period。</span>cluster-replica-validity-factor <span class="token number">10</span>cluster-migration-barrier <span class="token number">1</span> <span class="token comment">#集群迁移屏障，一个主节点至少拥有1个正常工作的从节点，即如果主节点的slave节点故障后会将多余的从节点分配到当前主节点成为其新的从节点。</span>cluster-allow-replica-migration <span class="token function">yes</span><span class="token comment">#集群请求槽位全部覆盖，如果一个主库宕机且没有备库就会出现集群槽位不全，那么yes时redis集群槽位验证不全,就不再对外提供服务(对key赋值时,会出现CLUSTERDOWN The cluster is down的提示,cluster_state:fail,但ping 仍PONG)，而no则可以继续使用,但是会出现查询数据查不到的情况(因为有数据丢失)。生产建议为no</span>cluster-require-full-coverage <span class="token function">yes</span>cluster-replica-no-failover no <span class="token comment">#如果为yes,此选项阻止在主服务器发生故障时尝试对其主服务器进行故障转移。 但是，主服务器仍然可以执行手动强制故障转移，一般为no。</span>cluster-allow-reads-when-down no<span class="token comment">########################## CLUSTER DOCKER/NAT support  ########################</span>cluster-announce-ip <span class="token number">10.1</span>.1.5cluster-announce-tls-port <span class="token number">6379</span>cluster-announce-port <span class="token number">0</span>cluster-announce-bus-port <span class="token number">6380</span><span class="token comment">################################## SLOW LOG ###################################</span><span class="token comment">#Slow log 是 Redis 用来记录超过指定执行时间的日志系统，执行时间不包括与客户端交谈，发送回复等I/O操作，而是实际执行命令所需的时间（在该阶段线程被阻塞并且不能同时为其它请求提供服务）,由于slow log 保存在内存里面，读写速度非常快，因此可放心地使用，不必担心因为开启 slow log 而影响Redis的速度。</span>slowlog-log-slower-than <span class="token number">10000</span> <span class="token comment">#以微秒为单位的慢日志记录，为负数会禁用慢日志，为0会记录每个命令操作。默认值为10ms,一般一条命令执行都在微秒级,生产建议设为1ms-10ms之间。</span>slowlog-max-len <span class="token number">128</span> <span class="token comment">#最多记录多少条慢日志的保存队列长度，达到此长度后，记录新命令会将最旧的命令从命令队列中删除，以此滚动删除,即,先进先出,队列固定长度,默认128,值偏小,生产建议设为1000以上。</span></code></pre></div></figure><h2 id="1-2-CONFIG动态修改配置"><a href="#1-2-CONFIG动态修改配置" class="headerlink" title="1.2 CONFIG动态修改配置"></a>1.2 CONFIG动态修改配置</h2><p>config 命令用于查看当前redis配置、以及不重启redis服务实现动态更改redis配置等。不是所有配置都可以动态修改,且此方式无法持久保存。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置连接密码</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET requirepass <span class="token number">654321</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET requirepass<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"654321"</span><span class="token comment">#获取当前配置</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET *  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"rdbchecksum"</span>  <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"daemonize"</span>  <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"io-threads-do-reads"</span>  <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"no"</span>  <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"lua-replicate-commands"</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"always-show-logo"</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"protected-mode"</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"rdbcompression"</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"yes"</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token string">"rdb-del-sync-files"</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"activerehashing"</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token string">"yes"</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token string">"stop-writes-on-bgsave-error"</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token string">"yes"</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#更改最大内存</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET maxmemory <span class="token number">8589934592</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET maxmemory<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"maxmemory"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"8589934592"</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Redis简介及安装</title>
    <link href="/2023/02/16/NoSQL/Redis/redis01/"/>
    <url>/2023/02/16/NoSQL/Redis/redis01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis简介及安装"><a href="#1-Redis简介及安装" class="headerlink" title="1.Redis简介及安装"></a>1.Redis简介及安装</h1><h2 id="1-1-Redis简介"><a href="#1-1-Redis简介" class="headerlink" title="1.1 Redis简介"></a>1.1 Redis简介</h2><p>Redis是一个开源的、遵循BSD协议的、基于内存的而且目前比较流行的键值数据库(key-value database)，是一个非关系型数据库。</p><p>官方地址：<a href="https://redis.io/">https://redis.io/</a></p><p><strong>Redis特性：</strong></p><ul><li>速度快：10W QPS，基于内存，C语言实现。</li><li>单线程</li><li>持久化</li><li>支持多种数据结构</li><li>支持多种编程语言</li><li>功能丰富：支持Lua脚本，发布订阅，事务，Pipeline等功能</li><li>主从复制，支持高可用和分布式</li></ul><p><strong>Redis典型应用场景：</strong></p><ul><li>Session共享：常见于web集群中的Tomcat或者PHP中多web服务器session共享。</li><li>缓存：数据查询、电商网站商品信息、新闻内容。</li><li>计数器：访问排行榜、商品浏览数等和次数相关的数值统计场景。</li><li>微博&#x2F;微信社交场合：共同好友,粉丝数,关注,点赞评论等。</li><li>消息队列：ELK的日志缓存、部分业务的订阅发布系统。</li><li>地理位置：基于GEO(地理信息定位),实现摇一摇,附近的人,外卖等功能。</li></ul><h2 id="1-2-Redis安装"><a href="#1-2-Redis安装" class="headerlink" title="1.2 Redis安装"></a>1.2 Redis安装</h2><h3 id="1-2-1-yum安装Redis"><a href="#1-2-1-yum安装Redis" class="headerlink" title="1.2.1 yum安装Redis"></a>1.2.1 yum安装Redis</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS8由系统源提供</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf info redis | grep Version</span>Version      <span class="token builtin class-name">:</span> <span class="token number">5.0</span>.3<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#CentOS7由Epel源提供</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install epel-release</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum info redis | grep Version</span>Version     <span class="token builtin class-name">:</span> <span class="token number">3.2</span>.12<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span></code></pre></div></figure><h3 id="1-2-2-编译安装Redis"><a href="#1-2-2-编译安装Redis" class="headerlink" title="1.2.2 编译安装Redis"></a>1.2.2 编译安装Redis</h3><p>下载Release版本Redis 源码包： <a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装依赖包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc gcc-c++ systemd-devel</span><span class="token comment">#下载源码包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install wget</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://download.redis.io/releases/redis-6.2.9.tar.gz</span><span class="token comment">#解压源码包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf redis-6.2.9.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/redis-6.2.9/</span><span class="token comment">#编译安装</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># make PREFIX=/apps/redis install</span><span class="token comment">#配置redis环境变量</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/redis/bin:$PATH' > /etc/profile.d/redis.sh</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/redis.sh</span><span class="token comment">#创建相关目录和配置文件</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># mkdir /apps/redis/&#123;etc,log,data,run&#125; -p</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># cp redis.conf /apps/redis/etc/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/^bind .*/bind 0.0.0.0/' -e "/^dir .*/c dir /apps/redis/data/"  -e "/logfile .*/c logfile /apps/redis/log/redis-6379.log"  -e  "/^pidfile .*/c  pidfile /apps/redis/run/redis-6379.pid" -e 's@protected-mode yes@protected-mode no@' /apps/redis/etc/redis.conf</span><span class="token comment">#解决启动时的三个警告提示</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token comment">#创建redis用户和组</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># chown -R redis.redis /apps/redis/</span><span class="token comment">#编辑redis服务启动文件</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/redis.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Redis persistent key-value database<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/redis/bin/redis-server /apps/redis/etc/redis.conf <span class="token parameter variable">--supervised</span> systemd<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> QUIT <span class="token variable">$MAINPID</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>notify<span class="token assign-left variable">User</span><span class="token operator">=</span>redis<span class="token assign-left variable">Group</span><span class="token operator">=</span>redis<span class="token assign-left variable">RuntimeDirectory</span><span class="token operator">=</span>redis<span class="token assign-left variable">RuntimeDirectoryMode</span><span class="token operator">=</span>0755<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token comment">#验证启动redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl start redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl enable redis</span></code></pre></div></figure><p><strong>shell脚本一键安装：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-6.2.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis-6379.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis-6379.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6379.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6379 <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_redis.sh </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_redis.sh</span></code></pre></div></figure><h3 id="1-2-3-Redis多实例"><a href="#1-2-3-Redis多实例" class="headerlink" title="1.2.3 Redis多实例"></a>1.2.3 Redis多实例</h3><p>指定不同实例的相应的端口,配置文件,日志文件等相关配置。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis编译安装目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ll /apps/redis/</span>total <span class="token number">0</span>drwxr-xr-x. <span class="token number">2</span> redis redis <span class="token number">134</span> Feb <span class="token number">17</span> 09:30 bindrwxr-xr-x. <span class="token number">2</span> redis redis   <span class="token number">6</span> Feb <span class="token number">17</span> 09:30 datadrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">24</span> Feb <span class="token number">17</span> 09:51 etcdrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">28</span> Feb <span class="token number">17</span> 09:30 logdrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">28</span> Feb <span class="token number">17</span> 09:30 run<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tree /apps/redis/</span>/apps/redis/├── bin│   ├── redis-benchmark│   ├── redis-check-aof -<span class="token operator">></span> redis-server│   ├── redis-check-rdb -<span class="token operator">></span> redis-server│   ├── redis-cli│   ├── redis-sentinel -<span class="token operator">></span> redis-server│   └── redis-server├── data├── etc│   └── redis-6379.conf├── log│   └── redis-6379.log└── run    └── redis-6379.pid<span class="token number">5</span> directories, <span class="token number">9</span> files<span class="token comment">#6380端口配置</span><span class="token builtin class-name">cd</span> redis-6.2.9<span class="token function">cp</span> redis.conf  /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span> <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir /apps/redis/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile /apps/redis/log/redis-6380.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile /apps/redis/run/redis-6380.pid"</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@port 6379@port 6380@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6380.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis-6380.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6380<span class="token comment">#6381端口配置</span><span class="token builtin class-name">cd</span> redis-6.2.9<span class="token function">cp</span> redis.conf  /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span> <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir /apps/redis/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile /apps/redis/log/redis-6381.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile /apps/redis/run/redis-6381.pid"</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@port 6379@port 6381@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6381.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis-6381.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6381<span class="token comment">#多实例目录结构</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tree /apps/redis/</span>/apps/redis/├── bin│   ├── redis-benchmark│   ├── redis-check-aof -<span class="token operator">></span> redis-server│   ├── redis-check-rdb -<span class="token operator">></span> redis-server│   ├── redis-cli│   ├── redis-sentinel -<span class="token operator">></span> redis-server│   └── redis-server├── data├── etc│   ├── redis-6379.conf│   ├── redis-6380.conf│   └── redis-6381.conf├── log│   ├── redis-6379.log│   ├── redis-6380.log│   └── redis-6381.log└── run    ├── redis-6379.pid    ├── redis-6380.pid    └── redis-6381.pid<span class="token number">5</span> directories, <span class="token number">15</span> files</code></pre></div></figure><h3 id="1-2-4-Redis基本命令"><a href="#1-2-4-Redis基本命令" class="headerlink" title="1.2.4 Redis基本命令"></a>1.2.4 Redis基本命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>Usage: redis-cli <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>cmd <span class="token punctuation">[</span>arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>hostname<span class="token operator">></span>      <span class="token comment">#主机名/IP</span>  <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>port<span class="token operator">></span>          <span class="token comment">#端口</span>  <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>socket<span class="token operator">></span>        <span class="token comment">#socket</span>  <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>password<span class="token operator">></span>      <span class="token comment">#密码</span><span class="token comment">#本机无密码连接</span>redis-cli<span class="token comment">#本机密码连接</span>redis-cli <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>PASSWORD<span class="token operator">></span><span class="token comment">#跨主机无密码连接</span>redis-cli <span class="token parameter variable">-h</span> <span class="token environment constant">HOSTNAME</span>/IP <span class="token parameter variable">-p</span> PORT<span class="token comment">#跨主机密码连接</span>redis-cli <span class="token parameter variable">-h</span> <span class="token environment constant">HOSTNAME</span>/IP <span class="token parameter variable">-p</span> PORT <span class="token parameter variable">-a</span> PASSWORD</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).HAProxy之ACL配置</title>
    <link href="/2023/02/15/LB/HAProxy/haproxy05/"/>
    <url>/2023/02/15/LB/HAProxy/haproxy05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy之ACL配置"><a href="#1-HAProxy之ACL配置" class="headerlink" title="1.HAProxy之ACL配置"></a>1.HAProxy之ACL配置</h1><p>访问控制列表（ACL，Access Control Lists）是一种基于包过滤的访问控制技术，它可以根据设定的条件对经过服务器传输的数据包进行过滤(条件匹配)，即对接收到的报文进行匹配和过滤，基于请求报文头部中的源地址、源端口、目标地址、目标端口、请求方法、URL、文件后缀等信息内容进行匹配并执行进一步操作，比如允许其通过或丢弃。</p><p><strong>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7</a></strong></p><h2 id="1-1-ACL-配置选项"><a href="#1-1-ACL-配置选项" class="headerlink" title="1.1 ACL-配置选项"></a>1.1 ACL-配置选项</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">acl <span class="token operator">&lt;</span>aclname<span class="token operator">></span> <span class="token operator">&lt;</span>criterion<span class="token operator">></span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span> <span class="token punctuation">[</span>operator<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token operator">&lt;</span>aclname<span class="token operator">></span>    <span class="token comment">#名称</span><span class="token operator">&lt;</span>criterion<span class="token operator">></span>  <span class="token comment">#匹配规范</span><span class="token punctuation">[</span>flags<span class="token punctuation">]</span>      <span class="token comment">#匹配模式</span><span class="token punctuation">[</span>operator<span class="token punctuation">]</span>   <span class="token comment">#具体操作符</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">]</span>    <span class="token comment">#操作对象类型</span></code></pre></div></figure><ul><li>aclname</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#aclname配置示例，acl名称必须由大小写字母，数字，"-"中横线，"_"下划线，"."点，":"冒号，区分大小写，这意味着"my_acl"和 "My_Acl"是两个不同的acl</span>acl image_service hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> img.chsblogs.com</code></pre></div></figure><ul><li>criterion</li></ul><p>定义ACL匹配规范，即判断条件。</p><p>官方文档：</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.3.3</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.3.6</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">base <span class="token builtin class-name">:</span> string <span class="token comment">#返回第一个主机头和请求的路径部分的连接，该请求从主机名开始，并在问号之前结束,对虚拟主机有用</span>ACL derivatives <span class="token builtin class-name">:</span>  base     <span class="token builtin class-name">:</span> exact string match   base_beg <span class="token builtin class-name">:</span> prefix match  base_dir <span class="token builtin class-name">:</span> subdir match  base_dom <span class="token builtin class-name">:</span> domain match  base_end <span class="token builtin class-name">:</span> suffix match  base_len <span class="token builtin class-name">:</span> length match  base_reg <span class="token builtin class-name">:</span> regex match  base_sub <span class="token builtin class-name">:</span> substring matchhdr <span class="token builtin class-name">:</span> string <span class="token comment">#提取在一个HTTP请求报文的首部</span>ACL derivatives <span class="token builtin class-name">:</span>  hdr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token builtin class-name">:</span> <span class="token comment">#完全匹配字符串,header的指定信息，&lt;occ> 表示在多值中使用的值的出现次数 </span>  hdr_beg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#前缀匹配，header中指定匹配内容的begin</span>  hdr_dir<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#后缀匹配，header中指定匹配内容end</span>  hdr_dom<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#域匹配，header中的domain name</span>  hdr_end<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#路径匹配，header的uri路径</span>  hdr_len<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#长度匹配，header的长度匹配</span>  hdr_reg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#正则表达式匹配，自定义表达式(regex)模糊匹配</span>  hdr_sub<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#子串匹配，header中的uri模糊匹配</span><span class="token comment">#hdr示例</span>hdr<span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> 用于测试请求头部首部指定内容hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host名称，如 www.chsblogs.comhdr_beg<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host开头，如 www. img. video. download. ftp.hdr_end<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host结尾，如 .com .net .cnpath <span class="token builtin class-name">:</span> string <span class="token comment">#提取请求的URL路径，该路径从第一个斜杠开始，并在问号之前结束（无主机部分）</span>ACL derivatives <span class="token builtin class-name">:</span>  path     <span class="token builtin class-name">:</span> exact string match  path_beg <span class="token builtin class-name">:</span> prefix match  path_dir <span class="token builtin class-name">:</span> subdir match  path_dom <span class="token builtin class-name">:</span> domain match  path_end <span class="token builtin class-name">:</span> suffix match  path_len <span class="token builtin class-name">:</span> length match  path_reg <span class="token builtin class-name">:</span> regex match  path_sub <span class="token builtin class-name">:</span> substring match  url <span class="token builtin class-name">:</span> string <span class="token comment">#提取请求中的整个URL。一个典型的应用是具有预取能力的缓存，以及需要从数据库聚合多个信息并将它们保存在缓存中的网页门户入口，推荐使用path</span>ACL derivatives <span class="token builtin class-name">:</span>  url     <span class="token builtin class-name">:</span> exact string match  url_beg <span class="token builtin class-name">:</span> prefix match  url_dir <span class="token builtin class-name">:</span> subdir match  url_dom <span class="token builtin class-name">:</span> domain match  url_end <span class="token builtin class-name">:</span> suffix match  url_len <span class="token builtin class-name">:</span> length match  url_reg <span class="token builtin class-name">:</span> regex match  url_sub <span class="token builtin class-name">:</span> substring match  dst <span class="token builtin class-name">:</span> <span class="token function">ip</span>            <span class="token comment">#目标IP</span>dst_port <span class="token builtin class-name">:</span> integer  <span class="token comment">#目标PORT</span>src <span class="token builtin class-name">:</span> <span class="token function">ip</span>            <span class="token comment">#源IP</span>src_port <span class="token builtin class-name">:</span> integer  <span class="token comment">#源PORT</span><span class="token comment">#src示例</span>acl invalid_src src <span class="token number">192.168</span>.1.0/24acl invalid_src src <span class="token number">172.16</span>.0.0/24status <span class="token builtin class-name">:</span> integer    <span class="token comment">#响应报文状态码</span>method <span class="token builtin class-name">:</span> integer + string  <span class="token comment">#七层协议</span><span class="token comment">#method示例</span>acl valid_method method GET HEADhttp-request deny <span class="token keyword">if</span> <span class="token operator">!</span> valid_method</code></pre></div></figure><ul><li>flags</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#acl匹配模式</span>  <span class="token parameter variable">-i</span>  <span class="token comment">#不区分大小写</span>  <span class="token parameter variable">-f</span>  <span class="token comment">#从文件加载pattern</span>  <span class="token parameter variable">-m</span>  <span class="token comment">#使用指定的pattern匹配方法</span>  <span class="token parameter variable">-n</span>  <span class="token comment">#不做DNS解析</span>  <span class="token parameter variable">-u</span>  <span class="token comment">#强制ACL的唯一id </span></code></pre></div></figure><ul><li>operator</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#acl操作符</span><span class="token comment">#整数匹配</span>  eq  <span class="token comment">#等于，则为true</span>  ge  <span class="token comment">#大于等于，则为true</span>  gt  <span class="token comment">#大于，则为true</span>  le  <span class="token comment">#小于等于，则为true</span>  lt  <span class="token comment">#小于，则为true</span><span class="token comment">#字符串匹配</span>  exact match     <span class="token punctuation">(</span>-m str<span class="token punctuation">)</span>  <span class="token comment">#精确匹配</span>  substring match <span class="token punctuation">(</span>-m sub<span class="token punctuation">)</span>  <span class="token comment">#子字符串匹配</span>  prefix match    <span class="token punctuation">(</span>-m beg<span class="token punctuation">)</span>  <span class="token comment">#前缀匹配</span>  suffix match    <span class="token punctuation">(</span>-m end<span class="token punctuation">)</span>  <span class="token comment">#后缀匹配</span>  subdir match    <span class="token punctuation">(</span>-m <span class="token function">dir</span><span class="token punctuation">)</span>  <span class="token comment">#在提取的字符串，用斜线（“/”）分隔，如其中任一个匹配，则ACL进行匹配。</span>  domain match    <span class="token punctuation">(</span>-m dom<span class="token punctuation">)</span>  <span class="token comment">#查找提取的用点（“."）分隔字符串，如果其中任何一个匹配，则ACL进行匹配。</span></code></pre></div></figure><ul><li>value</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#value类型</span>  boolean  <span class="token comment">#布尔值</span>  integer or integer range <span class="token comment">#整数或整数范围，比如用于匹配端口范围</span>  IP address / network  <span class="token comment">#IP地址或IP范围, 192.168.0.1 ,192.168.0.1/24</span>  string       <span class="token comment">#例如：www.chsblogs.com</span>    exact      <span class="token comment">#精确比较</span>    substring  <span class="token comment">#子字符串比较</span>    suffix     <span class="token comment">#后缀比较</span>    prefix     <span class="token comment">#前缀比较</span>    subdir     <span class="token comment">#路径，/wp-includes/js/jquery/jquery.js</span>    domain     <span class="token comment">#域名，www.chsblogs.com</span>  regular expression  <span class="token comment">#正则表达式</span>  hex block  <span class="token comment">#16进制</span></code></pre></div></figure><p><strong>多个ACL的组合调用方式：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多个ACL的逻辑处理</span>  AND <span class="token comment">#与，默认使用</span>  OR  <span class="token comment">#或</span>  <span class="token operator">!</span>   <span class="token comment">#非，取反</span>  <span class="token comment">#多个ACL调用方式</span>  <span class="token keyword">if</span> valid_src valid_port        <span class="token comment">#与关系，ACL中A和B都要满足为true，默认为与</span>  <span class="token keyword">if</span> invalid_src <span class="token operator">||</span> invalid_port <span class="token comment">#或，ACL中A或者B满足一个为true</span>  <span class="token keyword">if</span> <span class="token operator">!</span> invalid_src               <span class="token comment">#非，取反，不满足ACL才为true</span></code></pre></div></figure><h2 id="1-2-ACL-基于域名匹配"><a href="#1-2-ACL-基于域名匹配" class="headerlink" title="1.2 ACL-基于域名匹配"></a>1.2 ACL-基于域名匹配</h2><p>​客户端访问pc.chsblogs.com域名调度至we1，访问mobile.chsblogs.com域名调度至we2</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl pc_domain hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> pc.chsblogs.com  acl mobile_domain hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> mobile.chsblogs.com  <span class="token comment">##################### acl hosts #####################</span>  use_backend pc_hosts <span class="token keyword">if</span> pc_domain  use_backend mobile_hosts <span class="token keyword">if</span> mobile_domain  default_backend pc_hosts  <span class="token comment">#所有ACL都不匹配,则使用的默认backend</span>  backend pc_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend mobile_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2  <span class="token comment">#客户端测试，配置域名解析</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.11 pc.chsblogs.com mobile.chsblogs.com test.chsblogs.com<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl pc.chsblogs.com</span><span class="token number">192.168</span>.1.13<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl mobile.chsblogs.com</span><span class="token number">192.168</span>.1.14<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl test.chsblogs.com</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-3-ACL-基于源IP或子网调度"><a href="#1-3-ACL-基于源IP或子网调度" class="headerlink" title="1.3 ACL-基于源IP或子网调度"></a>1.3 ACL-基于源IP或子网调度</h2><p>客户端IP地址为192.168.1.10或者10.0.0.0&#x2F;8网段调度至we1，IP地址为192.168.1.20或者192.168.1.30网段调度至we2</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl ip_range1 src <span class="token number">192.168</span>.1.10 <span class="token number">10.0</span>.0.0/8  acl ip_range2 src <span class="token number">192.168</span>.1.20 <span class="token number">192.168</span>.1.30  <span class="token comment">##################### acl hosts #####################</span>  use_backend range1_hosts <span class="token keyword">if</span> ip_range1  use_backend range2_hosts <span class="token keyword">if</span> ip_range2  backend range1_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend range2_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.10 <span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.13<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.20 <span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.14root@node30:~<span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.30 root@node30:~<span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.14</code></pre></div></figure><p>拒绝192.168.1.10访问</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_deny_src src <span class="token number">192.168</span>.1.10 <span class="token number">172.16</span>.0.0/16  http-request deny <span class="token keyword">if</span> acl_deny_src  <span class="token comment">##################### acl hosts #####################</span>  default_backend chsblogs_hosts  backend chsblogs_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-4-ACL-基于浏览器类型匹配"><a href="#1-4-ACL-基于浏览器类型匹配" class="headerlink" title="1.4 ACL-基于浏览器类型匹配"></a>1.4 ACL-基于浏览器类型匹配</h2><p>拒绝curl和wget的访问</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_user_agent hdr_sub<span class="token punctuation">(</span>User-Agent<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> <span class="token function">curl</span> <span class="token function">wget</span>  <span class="token comment">##################### acl hosts #####################</span>  http-request deny <span class="token keyword">if</span> acl_user_agent  default_backend chsblogs_hosts  backend chsblogs_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre></div></figure><h2 id="1-5-ACL-基于文件后缀名匹配"><a href="#1-5-ACL-基于文件后缀名匹配" class="headerlink" title="1.5 ACL-基于文件后缀名匹配"></a>1.5 ACL-基于文件后缀名匹配</h2><p>基于文件后缀名匹配实现动静分离</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_end <span class="token parameter variable">-i</span>  .jpg .jpeg .png .gif .css .js .html  acl acl_php path_end <span class="token parameter variable">-i</span> .php  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  use_backend php_hosts <span class="token keyword">if</span> acl_phpbackend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1backend php_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#we1准备静态文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/share/nginx/html/test.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>chsblogs<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>www.chsblogs.com<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># ll /usr/share/nginx/html/1.jpg </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">47647</span> Feb <span class="token number">16</span> <span class="token number">21</span>:35 /usr/share/nginx/html/1.jpg<span class="token comment">#we2准备php文件</span><span class="token punctuation">[</span>root@node14 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/share/nginx/html/test.php</span><span class="token operator">&lt;</span>?php<span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>http://192.168.1.14/test.php&lt;/h1><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/test.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>chsblogs<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>www.chsblogs.com<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/test.php</span><span class="token operator">&lt;</span>?php<span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>http://192.168.1.14/test.php&lt;/h1><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre></div></figure><h2 id="1-6-ACL-基于路径匹配"><a href="#1-6-ACL-基于路径匹配" class="headerlink" title="1.6 ACL-基于路径匹配"></a>1.6 ACL-基于路径匹配</h2><p>基于文件路径匹配实现动静分离</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_beg <span class="token parameter variable">-i</span>  /static /images /javascript  acl acl_static path_end <span class="token parameter variable">-i</span> .jpg .jpeg .png .gif .css .js .html .htm <span class="token comment">#ACL同名为或关系</span>  acl acl_app path_beg <span class="token parameter variable">-i</span> /api  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  use_backend app_hosts <span class="token keyword">if</span> acl_app  default_backend app_hosts  backend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend app_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#准备相关文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /usr/share/nginx/html/static</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># echo "192.168.1.13" > /usr/share/nginx/html/static/test.html</span><span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/static/test.html</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-7-ACL-基于预定义ACL匹配"><a href="#1-7-ACL-基于预定义ACL匹配" class="headerlink" title="1.7 ACL-基于预定义ACL匹配"></a>1.7 ACL-基于预定义ACL匹配</h2><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.4">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.4</a></p><p><strong>预定义ACL：</strong></p><table><thead><tr><th align="center">ACL name</th><th align="center">Equivalent to Usage</th><th align="center"></th></tr></thead><tbody><tr><td align="center">FALSE</td><td align="center">always_false</td><td align="center">never match</td></tr><tr><td align="center">HTTP</td><td align="center">req.proto_http</td><td align="center">match if request protocol is valid HTTP</td></tr><tr><td align="center">HTTP_1.0</td><td align="center">req.ver 1.0</td><td align="center">match if HTTP request version is 1.0</td></tr><tr><td align="center">HTTP_1.1</td><td align="center">req.ver 1.1</td><td align="center">match if HTTP request version is 1.1</td></tr><tr><td align="center">HTTP_2.0</td><td align="center">req.ver 2.0</td><td align="center">match if HTTP request version is 2.0</td></tr><tr><td align="center">HTTP_CONTENT</td><td align="center">req.hdr_val(content-length) gt 0</td><td align="center">match an existing content-length in the HTTP request</td></tr><tr><td align="center">HTTP_URL_ABS</td><td align="center">url_reg ^[^&#x2F;:]*:&#x2F;&#x2F;</td><td align="center">match absolute URL with scheme</td></tr><tr><td align="center">HTTP_URL_SLASH</td><td align="center">url_beg &#x2F;</td><td align="center">match URL beginning with “&#x2F;“</td></tr><tr><td align="center">HTTP_URL_STAR</td><td align="center">url *</td><td align="center">match URL equal to “*”</td></tr><tr><td align="center">LOCALHOST</td><td align="center">src 127.0.0.1&#x2F;8</td><td align="center">match connection from local host</td></tr><tr><td align="center">METH_CONNECT</td><td align="center">method CONNECT</td><td align="center">match HTTP CONNECT method</td></tr><tr><td align="center">METH_DELETE</td><td align="center">method DELETE</td><td align="center">match HTTP DELETE method</td></tr><tr><td align="center">METH_GET</td><td align="center">method GET HEAD</td><td align="center">match HTTP GET or HEAD method</td></tr><tr><td align="center">METH_HEAD</td><td align="center">method HEAD</td><td align="center">match HTTP HEAD method</td></tr><tr><td align="center">METH_OPTIONS</td><td align="center">method OPTIONS</td><td align="center">match HTTP OPTIONS method</td></tr><tr><td align="center">METH_POST</td><td align="center">method POST</td><td align="center">match HTTP POST method</td></tr><tr><td align="center">METH_PUT</td><td align="center">method PUT</td><td align="center">match HTTP PUT method</td></tr><tr><td align="center">METH_TRACE</td><td align="center">method TRACE</td><td align="center">match HTTP TRACE method</td></tr><tr><td align="center">RDP_COOKIE</td><td align="center">req.rdp_cookie_cnt gt 0</td><td align="center">match presence of an RDP cookie in the request buffer</td></tr><tr><td align="center">REQ_CONTENT</td><td align="center">req.len gt 0</td><td align="center">match data in the request buffer</td></tr><tr><td align="center">TRUE</td><td align="center">always_true</td><td align="center">always match</td></tr><tr><td align="center">WAIT_END</td><td align="center">wait_end</td><td align="center">wait for end of content analysis</td></tr></tbody></table><p>禁止TRACE方法和HTTP&#x2F;1.1协议</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_beg <span class="token parameter variable">-i</span>  /static /images /javascript  acl acl_static path_end <span class="token parameter variable">-i</span> .jpg .jpeg .png .gif .css .js .html .htm  acl ip_range src <span class="token number">192.168</span>.1.10  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  http-request deny <span class="token keyword">if</span> ip_range HTTP_1.1backend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/static/test.html</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -0 192.168.1.11/static/test.html</span><span class="token number">192.168</span>.1.13</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).HAProxy高级功能及配置</title>
    <link href="/2023/02/14/LB/HAProxy/haproxy04/"/>
    <url>/2023/02/14/LB/HAProxy/haproxy04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy高级功能及配置"><a href="#1-HAProxy高级功能及配置" class="headerlink" title="1.HAProxy高级功能及配置"></a>1.HAProxy高级功能及配置</h1><h2 id="1-1-基于cookie的会话保持"><a href="#1-1-基于cookie的会话保持" class="headerlink" title="1.1 基于cookie的会话保持"></a>1.1 基于cookie的会话保持</h2><p>Cookie Value：为当前Server指定Cookie值，实现基于Cookie的会话黏性。</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-cookie">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-cookie</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>cookie <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span> rewrite <span class="token operator">|</span> insert <span class="token operator">|</span> prefix <span class="token punctuation">]</span> <span class="token punctuation">[</span> indirect <span class="token punctuation">]</span> <span class="token punctuation">[</span> nocache <span class="token punctuation">]</span>              <span class="token punctuation">[</span> postonly <span class="token punctuation">]</span> <span class="token punctuation">[</span> preserve <span class="token punctuation">]</span> <span class="token punctuation">[</span> httponly <span class="token punctuation">]</span> <span class="token punctuation">[</span> secure <span class="token punctuation">]</span>              <span class="token punctuation">[</span> domain <span class="token operator">&lt;</span>domain<span class="token operator">></span> <span class="token punctuation">]</span>* <span class="token punctuation">[</span> maxidle <span class="token operator">&lt;</span>idle<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> maxlife <span class="token operator">&lt;</span>life<span class="token operator">></span> <span class="token punctuation">]</span>              <span class="token punctuation">[</span> dynamic <span class="token punctuation">]</span> <span class="token punctuation">[</span> attr <span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">]</span>*<span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#Cookie的Key名称，用于实现持久连接。</span>insert     <span class="token comment">#插入新的Cookie，默认不插入Cookie</span>indirect   <span class="token comment">#如果客户端已经有Cookie,则不会再发送Cookie信息</span>nocache    <span class="token comment">#当Client和HAProxy之间有缓存服务器（如：CDN）时，不允许中间缓存器缓存cookie，因为这会导致很多经过同一个CDN的请求都发送到同一台后端服务器</span><span class="token comment">#配置示例</span>listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  cookie WEBSRV insert nocache indirect  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2</code></pre></div></figure><p><strong>注意：不支持TCP Mode，使用HTTP Mode</strong></p><h2 id="1-2-HAProxy状态页"><a href="#1-2-HAProxy状态页" class="headerlink" title="1.2 HAProxy状态页"></a>1.2 HAProxy状态页</h2><p>通过Web页面，显示当前HAProxy状态</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-stats">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-stats</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>stats <span class="token builtin class-name">enable</span>                       <span class="token comment">#基于默认的参数启用stats page</span>stats hide-version                 <span class="token comment">#将状态页中haproxy版本隐藏</span>stats refresh <span class="token operator">&lt;</span>delay<span class="token operator">></span>              <span class="token comment">#设定自动刷新时间间隔，默认不自动刷新,以秒为单位</span>stats uri <span class="token operator">&lt;</span>prefix<span class="token operator">></span>                 <span class="token comment">#自定义stats page uri，默认值：/haproxy?stats</span>stats realm <span class="token operator">&lt;</span>realm<span class="token operator">></span>                <span class="token comment">#账户认证时的提示信息，示例：stats realm HAProxy\</span>stats auth <span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>passwd<span class="token operator">></span>         <span class="token comment">#认证时的账号和密码，可定义多个用户,每行指定一个用户.默认：no</span>stats admin <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>cond<span class="token operator">></span> <span class="token comment">#启用stats page中的管理功能</span><span class="token comment">#启用状态页</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  <span class="token comment">#登录状态页</span><span class="token comment">#pid为当前pid号，process为当前进程号，nbproc和nbthread为一共多少进程和每个进程多少个线程</span>pid <span class="token operator">=</span> <span class="token number">25462</span> <span class="token punctuation">(</span>process <span class="token comment">#1, nbproc = 1, nbthread = 4)</span><span class="token comment">#启动了多长时间</span><span class="token function">uptime</span> <span class="token operator">=</span> 0d 0h02m59s<span class="token comment">#系统资源限制：内存/最大打开文件数</span>system limits: memmax <span class="token operator">=</span> unlimited<span class="token punctuation">;</span> ulimit-n <span class="token operator">=</span> <span class="token number">200058</span><span class="token comment">#最大socket连接数/单进程最大连接数/最大管道数maxpipes</span>maxsock <span class="token operator">=</span> <span class="token number">200058</span><span class="token punctuation">;</span> maxconn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> maxpipes <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#当前连接数/当前管道数/当前连接速率</span>current conns <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> current pipes <span class="token operator">=</span> <span class="token number">0</span>/0<span class="token punctuation">;</span> conn rate <span class="token operator">=</span> <span class="token number">1</span>/sec<span class="token punctuation">;</span> bit rate <span class="token operator">=</span> <span class="token number">0.000</span> kbps<span class="token comment">#运行的任务/当前空闲率</span>Running tasks: <span class="token number">1</span>/18<span class="token punctuation">;</span> idle <span class="token operator">=</span> <span class="token number">100</span> %<span class="token comment">#在线服务器</span>active UP<span class="token comment">#标记为backup的服务器</span>backup UP<span class="token comment">#监测未通过正在进入down过程</span>active UP, going down<span class="token comment">#备份服务器正在进入down过程</span>backup UP, going down<span class="token comment">#down的服务器正在进入up过程</span>active DOWN, going up<span class="token comment">#备份服务器正在进入up过程</span>backup DOWN, going up<span class="token comment">#在线的服务器或者是backup的服务器已经转换成了down状态</span>active or backup DOWN<span class="token comment">#标记为不监测的服务器</span>not checked<span class="token comment">#active或者backup服务器人为下线的</span>active or backup DOWN <span class="token keyword">for</span> maintenance <span class="token punctuation">(</span>MAINT<span class="token punctuation">)</span><span class="token comment">#active或者backup被人为软下线(人为将weight改成0)</span>active or backup SOFT STOPPED <span class="token keyword">for</span> maintenance</code></pre></div></figure><p><strong>Backend Server信息</strong></p><table><thead><tr><th>session rate(每秒的连接会话信息)：</th><th>Errors(错误统计信息)：</th></tr></thead><tbody><tr><td>cur:每秒的当前会话数量</td><td>Req:错误请求量</td></tr><tr><td>max:每秒新的最大会话数量</td><td>conn:错误链接量</td></tr><tr><td>limit:每秒新的会话限制量</td><td>Resp:错误响应量</td></tr><tr><td>sessions(会话信息)：</td><td>Warnings(警告统计信息)：</td></tr><tr><td>cur:当前会话量</td><td>Retr:重新尝试次数</td></tr><tr><td>max:最大会话量</td><td>Redis:再次发送次数</td></tr><tr><td>limit: 限制会话量</td><td></td></tr><tr><td>Total:总共会话量</td><td>Server(real server信息)：</td></tr><tr><td>LBTot:选中一台服务器所用的总时间</td><td>Status:后端机的状态，包括UP和DOWN</td></tr><tr><td>Last：和服务器的持续连接时间</td><td>LastChk:持续检查后端服务器的时间</td></tr><tr><td>Wght:权重</td><td></td></tr><tr><td>Bytes(流量统计)：</td><td>Act:活动链接数量</td></tr><tr><td>In:网络的字节输入总量</td><td>Bck:备份的服务器数量</td></tr><tr><td>Out:网络的字节输出总量</td><td>Chk:心跳检测时间</td></tr><tr><td>Dwn:后端服务器连接后都是DOWN的数量</td><td></td></tr><tr><td>Denied(拒绝统计信息)：</td><td>Dwntme:总的downtime时间</td></tr><tr><td>Req:拒绝请求量</td><td>Thrtle:server 状态</td></tr><tr><td>Resp:拒绝回复量</td><td></td></tr></tbody></table><p>利用状态页实现HAProxy服务器的健康性检查：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># curl -I http://admin:123456@192.168.1.11:8888/haproxy-status</span>HTTP/1.1 <span class="token number">200</span> OKcache-control: no-cachecontent-type: text/html</code></pre></div></figure><h2 id="1-3-IP地址透传"><a href="#1-3-IP地址透传" class="headerlink" title="1.3 IP地址透传"></a>1.3 IP地址透传</h2><p>Web服务器中需要记录客户端的真实IP地址，用于做访问统计、安全防护、行为分析、区域排行等场景。</p><p><strong>四层负载：</strong>IP+PORT转发</p><p>​在四层负载设备中，把client发送的报文目标地址(原来是负载均衡设备的IP地址)，根据均衡设备设置的选择web服务器的规则选择对应的web服务器IP地址，这样client就可以直接跟此服务器建立TCP连接并发送数据，而四层负载自身不参与建立连接，而和LVS不同，haproxy是伪四层负载均衡，因为haproxy需要分别和前端客户端及后端服务器建立连接。</p><p><strong>七层负载：</strong>协议+内容交换</p><p>​七层负载均衡服务器起了一个反向代理服务器的作用，服务器建立一次TCP连接要三次握手，而client要访问Web Server要先与七层负载设备进行三次握手后建立TCP连接，把要访问的报文信息发送给七层负载均衡；然后七层负载均衡再根据设置的均衡规则选择特定的 Web Server，然后通过三次握手与此台Web Server建立TCP连接，然后Web Server把需要的数据发送给七层负载均衡设备，负载均衡设备再把数据发送给client；所以，七层负载均衡设备起到了代理服务器的作用，七层代理需要和Client和后端服务器分别建立连接。</p><h3 id="1-3-1-四层IP地址透传"><a href="#1-3-1-四层IP地址透传" class="headerlink" title="1.3.1 四层IP地址透传"></a>1.3.1 四层IP地址透传</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置</span>listen web_http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode tcp <span class="token comment">#不支持http协议</span>  log global  server web1 <span class="token number">192.168</span>.1.13:80 send-proxy check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> <span class="token comment">#添加send-proxy</span>  server web2 <span class="token number">192.168</span>.1.14:80 send-proxy check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> <span class="token comment">#添加send-proxy</span><span class="token comment">#nginx配置</span>http <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token comment">#变量$proxy_protocol_addr记录透传过来的客户端IP</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" "$proxy_protocol_addr"'</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>                                                server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span> proxy_protocol<span class="token punctuation">;</span><span class="token comment">#启用此项，将无法直接访问此网站，只能通过四层代理访问。</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-3-2-七层IP地址透传"><a href="#1-3-2-七层IP地址透传" class="headerlink" title="1.3.2 七层IP地址透传"></a>1.3.2 七层IP地址透传</h3><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20forwardfor">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20forwardfor</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>option forwardfor <span class="token punctuation">[</span> except <span class="token operator">&lt;</span>network<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">]</span>except <span class="token operator">&lt;</span>network<span class="token operator">></span>  <span class="token comment">#请求报请来自此处指定的网络时不予添加此首部，如haproxy自身所在网络</span>header <span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#使用自定义的首部名称，而非“X-Forwarded-For"，示例：X-client</span>header <span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#如果没有首部才添加首部，如果有使用默认值</span><span class="token comment">#配置示例</span><span class="token comment">#haproxy 配置</span>defaults  <span class="token comment">#此为默认值,首部字段默认为：X-Forwarded-For</span>  option forwardfor  <span class="token comment">#或者自定义首部,如:X-client</span>  option forwardfor except <span class="token number">127.0</span>.0.0/8 header X-client<span class="token comment">#listen配置</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  mode http  log global  balance random  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#Web服务器日志格式配置</span><span class="token comment">#apache 配置：</span>LogFormat <span class="token string">"%&#123;X-Forwarded-For&#125;i %a %l %u %t <span class="token entity" title="\&quot;">\"</span>%r<span class="token entity" title="\&quot;">\"</span> %>s %b <span class="token entity" title="\&quot;">\"</span>%&#123;Referer&#125;i<span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span>%&#123;User-Agent&#125;i<span class="token entity" title="\&quot;">\"</span>"</span> combined<span class="token comment">#nginx配置</span>http <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token comment">#$proxy_add_x_forwarded_for：包括客户端IP和中间经过的所有代理的IP</span>    <span class="token comment">#$http_x_forwarded_For：只有客户端IP</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" "$proxy_protocol_addr"'</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>                                                server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-4-报文修改"><a href="#1-4-报文修改" class="headerlink" title="1.4 报文修改"></a>1.4 报文修改</h2><h3 id="1-4-1-HAProxy2-1版本前"><a href="#1-4-1-HAProxy2-1版本前" class="headerlink" title="1.4.1 HAProxy2.1版本前"></a>1.4.1 HAProxy2.1版本前</h3><p>2.1版本以下通过rspadd与rspidel在响应报文中添加与删除字段。</p><p>官方文档：</p><p><a href="https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqadd">https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqadd</a></p><p><a href="https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqdel">https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqdel</a></p><h3 id="1-4-2-HAProxy2-1版本后"><a href="#1-4-2-HAProxy2-1版本后" class="headerlink" title="1.4.2 HAProxy2.1版本后"></a>1.4.2 HAProxy2.1版本后</h3><p>2.1版本以上用下面指令http-request和http-response代替</p><p>官方文档：</p><p><a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-request">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-request</a></p><p><a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-response">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-response</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>http-response add-header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>fmt<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>condition<span class="token operator">></span> <span class="token punctuation">]</span>http-response del-header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>meth<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>condition<span class="token operator">></span> <span class="token punctuation">]</span><span class="token comment">#配置示例</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  http-request add-header X-Haproxy-Current-Date %T <span class="token comment">#添加首部</span>  http-response del-header server                   <span class="token comment">#删除首部</span>  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-5-自定义日志格式"><a href="#1-5-自定义日志格式" class="headerlink" title="1.5  自定义日志格式"></a>1.5  自定义日志格式</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-log%20global</span>log global                                  <span class="token comment">#开启记录日志，默认不开启</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-option%20httplog</span>option httplog                              <span class="token comment">#开启记录httplog日志格式选项</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-capture%20cookie</span>capture cookie <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span>          <span class="token comment">#捕获请求和响应报文中的 cookie及值的长度,将之记录到日志</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-capture%20request%20header</span>capture request header <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span>  <span class="token comment">#捕获请求报文中指定的首部内容和长度并记录日志</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-capture%20response%20header</span>capture response header <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span> <span class="token comment">#捕获响应报文中指定的内容和长度首部并记录日志</span><span class="token comment">#配置示例：</span>log globaloption httplogcapture request header Host len <span class="token number">256</span>capture request header User-Agent len <span class="token number">512</span>capture request header Referer len <span class="token number">15</span>capture request header X-Forwarded-For len <span class="token number">15</span></code></pre></div></figure><p><strong>HAProxy配置自定义日志格式：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  capture request header User-Agent len <span class="token number">512</span>  capture request header Host len <span class="token number">256</span>  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#验证日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># tail -f /var/log/haproxy.log </span>Feb <span class="token number">15</span> <span class="token number">23</span>:37:06 localhost haproxy<span class="token punctuation">[</span><span class="token number">9677</span><span class="token punctuation">]</span>: <span class="token number">192.168</span>.1.200:60614 <span class="token punctuation">[</span><span class="token number">15</span>/Feb/2023:23:37:06.269<span class="token punctuation">]</span> web_host web_host/web1 <span class="token number">0</span>/0/1/0/1 <span class="token number">200</span> <span class="token number">211</span> - - ---- <span class="token number">3</span>/1/0/0/0 <span class="token number">0</span>/0 <span class="token punctuation">&#123;</span>Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/110.0.0.0 Safari/537.36<span class="token operator">|</span><span class="token number">192.168</span>.1.11<span class="token punctuation">&#125;</span> <span class="token string">"GET / HTTP/1.1"</span>Feb <span class="token number">15</span> <span class="token number">23</span>:37:34 localhost haproxy<span class="token punctuation">[</span><span class="token number">9677</span><span class="token punctuation">]</span>: <span class="token number">192.168</span>.1.200:60614 <span class="token punctuation">[</span><span class="token number">15</span>/Feb/2023:23:37:34.155<span class="token punctuation">]</span> web_host web_host/web1 <span class="token number">0</span>/0/0/2/2 <span class="token number">304</span> <span class="token number">153</span> - - ---- <span class="token number">3</span>/2/0/0/0 <span class="token number">0</span>/0 <span class="token punctuation">&#123;</span>Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/110.0.0.0 Safari/537.36<span class="token operator">|</span><span class="token number">192.168</span>.1.11<span class="token punctuation">&#125;</span> <span class="token string">"GET / HTTP/1.1"</span></code></pre></div></figure><h2 id="1-6-压缩功能"><a href="#1-6-压缩功能" class="headerlink" title="1.6 压缩功能"></a>1.6 压缩功能</h2><p>对响应给客户端的报文进行压缩</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-compression%20algo">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-compression%20algo</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>compression algo <span class="token operator">&lt;</span>algorithm<span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token operator">&lt;</span>algorithm<span class="token operator">></span>   <span class="token comment">#压缩算法&lt;algorithm>支持下面类型：</span>  identity    <span class="token comment">#debug调试使用的压缩方式。</span>  <span class="token function">gzip</span>        <span class="token comment">#常用的压缩方式，与各浏览器兼容较好。</span>  deflate     <span class="token comment">#有些浏览器不支持。</span>  raw-deflate <span class="token comment">#新式的压缩方式。</span>  compression   <span class="token comment">#要压缩的文件类型</span><span class="token comment">#配置示例</span>compression algo <span class="token function">gzip</span>compression <span class="token builtin class-name">type</span> text/html text/plain<span class="token comment">#haproxy配置压缩</span>listen web_http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#后端服务器准备文本文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># ll -h /usr/share/nginx/html/test.txt </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">94</span> Feb <span class="token number">15</span> <span class="token number">20</span>:52 /usr/share/nginx/html/test.txt<span class="token punctuation">[</span>root@node14 ~<span class="token punctuation">]</span><span class="token comment"># ll -h /usr/share/nginx/html/test.txt</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">94</span> Feb <span class="token number">15</span> <span class="token number">20</span>:52 /usr/share/nginx/html/test.txt<span class="token comment">#验证压缩功能</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -is --compressed 192.168.1.11/test.txt | grep "content-encoding"</span>content-encoding: <span class="token function">gzip</span></code></pre></div></figure><h2 id="1-7-Web服务器状态监测"><a href="#1-7-Web服务器状态监测" class="headerlink" title="1.7 Web服务器状态监测"></a>1.7 Web服务器状态监测</h2><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20httpchk">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20httpchk</a></p><p><strong>三种状态监测方式：</strong></p><ul><li>基于四层的传输端口做状态监测，此为默认方式。</li><li>基于指定 URI 做状态监测,需要访问整个页面资源,占用更多带宽。</li><li>基于指定 URI 的request请求头部内容做状态监测，占用较少带宽,建议使用此方式。</li></ul><p><strong>基于应用层http协议进行健康性检测：</strong></p><p>​基于应用层http协议，采有不同的监测方式，对后端real server进行状态监测，此方式会导致在后端服务器生成很多的HAProxy发起的访问日志。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>option httpchk                           <span class="token comment">#启用七层健康性检测，对TCP和HTTP模式都支持，默认为：OPTIONS HTTP/1.0</span>option httpchk <span class="token operator">&lt;</span>uri<span class="token operator">></span>                     option httpchk <span class="token operator">&lt;</span>method<span class="token operator">></span> <span class="token operator">&lt;</span>uri<span class="token operator">></span>            option httpchk <span class="token operator">&lt;</span>method<span class="token operator">></span> <span class="token operator">&lt;</span>uri<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment">#http-check expect官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-http-check%20expect</span><span class="token comment">#期望以上检查得到的响应码</span>http-check <span class="token function">expect</span> <span class="token punctuation">[</span>min-recv <span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>comment <span class="token operator">&lt;</span>msg<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span>ok-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>error-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tout-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span>on-success <span class="token operator">&lt;</span>fmt<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>on-error <span class="token operator">&lt;</span>fmt<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>status-code <span class="token operator">&lt;</span>expr<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>match<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>                  <span class="token comment">#http-check expect示例</span>http-check <span class="token function">expect</span> status <span class="token number">200,201</span>,300-310http-check <span class="token function">expect</span> header name <span class="token string">"set-cookie"</span> value <span class="token parameter variable">-m</span> beg <span class="token string">"sessid="</span>http-check <span class="token function">expect</span> <span class="token operator">!</span> string SQL<span class="token punctuation">\</span> Errorhttp-check <span class="token function">expect</span> <span class="token operator">!</span> rstatus ^5http-check <span class="token function">expect</span> rstring <span class="token operator">&lt;</span><span class="token operator">!</span>--tag:<span class="token punctuation">[</span><span class="token number">0</span>-9a-f<span class="token punctuation">]</span>*--<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre></div></figure><p><strong>HAProxy配置Web服务器状态监测：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>listen web_check  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  <span class="token comment">#option httpchk GET /monitor/check.html #默认HTTP/1.0</span>  <span class="token comment">#option httpchk GET /monitor/check.html HTTP/1.0</span>  <span class="token comment">#option httpchk GET /monitor/check.html HTTP/1.1 #注意：HTTP/1.1强制要求必须有Host字段</span>  option httpchk HEAD /monitor/check.html HTTP/1.1<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nHost:<span class="token punctuation">\</span> <span class="token number">192.168</span>.1.11 <span class="token comment">#使用HEAD减少网络流量</span>  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#在所有后端服务建立检测页面</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /usr/share/nginx/html/monitor</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># echo "monitor" > /usr/share/nginx/html/monitor/check.html</span></code></pre></div></figure><h2 id="1-8-自定义HAProxy错误页面"><a href="#1-8-自定义HAProxy错误页面" class="headerlink" title="1.8 自定义HAProxy错误页面"></a>1.8 自定义HAProxy错误页面</h2><p>对指定的报错进行重定向。</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-errorfile">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-errorfile</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">errorfile <span class="token operator">&lt;</span>code<span class="token operator">></span> <span class="token operator">&lt;</span>file<span class="token operator">></span>  <span class="token operator">&lt;</span>code<span class="token operator">></span> <span class="token comment">#HTTP status code.支持200, 400, 403, 405, 408, 425, 429, 500, 502，503,504</span>  <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment">#包含完整HTTP响应头的错误页文件的绝对路径。 建议后缀".http"，以和一般的html文件相区分。</span>  <span class="token comment">#配置示例</span>errorfile <span class="token number">400</span> /etc/haproxy/errorfiles/400badreq.httperrorfile <span class="token number">408</span> /dev/null  <span class="token comment"># work around Chrome pre-connect bug</span>errorfile <span class="token number">403</span> /etc/haproxy/errorfiles/403forbid.httperrorfile <span class="token number">503</span> /etc/haproxy/errorfiles/503sorry.http<span class="token comment">#haproxy配置错误页面</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>defaults  option http-keep-alive  option forwardfor  maxconn <span class="token number">100000</span>  mode http  <span class="token function">timeout</span> connect 300000ms  <span class="token function">timeout</span> client 300000ms  <span class="token function">timeout</span> server 300000ms  errorfile <span class="token number">500</span> /etc/haproxy/html/500.http  errorfile <span class="token number">502</span> /etc/haproxy/html/502.http  errorfile <span class="token number">503</span> /etc/haproxy/html/503.http<span class="token comment">#创建错误页面</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/html/503.http</span>HTTP/1.1 <span class="token number">503</span> Service UnavailableContent-Type:text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>报错页面<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>网站维护中<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>请稍候再试<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">2</span>></span>联系电话：400-666-888<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token number">503</span> Service Unavailable<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>报错页面<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>网站维护中<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>请稍候再试<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">2</span>></span>联系电话：400-666-888<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token number">503</span> Service Unavailable<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span></code></pre></div></figure><h2 id="1-9-HAProxy四层负载"><a href="#1-9-HAProxy四层负载" class="headerlink" title="1.9 HAProxy四层负载"></a>1.9 HAProxy四层负载</h2><p>针对除HTTP以外的TCP协议应用服务访问的应用场景：</p><ul><li>MySQL</li><li>Redis</li><li>RabbitMQ</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span>listen redis_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:6379  mode tcp  balance leastconn  server server1 <span class="token number">192.168</span>.1.13:6379 check  server server2 <span class="token number">192.168</span>.1.14:6379 check backup  listen mysql_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:3306  mode tcp  balance leastconn  server server1 <span class="token number">192.168</span>.1.13:3306 check  server server2 <span class="token number">192.168</span>.1.14:3306 check backup  <span class="token comment">#安装mysql和redis服务</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install mariadb-server redis</span><span class="token comment">#配置数据库远程连接</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mysql -e "grant all on *.* to root@'%' identified by '123456'"</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@bind 127.0.0.1@bind 0.0.0.0@' /etc/redis.conf</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start redis</span><span class="token comment">#测试访问</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.11</span><span class="token number">192.168</span>.1.11:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p123456 -h 192.168.1.11</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MariaDB connection <span class="token function">id</span> is <span class="token number">3</span>Server version: <span class="token number">5.5</span>.68-MariaDB MariaDB ServerCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2018</span>, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> </code></pre></div></figure><h2 id="1-10-HAProxy配置HTTPS"><a href="#1-10-HAProxy配置HTTPS" class="headerlink" title="1.10 HAProxy配置HTTPS"></a>1.10 HAProxy配置HTTPS</h2><p>​HAProxy可以实现https的证书安全,从用户到HAProxy为HTTPS,从HAProxy到后端服务器用HTTP通信但基于性能考虑,生产中证书都是在后端服务器比如Nginx上实现。</p><p><strong>配置选项：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置HAProxy支持https协议，支持ssl会话；</span><span class="token builtin class-name">bind</span> *:443 ssl crt /<span class="token environment constant">PATH</span>/TO/SOME_PEM_FILE<span class="token comment">#指令 crt 后证书文件为PEM格式，需要同时包含证书和所有私钥</span><span class="token function">cat</span> demo.key demo.crt <span class="token operator">></span> demo.pem<span class="token comment">#把80端口的请求重向定443</span><span class="token builtin class-name">bind</span> *:80redirect scheme https <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span><span class="token comment">#向后端传递用户请求的协议和端口（frontend或backend）</span>http_request set-header X-Forwarded-Port %<span class="token punctuation">[</span>dst_port<span class="token punctuation">]</span>http_request add-header X-Forwared-Proto https <span class="token keyword">if</span> <span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>证书制作：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy/certs</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/haproxy/certs/</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl genrsa -out haproxy.key 2048</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl req -new -x509 -key haproxy.key -out haproxy.crt -subj "/CN=www.chsblogs.com"</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># cat haproxy.key haproxy.crt > haproxy.pem</span><span class="token comment">#查看证书</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl x509 -in haproxy.pem -noout -text</span></code></pre></div></figure><p><strong>HAProxy配置HTTPS：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg </span>listen web_https  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:443 ssl crt /etc/haproxy/certs/haproxy.pem  redirect scheme https <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span>  http-request set-header X-forwarded-Port %<span class="token punctuation">[</span>dst_port<span class="token punctuation">]</span>  http-request add-header X-forwarded-Proto https <span class="token keyword">if</span> <span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span>  balance roundrobin  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).HAProxy调度算法</title>
    <link href="/2023/02/12/LB/HAProxy/haproxy03/"/>
    <url>/2023/02/12/LB/HAProxy/haproxy03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy调度算法"><a href="#1-HAProxy调度算法" class="headerlink" title="1.HAProxy调度算法"></a>1.HAProxy调度算法</h1><p>HAProxy的调度算法分为静态和动态调度算法，但是有些算法可以根据参数在静态和动态算法中相互转换。 通过固定参数balance指明对后端服务器的调度算法，该参数可以配置在listen或backend选项中。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官方文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-balance</span></span></code></pre></div></figure><h2 id="1-1-socat-工具"><a href="#1-1-socat-工具" class="headerlink" title="1.1 socat 工具"></a>1.1 socat 工具</h2><p>对服务器动态权重和其它状态可以利用 socat工具进行调整，Socat 是 Linux 下的一个多功能的网络工具，名字来由是Socket CAT，相当于netCAT的增强版.Socat 的主要特点就是在两个数据流之间建立双向通道，且支持众多协议和链接方式。如 IP、TCP、 UDP、IPv6、Socket文件等。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install socat</span><span class="token comment">#查看帮助</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "help" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#查看信息</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "show info" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#查看后端服务状态</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "show servers state" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span><span class="token comment"># be_id be_name srv_id srv_name srv_addr srv_op_state srv_admin_state srv_uweight srv_iweight srv_time_since_last_change srv_check_status srv_check_result srv_check_health srv_check_state srv_agent_state bk_f_forced_id srv_f_forced_id srv_fqdn srv_port srvrecord</span><span class="token number">4</span> web_prot_http_nodes <span class="token number">1</span> <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30 <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">20</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> - <span class="token number">80</span> -<span class="token number">4</span> web_prot_http_nodes <span class="token number">2</span> <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31 <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">20</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> - <span class="token number">80</span> -<span class="token comment">#查看后端指定服务状态</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#修改weight，注意只针对单进程有效</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_prot_http_nodes/192.168.1.31 3" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">3</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#将后端服务器禁用，注意只针对单进程有效</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#启用后端服务器</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "enable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#将后端服务器软下线，即weight设为0</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_prot_http_nodes/192.168.1.31 0" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#针对haproxy的多进程,将后端服务器禁用</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock1</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock2</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># for i in &#123;1..2&#125;;do echo "set weight web_prot_http_nodes/192.168.1.31 10" | socat stdio /var/lib/haproxy/haproxy.sock$i;done</span><span class="token comment">#上线和下线后端服务器脚本</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cat haproxy_host_up_down.sh </span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">.</span> /etc/init.d/functions<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>up<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"set weight web_prot_http_nodes/<span class="token variable">$2</span> 1"</span> <span class="token operator">|</span> socat stdio /var/lib/haproxy/haproxy.sock  <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> action <span class="token string">"<span class="token variable">$2</span> is up"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>down<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"set weight web_prot_http_nodes/<span class="token variable">$2</span> 0"</span> <span class="token operator">|</span> socat stdio /var/lib/haproxy/haproxy.sock  <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> action <span class="token string">"<span class="token variable">$2</span> is down"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $0<span class="token variable">`</span></span> up|down IP"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh down 192.168.1.30</span><span class="token number">192.168</span>.1.30 is down                                       <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh down 192.168.1.31</span><span class="token number">192.168</span>.1.31 is down                                       <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh up 192.168.1.30</span><span class="token number">192.168</span>.1.30 is up                                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh up 192.168.1.31</span><span class="token number">192.168</span>.1.31 is up                                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre></div></figure><h2 id="1-2-静态算法"><a href="#1-2-静态算法" class="headerlink" title="1.2 静态算法"></a>1.2 静态算法</h2><p>静态算法：按照事先定义好的规则轮询进行调度，不关心后端服务器的当前负载、连接数和响应速度等，且无法实时动态修改权重(只能为0和1,不支持其它值)或者修改后不生效，如果需要修改只能靠重启HAProxy生效。  </p><h3 id="1-2-1-static-rr"><a href="#1-2-1-static-rr" class="headerlink" title="1.2.1 static-rr"></a>1.2.1 static-rr</h3><p>static-rr：基于权重的轮询调度，不支持运行时利用socat进行权重的动态调整(只支持0和1,不支持其它值)及后端服务器慢启动，其后端主机数量没有限制，相当于LVS中的 wrr</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance static-rr  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-2-2-first"><a href="#1-2-2-first" class="headerlink" title="1.2.2 first"></a>1.2.2 first</h3><p>first：根据服务器在列表中的位置，自上而下进行调度，但是其只会当第一台服务器的连接数达到上限，新请求才会分配给下一台服务，因此会忽略服务器的权重设置，此方式使用较少,不支持用socat进行动态修改权重,可以设置0和1,可以设置其它值但无效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance first  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-3-动态算法"><a href="#1-3-动态算法" class="headerlink" title="1.3 动态算法"></a>1.3 动态算法</h2><p>动态算法：基于后端服务器状态进行调度适当调整，新请求将优先调度至当前负载较低的服务器，且权重可以在haproxy运行时动态调整无需重启。</p><h3 id="1-3-1-roundrobin"><a href="#1-3-1-roundrobin" class="headerlink" title="1.3.1 roundrobin"></a>1.3.1 roundrobin</h3><p>roundrobin：基于权重的轮询动态调度算法，支持权重的运行时调整，不同于lvs中的rr轮训模式，HAProxy中的roundrobin支持慢启动(新加的服务器会逐渐增加转发数)，其每个后端backend中最多支持4095个real server，支持对real server权重动态调整，roundrobin为默认调度算法,此算法使用广泛.</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance roundrobin  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#支持动态调整权重</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 3" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">3</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="1-3-2-leastconn"><a href="#1-3-2-leastconn" class="headerlink" title="1.3.2 leastconn"></a>1.3.2 leastconn</h3><p>leastconn 加权的最少连接的动态，支持权重的运行时调整和慢启动，即:根据当前连接最少的后端服务器而非权重进行优先调度(新客户端连接)，比较适合长连接的场景使用，比如：MySQL等场景。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance leastconn  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-3-3-random"><a href="#1-3-3-random" class="headerlink" title="1.3.3 random"></a>1.3.3 random</h3><p>在1.9版本开始增加 random的负载平衡算法，其基于随机数作为一致性hash的key，随机负载平衡对于大型服务器场景或经常添加或删除服务器非常有用，支持weight的动态调整，weight较大的主机有更大概率获取新请求。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance random  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-4-其它算法"><a href="#1-4-其它算法" class="headerlink" title="1.4 其它算法"></a>1.4 其它算法</h2><p>其它算法即可作为静态算法，又可以通过选项成为动态算法</p><h3 id="1-4-1-source"><a href="#1-4-1-source" class="headerlink" title="1.4.1 source"></a>1.4.1 source</h3><p>​源地址hash，基于用户源地址hash并将请求转发到后端服务器，后续同一个源地址请求将被转发至同一个后端web服务器。此方式当后端服务器数据量发生变化时，会导致很多用户的请求转发至新的后端服务器，默认为静态方式，但是可以通过hash-type选项进行更改。</p><p>​这个算法一般是在不插入Cookie的TCP模式下使用，也可给不支持会话cookie的客户提供最好的会话粘性，适用于session会话保持但不支持cookie和缓存的场景。</p><p>​源地址有两种转发客户端请求到后端服务器的服务器选取计算方式，分别是取模法和一致性hash。</p><p><strong>map-base取模法：</strong></p><p>map-based：取模法，对source地址进行hash计算，再基于服务器总权重的取模，最终结果决定将此请求转发至对应的后端服务器。此方法是静态的，即不支持在线调整权重，不支持慢启动，可实现对后端服务器均衡调度。缺点是当服务器的总权重发生变化时，即有服务器上线或下线，都会因总权重发生变化而导致调度结果整体改变，hash-type 指定的默认值为此算法。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance <span class="token builtin class-name">source</span>  hash-type map-based  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#不支持动态调整权重值</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 3" | socat stdio /var/lib/haproxy/haproxy.sock</span>Backend is using a static LB algorithm and only accepts weights <span class="token string">'0%'</span> and <span class="token string">'100%'</span><span class="token builtin class-name">.</span><span class="token comment">#只能动态上线和下线</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 0" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">0</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span></code></pre></div></figure><p><strong>一致性hash：</strong></p><p>一致性哈希，当服务器的总权重发生变化时，对调度结果影响是局部的，不会引起大的变动，hash（o）mod n ，该hash算法是动态的，支持使用 socat等工具进行在线权重调整，支持慢启动。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance <span class="token builtin class-name">source</span>  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-2-uri"><a href="#1-4-2-uri" class="headerlink" title="1.4.2 uri"></a>1.4.2 uri</h3><p>基于对用户请求的URI的左半部分或整个uri做hash，再将hash结果对总权重进行取模后，根据最终结果将请求转发到后端指定服务器，适用于后端是缓存服务器场景，默认是静态算法，也可以通过hash-type指定map-based和consistent，来定义使用取模法还是一致性hash。  </p><p><strong>注意：此算法基于应用层，所以只支持 mode http ，不支持 mode tcp</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance uri  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-3-url-param"><a href="#1-4-3-url-param" class="headerlink" title="1.4.3 url_param"></a>1.4.3 url_param</h3><p>url_param对用户请求的url中的 params 部分中的一个参数key对应的value值作hash计算，并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个real server，如果无没key，将按roundrobin算法。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#url_param取模法配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance url_param userid  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#url_param一致性hash配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance url_param userid  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-4-hdr"><a href="#1-4-4-hdr" class="headerlink" title="1.4.4 hdr"></a>1.4.4 hdr</h3><p>针对用户每个http头部(header)请求中的指定信息做hash，此处由 name 指定的http首部将会被取出并做hash计算，然后由服务器总权重取模以后派发至某挑出的服务器，如果无有效值，则会使用默认的轮询调度。  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#hdr取模法配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance hdr<span class="token punctuation">(</span>User-Agent<span class="token punctuation">)</span>  <span class="token comment">#balance hdr(host)</span>  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#一致性hash配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  <span class="token comment">#balance hdr(User-Agent)</span>  balance hdr<span class="token punctuation">(</span>host<span class="token punctuation">)</span>  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-5-rdp-cookie"><a href="#1-4-5-rdp-cookie" class="headerlink" title="1.4.5 rdp-cookie"></a>1.4.5 rdp-cookie</h3><p>rdp-cookie对windows远程桌面的负载，使用cookie保持会话，默认是静态，也可以通过hash-type指定map-based和consistent，来定义使用取模法还是一致性hash。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#rdp-cookie 取模法配置</span>listen RDP  <span class="token builtin class-name">bind</span> :3389  balance rdp-cookie  mode tcp  server rdp0 <span class="token number">192.168</span>.1.30:3389 check fall <span class="token number">3</span> rise <span class="token number">5</span> inter <span class="token number">2000</span> weight <span class="token number">1</span><span class="token comment">#rdp-cookie 一致性hash配置</span>listen RDP  mode tcp  <span class="token builtin class-name">bind</span> :3389  balance rdp-cookie  hash-type consistent  server rdp0 <span class="token number">192.168</span>.1.30:3389 check fall <span class="token number">3</span> rise <span class="token number">5</span> inter <span class="token number">2000</span> weight <span class="token number">1</span>  <span class="token comment">#基于iptables实现RDP协议转发</span><span class="token comment">#必须开启ip转发功能： net.ipv4.ip_forward = 1</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># sysctl -w net.ipv4.ip_forward=1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h2 id="1-5-算法总结"><a href="#1-5-算法总结" class="headerlink" title="1.5 算法总结"></a>1.5 算法总结</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#静态</span>static-rr---------<span class="token operator">></span>tcp/httpfirst-------------<span class="token operator">></span>tcp/http<span class="token comment">#动态</span>roundrobin--------<span class="token operator">></span>tcp/httpleastconn---------<span class="token operator">></span>tcp/httprandom------------<span class="token operator">></span>tcp/http<span class="token comment">#以下静态和动态取决于hash_type是否consistent</span>source------------<span class="token operator">></span>tcp/httpUri---------------<span class="token operator">></span>httpurl_param---------<span class="token operator">></span>httphdr---------------<span class="token operator">></span>httprdp-cookie--------<span class="token operator">></span>tcp<span class="token comment">#各种算法使用场景</span>first              <span class="token comment">#使用较少</span>static-rr          <span class="token comment">#做了session共享的 web 集群</span>roundrobinrandomleastconn          <span class="token comment">#数据库</span><span class="token builtin class-name">source</span>             <span class="token comment">#基于客户端公网 IP 的会话保持</span>Uri---------------<span class="token operator">></span>http <span class="token comment">#缓存服务器，CDN服务商，蓝汛、百度、阿里云、腾讯</span>url_param---------<span class="token operator">></span>http <span class="token comment">#可以实现session保持</span>hdr                <span class="token comment">#基于客户端请求报文头部做下一步处理</span>rdp-cookie -       <span class="token comment">#基于Windows主机,很少使用</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).HAProxy基础配置详解</title>
    <link href="/2023/02/10/LB/HAProxy/haproxy02/"/>
    <url>/2023/02/10/LB/HAProxy/haproxy02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy基础配置详解"><a href="#1-HAProxy基础配置详解" class="headerlink" title="1.HAProxy基础配置详解"></a>1.HAProxy基础配置详解</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>http://cbonte.github.io/haproxy-dconv/http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html</code></pre></div></figure><p>HAProxy的配置文件&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg，配置文件由五部分组成。</p><ul><li>global：全局配置。进程及安全配置、性能等相关参数。</li><li>defaults：默认参数的配置部分。为frontend、backend、listen提供默认配置。</li><li>frontend：用于设置接收用户请求的前端虚拟节点。frontend可以根据ACL规则直接指定要使用的后端backend。</li><li>backend：用于设置集群后端服务集群的配置，也就是用来添加一组真实服务器，以处理前端用户的请求。</li><li>listen：同时拥有前端和后端配置,配置简单。</li></ul><h2 id="1-1-global配置"><a href="#1-1-global配置" class="headerlink" title="1.1 global配置"></a>1.1 global配置</h2><p>官方文档：<a href="http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#3">http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#3</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#锁定运行目录</span><span class="token function">chroot</span><span class="token comment">#守护进程运行</span>daemon<span class="token comment">#socket文件</span>stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin<span class="token comment">#运行haproxy的用户身份</span>user haproxygroup haproxy<span class="token comment">#开启的haproxy worker进程数，默认进程数是一个</span>nbproc <span class="token number">4</span><span class="token comment">#和多进程 nbproc配置互斥（版本有关,CentOS8的haproxy1.8无此问题）,指定每个haproxy进程开启的线程数，默认为每个进程一个线程</span><span class="token comment">#如果同时启用nbproc和nbthread无法启动服务</span>nbthread <span class="token number">1</span><span class="token comment">#绑定haproxy worker 进程至指定CPU，将第1个work进程绑定至0号CPU</span>cpu-map <span class="token number">1</span> <span class="token number">0</span><span class="token comment">#绑定haproxy worker 进程至指定CPU，将第2个work进程绑定至1号CPU</span>cpu-map <span class="token number">2</span> <span class="token number">1</span><span class="token comment">#每个haproxy进程的最大并发连接数</span>maxconn <span class="token number">100000</span><span class="token comment">#每个haproxy进程ssl最大连接数,用于haproxy配置了证书的场景下</span>maxsslconn n<span class="token comment">#每个进程每秒创建的最大连接数量</span>maxconnrate n<span class="token comment">#后端server状态check随机提前或延迟百分比时间，建议2-5(20%-50%)之间，默认值0</span>spread-checks n<span class="token comment">#指定pid文件路径</span>pidfile<span class="token comment">#定义全局的syslog服务器；日志服务器需要开启UDP协议，最多可以定义两个</span>log <span class="token number">127.0</span>.0.1 local2 info</code></pre></div></figure><p><strong>多进程和线程：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多进程和线程</span><span class="token comment">#多进程和socket文件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>  stats socket /var/lib/haproxy/haproxy.sock1 mode <span class="token number">600</span> level admin process <span class="token number">1</span>  stats socket /var/lib/haproxy/haproxy.sock2 mode <span class="token number">600</span> level admin process <span class="token number">2</span>  nbproc <span class="token number">2</span> <span class="token comment">#nbproc大于1</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># pstree -p | grep haproxy</span>           <span class="token operator">|</span>-haproxy<span class="token punctuation">(</span><span class="token number">10579</span><span class="token punctuation">)</span>-+-haproxy<span class="token punctuation">(</span><span class="token number">10582</span><span class="token punctuation">)</span>           <span class="token operator">|</span>                `-haproxy<span class="token punctuation">(</span><span class="token number">10583</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/haproxy/</span>total <span class="token number">4</span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">6</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.pidsrw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:20 haproxy.socksrw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.sock1srw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.sock2</code></pre></div></figure><p><strong>HAProxy日志配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy日志配置</span><span class="token comment">#在global配置项定义</span><span class="token comment">#基于syslog记录日志到指定设备，级别有(err、warning、info、debug)</span>log <span class="token number">127.0</span>.0.1 local<span class="token punctuation">&#123;</span><span class="token number">1</span>-7<span class="token punctuation">&#125;</span> info<span class="token comment">#Rsyslog配置</span><span class="token punctuation">[</span>root@node11 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rsyslog</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#启动本地和远程日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>  log <span class="token number">127.0</span>.0.1 local2 info  log <span class="token number">192.168</span>.1.21 local2 info<span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#开启本地日志</span><span class="token punctuation">[</span>root@node11 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#开启远程主机日志</span><span class="token punctuation">[</span>root@node21 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><p><strong>子配置文件：</strong></p><p>当业务众多时，将所有配置都放在一个配置文件中，会造成维护困难。可以考虑按业务分类，将配置信息拆分，放在不同的子配置文件中，从而达到方便维护的目的。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建子配置目录</span><span class="token comment">#注意: 子配置文件的文件后缀必须为.cfg</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy/conf.d</span><span class="token comment">#创建子配置文件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/conf.d/test.cfg</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456<span class="token comment">#添加子配置目录到unit文件中</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/haproxy.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>HAProxy Load Balancer<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-f</span> /etc/haproxy/conf.d/ <span class="token parameter variable">-c</span> <span class="token parameter variable">-q</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-f</span> /etc/haproxy/conf.d/ <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR2</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span></code></pre></div></figure><h2 id="1-2-default配置"><a href="#1-2-default配置" class="headerlink" title="1.2 default配置"></a>1.2 default配置</h2><p><strong>注意：name字段只能使用大小写字母，数字，‘-’(dash)，’_‘(underscore)，’.’ (dot)和 ‘:’(colon)，并且严格区分大小写。</strong></p><p>defaults [<name>] [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当server Id对应的服务器挂掉后，强制定向到其他健康的服务器，重新派发</span>option redispatch<span class="token comment">#当服务器负载很高时，自动结束掉当前队列处理比较久的连接，针对业务情况选择开启</span>option abortonclose<span class="token comment">#开启与客户端的会话保持</span>option http-keep-alive<span class="token comment">#透传客户端真实IP至后端web服务器</span>option forwardfor<span class="token comment">#设置默认工作类型,使用TCP服务器性能更好，减少压力</span>mode http<span class="token operator">|</span>tcp<span class="token comment">#session 会话保持超时时间，此时间段内会转发到相同的后端服务器</span><span class="token function">timeout</span> http-keep-alive 120s<span class="token comment">#客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)，默认单位ms</span><span class="token function">timeout</span> connect 120s<span class="token comment">#客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，默认单位ms，如果超时，会出现502错误，此值建议设置较大些，访止502错误</span><span class="token function">timeout</span> server 600s<span class="token comment">#设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同</span><span class="token function">timeout</span> client 600s<span class="token comment">#对后端服务器的默认检测超时时间</span><span class="token function">timeout</span> check 5s<span class="token comment">#指定后端服务器的默认设置</span>default-server inter <span class="token number">1000</span> weight <span class="token number">3</span></code></pre></div></figure><h2 id="1-3-frontend配置"><a href="#1-3-frontend配置" class="headerlink" title="1.3 frontend配置"></a>1.3 frontend配置</h2><p>frontend <name>   [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定HAProxy的监听地址，可以是IPV4或IPV6，可以同时监听多个IP或端口，可同时用于listen字段中</span><span class="token comment">#格式：bind [&lt;address>]:&lt;port_range> [, ...] [param*]</span><span class="token comment">#注意：如果需要绑定在非本机的IP，需要开启内核参数：net.ipv4.ip_nonlocal_bind=1</span><span class="token builtin class-name">bind</span><span class="token comment">#针对所有server配置,当前端服务器的连接数达到上限后的后援队列长度，注意：不支持backend</span>backlog <span class="token operator">&lt;</span>backlog<span class="token operator">></span><span class="token comment">#监听http的多个IP的多个端口和sock文件</span>listen http_proxy  <span class="token builtin class-name">bind</span> :80,:443,:8801-8810  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.20:10010,192.168.1.20:10020  <span class="token builtin class-name">bind</span> /var/run/ssl-frontend.sock user root mode <span class="token number">600</span> accept-proxy  <span class="token comment">#https监听</span>listen http_https_proxy  <span class="token builtin class-name">bind</span> :80  <span class="token builtin class-name">bind</span> :443 ssl crt /etc/haproxy/site.pem  <span class="token comment">#监听ipv6、ipv4和unix sock文件</span>listen http_https_proxy_explicit  <span class="token builtin class-name">bind</span> ipv6@:80  <span class="token builtin class-name">bind</span> ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem  <span class="token builtin class-name">bind</span> unix@ssl-frontend.sock user root mode <span class="token number">600</span> accept-proxy  <span class="token comment">#监听file descriptor</span>listen external_bind_app1  <span class="token builtin class-name">bind</span> <span class="token string">"fd@<span class="token variable">$&#123;FD_APP1&#125;</span>"</span>  <span class="token comment">#可以采用后面形式命名：业务-服务-端口号</span>frontend chs_web_port  <span class="token builtin class-name">bind</span> :80,:8080  <span class="token builtin class-name">bind</span> <span class="token number">10.0</span>.0.7:10080,:8801-8810,10.0.0.17:9001-9010  <span class="token comment">#指定负载协议类型</span>  mode tcp  <span class="token comment">#调用的后端服务器组名称</span>  use_backend <span class="token operator">&lt;</span>backend_name<span class="token operator">></span></code></pre></div></figure><h2 id="1-4-backend配置"><a href="#1-4-backend配置" class="headerlink" title="1.4 backend配置"></a>1.4 backend配置</h2><p>backend  <name>   [ from <defaults_name> ]</defaults_name></name></p><p>定义一组后端服务器，backend服务器将被frontend进行调用。  </p><p>注意: backend 的名称必须唯一,并且必须在listen或frontend中事先定义才可以使用,否则服务无法启动</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定负载协议类型,和对应的frontend必须一致</span>mode http<span class="token operator">|</span>tcp<span class="token comment">#配置选项</span><span class="token comment">#注意：option后面加 httpchk，smtpchk,mysql-check,pgsql-check，ssl-hello-chk方法，可用于实现更多应用层检测功能。</span>option<span class="token comment">#定义后端real server,必须指定IP和端口</span>server<span class="token comment">#针对一个server配置</span><span class="token comment">#对指定real进行健康状态检查，如果不加此设置，默认不开启检查,只有check后面没有其它配置也可以启用检查功能</span>check<span class="token comment">#默认对相应的后端服务器IP和端口,利用TCP连接进行周期性健康性检查,注意必须指定端口才能实现健康性检查</span>addr <span class="token operator">&lt;</span>IP<span class="token operator">></span>        <span class="token comment">#可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量</span>port <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#指定的健康状态监测端口</span>inter <span class="token operator">&lt;</span>num<span class="token operator">></span>      <span class="token comment">#健康状态检查间隔时间，默认2000 ms</span>fall <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#后端服务器从线上转为线下的检查的连续失效次数，默认为3</span>rise <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#后端服务器从下线恢复上线的检查的连续有效次数，默认为2</span>weight <span class="token operator">&lt;</span>weight<span class="token operator">></span>  <span class="token comment">#默认为1，最大值为256，0(状态为蓝色)表示不参与负载均衡，但仍接受持久连接</span>backup           <span class="token comment">#将后端服务器标记为备份状态,只在所有非备份主机down机时提供服务，类似Sorry Server</span>disabled         <span class="token comment">#将后端服务器标记为不可用状态，即维护状态，除了持久模式，将不再接受连接,状态为深黄色,优雅下线,不再接受新用户的请求.</span><span class="token comment">#将请求临时(302)重定向至其它URL，只适用于http模式</span>redirect prefix http://www.baidu.com/<span class="token comment">#将请求临时(302)重定向至其它URL，只适用于http模式</span>redir http://www.baidu.com<span class="token comment">#当前后端server的最大并发连接数</span>maxconn <span class="token operator">&lt;</span>maxconn<span class="token operator">></span></code></pre></div></figure><p><strong>frontend+backend 配置实例：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官网业务访问入口</span>frontend WEB_PORT_80  <span class="token builtin class-name">bind</span> :80  mode http  use_backend web_prot_http_nodesbackend web_prot_http_nodes  mode http  option forwardfor  server web1 <span class="token number">192.168</span>.1.13:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-5-listen配置"><a href="#1-5-listen配置" class="headerlink" title="1.5 listen配置"></a>1.5 listen配置</h2><p>listen   <name>   [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#listen替代frontend+backend</span>listen WEB_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  mode http  option forwardfor    server web1 <span class="token number">192.168</span>.1.13:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).HAProxy简介及安装</title>
    <link href="/2023/02/09/LB/HAProxy/haproxy01/"/>
    <url>/2023/02/09/LB/HAProxy/haproxy01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-负载均衡简介"><a href="#1-负载均衡简介" class="headerlink" title="1.负载均衡简介"></a>1.负载均衡简介</h1><p>负载均衡：Load Balance，简称LB，是一种服务或基于硬件设备等实现的高可用反向代理技术，负载均衡将特定的业务(web服务、网络流量等)分担给指定的一个或多个后端特定的服务器或设备，从而提高了公司业务的并发处理能力、保证了业务的高可用性、方便了业务后期的水平动态扩展。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#阿里云SLB介绍<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//developer.aliyun.com/article/1803</span></span></code></pre></div></figure><p>负载均衡类型：</p><ul><li><p>四层</p><ul><li>LVS</li><li>Nginx(1.9版本后)</li><li>HAProxy</li></ul></li><li><p>七层</p><ul><li>HAProxy</li><li>Nginx</li></ul></li><li><p>硬件</p><ul><li><p>F5</p></li><li><p>Netscaler</p></li><li><p>Array</p></li><li><p>深信服</p></li><li><p>北京灵州</p></li></ul></li></ul><h1 id="2-HAPoxy简介"><a href="#2-HAPoxy简介" class="headerlink" title="2.HAPoxy简介"></a>2.HAPoxy简介</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#社区版网站<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.haproxy.org/</span></span>#Github<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/haproxy</span></span></code></pre></div></figure><h1 id="3-HAProxy安装"><a href="#3-HAProxy安装" class="headerlink" title="3.HAProxy安装"></a>3.HAProxy安装</h1><h2 id="3-1-Ubuntu20-04安装"><a href="#3-1-Ubuntu20-04安装" class="headerlink" title="3.1 Ubuntu20.04安装"></a>3.1 Ubuntu20.04安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#参考地址<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//haproxy.debian.net/</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node30:~<span class="token comment"># apt-get install --no-install-recommends software-properties-common</span>root@node30:~<span class="token comment"># add-apt-repository ppa:vbernat/haproxy-2.7</span>root@node30:~<span class="token comment"># apt update</span>root@node30:~<span class="token comment"># apt-get install haproxy=2.7.\*</span>root@node30:~<span class="token comment"># haproxy -v</span>HAProxy version <span class="token number">2.7</span>.2-1ppa1~focal <span class="token number">2023</span>/01/20 - https://haproxy.org/</code></pre></div></figure><h2 id="3-2-CentOS7-9安装"><a href="#3-2-CentOS7-9安装" class="headerlink" title="3.2 CentOS7.9安装"></a>3.2 CentOS7.9安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#第三方网站下载RPM包<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//pkgs.org/download/haproxy</span></span>#第三方YUM仓库安装<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//centos7.iuscommunity.org/ius-release.rpm</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7.9默认的BASE仓库安装</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HA-Proxy version <span class="token number">1.5</span>.18 <span class="token number">2016</span>/05/10Copyright <span class="token number">2000</span>-2016 Willy Tarreau <span class="token operator">&lt;</span>willy@haproxy.org<span class="token operator">></span><span class="token comment">#第三方网站下载RPM包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://www.nosuchhost.net/~cheese/fedora/packages/epel-7/x86_64/cheese-release-7-1.noarch.rpm</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># rpm -Uvh cheese-release*rpm</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HA-Proxy version <span class="token number">1.8</span>.14-52e4d43 <span class="token number">2018</span>/09/20Copyright <span class="token number">2000</span>-2018 Willy Tarreau <span class="token operator">&lt;</span>willy@haproxy.org<span class="token operator">></span></code></pre></div></figure><h2 id="3-3-编译安装HAProxy"><a href="#3-3-编译安装HAProxy" class="headerlink" title="3.3 编译安装HAProxy"></a>3.3 编译安装HAProxy</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy源码包下载地址</span>http://www.haproxy.org/download/</code></pre></div></figure><h3 id="3-3-1-安装lua环境"><a href="#3-3-1-安装lua环境" class="headerlink" title="3.3.1 安装lua环境"></a>3.3.1 安装lua环境</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考链接：http://www.lua.org/start.html</span><span class="token comment">#CentOS7安装</span><span class="token comment">#当前系统lua版本</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># lua -v</span>Lua <span class="token number">5.1</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2008 Lua.org, PUC-Rio<span class="token comment">#安装基础命令及编译依赖环境</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum install gcc readline-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar zxf lua-5.4.4.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/lua-5.4.4/</span><span class="token punctuation">[</span>root@node10 lua-5.4.4<span class="token punctuation">]</span><span class="token comment"># make all test</span><span class="token comment">#查看lua版本</span><span class="token punctuation">[</span>root@node10 lua-5.4.4<span class="token punctuation">]</span><span class="token comment"># src/lua -v</span>Lua <span class="token number">5.4</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2022 Lua.org, PUC-Rio</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04安装</span>root@node30:~<span class="token comment"># apt install gcc iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev openssh-server libreadline-dev libsystemd-dev make</span>root@node30:~<span class="token comment"># curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz</span>root@node30:~<span class="token comment"># tar zxf lua-5.4.4.tar.gz -C /usr/local/src/</span>root@node30:~<span class="token comment"># cd /usr/local/src/lua-5.4.4/</span>root@node30:/usr/local/src/lua-5.4.4<span class="token comment"># make all test</span><span class="token comment">#查看lua版本</span>root@node30:/usr/local/src/lua-5.4.4<span class="token comment"># src/lua -v</span>Lua <span class="token number">5.4</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2022 Lua.org, PUC-Rio</code></pre></div></figure><h3 id="3-3-2-编译安装HAProxy"><a href="#3-3-2-编译安装HAProxy" class="headerlink" title="3.3.2 编译安装HAProxy"></a>3.3.2 编译安装HAProxy</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy1.8及1.9版本编译参数：</span><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86_64 <span class="token assign-left variable">TARGET</span><span class="token operator">=</span>linux2628 <span class="token assign-left variable">USE_PCRE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_OPENSSL</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_ZLIB</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_SYSTEMD</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_CPU_AFFINITY</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/haproxy<span class="token comment">#HAProxy2.0以上版本编译参数：</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc openssl-devel pcre-devel systemd-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf haproxy-2.7.2.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/haproxy-2.7.2/</span><span class="token punctuation">[</span>root@node10 haproxy-2.1.12<span class="token punctuation">]</span><span class="token comment"># make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_LUA=1 LUA_INC=/usr/local/src/lua-5.4.4/src/ LUA_LIB=/usr/local/src/lua-5.4.4/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy-2.7.2]# make install PREFIX=/apps/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy-2.7.2]# ln -s /apps/haproxy/sbin/haproxy /usr/sbin/</span><span class="token comment">#验证HAProxy版本</span><span class="token punctuation">[</span>root@node10 haproxy-2.7.2<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HAProxy version <span class="token number">2.7</span>.2-7e295dd <span class="token number">2023</span>/01/20 - https://haproxy.org/Status: stable branch - will stop receiving fixes around Q1 <span class="token number">2024</span>.Known bugs: http://www.haproxy.org/bugs/bugs-2.7.2.htmlRunning on: Linux <span class="token number">3.10</span>.0-1160.el7.x86_64 <span class="token comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64</span><span class="token comment">#准备HAProxy启动文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/haproxy.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>HAProxy Load Balancer<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-c</span> <span class="token parameter variable">-q</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR2</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token comment">#创建自定义配置文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>global  maxconn <span class="token number">100000</span>  <span class="token function">chroot</span> /apps/haproxy  stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin  <span class="token comment">#uid 99</span>  <span class="token comment">#gid 99</span>  user haproxy  group haproxy  daemon  <span class="token comment">#nbproc 4</span>  <span class="token comment">#cpu-map 1 0</span>  <span class="token comment">#cpu-map 2 1</span>  <span class="token comment">#cpu-map 3 2</span>  <span class="token comment">#cpu-map 4 3</span>  pidfile /var/lib/haproxy/haproxy.pid  log <span class="token number">127.0</span>.0.1 local2 info  defaults  option http-keep-alive  option forwardfor  maxconn <span class="token number">100000</span>  mode http  <span class="token function">timeout</span> connect 300000ms  <span class="token function">timeout</span> client 300000ms  <span class="token function">timeout</span> server 300000ms  listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456    <span class="token comment">#启动HAProxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /var/lib/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now haproxy</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Keepalived企业应用</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived03/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Keepalived单主配置"><a href="#1-Keepalived单主配置" class="headerlink" title="1.Keepalived单主配置"></a>1.Keepalived单主配置</h1><h2 id="1-1-MASTER配置"><a href="#1-1-MASTER配置" class="headerlink" title="1.1 MASTER配置"></a>1.1 MASTER配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-2-BACKUP配置"><a href="#1-2-BACKUP配置" class="headerlink" title="1.2 BACKUP配置"></a>1.2 BACKUP配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node12   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="2-抢占模式和非抢占模式"><a href="#2-抢占模式和非抢占模式" class="headerlink" title="2.抢占模式和非抢占模式"></a>2.抢占模式和非抢占模式</h1><h2 id="2-1-非抢占模式"><a href="#2-1-非抢占模式" class="headerlink" title="2.1 非抢占模式"></a>2.1 非抢占模式</h2><p>默认为抢占模式preempt，即当高优先级的主机恢复在线后，会抢占低先级的主机的MASTER角色，造成网络抖动，建议设置为非抢占模式nopreempt ，即高优先级主机恢复后，并不会抢占低优先级主机的MASTER角色。</p><p><strong>注意：要关闭 VIP抢占，必须将各 keepalived 服务器state配置为BACKUP</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    <span class="token comment">#添加此行，都为nopreempt</span>    nopreempt    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    <span class="token comment">#添加此行，都为nopreempt</span>    nopreempt    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="2-2-抢占延迟模式"><a href="#2-2-抢占延迟模式" class="headerlink" title="2.2 抢占延迟模式"></a>2.2 抢占延迟模式</h2><p>抢占延迟模式，即优先级高的主机恢复后，不会立即抢回VIP，而是延迟一段时间（默认300s）再抢回VIP</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">preempt_delay <span class="token operator">&lt;</span>INT<span class="token operator">></span> <span class="token comment">#指定抢占延迟时间为&lt;INT>s，默认延迟300s</span></code></pre></div></figure><p><strong>注意：需要将各 keepalived 服务器state配置为BACKUP，并且不启用vrrp_strict</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="3-VIP单播配置"><a href="#3-VIP单播配置" class="headerlink" title="3.VIP单播配置"></a>3.VIP单播配置</h1><p>默认keepalived主机之间利用多播相互通告消息，会造成网络拥塞，可以替换成单播，减少网络流量。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在所有节点vrrp_instance语句块中设置对方主机的IP，建议设置为专用于对应心跳线网络的地址，而非使用业务网络。</span>unicast_src_ip <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token comment">#指定发送单播的源IP</span>unicast_peer <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token comment">#指定接收单播的对方目标主机IP</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>注意：启用 vrrp_strict 时，不能启用单播。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#MASTER主机配置</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    unicast_src_ip <span class="token number">192.168</span>.1.11    unicast_peer <span class="token punctuation">&#123;</span>      <span class="token number">192.168</span>.1.12    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#BACKUP主机配置</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node12   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    unicast_src_ip <span class="token number">192.168</span>.1.12    unicast_peer <span class="token punctuation">&#123;</span>      <span class="token number">192.168</span>.1.11    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#抓包</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># tcpdump -i ens33 -nn src host 192.168.1.11 and dst host 192.168.1.12</span>tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decodelistening on ens33, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes<span class="token number">14</span>:09:37.610480 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:38.613866 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:39.615474 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:40.618198 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:41.619297 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:42.620918 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span></code></pre></div></figure><h1 id="4-Keepalived通知脚本配置"><a href="#4-Keepalived通知脚本配置" class="headerlink" title="4.Keepalived通知脚本配置"></a>4.Keepalived通知脚本配置</h1><p>当keepalived的状态变化时，可以自动触发脚本的执行，比如：发邮件通知用户。默认以用户keepalived_script身份执行脚本，如果此用户不存在，以root执行脚本。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以用下面指令指定脚本执行用户的身份</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>script_user <span class="token operator">&lt;</span><span class="token environment constant">USER</span><span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-1-通知脚本类型"><a href="#4-1-通知脚本类型" class="headerlink" title="4.1 通知脚本类型"></a>4.1 通知脚本类型</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当前节点成为主节点时触发的脚本</span>notify_master <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当前节点转为备节点时触发的脚本</span>notify_backup <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当前节点转为“失败”状态时触发的脚本</span>notify_fault <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#通用格式的通知触发机制，一个脚本可完成以上三种状态的转换时的通知</span>notify <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当停止VRRP时触发的脚本</span>notify_stop <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span></code></pre></div></figure><h2 id="4-2-脚本调用方式"><a href="#4-2-脚本调用方式" class="headerlink" title="4.2 脚本调用方式"></a>4.2 脚本调用方式</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    <span class="token comment">#此处添加</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-3-创建通知脚本"><a href="#4-3-创建通知脚本" class="headerlink" title="4.3 创建通知脚本"></a>4.3 创建通知脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/notify.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">contact</span><span class="token operator">=</span><span class="token string">'1285780460@qq.com'</span><span class="token function-name function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">mailsubject</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> to be <span class="token variable">$1</span>, vip floating"</span>    <span class="token assign-left variable">mailbody</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%F %T'</span><span class="token variable">)</span></span>: vrrp transition, <span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> changed to be <span class="token variable">$1</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$mailbody</span>"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$mailsubject</span>"</span> <span class="token variable">$contact</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>master<span class="token punctuation">)</span>    notify master    <span class="token punctuation">;</span><span class="token punctuation">;</span>backup<span class="token punctuation">)</span>    notify backup    <span class="token punctuation">;</span><span class="token punctuation">;</span>fault<span class="token punctuation">)</span>    notify fault<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> &#123;master|backup|fault&#125;"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre></div></figure><h2 id="4-4-邮件配置"><a href="#4-4-邮件配置" class="headerlink" title="4.4 邮件配置"></a>4.4 邮件配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install mailx sendmail</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/mail.rc</span><span class="token comment">#在最后面添加下面行</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>chen_huai_sen@163.com<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp.163.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>chen_huai_sen@163.com<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>你的授权码<span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span class="token comment">#测试发送邮件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "Test Mail"| mail -s Warning chen_huai_sen@163.com</span></code></pre></div></figure><h2 id="4-5-实现Keepalived状态切换通知脚本"><a href="#4-5-实现Keepalived状态切换通知脚本" class="headerlink" title="4.5 实现Keepalived状态切换通知脚本"></a>4.5 实现Keepalived状态切换通知脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在所有 keepalived节点配置如下</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/notify.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">contact</span><span class="token operator">=</span><span class="token string">'1285780460@qq.com'</span><span class="token function-name function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">mailsubject</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> to be <span class="token variable">$1</span>, vip floating"</span>    <span class="token assign-left variable">mailbody</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%F %T'</span><span class="token variable">)</span></span>: vrrp transition, <span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> changed to be <span class="token variable">$1</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$mailbody</span>"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$mailsubject</span>"</span> <span class="token variable">$contact</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>master<span class="token punctuation">)</span>    notify master    <span class="token punctuation">;</span><span class="token punctuation">;</span>backup<span class="token punctuation">)</span>    notify backup    <span class="token punctuation">;</span><span class="token punctuation">;</span>fault<span class="token punctuation">)</span>    notify fault<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> &#123;master|backup|fault&#125;"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x /etc/keepalived/notify.sh</span><span class="token comment">#模拟MASTER故障</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop keepalived</span></code></pre></div></figure><p><img src="/2023/02/06/HA/Keepalived/keepalived03/image-20230208162916282.png" alt="image-20230208162916282">  </p><h1 id="5-Keepalived双主配置"><a href="#5-Keepalived双主配置" class="headerlink" title="5.Keepalived双主配置"></a>5.Keepalived双主配置</h1><p>MASTER&#x2F;SLAVE的单主架构，同一时间只有一个Keepalived对外提供服务，此主机繁忙，而另一台主机却很空闲，利用率低下，可以使用MASTER&#x2F;MASTER的双主架构，解决此问题。  即将两个或以上VIP分别运行在不同的keepalived服务器，以实现服务器并行提供web访问的目的，提高服务器资源利用率。  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_script check_down <span class="token punctuation">&#123;</span>   script <span class="token string">"/etc/keepalived/checkDown.sh"</span>   interval <span class="token number">1</span>   weight <span class="token parameter variable">-30</span>   fall <span class="token number">3</span>   rise <span class="token number">2</span>   <span class="token function">timeout</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vrrp_instance VI_2 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">77</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.77 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_script check_down <span class="token punctuation">&#123;</span>   script <span class="token string">"/etc/keepalived/checkDown.sh"</span>   interval <span class="token number">1</span>   weight <span class="token parameter variable">-30</span>   fall <span class="token number">3</span>   rise <span class="token number">2</span>   <span class="token function">timeout</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vrrp_instance VI_2 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">77</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.77 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="6-基于VRRP-Script实现高可用"><a href="#6-基于VRRP-Script实现高可用" class="headerlink" title="6.基于VRRP Script实现高可用"></a>6.基于VRRP Script实现高可用</h1><p>keepalived利用 VRRP Script 技术，可以调用外部的辅助脚本进行资源监控，并根据监控的结果实现优先动态调整，从而实现其它应用的高可用性功能。</p><h2 id="6-1-VRRP-Script配置"><a href="#6-1-VRRP-Script配置" class="headerlink" title="6.1 VRRP Script配置"></a>6.1 VRRP Script配置</h2><ul><li>第一步：定义脚本</li></ul><p>vrrp_script：自定义资源监控脚本，vrrp实例根据脚本返回值，公共定义，可被多个实例调用，定义在vrrp实例之外的独立配置块，一般放在global_defs设置块之后,是和global_defs平级的语句块。通常此脚本用于监控指定应用的状态。一旦发现应用的状态异常，则触发对MASTER节点的权重减至低于BACKUP节点，从而实现VIP切换到BACKUP节点。</p><p><strong>注意: 此定义脚本的语句块一定要放在下面调用此语句vrrp_instance语句块的前面</strong>  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">vrrp_script <span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span> <span class="token punctuation">&#123;</span>script <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span> <span class="token comment">#此脚本返回值为非0时，会触发下面OPTIONS执行</span>OPTIONS<span class="token punctuation">&#125;</span><span class="token comment">#详细配置</span>vrrp_script <span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token comment">#定义一个检测脚本，在global_defs 之外配置</span>script <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>    <span class="token comment">#Shell命令或脚本路径(注意执行权限)</span>interval <span class="token operator">&lt;</span>INT<span class="token operator">></span>                     <span class="token comment">#间隔时间，单位为秒，默认1秒</span><span class="token function">timeout</span> <span class="token operator">&lt;</span>INT<span class="token operator">></span>                      <span class="token comment">#超时时间</span>weight <span class="token operator">&lt;</span>INT:-254<span class="token punctuation">..</span><span class="token number">25</span><span class="token operator"><span class="token file-descriptor important">4</span>></span>             <span class="token comment">#默认为0,如果设置此值为负数，当上面脚本返回值为非0时，会将此值与本节点权重相加可以                                         降低本节点权重，即表示fall. 如果是正数，当脚本返回值为0，会将此值与本节点权重相加                                         可以提高本节点权重，即表示 rise.通常使用负值</span>fall <span class="token operator">&lt;</span>INT<span class="token operator">></span>                         <span class="token comment">#执行脚本连续几次都失败,则转换为失败，建议设为2以上</span>rise <span class="token operator">&lt;</span>INT<span class="token operator">></span>                         <span class="token comment">#执行脚本连续几次都成功，把服务器从失败标记为成功</span>user USERNAME <span class="token punctuation">[</span>GROUPNAME<span class="token punctuation">]</span>          <span class="token comment">#执行监测脚本的用户或组</span>init_fail                          <span class="token comment">#设置默认标记为失败状态，监测成功之后再转换为成功状态</span><span class="token punctuation">&#125;</span></code></pre></div></figure><ul><li>第二步：调用脚本</li></ul><p>track_script：调用vrrp_script定义的脚本去监控资源，定义在VRRP实例之内，调用事先定义的vrrp_script  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">track_script <span class="token punctuation">&#123;</span>SCRIPT_NAME_1SCRIPT_NAME_2<span class="token punctuation">&#125;</span><span class="token comment">#调用VRRP Script</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>track_script <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="6-2-基于脚本实现主从切换"><a href="#6-2-基于脚本实现主从切换" class="headerlink" title="6.2 基于脚本实现主从切换"></a>6.2 基于脚本实现主从切换</h2><h3 id="6-2-1-Keepalived1配置"><a href="#6-2-1-Keepalived1配置" class="headerlink" title="6.2.1 Keepalived1配置"></a>6.2.1 Keepalived1配置</h3><h3 id="6-2-2-Keepalived2配置"><a href="#6-2-2-Keepalived2配置" class="headerlink" title="6.2.2 Keepalived2配置"></a>6.2.2 Keepalived2配置</h3><h3 id="6-2-3-创建checkDown-sh"><a href="#6-2-3-创建checkDown-sh" class="headerlink" title="6.2.3 创建checkDown.sh"></a>6.2.3 创建checkDown.sh</h3><h3 id="6-2-4-验证主从切换"><a href="#6-2-4-验证主从切换" class="headerlink" title="6.2.4 验证主从切换"></a>6.2.4 验证主从切换</h3><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 <span class="token number">192.168</span>.1.66</code></pre></div></figure><p><strong>Keepalived1主机创建down文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># touch /etc/keepalived/down</span></code></pre></div></figure><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 </code></pre></div></figure><p><strong>删除down文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/keepalived/down</span></code></pre></div></figure><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 <span class="token number">192.168</span>.1.66</code></pre></div></figure><p><strong>查看VIP切换日志：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Keepalived1日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/log/keepalived.log</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:32 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:33 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Script<span class="token punctuation">(</span>check_down<span class="token punctuation">)</span> failedFeb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Changing effective priority from <span class="token number">100</span> to <span class="token number">70</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Received advert with higher priority <span class="token number">80</span>, ours <span class="token number">70</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> removing protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.sh<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:36 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:17 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Script<span class="token punctuation">(</span>check_down<span class="token punctuation">)</span> succeededFeb  <span class="token number">8</span> <span class="token number">19</span>:57:17 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Changing effective priority from <span class="token number">70</span> to <span class="token number">100</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> forcing a new MASTER electionFeb  <span class="token number">8</span> <span class="token number">19</span>:57:19 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Transition to MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> setting protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.shFeb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66<span class="token comment">#Keepalived2日志</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/log/keepalived.log</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> forcing a new MASTER electionFeb  <span class="token number">8</span> <span class="token number">19</span>:55:36 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Transition to MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> setting protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.shFeb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Received advert with higher priority <span class="token number">100</span>, ours <span class="token number">80</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> removing protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.sh</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Keepalived配置说明</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived02/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Keepalived配置说明"><a href="#1-Keepalived配置说明" class="headerlink" title="1.Keepalived配置说明"></a>1.Keepalived配置说明</h1><h2 id="1-1-配置文件组成"><a href="#1-1-配置文件组成" class="headerlink" title="1.1 配置文件组成"></a>1.1 配置文件组成</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置文件</span>/etc/keepalived/keepalived.conf<span class="token comment">#配置文件组成</span>global_defs <span class="token punctuation">&#123;</span> <span class="token comment">#全局配置，定义邮件配置，route_id，vrrp配置，多播地址等。</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span> <span class="token comment">#定义每个vrrp虚拟路由器</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span>virtual_server <span class="token number">192.168</span>.200.100 <span class="token number">443</span> <span class="token punctuation">&#123;</span> <span class="token comment">#LVS集群配置</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-2-Keepalived详细配置"><a href="#1-2-Keepalived详细配置" class="headerlink" title="1.2 Keepalived详细配置"></a>1.2 Keepalived详细配置</h2><h3 id="1-2-1-全局配置"><a href="#1-2-1-全局配置" class="headerlink" title="1.2.1 全局配置"></a>1.2.1 全局配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     <span class="token comment">##keepalived 发生故障切换时邮件发送的目标邮箱，可以按行区分写多个</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   <span class="token comment">#发邮件地址</span>   notification_email_from Alexandre.Cassen@firewall.loc   <span class="token comment">#邮件服务器地址</span>   smtp_server <span class="token number">192.168</span>.200.1   <span class="token comment">#邮件服务器连接timeout</span>   smtp_connect_timeout <span class="token number">30</span>   <span class="token comment">#每个keepalived主机唯一标识，建议使用当前主机名，但多节点重名不影响</span>   router_id LVS_DEVEL   <span class="token comment">#对所有通告报文都检查，会比较消耗性能，启用此配置后，如果收到的通告报文和上一个报文是同一个路由器，则跳过检查，默认值为全检查</span>   vrrp_skip_check_adv_addr   <span class="token comment">#严格遵守VRRP协议,启用此项后以下状况将无法启动服务:1.无VIP地址 2.配置了单播邻居 3.在VRRP版本2中有IPv6地址，开启动此项并且没有配置vrrp_iptables时会自动开启iptables防火墙规则，默认导致VIP无法访问,建议不加此项配置</span>   vrrp_strict   <span class="token comment">#gratuitous ARP messages 报文发送延迟，0表示不延迟</span>   vrrp_garp_interval <span class="token number">0</span>   <span class="token comment">#unsolicited NA messages （不请自来）消息发送延迟</span>   vrrp_gna_interval <span class="token number">0</span>   <span class="token comment">#指定组播IP地址范围：224.0.0.0到239.255.255.255,默认值：224.0.0.18</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18   <span class="token comment">#此项和vrrp_strict同时开启时，则不会添加防火墙规则,如果无配置vrrp_strict项,则无需启用此项配置</span>   vrrp_iptables<span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-2-虚拟路由器配置"><a href="#1-2-2-虚拟路由器配置" class="headerlink" title="1.2.2 虚拟路由器配置"></a>1.2.2 虚拟路由器配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">vrrp_instance VI_1 <span class="token punctuation">&#123;</span> <span class="token comment">#VI_1为vrrp实例名，一般为业务名称</span>    <span class="token comment">#当前节点在此虚拟路由器的初始状态，状态为MASTER或者BACKUP</span>    state MASTER<span class="token operator">|</span>BACKUP    <span class="token comment">#绑定为当前虚拟路由器使用的物理接口。如：eth0,bond0,br0,可以和VIP不在一个网卡。</span>    interface ens33    <span class="token comment">#每个虚拟路由器惟一标识，范围：0-255，每个虚拟路由器此值必须唯一，否则服务无法启动，同属一个虚拟路由器的多个keepalived节点必须相同,务必要确认在同一网络中此值必须唯一。</span>    virtual_router_id <span class="token number">51</span>    <span class="token comment">#当前物理节点在此虚拟路由器的优先级，范围：1-254，值越大优先级越高,每个keepalived主机节点此值不同。</span>    priority <span class="token number">100</span>    <span class="token comment">#vrrp通告的时间间隔，默认1s</span>    advert_int <span class="token number">1</span>    <span class="token comment">#认证机制</span>    authentication <span class="token punctuation">&#123;</span>        <span class="token comment">#AH为IPSEC认证(不推荐),PASS为简单密码(建议使用)</span>        auth_type PASS        <span class="token comment">#预共享密钥，仅前8位有效，同一个虚拟路由器的多个keepalived节点必须一样。</span>        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">#虚拟IP,生产环境可能指定上百个IP地址</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span>/<span class="token operator">&lt;</span>MASK<span class="token operator">></span> brd <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> dev <span class="token operator">&lt;</span>STRING<span class="token operator">></span> scope <span class="token operator">&lt;</span>SCOPE<span class="token operator">></span> label <span class="token operator">&lt;</span>LABEL<span class="token operator">></span>        <span class="token comment">#指定VIP，不指定网卡，默认为eth0,注意：不指定/prefix,默认为/32</span>        <span class="token number">192.168</span>.200.16        <span class="token comment">#指定VIP的网卡</span>        <span class="token number">192.168</span>.200.17/24 dev ens33        <span class="token comment">#指定VIP的网卡label</span>        <span class="token number">192.168</span>.200.18/24 dev ens33 label ens33:1    <span class="token punctuation">&#125;</span>    <span class="token comment">#配置监控网络接口，一旦出现故障，则转为FAULT状态实现地址转移</span>    track_interface <span class="token punctuation">&#123;</span>        eth0        eth1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-3-IPVS配置"><a href="#1-2-3-IPVS配置" class="headerlink" title="1.2.3 IPVS配置"></a>1.2.3 IPVS配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意:括号必须分行写,两个括号写在同一行,如: &#125;&#125; 会出错</span><span class="token comment">#&lt;IP> &lt;PORT>定义虚拟主机IP地址和端口</span><span class="token comment">#fwmark &lt;INT>ipvs的防火墙打标，实现基于防火墙的负载均衡集群</span><span class="token comment">#group &lt;STRING>使用虚拟服务器组</span>virtual_server <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token operator">&lt;</span>PORT<span class="token operator">>|</span>fwmark <span class="token operator">&lt;</span>INT<span class="token operator">>|</span>group <span class="token operator">&lt;</span>STRING<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">#检查后端服务器的时间间隔</span>    delay_loop <span class="token operator">&lt;</span>INT<span class="token operator">></span>    <span class="token comment">#定义调度方法</span>    lb_algo rr<span class="token operator">|</span>wrr<span class="token operator">|</span>lc<span class="token operator">|</span>wlc<span class="token operator">|</span>lblc<span class="token operator">|</span><span class="token function">sh</span><span class="token operator">|</span>dh    <span class="token comment">#集群的类型,注意要大写</span>    lb_kind NAT<span class="token operator">|</span>DR<span class="token operator">|</span>TUN    <span class="token comment">#持久连接时长</span>    persistence_timeout <span class="token operator">&lt;</span>INT<span class="token operator">></span>    <span class="token comment">#指定服务协议,一般为TCP</span>    protocol TCP<span class="token operator">|</span>UDP<span class="token operator">|</span>SCTP    <span class="token comment">#RS的IP和PORT</span>    real_server <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token operator">&lt;</span>PORT<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token comment">#RS权重</span>        weight <span class="token operator">&lt;</span>INT<span class="token operator">></span>        <span class="token comment">#RS上线通知脚本</span>        notify_up <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>        <span class="token comment">#RS下线通知脚本</span>        notify_down <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>        <span class="token comment">#定义当前主机健康状态检测方法</span>        HTTP_GET<span class="token operator">|</span>SSL_GET<span class="token operator">|</span>TCP_CHECK<span class="token operator">|</span>SMTP_CHECK<span class="token operator">|</span>MISC_CHECK <span class="token punctuation">&#123;</span>            <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#应用层监测：HTTP_GET|SSL_GET</span>HTTP_GET<span class="token operator">|</span>SSL_GET <span class="token punctuation">&#123;</span>            url <span class="token punctuation">&#123;</span>              <span class="token comment">#定义要监控的URL</span>              path /              <span class="token comment">#判断上述检测机制为健康状态的响应码，一般为 200</span>              status_code <span class="token operator">&lt;</span>INT<span class="token operator">></span>            <span class="token punctuation">&#125;</span>            connect_timeout <span class="token operator">&lt;</span>INT<span class="token operator">></span>     <span class="token comment">#客户端请求的超时时长.</span>            nb_get_retry <span class="token operator">&lt;</span>INT<span class="token operator">></span>        <span class="token comment">#重试次数</span>            delay_before_retry <span class="token operator">&lt;</span>INT<span class="token operator">></span>  <span class="token comment">#重试之前的延迟时长</span>            connect_ip <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>   <span class="token comment">#向当前RS哪个IP地址发起健康状态检测请求</span>            connect_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>       <span class="token comment">#向当前RS的哪个PORT发起健康状态检测请求</span>            bindto <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>       <span class="token comment">#向当前RS发出健康状态检测请求时使用的源地址</span>            bind_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>          <span class="token comment">#向当前RS发出健康状态检测请求时使用的源端口</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">#传输层检测：TCP监测</span>TCP_CHECK <span class="token punctuation">&#123;</span>connect_ip <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>   <span class="token comment">#向当前RS的哪个IP地址发起健康状态检测请求。</span>connect_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>       <span class="token comment">#向当前RS的哪个PORT发起健康状态检测请求。</span>bindto <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>       <span class="token comment">#发出健康状态检测请求时使用的源地址。</span>bind_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>          <span class="token comment">#发出健康状态检测请求时使用的源端口。</span>connect_timeout <span class="token operator">&lt;</span>INTEGER<span class="token operator">></span> <span class="token comment">#客户端请求的超时时长。</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-4-独立日志配置"><a href="#1-2-4-独立日志配置" class="headerlink" title="1.2.4 独立日志配置"></a>1.2.4 独立日志配置</h3><p>默认keepalived的日志属于LOG_DAEMON,记录在系统日志messages文件,可以实现独立日志文件记录自身日志。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysconfig/keepalived</span><span class="token assign-left variable">KEEPALIVED_OPTIONS</span><span class="token operator">=</span><span class="token string">"-D -S 6"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf</span><span class="token comment"># keepalived</span>local6.*                                                /var/log/keepalived.log<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart keepalived.service rsyslog.service</span></code></pre></div></figure><h3 id="1-2-5-子配置文件"><a href="#1-2-5-子配置文件" class="headerlink" title="1.2.5 子配置文件"></a>1.2.5 子配置文件</h3><p>当生产环境复杂时， &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 文件中内容过多，不易管理，可以将不同集群的配置，比如：不同集群的VIP配置放在独立的子配置文件中。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#利用include 指令可以实现包含子配置文件</span>include /path/file<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/keepalived/conf.d/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>include /etc/keepalived/conf.d/*.conf <span class="token comment">#将VRRP相关配置放在子配置文件中</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/conf.d/test.conf</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">51</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart keepalived</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Keepalived简介及安装</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived01/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-高可用集群"><a href="#1-高可用集群" class="headerlink" title="1.高可用集群"></a>1.高可用集群</h1><h2 id="1-1-集群类型"><a href="#1-1-集群类型" class="headerlink" title="1.1 集群类型"></a>1.1 集群类型</h2><ul><li>LB：Load Balance负载均衡(LVS&#x2F;HAProxy&#x2F;Nginx)</li><li>HA：High Availability高可用集群(数据库、Zookeeper、Redis)</li><li>HPC：High Performance Computing 高性能集群</li></ul><h2 id="1-2-系统可用性"><a href="#1-2-系统可用性" class="headerlink" title="1.2 系统可用性"></a>1.2 系统可用性</h2><p>SLA：Service-Level Agreement 服务等级协议（提供服务的企业与客户之间就服务的品质、水准、性<br>能等方面所达成的双方共同认可的协议或契约）  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">A <span class="token operator">=</span> MTBF / <span class="token punctuation">(</span>MTBF+MTTR）<span class="token number">99.95</span>%:<span class="token punctuation">(</span><span class="token number">60</span>*24*30<span class="token punctuation">)</span>*<span class="token punctuation">(</span><span class="token number">1</span>-0.9995<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">21.6</span>分钟 <span class="token comment">#一般按一个月停机时间统计</span>指标 ：99.9%, <span class="token number">99.99</span>%, <span class="token number">99.999</span>%,99.9999%</code></pre></div></figure><h2 id="1-3-系统故障"><a href="#1-3-系统故障" class="headerlink" title="1.3 系统故障"></a>1.3 系统故障</h2><p>硬件故障：设计缺陷、wear out（损耗）、自然灾害……<br>软件故障：设计缺陷 bug  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#实现高可用,提升系统高用性的解决方案：降低MTTR- Mean Time To Repair(平均故障时间),解决方案：建立冗余机制。</span>active/passive 主/备active/active  双主</code></pre></div></figure><h2 id="1-4-VRRP"><a href="#1-4-VRRP" class="headerlink" title="1.4 VRRP"></a>1.4 VRRP</h2><p>VRRP：Virtual Router Redundancy Protocol（虚拟路由冗余协议），解决静态网关单点故障。</p><ul><li>物理层：路由器、三层交换机。</li><li>软件层：Keepalived</li></ul><p>VRRP相关术语：</p><ul><li>虚拟路由器：Virtual Router</li><li>虚拟路由器标识：VRID(0-255)，唯一标识虚拟路由器。</li><li>VIP：Virtual IP</li><li>VMAC：Virutal MAC (00-00-5e-00-01-VRID)</li><li>物理路由器：  <ul><li>master：主设备</li><li>backup：备设备</li><li>priority：优先级</li></ul></li></ul><p>VRRP相关技术：</p><ul><li>通告：心跳，优先级；周期性</li><li>工作方式：抢占式，非抢占式</li><li>安全认证：<ul><li>无认证</li><li>简单字符认证：预共享密钥</li><li>MD5</li></ul></li><li>工作模式：<ul><li>主&#x2F;备：单虚拟路由器</li><li>主&#x2F;主：主&#x2F;备（虚拟路由器1）,备&#x2F;主（虚拟路由器2）</li></ul></li></ul><h1 id="2-Keeaplived简介"><a href="#2-Keeaplived简介" class="headerlink" title="2.Keeaplived简介"></a>2.Keeaplived简介</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官网：<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/</span></span>#官网文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/doc/</span></span><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/documentation.html</span></span></code></pre></div></figure><p><img src="/2023/02/06/HA/Keepalived/keepalived01/image-20230206151024839.png" alt="image-20230206151024839">  </p><ul><li>用户空间核心组件：<ul><li>VRRP Stack：VIP消息通告。</li><li>Checkrs：检测Real Server</li><li>System Call：实现VRRP协议状态转换时调用脚本的功能。</li><li>SMTP：邮件组件。</li><li>IPVS wrapper：生成IPVS规则。</li><li>Nettlink Reflector：网络接口</li><li>WatchDog：监控进程</li></ul></li><li>控制组件：提供Keepalived.conf的解析器，完成Keepalived配置。</li><li>IO复用器：针对网络目的而优化的自己的线程抽象。</li><li>内存管理组件：为某些通用的内存管理功能(例如分配，重新分配，发布等)提供访问权限。</li></ul><h2 id="2-1-Keepalived安装"><a href="#2-1-Keepalived安装" class="headerlink" title="2.1 Keepalived安装"></a>2.1 Keepalived安装</h2><h3 id="2-1-1-包安装"><a href="#2-1-1-包安装" class="headerlink" title="2.1.1 包安装"></a>2.1.1 包安装</h3><p>CentOS7.9安装Keepalived：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install keepalived</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum info keepalived</span>Loaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.nju.edu.cn * extras: mirrors.nju.edu.cn * updates: mirrors.nju.edu.cnInstalled PackagesName        <span class="token builtin class-name">:</span> keepalivedArch        <span class="token builtin class-name">:</span> x86_64Version     <span class="token builtin class-name">:</span> <span class="token number">1.3</span>.5Release     <span class="token builtin class-name">:</span> <span class="token number">19</span>.el7Size        <span class="token builtin class-name">:</span> <span class="token number">1.0</span> MRepo        <span class="token builtin class-name">:</span> installedFrom repo   <span class="token builtin class-name">:</span> baseSummary     <span class="token builtin class-name">:</span> Load balancer and high availability <span class="token function">service</span>URL         <span class="token builtin class-name">:</span> http://www.keepalived.org/License     <span class="token builtin class-name">:</span> GPLv2+Description <span class="token builtin class-name">:</span> Keepalived provides simple and robust facilities <span class="token keyword">for</span> load balancing            <span class="token builtin class-name">:</span> and high availability.  The load balancing framework relies on the            <span class="token builtin class-name">:</span> well-known and widely used Linux Virtual Server <span class="token punctuation">(</span>IPVS<span class="token punctuation">)</span> kernel module            <span class="token builtin class-name">:</span> providing layer-4 <span class="token punctuation">(</span>transport layer<span class="token punctuation">)</span> load balancing.  Keepalived            <span class="token builtin class-name">:</span> implements a <span class="token builtin class-name">set</span> of checkers to dynamically and adaptively maintain            <span class="token builtin class-name">:</span> and manage a load balanced server pool according their health.            <span class="token builtin class-name">:</span> Keepalived also implements the Virtual Router Redundancy Protocol            <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>VRRPv2<span class="token punctuation">)</span> to achieve high availability with director failover.</code></pre></div></figure><p>Ubuntu20.04安装Keepalived：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node30:~<span class="token comment"># apt -y install keepalived</span>root@node30:~<span class="token comment"># dpkg -s keepalived</span>Package: keepalivedStatus: <span class="token function">install</span> ok installedPriority: optionalSection: adminInstalled-Size: <span class="token number">1221</span>Maintainer: Ubuntu Developers <span class="token operator">&lt;</span>ubuntu-devel-discuss@lists.ubuntu.com<span class="token operator">></span>Architecture: amd64Version: <span class="token number">1</span>:2.0.19-2ubuntu0.2Depends: iproute2, libc6 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">2.28</span><span class="token punctuation">)</span>, libglib2.0-0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">2.26</span>.0<span class="token punctuation">)</span>, libmnl0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.0</span>.3-4~<span class="token punctuation">)</span>, libnftnl11 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.1</span>.2<span class="token punctuation">)</span>, libnl-3-200 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">3.2</span>.27<span class="token punctuation">)</span>, libnl-genl-3-200 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">3.2</span>.7<span class="token punctuation">)</span>, libpcre2-8-0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">10.22</span><span class="token punctuation">)</span>, libsnmp35 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">5.8</span>+dfsg<span class="token punctuation">)</span>, libssl1.1 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.1</span>.0<span class="token punctuation">)</span>Pre-Depends: init-system-helpers <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.54</span>~<span class="token punctuation">)</span>Recommends: ipvsadmConffiles: /etc/dbus-1/system.d/org.keepalived.Vrrp1.conf eb86d4c61a0c69d1f98bcf8dcbbd8f60 /etc/default/keepalived 6b2e3432e4ae31b444058ba2b0d1f06a /etc/init.d/keepalived 0312972e0718331b4c90b3b98e623624Description: Failover and monitoring daemon <span class="token keyword">for</span> LVS clusters keepalived is used <span class="token keyword">for</span> monitoring real servers within a Linux Virtual Server <span class="token punctuation">(</span>LVS<span class="token punctuation">)</span> cluster.  keepalived can be configured to remove real servers from the cluster pool <span class="token keyword">if</span> it stops responding, as well as send a notification email to <span class="token function">make</span> the admin aware of the <span class="token function">service</span> failure. <span class="token builtin class-name">.</span> In addition, keepalived implements an independent Virtual Router Redundancy Protocol <span class="token punctuation">(</span>VRRPv2<span class="token punctuation">;</span> see rfc2338 <span class="token keyword">for</span> additional info<span class="token punctuation">)</span> framework <span class="token keyword">for</span> director failover. <span class="token builtin class-name">.</span> You need a kernel <span class="token operator">>=</span> <span class="token number">2.4</span>.28 or <span class="token operator">>=</span> <span class="token number">2.6</span>.11 <span class="token keyword">for</span> keepalived. See README.Debian <span class="token keyword">for</span> <span class="token function">more</span> information.Homepage: http://keepalived.orgOriginal-Maintainer: Alexander Wirt <span class="token operator">&lt;</span>formorer@debian.org<span class="token operator">></span>root@node30:~<span class="token comment"># dpkg -L keepalived</span>/./etc/etc/dbus-1/etc/dbus-1/system.d/etc/dbus-1/system.d/org.keepalived.Vrrp1.conf/etc/default/etc/default/keepalived/etc/init.d/etc/init.d/keepalived/etc/keepalived/lib/lib/systemd/lib/systemd/system/lib/systemd/system/keepalived.service/usr/usr/bin/usr/bin/genhash/usr/sbin/usr/sbin/keepalived/usr/share/usr/share/dbus-1/usr/share/dbus-1/interfaces/usr/share/dbus-1/interfaces/org.keepalived.Vrrp1.Instance.xml/usr/share/dbus-1/interfaces/org.keepalived.Vrrp1.Vrrp.xml/usr/share/doc/usr/share/doc/keepalived/usr/share/doc/keepalived/AUTHOR/usr/share/doc/keepalived/CONTRIBUTORS/usr/share/doc/keepalived/README/usr/share/doc/keepalived/TODO.gz/usr/share/doc/keepalived/changelog.Debian.gz/usr/share/doc/keepalived/copyright/usr/share/doc/keepalived/keepalived.conf.SYNOPSIS/usr/share/doc/keepalived/samples/usr/share/doc/keepalived/samples/client.pem/usr/share/doc/keepalived/samples/dh1024.pem/usr/share/doc/keepalived/samples/keepalived.conf.HTTP_GET.port/usr/share/doc/keepalived/samples/keepalived.conf.IPv6/usr/share/doc/keepalived/samples/keepalived.conf.SMTP_CHECK/usr/share/doc/keepalived/samples/keepalived.conf.SSL_GET/usr/share/doc/keepalived/samples/keepalived.conf.conditional_conf/usr/share/doc/keepalived/samples/keepalived.conf.fwmark/usr/share/doc/keepalived/samples/keepalived.conf.inhibit/usr/share/doc/keepalived/samples/keepalived.conf.misc_check/usr/share/doc/keepalived/samples/keepalived.conf.misc_check_arg/usr/share/doc/keepalived/samples/keepalived.conf.quorum/usr/share/doc/keepalived/samples/keepalived.conf.sample/usr/share/doc/keepalived/samples/keepalived.conf.status_code/usr/share/doc/keepalived/samples/keepalived.conf.track_interface/usr/share/doc/keepalived/samples/keepalived.conf.virtual_server_group/usr/share/doc/keepalived/samples/keepalived.conf.virtualhost/usr/share/doc/keepalived/samples/keepalived.conf.vrrp/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.localcheck/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.lvs_syncd/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.routes/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.rules/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.scripts/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.static_ipaddress/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.sync/usr/share/doc/keepalived/samples/root.pem/usr/share/doc/keepalived/samples/sample.misccheck.smbcheck.sh/usr/share/doc/keepalived/samples/sample_notify_fifo.sh/usr/share/man/usr/share/man/man1/usr/share/man/man1/genhash.1.gz/usr/share/man/man5/usr/share/man/man5/keepalived.conf.5.gz/usr/share/man/man8/usr/share/man/man8/keepalived.8.gz/usr/share/snmp/usr/share/snmp/mibs/usr/share/snmp/mibs/KEEPALIVED-MIB.txt/usr/share/snmp/mibs/VRRP-MIB.txt/usr/share/snmp/mibs/VRRPv3-MIB.txtroot@node30:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@node30:~<span class="token comment"># systemctl start keepalived</span>root@node30:~<span class="token comment"># systemctl status keepalived</span>● keepalived.service - Keepalive Daemon <span class="token punctuation">(</span>LVS and VRRP<span class="token punctuation">)</span>     Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/keepalived.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2023</span>-02-06 <span class="token number">14</span>:59:42 UTC<span class="token punctuation">;</span> 1s ago   Main PID: <span class="token number">2266</span> <span class="token punctuation">(</span>keepalived<span class="token punctuation">)</span>      Tasks: <span class="token number">3</span> <span class="token punctuation">(</span>limit: <span class="token number">2236</span><span class="token punctuation">)</span>     Memory: <span class="token number">2</span>.2M     CGroup: /system.slice/keepalived.service             ├─2266 /usr/sbin/keepalived --dont-fork             ├─2282 /usr/sbin/keepalived --dont-fork             └─2283 /usr/sbin/keepalived --dont-forkFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering Kernel netlink reflectorFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering Kernel netlink <span class="token builtin class-name">command</span> channelFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Opening <span class="token function">file</span> <span class="token string">'/etc/keepalived/keepalived.conf'</span><span class="token builtin class-name">.</span>Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering gratuitous ARP shared channelFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Opening <span class="token function">file</span> <span class="token string">'/etc/keepalived/keepalived.conf'</span><span class="token builtin class-name">.</span>Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Initializing ipvsFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Gained quorum <span class="token number">1</span>+0<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token keyword">for</span> VS <span class="token punctuation">[</span><span class="token number">10.10</span>.10.2<span class="token punctuation">]</span>:tcp:1358Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Activating healthchecker <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.200.2<span class="token punctuation">]</span>:tcp:1358 <span class="token keyword">for</span> VS <span class="token punctuation">[</span><span class="token number">10.10</span>.10.2<span class="token punctuation">]</span>:tcp:1358Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Activating BFD healthcheckerFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: <span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATE <span class="token punctuation">(</span>init<span class="token punctuation">)</span>root@node30:~<span class="token comment"># ps auxf |grep keepalived</span>root        <span class="token number">2657</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">5296</span>   <span class="token number">720</span> pts/0    S+   <span class="token number">15</span>:00   <span class="token number">0</span>:00          <span class="token punctuation">\</span>_ <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto keepalivedroot        <span class="token number">2266</span>  <span class="token number">0.0</span>  <span class="token number">0.4</span>  <span class="token number">25264</span>  <span class="token number">8064</span> ?        Ss   <span class="token number">14</span>:59   <span class="token number">0</span>:00 /usr/sbin/keepalived --dont-forkroot        <span class="token number">2282</span>  <span class="token number">0.0</span>  <span class="token number">0.1</span>  <span class="token number">25264</span>  <span class="token number">2880</span> ?        S    <span class="token number">14</span>:59   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ /usr/sbin/keepalived --dont-forkroot        <span class="token number">2283</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">25264</span>   <span class="token number">936</span> ?        S    <span class="token number">14</span>:59   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ /usr/sbin/keepalived --dont-fork</code></pre></div></figure><h3 id="2-1-2-编译安装"><a href="#2-1-2-编译安装" class="headerlink" title="2.1.2 编译安装"></a>2.1.2 编译安装</h3><p>CentOS7.9编译安装Keepalived</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc curl openssl-devel libnl3-devel net-snmpdevel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget https://keepalived.org/software/keepalived-2.0.20.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf keepalived-2.0.20.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/keepalived-2.0.20/</span><span class="token comment">#默认生成iptables规则,无法访问VIP,编译时可以加--disable-fwmark禁用生成iptables规则</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/keepalived #--disable-fwmark</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># cd</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/keepalived</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now keepalived.service</span>Created symlink from /etc/systemd/system/multi-user.target.wants/keepalived.service to /usr/lib/systemd/system/keepalived.service.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status keepalived</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).LVS实战案例</title>
    <link href="/2023/02/02/LB/LVS/lvs03/"/>
    <url>/2023/02/02/LB/LVS/lvs03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-LVS相关软件"><a href="#1-LVS相关软件" class="headerlink" title="1.LVS相关软件"></a>1.LVS相关软件</h1><h2 id="1-1-ipvsadm"><a href="#1-1-ipvsadm" class="headerlink" title="1.1 ipvsadm"></a>1.1 ipvsadm</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装ipvsadm</span><span class="token punctuation">[</span>root@Server10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token comment">#Unit File: </span>ipvsadm.service<span class="token comment">#主程序：</span>/usr/sbin/ipvsadm<span class="token comment">#规则保存工具：</span>/usr/sbin/ipvsadm-save<span class="token comment">#规则重载工具：</span>/usr/sbin/ipvsadm-restore<span class="token comment">#配置文件：</span>/etc/sysconfig/ipvsadm-config<span class="token comment">#ipvs调度规则文件：</span>/etc/sysconfig/ipvsadm</code></pre></div></figure><h2 id="1-2-ipvsadm命令"><a href="#1-2-ipvsadm命令" class="headerlink" title="1.2 ipvsadm命令"></a>1.2 ipvsadm命令</h2><h3 id="1-2-1-新增、修改规则"><a href="#1-2-1-新增、修改规则" class="headerlink" title="1.2.1 新增、修改规则"></a>1.2.1 新增、修改规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集群服务新增规则</span>ipvsadm -A<span class="token operator">|</span>E -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-M netmask<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pe persistence_engine<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b sched-flags<span class="token punctuation">]</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f  -t: TCP协议的端口，VIP:TCP_PORT 如: <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80  -u: UDP协议的端口，VIP:UDP_PORT  -f：firewall MARK，标记，一个数字server-address：  rip<span class="token punctuation">[</span>:port<span class="token punctuation">]</span> 如省略port，不作端口映射  <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span>:指定集群的调度算法，默认为wlc<span class="token comment">#例如</span>ipvsadm <span class="token parameter variable">-A</span> <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80 <span class="token parameter variable">-s</span> wrr</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集集群上RS新增规则</span>ipvsadm -a<span class="token operator">|</span>e -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token parameter variable">-r</span> server-address <span class="token punctuation">[</span>options<span class="token punctuation">]</span>lvs类型：  -g: gateway, dr类型，默认  -i: ipip, tun类型  -m: masquerade, nat类型  <span class="token parameter variable">-w</span> weight：权重<span class="token comment">#例如</span>ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80 <span class="token parameter variable">-r</span> <span class="token number">10.0</span>.0.11:8080 <span class="token parameter variable">-m</span> <span class="token parameter variable">-w</span> <span class="token number">3</span></code></pre></div></figure><h3 id="1-2-2-删除规则"><a href="#1-2-2-删除规则" class="headerlink" title="1.2.2 删除规则"></a>1.2.2 删除规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集群服务删除规则</span>ipvsadm <span class="token parameter variable">-D</span> -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##管理集集群上RS删除规则</span>ipvsadm <span class="token parameter variable">-d</span> -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token parameter variable">-r</span> server-address</code></pre></div></figure><h3 id="1-2-3-清空规则"><a href="#1-2-3-清空规则" class="headerlink" title="1.2.3 清空规则"></a>1.2.3 清空规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清空规则</span>ipvsadm <span class="token parameter variable">-C</span><span class="token comment">#清空计数器</span>ipvsadm <span class="token parameter variable">-Z</span> <span class="token punctuation">[</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address<span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-4-查看规则"><a href="#1-2-4-查看规则" class="headerlink" title="1.2.4 查看规则"></a>1.2.4 查看规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm -L<span class="token operator">|</span>l <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  --numeric, -n：以数字形式输出地址和端口号  --exact：扩展信息，精确值  --connection，-c：当前IPVS连接输出  --stats：统计信息  <span class="token parameter variable">--rate</span> ：输出速率信息</code></pre></div></figure><h3 id="1-2-5-保存规则"><a href="#1-2-5-保存规则" class="headerlink" title="1.2.5 保存规则"></a>1.2.5 保存规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm-save <span class="token operator">></span> /<span class="token environment constant">PATH</span>/TO/IPVSADM_FILEipvsadm <span class="token parameter variable">-S</span> <span class="token operator">></span> /<span class="token environment constant">PATH</span>/TO/IPVSADM_FILEsystemctl stop ipvsadm.service <span class="token comment">#会自动保存规则至/etc/sysconfig/ipvsadm</span></code></pre></div></figure><h3 id="1-2-6-重载规则"><a href="#1-2-6-重载规则" class="headerlink" title="1.2.6 重载规则"></a>1.2.6 重载规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm-restore <span class="token operator">&lt;</span> /<span class="token environment constant">PATH</span>/FROM/IPVSADM_FILEsystemctl start ipvsadm.service <span class="token comment">#会自动加载/etc/sysconfig/ipvsadm中规则</span></code></pre></div></figure><h1 id="2-LVS实战案例"><a href="#2-LVS实战案例" class="headerlink" title="2.LVS实战案例"></a>2.LVS实战案例</h1><h2 id="2-1-LVS-NAT模式"><a href="#2-1-LVS-NAT模式" class="headerlink" title="2.1 LVS-NAT模式"></a>2.1 LVS-NAT模式</h2><h3 id="2-1-1-部署清单"><a href="#2-1-1-部署清单" class="headerlink" title="2.1.1 部署清单"></a>2.1.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>lvs</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10</td><td>CentOS7.9</td><td>LVS服务</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr></tbody></table><h3 id="2-1-2-部署拓扑图"><a href="#2-1-2-部署拓扑图" class="headerlink" title="2.1.2 部署拓扑图"></a>2.1.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230205220506587.png" alt="image-20230205220506587"> </p><h3 id="2-1-3-部署步骤"><a href="#2-1-3-部署步骤" class="headerlink" title="2.1.3 部署步骤"></a>2.1.3 部署步骤</h3><h4 id="2-1-3-1-配置网络"><a href="#2-1-3-1-配置网络" class="headerlink" title="2.1.3.1 配置网络"></a>2.1.3.1 配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#client网络</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33 </span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>39d4e1a2-e050-41f6-8b49-2f1bcbf74b00<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#lvs网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>70be7838-69ed-4ed2-a1e8-ae64ad44ea30<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens36</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens36<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens36<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS1网络</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>7aa725ab-bd34-45f0-8d8a-d4ca8d502551<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS2网络</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>772d8876-deaa-4dca-b918-8eaeb7e69b4f<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.12<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no</code></pre></div></figure><h4 id="2-1-3-2-配置LVS"><a href="#2-1-3-2-配置LVS" class="headerlink" title="2.1.3.2 配置LVS"></a>2.1.3.2 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#配置lvs</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 192.168.1.11:80 -s wrr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.1.11:80 -r 10.0.0.11:80 -m</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.1.11:80 -r 10.0.0.12:80 -m</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">192.168</span>.1.11:80 wrr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>  <span class="token comment">#保存规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Sn > /etc/sysconfig/ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now ipvsadm.service</span>Created symlink from /etc/systemd/system/multi-user.target.wants/ipvsadm.service to /usr/lib/systemd/system/ipvsadm.service.</code></pre></div></figure><h4 id="2-1-3-3-客户端测试访问"><a href="#2-1-3-3-客户端测试访问" class="headerlink" title="2.1.3.3 客户端测试访问"></a>2.1.3.3 客户端测试访问</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 192.168.1.11;sleep 0.5;done</span>rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12</code></pre></div></figure><h4 id="2-1-3-3-配置Web服务"><a href="#2-1-3-3-配置Web服务" class="headerlink" title="2.1.3.3 配置Web服务"></a>2.1.3.3 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h2 id="2-2-LVS-DR模式单网段"><a href="#2-2-LVS-DR模式单网段" class="headerlink" title="2.2 LVS-DR模式单网段"></a>2.2 LVS-DR模式单网段</h2><p>DR模型中各主机上均需要配置VIP，解决地址冲突的方式有三种：  </p><ul><li>在前端网关做静态绑定。</li><li>在各RS使用arptables。</li><li>在各RS修改内核参数，来限制arp响应和通告的级别。</li></ul><p>限制响应级别：arp_ignore</p><ul><li>0：默认值，表示可使用本地任意接口上配置的任意地址进行响应。</li><li>1：仅在请求的目标IP配置在本地主机的接收到请求报文的接口上时，才给予响应。</li></ul><p>限制通告级别：arp_announce</p><ul><li>0：默认值，把本机所有接口的所有信息向每个接口的网络进行通告。</li><li>1：尽量避免将接口信息向非直接连接网络进行通告。</li><li>2：必须避免将接口信息向非本网络进行通告。</li></ul><h3 id="2-2-1-部署清单"><a href="#2-2-1-部署清单" class="headerlink" title="2.2.1 部署清单"></a>2.2.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>route</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10</td><td>CentOS7.9(模拟路由器)</td><td>路由器</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>lvs</td><td>10.0.0.13</td><td>CentOS7.9</td><td>LVS服务</td></tr></tbody></table><h3 id="2-2-2-部署拓扑图"><a href="#2-2-2-部署拓扑图" class="headerlink" title="2.2.2 部署拓扑图"></a>2.2.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230205233354208.png" alt="image-20230205233354208"> </p><h3 id="2-2-3-部署步骤"><a href="#2-2-3-部署步骤" class="headerlink" title="2.2.3 部署步骤"></a>2.2.3 部署步骤</h3><h4 id="2-2-3-1-配置网络"><a href="#2-2-3-1-配置网络" class="headerlink" title="2.2.3.1  配置网络"></a>2.2.3.1  配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#client网络</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>39d4e1a2-e050-41f6-8b49-2f1bcbf74b00<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#路由器网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>70be7838-69ed-4ed2-a1e8-ae64ad44ea30<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens36</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens36<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens36<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS1网络</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>7aa725ab-bd34-45f0-8d8a-d4ca8d502551<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS2网络</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>772d8876-deaa-4dca-b918-8eaeb7e69b4f<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.12<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#lvs网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33 </span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>3afb8741-2a4d-4f11-8132-d5a49baa7084<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.13<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no</code></pre></div></figure><h4 id="2-2-3-2-配置路由器"><a href="#2-2-3-2-配置路由器" class="headerlink" title="2.2.3.2 配置路由器"></a>2.2.3.2 配置路由器</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h4 id="2-2-3-3-后端RS的IPVS配置"><a href="#2-2-3-3-后端RS的IPVS配置" class="headerlink" title="2.2.3.3 后端RS的IPVS配置"></a>2.2.3.3 后端RS的IPVS配置</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1的IPVS配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:cd:a9:09 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.11/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::a4d:d03e:f0fc:dbd6/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever<span class="token comment">#RS2的IPVS配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:2e:97:97 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.12/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::fec0:5b18:972c:a77a/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever</code></pre></div></figure><h4 id="2-2-3-4-配置LVS"><a href="#2-2-3-4-配置LVS" class="headerlink" title="2.2.3.4 配置LVS"></a>2.2.3.4 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS上添加VIP</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:89:12:71 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.13/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::8e92:ee80:bfe:898a/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever       <span class="token comment">#配置lvs规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 10.0.0.20:80 -s rr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 10.0.0.20:80 -r 10.0.0.11:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 10.0.0.20:80 -r 10.0.0.12:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">10.0</span>.0.10:80 rr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span></code></pre></div></figure><h4 id="2-2-3-5-配置Web服务"><a href="#2-2-3-5-配置Web服务" class="headerlink" title="2.2.3.5 配置Web服务"></a>2.2.3.5 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h4 id="2-2-3-6-客户端访问测试"><a href="#2-2-3-6-客户端访问测试" class="headerlink" title="2.2.3.6 客户端访问测试"></a>2.2.3.6 客户端访问测试</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 10.0.0.20;sleep 0.5;done</span>rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11</code></pre></div></figure><h2 id="2-3-LVS-DR模式多网段"><a href="#2-3-LVS-DR模式多网段" class="headerlink" title="2.3 LVS-DR模式多网段"></a>2.3 LVS-DR模式多网段</h2><h3 id="2-3-1-部署清单"><a href="#2-3-1-部署清单" class="headerlink" title="2.3.1 部署清单"></a>2.3.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>route</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10&amp;172.16.0.10</td><td>CentOS7.9(模拟路由器)</td><td>路由器</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>lvs</td><td>10.0.0.13</td><td>CentOS7.9</td><td>LVS服务</td></tr></tbody></table><h3 id="2-3-2-部署拓扑图"><a href="#2-3-2-部署拓扑图" class="headerlink" title="2.3.2 部署拓扑图"></a>2.3.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230206222530142.png" alt="image-20230206222530142"> </p><h3 id="2-3-3-部署步骤"><a href="#2-3-3-部署步骤" class="headerlink" title="2.3.3 部署步骤"></a>2.3.3 部署步骤</h3><h4 id="2-3-3-1-配置网络"><a href="#2-3-3-1-配置网络" class="headerlink" title="2.3.3.1  配置网络"></a>2.3.3.1  配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#router的网络配置在2.2.3.1基础上添加172.16.0.10/24的地址</span><span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">172.16</span>.0.10/24 dev ens36</code></pre></div></figure><h4 id="2-3-3-2-配置路由器"><a href="#2-3-3-2-配置路由器" class="headerlink" title="2.3.3.2 配置路由器"></a>2.3.3.2 配置路由器</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h4 id="2-3-3-3-后端RS的IPVS配置"><a href="#2-3-3-3-后端RS的IPVS配置" class="headerlink" title="2.3.3.3 后端RS的IPVS配置"></a>2.3.3.3 后端RS的IPVS配置</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1的IPVS配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span><span class="token comment">#RS2的IPVS配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span></code></pre></div></figure><h4 id="2-3-3-4-配置LVS"><a href="#2-3-3-4-配置LVS" class="headerlink" title="2.3.3.4 配置LVS"></a>2.3.3.4 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS上添加VIP</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span> <span class="token comment">#配置lvs规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 172.16.0.11:80 -s rr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 172.16.0.11:80 -r 10.0.0.11:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 172.16.0.11:80 -r 10.0.0.12:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">172.16</span>.0.11:80 rr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span></code></pre></div></figure><h4 id="2-3-3-5-配置Web服务"><a href="#2-3-3-5-配置Web服务" class="headerlink" title="2.3.3.5 配置Web服务"></a>2.3.3.5 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h4 id="2-3-3-6-客户端访问测试"><a href="#2-3-3-6-客户端访问测试" class="headerlink" title="2.3.3.6 客户端访问测试"></a>2.3.3.6 客户端访问测试</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 172.16.0.11;sleep 0.5;done</span>rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12</code></pre></div></figure><h4 id="附：LVS及RS配置脚本"><a href="#附：LVS及RS配置脚本" class="headerlink" title="附：LVS及RS配置脚本"></a>附：LVS及RS配置脚本</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS主机运行的脚本</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat lvs_dr_vs.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">vip</span><span class="token operator">=</span><span class="token string">'172.16.0.11'</span><span class="token assign-left variable">iface</span><span class="token operator">=</span><span class="token string">'lo:1'</span><span class="token assign-left variable">mask</span><span class="token operator">=</span><span class="token string">'255.255.255.255'</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">'80'</span><span class="token assign-left variable">rs1</span><span class="token operator">=</span><span class="token string">'10.0.0.11'</span><span class="token assign-left variable">rs2</span><span class="token operator">=</span><span class="token string">'10.0.0.12'</span><span class="token assign-left variable">scheduler</span><span class="token operator">=</span><span class="token string">'wrr'</span><span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">'-g'</span><span class="token function">rpm</span> <span class="token parameter variable">-q</span> ipvsadm <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ipvsadm <span class="token operator">&amp;></span> /dev/null<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>start<span class="token punctuation">)</span>    <span class="token function">ifconfig</span> <span class="token variable">$iface</span> <span class="token variable">$vip</span> netmask <span class="token variable">$mask</span> <span class="token comment">#broadcast $vip up</span>    iptables <span class="token parameter variable">-F</span>    ipvsadm <span class="token parameter variable">-A</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-s</span> <span class="token variable">$scheduler</span>    ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-r</span> <span class="token variable">$&#123;rs1&#125;</span> <span class="token variable">$type</span> <span class="token parameter variable">-w</span> <span class="token number">1</span>    ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-r</span> <span class="token variable">$&#123;rs2&#125;</span> <span class="token variable">$type</span> <span class="token parameter variable">-w</span> <span class="token number">1</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The VS Server is Ready!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span>    ipvsadm <span class="token parameter variable">-C</span>    <span class="token function">ifconfig</span> <span class="token variable">$iface</span> down    <span class="token builtin class-name">echo</span> <span class="token string">"The VS Server is Canceled!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> start|stop"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token comment">#在RS后端服务器运行的脚本</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat lvs_dr_vs.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">vip</span><span class="token operator">=</span><span class="token string">'172.16.0.11'</span><span class="token assign-left variable">mask</span><span class="token operator">=</span><span class="token string">'255.255.255.255'</span><span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">'lo:1'</span><span class="token function">rpm</span> <span class="token parameter variable">-q</span> httpd <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd <span class="token operator">&amp;></span>/dev/null<span class="token function">service</span> httpd start <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"The httpd Server is Ready!"</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">hostname</span> <span class="token parameter variable">-I</span><span class="token variable">`</span></span>"</span> <span class="token operator">></span> /var/www/html/index.html<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>start<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_announce    <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_announce    <span class="token function">ifconfig</span> <span class="token variable">$dev</span> <span class="token variable">$vip</span> netmask <span class="token variable">$mask</span> <span class="token comment">#broadcast $vip up</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The RS Server is Ready!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span>    <span class="token function">ifconfig</span> <span class="token variable">$dev</span> down    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_announce    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_announce    <span class="token builtin class-name">echo</span> <span class="token string">"The RS Server is Canceled!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> start|stop"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).LVS调度算法</title>
    <link href="/2023/02/02/LB/LVS/lvs02/"/>
    <url>/2023/02/02/LB/LVS/lvs02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-LVS调度算法"><a href="#1-LVS调度算法" class="headerlink" title="1.LVS调度算法"></a>1.LVS调度算法</h1><p>ipvs scheduler： 根据其调度时是否考虑各RS当前的负载状态；静态方法和动态方法</p><h2 id="1-1-静态算法"><a href="#1-1-静态算法" class="headerlink" title="1.1 静态算法"></a>1.1 静态算法</h2><h3 id="1-1-1-RR"><a href="#1-1-1-RR" class="headerlink" title="1.1.1 RR"></a>1.1.1 RR</h3><p>轮询调度：均等的分发至每一台服务器。</p><h3 id="1-1-2-WRR"><a href="#1-1-2-WRR" class="headerlink" title="1.1.2 WRR"></a>1.1.2 WRR</h3><p>加权轮询调度：根据真实服务器的负载情况进行调整权值。</p><h3 id="1-1-3-SH"><a href="#1-1-3-SH" class="headerlink" title="1.1.3 SH"></a>1.1.3 SH</h3><p>源地址散列调度算法：源IP地址Hash；将来自于同一个IP地址的请求始终分配固定的服务器资源。</p><h3 id="1-1-4-DH"><a href="#1-1-4-DH" class="headerlink" title="1.1.4 DH"></a>1.1.4 DH</h3><p>目标地址散列调度算法：目标地址Hash；第一次轮询调度至RS，后续将发往同一个目标地址的请求始终发往第一次挑中的RS</p><h2 id="1-2-动态算法"><a href="#1-2-动态算法" class="headerlink" title="1.2 动态算法"></a>1.2 动态算法</h2><p>根据每个RS当前的负载状态及调度算法进行调度：Overhead&#x3D;value 较小的RS将被调度  </p><h3 id="1-2-1-LC"><a href="#1-2-1-LC" class="headerlink" title="1.2.1 LC"></a>1.2.1 LC</h3><p>least connections：动态地将网络请求调度到已建立的连接数最少的服务器上</p><h3 id="1-2-2-WLC"><a href="#1-2-2-WLC" class="headerlink" title="1.2.2 WLC"></a>1.2.2 WLC</h3><p>Weighted LC默认调度算法：调度器可以自动问询真实服务器的负载情况，并动态调整权值</p><h3 id="1-2-3-SED"><a href="#1-2-3-SED" class="headerlink" title="1.2.3 SED"></a>1.2.3 SED</h3><p>Shortest Expection Delay：不考虑非活动链接，谁的权重大，优先选择权重大的服务器来接收请求，但权重大的机器会比较忙</p><h3 id="1-2-4-NQ"><a href="#1-2-4-NQ" class="headerlink" title="1.2.4 NQ"></a>1.2.4 NQ</h3><p>Never Queue：无需队列，如果有realserver的连接数为0就直接分配过去</p><h3 id="1-2-5-LBLC"><a href="#1-2-5-LBLC" class="headerlink" title="1.2.5 LBLC"></a>1.2.5 LBLC</h3><p>Locality-Based LC：请求数据包的目标 IP 地址的一种调度算法，该算法先根据请求的目标 IP 地址寻找最近的该目标 IP 地址所有使用的服务器，如果这台服务器依然可用，并且有能力处理该请求，调度器会尽量选择相同的服务器，否则会继续选择其它可行的服务器</p><h3 id="1-2-6-LBLCR"><a href="#1-2-6-LBLCR" class="headerlink" title="1.2.6 LBLCR"></a>1.2.6 LBLCR</h3><p>LBLC with Replication：记录的不是要给目标 IP 与一台服务器之间的连接记录，它会维护一个目标 IP 到一组服务器之间的映射关系，防止单点服务器负载过高。</p><h2 id="1-3-新增调度算法：FO和OVF"><a href="#1-3-新增调度算法：FO和OVF" class="headerlink" title="1.3 新增调度算法：FO和OVF"></a>1.3 新增调度算法：FO和OVF</h2><p>内核版本 4.15 版本后新增</p><h3 id="1-3-1-FO"><a href="#1-3-1-FO" class="headerlink" title="1.3.1 FO"></a>1.3.1 FO</h3><p>Weighted Fail Over：在此FO算法中，遍历虚拟服务所关联的真实服务器链表，找到还未过载（未设置IP_VS_DEST_F_OVERLOAD标志）的且权重最高的真实服务器，进行调度,属于静态算法  </p><h3 id="1-3-2-OVF"><a href="#1-3-2-OVF" class="headerlink" title="1.3.2 OVF"></a>1.3.2 OVF</h3><p>Overflow-connection：基于真实服务器的活动连接数量和权重值实现。将新连接调度到权重值最高的真实服务器，直到其活动连接数量超过权重值，之后调度到下一个权重值最高的真实服务器,在此OVF算法中，遍历虚拟服务相关联的真实服务器链表，找到权重值最高的可用真实服务器。属于动态算法。</p><p>一个可用的真实服务器需要同时满足以下条件：  </p><ul><li>未过载（未设置IP_VS_DEST_F_OVERLOAD标志）  </li><li>真实服务器当前的活动连接数量小于其权重值。</li><li>其权重值不为零。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).LVS工作模式</title>
    <link href="/2023/02/02/LB/LVS/lvs01/"/>
    <url>/2023/02/02/LB/LVS/lvs01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Linux-Virtual-Server简介"><a href="#1-Linux-Virtual-Server简介" class="headerlink" title="1.Linux Virtual Server简介"></a>1.Linux Virtual Server简介</h1><h2 id="1-1-LVS介绍"><a href="#1-1-LVS介绍" class="headerlink" title="1.1 LVS介绍"></a>1.1 LVS介绍</h2><p>LVS：Linux Virtual Server，负载调度器。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#LVS官网：<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.linuxvirtualserver.org/</span></span>#阿里SLB和LVS<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//yq.aliyun.com/articles/1803</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/alibaba/LVS</span></span></code></pre></div></figure><p>LVS根据请求报文的目标IP和目标协议及端口将其调度转发至其中的RS，根据调度算法调度至RS。</p><p>LVS是内核级功能，工作在INPUT链的位置，将发往INPUT的流量进行“处理”。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看CentOS7.9内核支持LVS</span><span class="token punctuation">[</span>root@Server10 ~<span class="token punctuation">]</span><span class="token comment"># grep -i -C 10 ipvs /boot/config-3.10.0-1160.el7.x86_64 </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_IPVS</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_LENGTH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_LIMIT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MAC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MARK</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MULTIPORT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_NFACCT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_OSF</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_OWNER</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_POLICY</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_PHYSDEV</span><span class="token operator">=</span>m--<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETNET</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETPORT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETIFACE</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_LIST_SET</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_IPV6</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_IP_VS_DEBUG is not set</span><span class="token assign-left variable">CONFIG_IP_VS_TAB_BITS</span><span class="token operator">=</span><span class="token number">12</span><span class="token comment">#</span><span class="token comment"># IPVS transport protocol load balancing support</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_PROTO_TCP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_UDP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_SCTP</span><span class="token operator">=</span>y<span class="token comment">#</span><span class="token comment"># IPVS scheduler</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_RR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WRR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLCR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_DH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SED</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_NQ</span><span class="token operator">=</span>m<span class="token comment">#</span><span class="token comment"># IPVS SH scheduler</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_SH_TAB_BITS</span><span class="token operator">=</span><span class="token number">8</span><span class="token comment">#</span><span class="token comment"># IPVS application helper</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_FTP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_NFCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PE_SIP</span><span class="token operator">=</span>m<span class="token comment">#</span><span class="token comment"># IP: Netfilter Configuration</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_NF_DEFRAG_IPV4</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NF_CONNTRACK_IPV4</span><span class="token operator">=</span>m</code></pre></div></figure><h2 id="1-2-LVS相关术语"><a href="#1-2-LVS相关术语" class="headerlink" title="1.2 LVS相关术语"></a>1.2 LVS相关术语</h2><ul><li>DS:Director Server。前端负载均衡器节点</li><li>RS:Real Server。后端真实的工作服务器</li><li>VIP:Virtual Serve IP。用户请求的目标IP地址。</li><li>DIP:Director Server IP。内部主机通信的IP地址。</li><li>RIP:Real Server IP。后端服务器的IP地址。</li><li>CIP:Client IP。客户端的IP地址。</li></ul><h2 id="1-3-LVS工作模式"><a href="#1-3-LVS工作模式" class="headerlink" title="1.3 LVS工作模式"></a>1.3 LVS工作模式</h2><ul><li>LVS-NAT</li><li>LVS-DR</li><li>LVS-TUN</li><li>LVS-FULLNAT</li></ul><h3 id="1-3-1-NAT模式"><a href="#1-3-1-NAT模式" class="headerlink" title="1.3.1 NAT模式"></a>1.3.1 NAT模式</h3><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-nat-1.png" alt="lvs-nat-1"></p><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-nat-2.png" alt="lvs-nat-2"></p><p><strong>NAT模式工作原理：</strong></p><ol><li>用户发起请求<a href="http://www.chsblogs.com,到达lvs网卡,此时数据包源ip是cip,目标ip是vip./">www.chsblogs.com，到达LVS网卡，此时数据包源IP是CIP，目标IP是VIP。</a></li><li>经过网卡进入PREROUTING，根据目的IP查找路由，确认是本机，将数据转发至INPUT，此时数据包源IP是CIP，目标IP是VIP。</li><li>到达LVS后，通过目的IP和目的PORT查找是否为IPVS服务。若是IPVS服务，则会选择一个RS作为后端服务器，将数据包目的IP修改为RIP，并以RIP为目的查找路由信息，确定下一跳和出口信息，将数据包转发至POSTROUTING。</li><li>修改后的数据包经过POSTROUTING和链路层处理后，到达RS服务器，此时数据包源IP是CIP，目的IP是RIP。</li><li>到达RS服务器的数据包经过链路层和网络层检查后，送往用户空间Web服务。Web服务处理完成，发送响应数据包，到达LVS服务器后，此时源IP是RIP，目的IP是CIP。</li><li>LVS服务器收到RS响应数据包后，根据路由查找，发现目的IP不是本机IP，将数据包转发给FORWARD链，此时源IP是RIP，目的IP是CIP。</li><li>LVS服务器收到响应数据包后，根据目的IP和目的PORT查找服务和连接表，将源IP改为VIP，通过路由查找，确定下一跳和出口信息，将数据包发送至网关，经过复杂的网络到达用户客户端，最终完成一次请求和响应。</li></ol><p><strong>NAT模式特性：</strong></p><ul><li>本质是多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为其中的RS的RIP和PORT实现转发。</li><li>NAT的数据包进出都要经过LVS，所以LVS负载压力较高。</li><li>RIP和DIP应在同一个IP网络，且应使用私有地址；RS的网关要指向DIP。</li></ul><p><strong>NAT模式优点：</strong></p><ul><li>VS必须是Linux系统，RS支持Windows操作系统。</li><li>支持端口映射，可以修改请求报文的目标PORT。</li></ul><p><strong>NAT模式缺点：</strong></p><ul><li><p>后端RS需要配置网关。</p></li><li><p>NAT的数据包进出都要经过LVS，所以LVS负载压力较高。</p></li></ul><p><strong>NAT模式场景：</strong></p><ul><li>RS有Windows操作系统。</li></ul><h3 id="1-3-2-DR模式"><a href="#1-3-2-DR模式" class="headerlink" title="1.3.2 DR模式"></a>1.3.2 DR模式</h3><p>LVS-DR：Direct Routing，直接路由，LVS默认模式，应用最广泛，通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在接口的MAC，目标MAC是其中一台RS的RIP所在接口的MAC地址。源IP&#x2F;PORT，以及目标IP&#x2F;PORT保持不变。</p><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-dr-1.png" alt="lvs-dr-1"></p><p><strong>DR模式工作原理：</strong></p><ol><li>用户发起请求<a href="http://www.chsblogs.com,请求数据包穿过网络到达lvs服务器连接的路由器,此时源ip是cip,目标ip是vip;源mac是cmac,目标mac地址是r1接口的mac地址,记为r1mac/">www.chsblogs.com，请求数据包穿过网络到达LVS服务器连接的路由器，此时源IP是CIP，目标IP是VIP；源MAC是CMAC，目标MAC地址是R1接口的MAC地址，记为R1MAC</a></li><li>请求报文经过R1路由器分发后，到达LVS服务器的网卡，此时源IP是CIP，目标IP是VIP，源MAC是R2接口的MAC地址，记为R2MAC，目标MAC地址VIP 对应的 MAC，记为 VMAC 。</li><li>数据包经过链路层到达 PREROUTING 位置，查找路由发现目的IP是LVS的VIP，就会传递到INPUT链上，此时数据包MAC，IP，PORT都没有修改。</li><li>数据包到达INPUT链。此时 LVS 会根据目的 IP 和 PORT来确认是否是 LVS 定义的服务，如果是定义过的 VIP 服务，就会根据配置信息，从真实服务器列表 中选择一个作为 RS1，然后以 RS1作为目标查找Out 方向的路由，确定一下跳信息以及数据包要通过哪个网卡发出。最后将数据包投递到POSTROUTING链上。</li><li>数据包通过POSTROUTING链后，从网络层转到链路层，将目的 MAC 地址修改为RealServer服务器MAC地址，记为 RMAC ；而源 MAC 地址修改为 LVS 与 RS 同网段的IP对应的MAC地址，记为DMAC 。此时，数据包通过交换机转发给了RealServer服务器。</li><li>请求数据包到达后端真实服务器后，链路层检查目的 MAC 是自己网卡地址。到了网络层，查找路由，目的 IP 是 VIP（lo 上配置了 VIP），判定是本地主机的数据包，经过协议栈拷贝至Web服务，Web服务响应请求后，产生响应数据包。</li><li>然后以CIP查找出方向的路由，确定下一跳信息和发送网卡设备信息。此时源IP是VIP，目标IP是CIP，而源MAC地址是RS的MAC地址，记为RMAC ，目的 MAC 是下一跳（路由器）的 MAC 地址，记为 R2MAC。然后数据包通过RS相连的路由器转发给真正客户端，完成了请求响应的全过程。</li></ol><p><strong>DR模式特性：</strong></p><ul><li>前端路由将目标地址为VIP报文发往Director Server</li><li>Director和RS都配置有VIP</li><li>RS的RIP可以使用私网地址，也可以是公网地址，RIP与DIP在同一IP网络。RIP的网关不能指向DIP，以确保响应报文不会经由Director</li><li>RS和Director要在同一个物理网络。</li><li>请求报文要经由Director，但响应报文不经由Director，而由RS直接发往Client。</li><li>不支持端口映射。</li><li>无需开启 ip_forward</li><li>RS可使用大多数OS系统</li></ul><p><strong>DR模式优点：</strong></p><ul><li>响应数据不经过 LVS，性能高。</li></ul><p><strong>DR模式缺点：</strong></p><ul><li>LVS 与 RS必须在同一个物理网络（不支持跨机房）</li><li>服务器上必须配置 lo 和其它内核参数</li><li>不支持端口映射</li></ul><p><strong>DR模式场景：</strong></p><p>对性能要求非常高，可以首选 DR 模式，而且可以透传客户端源 IP 地址。</p><h3 id="1-3-3-TUN模式"><a href="#1-3-3-TUN模式" class="headerlink" title="1.3.3 TUN模式"></a>1.3.3 TUN模式</h3><h3 id="1-3-4-FULLNAT模式"><a href="#1-3-4-FULLNAT模式" class="headerlink" title="1.3.4 FULLNAT模式"></a>1.3.4 FULLNAT模式</h3><h2 id="1-4-LVS工作模式比较"><a href="#1-4-LVS工作模式比较" class="headerlink" title="1.4 LVS工作模式比较"></a>1.4 LVS工作模式比较</h2><table><thead><tr><th></th><th>NAT</th><th>TUN</th><th>DR</th></tr></thead><tbody><tr><td>Real Server</td><td>any</td><td>Tunneling</td><td>Non-arp device</td></tr><tr><td>Real server network</td><td>Private</td><td>LAN&#x2F;WAN</td><td>LAN</td></tr><tr><td>Real server number</td><td>low (10~20)</td><td>High (100)</td><td>High (100)</td></tr><tr><td>Real server gateway</td><td>load balancer</td><td>own router</td><td>Own route</td></tr><tr><td>优点</td><td>端口转换</td><td>WAN</td><td>性能最好</td></tr><tr><td>缺点</td><td>性能瓶颈</td><td>要求支持隧道,不支持端口转换</td><td>不支持跨网段和端口转换</td></tr></tbody></table><p>LVS-NAT与LVS-FULLNAT：</p><ul><li>请求和响应报文都经过Director</li><li>LVS-NAT：RIP的网关要指向DIP</li><li>LVS-FULLNAT：RIP和DIP未必在同一IP网络，但要能通信。</li></ul><p>LVS-DR与LVS-TUN：</p><ul><li>请求报文要经过Director，但响应报文由RS直接发往Client</li><li>LVS-DR：通过封装新的MAC首部实现，通过MAC网络转发。</li><li>LVS-TUN：通过在原IP报文外封装新IP头实现转发，支持远距离通信。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(08).Docker-Compose</title>
    <link href="/2022/09/07/Container/Docker/docker08/"/>
    <url>/2022/09/07/Container/Docker/docker08/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker-Compose简介"><a href="#1-Docker-Compose简介" class="headerlink" title="1.Docker Compose简介"></a>1.Docker Compose简介</h1><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。</p><h1 id="2-安装Docker-Compose"><a href="#2-安装Docker-Compose" class="headerlink" title="2.安装Docker-Compose"></a>2.安装Docker-Compose</h1><h2 id="2-1-方式一"><a href="#2-1-方式一" class="headerlink" title="2.1 方式一"></a>2.1 方式一</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:/usr/local/src<span class="token comment"># apt update</span>root@node10:/usr/local/src<span class="token comment"># apt install -y python3-pip</span>root@node10:/usr/local/src<span class="token comment"># pip install docker-compose</span><span class="token comment">#这里有个报错->/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (1.26.12) or chardet (3.0.4) doesn't match a supported version!</span><span class="token comment">#  warnings.warn("urllib3 (&#123;&#125;) or chardet (&#123;&#125;) doesn't match a supported "</span><span class="token comment">#解决：</span>root@node10:/usr/local/src<span class="token comment"># pip uninstall -y urllib3</span>root@node10:/usr/local/src<span class="token comment"># pip uninstall chardet</span>root@node10:/usr/local/src<span class="token comment"># pip install requests</span>root@node10:/usr/local/src<span class="token comment"># docker-compose -v</span><span class="token function">docker-compose</span> version <span class="token number">1.29</span>.2, build unknown</code></pre></div></figure><h2 id="2-2-方式二"><a href="#2-2-方式二" class="headerlink" title="2.2 方式二"></a>2.2 方式二</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#二进制文件安装</span><span class="token comment">#github网速较慢，可使用https://get.daocloud.io/</span><span class="token comment">#root@node10:~# curl -L https://github.com/docker/compose/releases/download/v2.10.0/docker-compose-linux-#x86_64 -o /usr/local/bin/docker-compose</span>root@node12:~<span class="token comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/v2.10.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</span>root@node12:~<span class="token comment"># chmod +x /usr/local/bin/docker-compose</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(07).Docker资源限制</title>
    <link href="/2022/09/07/Container/Docker/docker07/"/>
    <url>/2022/09/07/Container/Docker/docker07/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>默认情况下，docker没有对容器进行硬件资源限制。docker宿主机上运行的容器虽然相互隔离，但是共用宿主机的CPU、内存等硬件资源。如果不对容器使用的资源进行限制，那么很有可能会导致宿主机资源耗尽，服务不可用。</p><h1 id="2-CPU资源限制"><a href="#2-CPU资源限制" class="headerlink" title="2.CPU资源限制"></a>2.CPU资源限制</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#选项</span><span class="token parameter variable">--cpus</span> decimal                   <span class="token comment">#指定容器可以使用多少CPU资源。</span>--cpuset-cpus string             <span class="token comment">#指定容器运行的CPU编号。</span>--cpu-shares int                 <span class="token comment">#CPU份额</span></code></pre></div></figure><ul><li>–cpus</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#给容器分配1核CPU</span>root@node10:~<span class="token comment"># docker run -it -d -p 80:80 --cpus 1 nginx</span><span class="token comment">#宿主机cgroup验证，每个CPU会按照1000为单位转换成百分比进行资源划分。1核CPU就是100000/1000=100%</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/cpu/docker/3260b811d43e5e0da52a15170760248f773850fadcda5ed7a1fc56222339c639/cpu.cfs_quota_us </span><span class="token number">100000</span><span class="token comment">#动态调整，调整后，压测CPU百分比会超过100%</span>root@node10:~<span class="token comment"># echo "200000" > /sys/fs/cgroup/cpu/docker/3260b811d43e5e0da52a15170760248f773850fadcda5ed7a1fc56222339c639/cpu.cfs_quota_us</span><span class="token comment">#压测，查看容器CPU消耗</span>root@node11:~<span class="token comment"># ab -n 10000000 -c 1000 http://192.168.1.10/index.html</span>root@node10:~<span class="token comment"># docker stats</span>CONTAINER ID   NAME               CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O        PIDS05c9f5b39aad   nostalgic_beaver   <span class="token number">102.23</span>%   <span class="token number">15</span>.47MiB / <span class="token number">7</span>.741GiB   <span class="token number">0.20</span>%     118MB / 279MB   528kB / <span class="token number">15</span>.9kB   <span class="token number">9</span></code></pre></div></figure><ul><li>–cpuset-cpus</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将容器运行在指定CPU核上</span>root@node10:~<span class="token comment"># docker run -it -d -p 80:80 --cpus 1 --cpuset-cpus 1,3 nginx</span></code></pre></div></figure><h1 id="3-内存资源限制"><a href="#3-内存资源限制" class="headerlink" title="3.内存资源限制"></a>3.内存资源限制</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#选项</span><span class="token parameter variable">--memory</span> bytes                   <span class="token comment">#内存限制</span>--memory-swap bytes              <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>--oom-kill-disable               <span class="token comment">#禁用OOM杀手</span></code></pre></div></figure><ul><li>–memory</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#pull测试镜像</span>root@node10:~<span class="token comment"># docker pull lorel/docker-stress-ng</span><span class="token comment">#限制容器最大内存使用2G</span>root@node10:~<span class="token comment"># docker run -it -d -m 2G lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证，通过echo命令可以修改内存限制的值，但是可以在原基础上增大内存的限制，缩小内存限制会报错</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/d9d7c18f81ac07742e83e0a2d1ed7489da5d587bf44b3ac1517473411d5ce33a/memory.limit_in_bytes </span><span class="token number">2147483648</span></code></pre></div></figure><ul><li>–memory-swap</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#限制容器交换分区</span>root@node10:~<span class="token comment"># docker run -it -d -m 1024M --memory-swap 2048M lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/58fb6f9f2dc0f2f6e55e4bccd7388e958714c4218ec6dc3aa98687060bee7d03/memory.memsw.limit_in_bytes </span><span class="token number">2147483648</span></code></pre></div></figure><ul><li>–oom-kill-disable</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭OOM机制</span>root@node10:~<span class="token comment"># docker run -it -d -m 1024M --oom-kill-disable lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/357f70865c63930a6ab8bb2e3bfd21f20d77717e1f51b17764799b7871db785d/memory.oom_control </span>oom_kill_disable <span class="token number">1</span>under_oom <span class="token number">1</span>oom_kill <span class="token number">0</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(06).Docker网络</title>
    <link href="/2022/09/06/Container/Docker/docker06/"/>
    <url>/2022/09/06/Container/Docker/docker06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker网络模式"><a href="#1-Docker网络模式" class="headerlink" title="1.Docker网络模式"></a>1.Docker网络模式</h1><p>Docker安装完成之后，默认会在宿主机生成一个名称为docker0的网卡，IP地址为172.17.0.1&#x2F;16，并且会生成3种网络模式。创建容器时不指定网络模式下默认使用bridge(桥接)模式。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker0网卡</span>root@node10:~<span class="token comment"># ifconfig docker0</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        inet6 fe80::42:c5ff:fe2f:866d  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 02:42:c5:2f:86:6d  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">67331</span>  bytes <span class="token number">4453755</span> <span class="token punctuation">(</span><span class="token number">4.4</span> MB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">110001</span>  bytes <span class="token number">487083806</span> <span class="token punctuation">(</span><span class="token number">487.0</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>        <span class="token comment">#docker网络模式</span>root@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME      DRIVER    SCOPEf16709969dc6   bridge    bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none      null      <span class="token builtin class-name">local</span></code></pre></div></figure><h2 id="1-1-bridge模式"><a href="#1-1-bridge模式" class="headerlink" title="1.1 bridge模式"></a>1.1 bridge模式</h2><p>​bridge模式是docker的默认网络模式，当使用 <code>docker run -d -p 80:80 nginx</code> 时，docker会在iptables上做DNAT规则，实现端口转发。可以使用<code>iptables -vnL</code> 查看。</p><p>​在docker宿主机上启动的docker容器，都会连接到docker0的虚拟网桥上。虚拟网桥的工作方式根物理交换机类似，这样在宿主机上启动的所有容器就通过交换机连接在一个二层网络中。docker启动的容器IP地址会从docker0子网中分配一个IP给容器使用，当前容器的网关为docker0的IP地址。在主机上创建一对虚拟网卡设备，docker将一对虚拟网卡设备的一端放置在容器中，命名为eth0，另一端在宿主机中，以vethX的命名方式命名，并将这个网络设备加入到docker0网桥中。可以通过<code>brctl show</code> 查看。</p><p><img src="/2022/09/06/Container/Docker/docker06/image-20220907101804536.png" alt="bridge模式"> </p><p>宿主机和docker容器之间是可以进行网络连接的，docker容器和容器之间也可以进行网络连接。</p><h2 id="1-2-host模式"><a href="#1-2-host模式" class="headerlink" title="1.2 host模式"></a>1.2 host模式</h2><p>当启动的容器网络使用host模式时，那么此容器不会获得一个独立的 Net Namespace，而是和宿主机共用一个 Net Namespace，容器不会虚拟出自己的网卡，配置自己的IP，而是使用宿主机的IP和端口。容器网络使用host模式可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口占用宿主机的端口，如果宿主机的端口被占用了，那么容器内部服务器的端口就不能在使用了。host模式最大的优势就是性能比较好。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器，指定网络模式为host</span>root@node10:~<span class="token comment"># docker run -d --network host nginx</span><span class="token comment">#查看容器网络</span>root@node10:~<span class="token comment"># docker exec -it 1950c2ebe52f bash</span>root@node10:/<span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc fq_codel state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:a2:51:d5 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">192.168</span>.1.10/24 brd <span class="token number">192.168</span>.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fea2:51d5/64 scope <span class="token function">link</span>        valid_lft forever preferred_lft forever<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state DOWN group default     link/ether 02:42:c5:2f:86:6d brd ff:ff:ff:ff:ff:ff    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:c5ff:fe2f:866d/64 scope <span class="token function">link</span>        valid_lft forever preferred_lft forever</code></pre></div></figure><h2 id="1-3-none模式"><a href="#1-3-none模式" class="headerlink" title="1.3 none模式"></a>1.3 none模式</h2><p>当启动的容器网络使用none模式时，此容器会获得一个独立的 Net Namespace，但是并不会为容器进行任何网络配置。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器，指定网络模式为none</span>root@node10:~<span class="token comment"># docker run -d --network none nginx</span></code></pre></div></figure><h2 id="1-4-container模式"><a href="#1-4-container模式" class="headerlink" title="1.4 container模式"></a>1.4 container模式</h2><p>container模式指定新启动的容器和已经存在的一个容器共享 Net Namespace ，而不是和宿主机共享。</p><h1 id="2-容器互联"><a href="#2-容器互联" class="headerlink" title="2.容器互联"></a>2.容器互联</h1><p>在同一个宿主机上的容器之间可以通过自定义的容器名称相互访问。由于容器启动的时候内部IP地址是DHCP随机分配的，其IP地址可能会变动，所以需要使用容器名称来配置容器之间的网络连接。通过<code>--like</code> 指定容器名称。</p><ul><li>启动nginx01容器</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker run -d --name nginx01 -p 80:80 nginx</span></code></pre></div></figure><ul><li>启动nginx02容器，链接至nginx01</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker run -d --name nginx02 --link nginx01 -p 81:80 nginx</span></code></pre></div></figure><ul><li>测试网络访问</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#nginx01容器访问nginx02容器，无法通过容器名访问nginx02</span>root@node10:~<span class="token comment"># docker ps | grep nginx01</span>3a65d4e68d77   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">11</span> minutes ago   Up <span class="token number">11</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker exec -it 3a65d4e68d77 bash</span>root@3a65d4e68d77:/<span class="token comment"># ping nginx02</span>ping: nginx02: Name or <span class="token function">service</span> not known<span class="token comment">#nginx02容器访问nginx01容器,可以通过容器名访问nginx01</span>root@node10:~<span class="token comment"># docker ps | grep nginx02</span>ec9b4bf2bd83   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">13</span> minutes ago   Up <span class="token number">13</span> minutes   <span class="token number">0.0</span>.0.0:81-<span class="token operator">></span><span class="token number">80</span>/tcp, :::81-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx02root@node10:~<span class="token comment"># docker exec -it ec9b4bf2bd83 bash</span>root@ec9b4bf2bd83:/<span class="token comment"># ping nginx01</span>PING nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.130</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.048</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.057</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.084</span> ms</code></pre></div></figure><p><code>--link</code> 的工作原理就是在容器中添加相应的host解析，将容器名和IP地址映射。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看nginx01的hosts</span>root@3a65d4e68d77:/<span class="token comment"># cat /etc/hosts </span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">172.17</span>.0.23a65d4e68d77<span class="token comment">#查看nginx02的hosts</span>root@ec9b4bf2bd83:/<span class="token comment"># cat /etc/hosts </span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">172.17</span>.0.2nginx01 3a65d4e68d77<span class="token number">172.17</span>.0.3ec9b4bf2bd83</code></pre></div></figure><h1 id="3-自定义网络"><a href="#3-自定义网络" class="headerlink" title="3.自定义网络"></a>3.自定义网络</h1><h2 id="3-1-docker-network命令"><a href="#3-1-docker-network命令" class="headerlink" title="3.1 docker network命令"></a>3.1 docker network命令</h2><p>docker network：管理网络</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network COMMAND<span class="token comment">#选项</span>  connect     <span class="token comment">#将容器连接到网络</span>  create      <span class="token comment">#创建一个网络</span>  disconnect  <span class="token comment">#断开容器与网络的连接</span>  inspect     <span class="token comment">#在一个或多个网络上显示详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#列出网络</span>  prune       <span class="token comment">#删除所有未使用的网络</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个网络</span></code></pre></div></figure><ul><li>docker network connect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network connect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER<span class="token comment">#选项</span>      <span class="token parameter variable">--alias</span> strings           <span class="token comment">#为容器添加网络范围的别名</span>      --driver-opt strings      <span class="token comment">#网络的驱动程序选项</span>      <span class="token parameter variable">--ip</span> string               <span class="token comment">#IPv4地址</span>      <span class="token parameter variable">--ip6</span> string              <span class="token comment">#IPv6地址</span>      <span class="token parameter variable">--link</span> list               <span class="token comment">#将链接添加到另一个容器</span>      --link-local-ip strings   <span class="token comment">#为容器添加本地链接地址</span></code></pre></div></figure><ul><li>docker network create</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK<span class="token comment">#选项</span>      <span class="token parameter variable">--attachable</span>           <span class="token comment">#启用手动容器附件</span>      --aux-address map      <span class="token comment">#网络驱动程序使用的辅助IPv4或IPv6地址</span>      --config-from string   <span class="token comment">#从中复制配置的网络</span>      --config-only          <span class="token comment">#创建仅配置的网络</span>  -d, <span class="token parameter variable">--driver</span> string        <span class="token comment">#驱动程序来管理网络</span>      <span class="token parameter variable">--gateway</span> strings      <span class="token comment">#主子网的IPv4或IPv6网关</span>      <span class="token parameter variable">--ingress</span>              <span class="token comment">#创建群集路由网状网络</span>      <span class="token parameter variable">--internal</span>             <span class="token comment">#限制对网络的外部访问</span>      --ip-range strings     <span class="token comment">#从子范围分配容器ip</span>      --ipam-driver string   <span class="token comment">#IP地址管理驱动程序</span>      --ipam-opt map         <span class="token comment">#设置IPAM驱动程序特定选项</span>      <span class="token parameter variable">--ipv6</span>                 <span class="token comment">#启用IPv6网络</span>      <span class="token parameter variable">--label</span> list           <span class="token comment">#在网络上设置元数据</span>  -o, <span class="token parameter variable">--opt</span> map              <span class="token comment">#设置驱动程序特定选项</span>      <span class="token parameter variable">--scope</span> string         <span class="token comment">#控制网络范围</span>      <span class="token parameter variable">--subnet</span> strings       <span class="token comment">#代表网段的CIDR格式的子网</span></code></pre></div></figure><ul><li>docker network disconnect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network disconnect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER<span class="token comment">#选项</span>  -f, <span class="token parameter variable">--force</span>   <span class="token comment">#强制容器断开与网络的连接</span></code></pre></div></figure><ul><li>docker network inspect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK <span class="token punctuation">[</span>NETWORK<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>  -v, <span class="token parameter variable">--verbose</span>         <span class="token comment">#详细输出以进行诊断</span></code></pre></div></figure><ul><li>docker network ls</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network <span class="token function">ls</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如“ driver = bridge”）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示网络ID</span></code></pre></div></figure><ul><li>docker network prune</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network prune <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>      <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'until = &lt;timestamp>'）</span>  -f, <span class="token parameter variable">--force</span>           <span class="token comment">#不提示确认</span></code></pre></div></figure><ul><li>docker network rm</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network <span class="token function">rm</span> NETWORK <span class="token punctuation">[</span>NETWORK<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre></div></figure><h2 id="3-2-创建自定义网络"><a href="#3-2-创建自定义网络" class="headerlink" title="3.2 创建自定义网络"></a>3.2 创建自定义网络</h2><ul><li>创建自定义docker网络</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker network create -d bridge --subnet 10.0.0.0/8 --gateway 10.0.0.1 chsblogs-net</span>01c420b8d9b533d7597eeb3759a85458d0bb4814d4da0627a46f319ec186f35aroot@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME           DRIVER    SCOPE7bc11f045261   bridge         bridge    <span class="token builtin class-name">local</span>01c420b8d9b5   chsblogs-net   bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>           <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none           null      <span class="token builtin class-name">local</span></code></pre></div></figure><ul><li>使用自定义网络创建容器</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用自定义网络创建3个nginx容器</span>root@node10:~<span class="token comment"># docker run -d -p 80:80 --name nginx01 --net chsblogs-net nginx</span>588ee5c7e6ecbbaed82891d3b24e4f580e97e78bed5e9324a7ec2261a91a0e76root@node10:~<span class="token comment"># docker run -d -p 81:80 --name nginx02 --net chsblogs-net nginx</span>d92d07b3e6578c8c2ad49ea243b2e22f8e05464aa4aa4e1a908a47332847c787root@node10:~<span class="token comment"># docker run -d -p 82:80 --name nginx03 --net chsblogs-net nginx</span>d6efc960528a66cf997597f65fbf6a219a7368ac619f6649fbba2bd7ec266352<span class="token comment">#验证自定义网络容器之网络连接，通过容器IP和容器名称，都可以进行网络通信。</span>root@node10:~<span class="token comment"># docker exec -it 588ee5c7e6ec bash</span>root@588ee5c7e6ec:/<span class="token comment"># ping nginx02</span>PING nginx02 <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.093</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.126</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.150</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.104</span> ms</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(05).Docker镜像仓库之Harbor</title>
    <link href="/2022/09/03/Container/Docker/docker05/"/>
    <url>/2022/09/03/Container/Docker/docker05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Harbor简介"><a href="#1-Harbor简介" class="headerlink" title="1.Harbor简介"></a>1.Harbor简介</h1><p>​Harbor是VMware公司开源的企业级Docker Registry项目。Harbor提供了更好的性能和安全。它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能，具有Web管理功能，有了它之后能够很方便的管理容器镜像，搭配Jenkins使用很是方便。</p><p>VMware官方开源服务列表地址：<a href="https://github.com/vmware/">https://github.com/vmware/</a></p><p>Harbor官方Github地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><p>Harbor官方网址：<a href="https://goharbor.io/">https://goharbor.io/</a></p><h1 id="2-Harbor安装配置"><a href="#2-Harbor安装配置" class="headerlink" title="2.Harbor安装配置"></a>2.Harbor安装配置</h1><p>Harbor下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p>安装文档：<a href="https://goharbor.io/docs/2.5.0/">https://goharbor.io/docs/2.5.0/</a></p><h2 id="2-1-主机清单"><a href="#2-1-主机清单" class="headerlink" title="2.1 主机清单"></a>2.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>Docker版本</th><th>Docker-Compose版本</th><th>Harbor版本</th></tr></thead><tbody><tr><td>node14</td><td>192.168.1.14</td><td>Ubuntu20.04</td><td>20.10.17</td><td>1.29.2</td><td>v2.5.0</td></tr><tr><td>node15</td><td>192.168.1.15</td><td>Ubuntu20.04</td><td>20.10.17</td><td>1.29.2</td><td>v2.5.0</td></tr></tbody></table><h2 id="2-2-安装Docker"><a href="#2-2-安装Docker" class="headerlink" title="2.2 安装Docker"></a>2.2 安装Docker</h2><p>详见Docker安装文档：<a href="https://chsblogs.com/2022/08/30/Container/Docker/docker02/">https://chsblogs.com/2022/08/30/Container/Docker/docker02/</a></p><h2 id="2-3-下载Harbor安装包"><a href="#2-3-下载Harbor安装包" class="headerlink" title="2.3 下载Harbor安装包"></a>2.3 下载Harbor安装包</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:~<span class="token comment"># cd /usr/local/src/</span>root@node14:/usr/local/src<span class="token comment"># wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz</span>root@node14:/usr/local/src<span class="token comment"># ls</span>harbor-offline-installer-v2.5.0.tgz</code></pre></div></figure><h2 id="2-4-安装Docker-Compose"><a href="#2-4-安装Docker-Compose" class="headerlink" title="2.4 安装Docker-Compose"></a>2.4 安装Docker-Compose</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:/usr/local/src<span class="token comment"># apt update</span>root@node14:/usr/local/src<span class="token comment"># apt install -y python3-pip</span>root@node14:/usr/local/src<span class="token comment"># pip install docker-compose</span><span class="token comment">#这里有个报错->/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (1.26.12) or chardet (3.0.4) doesn't match a supported version!</span><span class="token comment">#  warnings.warn("urllib3 (&#123;&#125;) or chardet (&#123;&#125;) doesn't match a supported "</span><span class="token comment">#解决：</span>root@node14:/usr/local/src<span class="token comment"># pip uninstall -y urllib3</span>root@node14:/usr/local/src<span class="token comment"># pip uninstall chardet</span>root@node14:/usr/local/src<span class="token comment"># pip install requests</span>root@node14:/usr/local/src<span class="token comment"># docker-compose -v</span><span class="token function">docker-compose</span> version <span class="token number">1.29</span>.2, build unknown</code></pre></div></figure><h2 id="2-5-安装Harbor"><a href="#2-5-安装Harbor" class="headerlink" title="2.5 安装Harbor"></a>2.5 安装Harbor</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:/usr/local/src<span class="token comment"># tar -xvf harbor-offline-installer-v2.5.0.tgz</span>root@node14:/usr/local/src<span class="token comment"># cd harbor/</span>root@node14:/usr/local/src/harbor<span class="token comment"># cp harbor.yml.tmpl harbor.yml</span><span class="token comment">#更改配置</span>root@node14:/usr/local/src/harbor<span class="token comment"># vim harbor.yml</span>hostname: harbor.chsblogs.com<span class="token comment">#https:</span>  <span class="token comment"># https port for harbor, default is 443</span>  <span class="token comment">#port: 443</span>  <span class="token comment"># The path of cert and key files for nginx</span>  <span class="token comment">#certificate: /your/certificate/path</span>  <span class="token comment">#private_key: /your/private/key/path</span>harbor_admin_password: <span class="token number">123456</span><span class="token comment">#安装harbor</span>root@node14:/usr/local/src/harbor<span class="token comment"># ./install.sh</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Step <span class="token number">5</span><span class="token punctuation">]</span>: starting Harbor <span class="token punctuation">..</span>.Creating network <span class="token string">"harbor_harbor"</span> with the default driverCreating harbor-log <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-portal <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating redis         <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registryctl   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registry      <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-db     <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-core   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating nginx             <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-jobservice <span class="token punctuation">..</span>. <span class="token keyword">done</span>✔ ----Harbor has been installed and started successfully.----</code></pre></div></figure><h2 id="2-6-访问测试"><a href="#2-6-访问测试" class="headerlink" title="2.6 访问测试"></a>2.6 访问测试</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220904235329135.png" alt="Harbor">  </p><h1 id="3-使用Harbor仓库上传下载镜像"><a href="#3-使用Harbor仓库上传下载镜像" class="headerlink" title="3.使用Harbor仓库上传下载镜像"></a>3.使用Harbor仓库上传下载镜像</h1><h2 id="3-1-配置Docker文件"><a href="#3-1-配置Docker文件" class="headerlink" title="3.1 配置Docker文件"></a>3.1 配置Docker文件</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置docker</span>root@node10:~<span class="token comment"># vim /etc/docker/daemon.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://x76gajt3.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://harbor.chsblogs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">#重启docker</span>root@node10:~<span class="token comment"># systemctl daemon-reload</span>root@node10:~<span class="token comment"># systemctl restart docker</span><span class="token comment">#登录harbor</span>root@node10:~<span class="token comment"># docker login harbor.chsblogs.com</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded</code></pre></div></figure><h2 id="3-2-上传下载镜像"><a href="#3-2-上传下载镜像" class="headerlink" title="3.2 上传下载镜像"></a>3.2 上传下载镜像</h2><ul><li>新建项目</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220905103205291.png" alt="baseimages"> </p><ul><li>镜像打tag</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker images | grep ubuntu | grep 20.04</span>ubuntu         <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBroot@node10:~<span class="token comment"># docker tag ubuntu:20.04 harbor.chsblogs.com/baseimages/ubuntu:20.04</span>root@node10:~<span class="token comment"># docker images | grep harbor.chsblogs.com/baseimages/ubuntu</span>harbor.chsblogs.com/baseimages/ubuntu   <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MB</code></pre></div></figure><ul><li>上传镜像至harbor</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Layer already exists <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><p><img src="/2022/09/03/Container/Docker/docker05/image-20220905104557900.png" alt="baseimages"> </p><ul><li>从harbor下载镜像</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置本地域名解析</span>root@node11:~<span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1 localhost<span class="token number">127.0</span>.1.1 node11<span class="token number">192.168</span>.1.14 harbor.chsblogs.com<span class="token comment">#配置docker</span>root@node11:~<span class="token comment"># cat /etc/docker/daemon.json </span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://x76gajt3.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://harbor.chsblogs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>root@node11:~<span class="token comment"># sudo systemctl daemon-reload</span>root@node11:~<span class="token comment"># sudo systemctl restart docker</span><span class="token comment">#下载镜像</span>root@node11:~<span class="token comment"># docker pull harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17</span>harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17: Pulling from baseimages/ubuntu7b1a6ab2e44d: Pull complete Digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17Status: Downloaded newer image <span class="token keyword">for</span> harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17<span class="token comment">#验证下载镜像</span>root@node11:~<span class="token comment"># docker images | grep ubuntu</span>harbor.chsblogs.com/baseimages/ubuntu   <span class="token operator">&lt;</span>none<span class="token operator">></span>     ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MB</code></pre></div></figure><h1 id="4-Harbor-v2-5-0-高可用部署"><a href="#4-Harbor-v2-5-0-高可用部署" class="headerlink" title="4.Harbor(v2.5.0)高可用部署"></a>4.Harbor(v2.5.0)高可用部署</h1><p>Harbor高可用可以解决单点故障问题，使用Haproxy+Keepalived配置Harbor高可用。</p><h2 id="4-1-主机清单"><a href="#4-1-主机清单" class="headerlink" title="4.1 主机清单"></a>4.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统版本</th><th>角色</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>Ubuntu20.04</td><td>Docker客户端(上传镜像)</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td></tr><tr><td>node13</td><td>192.168.1.13</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td></tr><tr><td>node14</td><td>192.168.1.14</td><td>Ubuntu20.04</td><td>Harbor1</td></tr><tr><td>node15</td><td>192.168.1.15</td><td>Ubuntu20.04</td><td>Harbor2</td></tr></tbody></table><ul><li>VIP地址：192.168.1.66</li><li>域名：harbor.chsblogs.com</li></ul><h2 id="4-2-部署拓扑图"><a href="#4-2-部署拓扑图" class="headerlink" title="4.2 部署拓扑图"></a>4.2 部署拓扑图</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906102853032.png" alt="Harbor高可用部署拓扑图"></p><h2 id="4-3-安装配置Haproxy-Keepalived"><a href="#4-3-安装配置Haproxy-Keepalived" class="headerlink" title="4.3 安装配置Haproxy+Keepalived"></a>4.3 安装配置Haproxy+Keepalived</h2><h3 id="4-3-1-主机-node12-配置"><a href="#4-3-1-主机-node12-配置" class="headerlink" title="4.3.1 主机[node12]配置"></a>4.3.1 主机[node12]配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装keepalived+haproxy</span>root@node12:~<span class="token comment"># apt update &amp;&amp; apt install -y haproxy keepalived</span>root@node12:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/</span>root@node12:~<span class="token comment"># cd /etc/keepalived/</span>root@node12:/etc/keepalived<span class="token comment"># cp keepalived.conf.sample keepalived.conf</span><span class="token comment">#配置内核参数</span>root@node12:~<span class="token comment"># cat /etc/sysctl.conf </span><span class="token assign-left variable">net.ipv4.ip_nonlocal_bind</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>root@node12:~<span class="token comment"># sysctl -p</span><span class="token comment">#配置haproxy</span>root@node12:~<span class="token comment"># cat /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen STATUS  mode http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456listen HARBOR_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode tcp  balance <span class="token builtin class-name">source</span>  server harbor1 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server harbor2 <span class="token number">192.168</span>.1.15:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#配置keepalived</span>root@node12:~<span class="token comment"># cat /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>vrrp_script chk_haproxy <span class="token punctuation">&#123;</span>      script <span class="token string">"killall -0 haproxy"</span>      interval <span class="token number">2</span>      weight <span class="token parameter variable">-2</span>      fail <span class="token number">3</span>      rise <span class="token number">1</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">101</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>    track_script<span class="token punctuation">&#123;</span>      chk_haproxy    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="4-3-2-主机-node13-配置"><a href="#4-3-2-主机-node13-配置" class="headerlink" title="4.3.2 主机[node13]配置"></a>4.3.2 主机[node13]配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装keepalived+haproxy</span>root@node13:~<span class="token comment"># apt update &amp;&amp; apt install -y haproxy keepalived</span>root@node13:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/</span>root@node13:~<span class="token comment"># cd /etc/keepalived/</span>root@node13:/etc/keepalived<span class="token comment"># cp keepalived.conf.sample keepalived.conf</span><span class="token comment">#配置内核参数</span>root@node13:~<span class="token comment"># cat /etc/sysctl.conf </span><span class="token assign-left variable">net.ipv4.ip_nonlocal_bind</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>root@node12:~<span class="token comment"># sysctl -p</span><span class="token comment">#配置haproxy</span>root@node13:~<span class="token comment"># cat /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen STATUS  mode http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456listen HARBOR_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode tcp  balance <span class="token builtin class-name">source</span>  server harbor1 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server harbor2 <span class="token number">192.168</span>.1.15:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#配置keepalived</span>root@node13:~<span class="token comment"># cat /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>vrrp_script chk_haproxy <span class="token punctuation">&#123;</span>      script <span class="token string">"killall -0 haproxy"</span>      interval <span class="token number">2</span>      weight <span class="token parameter variable">-2</span>      fail <span class="token number">3</span>      rise <span class="token number">1</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>    track_script<span class="token punctuation">&#123;</span>      chk_haproxy    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-4-安装Harbor"><a href="#4-4-安装Harbor" class="headerlink" title="4.4 安装Harbor"></a>4.4 安装Harbor</h2><p>参考2.Harbor安装配置</p><h2 id="4-5-配置Harbor双向复制"><a href="#4-5-配置Harbor双向复制" class="headerlink" title="4.5 配置Harbor双向复制"></a>4.5 配置Harbor双向复制</h2><h3 id="4-5-1-主机-node14-配置"><a href="#4-5-1-主机-node14-配置" class="headerlink" title="4.5.1 主机[node14]配置"></a>4.5.1 主机[node14]配置</h3><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906220516516.png" alt="复制管理-新建规则"> </p><ul><li>仓库管理-新建目标</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221105045.png" alt="仓库管理-新建目标"> </p><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221231351.png" alt="复制管理-新建规则"> </p><h3 id="4-5-2-主机-node15-配置"><a href="#4-5-2-主机-node15-配置" class="headerlink" title="4.5.2 主机[node15]配置"></a>4.5.2 主机[node15]配置</h3><ul><li>新建项目</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906220516516.png" alt="新建项目"> </p><ul><li>仓库管理-新建目标</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221414917.png" alt="仓库管理-新建目标"> </p><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221512412.png" alt="复制管理-新建规则"> </p><h2 id="4-6-上传镜像测试"><a href="#4-6-上传镜像测试" class="headerlink" title="4.6 上传镜像测试"></a>4.6 上传镜像测试</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加域名解析</span>root@node10:~<span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1 localhost<span class="token number">127.0</span>.1.1 node10<span class="token number">192.168</span>.1.66 harbor.chsblogs.com<span class="token comment">#查看镜像</span>root@node10:~<span class="token comment"># docker images | grep harbor.chsblogs.com</span>harbor.chsblogs.com/baseimages/ubuntu     <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBharbor.chsblogs.com/baseimages/ubuntu     <span class="token number">18.04</span>      5a214d77f5d7   <span class="token number">11</span> months ago   <span class="token number">63</span>.1MB<span class="token comment">#上传镜像</span>root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Pushed <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><h2 id="4-7-验证Harbor镜像复制"><a href="#4-7-验证Harbor镜像复制" class="headerlink" title="4.7 验证Harbor镜像复制"></a>4.7 验证Harbor镜像复制</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221839209.png" alt="Harbor镜像复制"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Linuxの学习笔记(大纲)</title>
    <link href="/2022/09/03/StudyNotes/Linux/"/>
    <url>/2022/09/03/StudyNotes/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="●-云原生"><a href="#●-云原生" class="headerlink" title="● 云原生"></a>● 云原生</h1><h2 id="◎-Docker"><a href="#◎-Docker" class="headerlink" title="◎ Docker"></a>◎ Docker</h2><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker01/">(01).Docker简介</a></p><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker02/">(02).Docker安装</a></p><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker03/">(03).Docker命令</a></p><p><a href="https://chsblogs.com/2022/08/31/Container/Docker/docker04/">(04).Docker构建镜像</a></p><p><a href="https://chsblogs.com/2022/09/03/Container/Docker/docker05/">(05).Docker镜像仓库之Harbor</a></p><p><a href="https://chsblogs.com/2022/09/06/Container/Docker/docker06/">(06).Docker网络</a></p><p><a href="https://chsblogs.com/2022/09/07/Container/Docker/docker07/">(07).Docker资源限制</a></p><p><a href="https://chsblogs.com/2022/09/07/Container/Docker/docker08/">(08).Docker-Compose</a></p><h2 id="◎-Kubernetes"><a href="#◎-Kubernetes" class="headerlink" title="◎ Kubernetes"></a>◎ Kubernetes</h2><p><a href="https://chsblogs.com/2023/04/25/Container/Kubernetes/kubernetes01/">(01).K8S核心组件介绍</a></p><p><a href="https://chsblogs.com/2023/04/26/Container/Kubernetes/kubernetes02/">(02).基于手动部署K8S高可用集群</a></p><p><a href="https://chsblogs.com/2023/04/26/Container/Kubernetes/kubernetes03/">(03).基于kubeadm工具部署K8S高可用集群</a></p><p><a href="https://chsblogs.com/2023/04/26/Container/Kubernetes/kubernetes04/">(04).基于kubeasz工具部署K8S高可用集群</a></p><p><a href="https://chsblogs.com/2023/05/03/Container/Kubernetes/kubernetes05/">(05).自定义镜像运行Nginx及Java服务并基于NFS实现动静分离</a></p><p><a href="https://chsblogs.com/2023/05/03/Container/Kubernetes/kubernetes06/">(06).K8S基于HPA控制器实现Pod自动伸缩</a></p><p><a href="https://chsblogs.com/2023/05/03/Container/Kubernetes/kubernetes07/">(07).K8S基于Jenkins和Gitlab实现版本升级与回滚</a></p><p><a href="https://chsblogs.com/2023/05/03/Container/Kubernetes/kubernetes08/">(08).K8S基于ELK及Kafka集群实现日志收集</a></p><p><a href="https://chsblogs.com/2023/05/05/Container/Kubernetes/kubernetes09/">(09).K8S基于ZooKeeper集群实现微服务动态注册和发现</a></p><p><a href="https://chsblogs.com/2023/05/09/Container/Kubernetes/kubernetes10/">(10).K8S账户授权RBAC</a></p><p><a href="https://chsblogs.com/2023/05/09/Container/Kubernetes/kubernetes11/">(11).K8S资源配额</a></p><p><a href="https://chsblogs.com/2023/05/11/Container/Kubernetes/kubernetes12/">(12).基于StatefulSet控制器运行Redis Cluster</a></p><p><a href="https://chsblogs.com/2023/05/12/Container/Kubernetes/kubernetes13/">(13).K8S基于StatefulSet控制器运行MySQL一主多从</a></p><p><a href="https://chsblogs.com/2023/05/19/Container/Kubernetes/kubernetes14/">(14).K8S之Etcd备份和恢复</a></p><h2 id="◎-Prometheus-x2F-Grafana"><a href="#◎-Prometheus-x2F-Grafana" class="headerlink" title="◎ Prometheus&#x2F;Grafana"></a>◎ Prometheus&#x2F;Grafana</h2><p><a href="https://chsblogs.com/2023/04/19/Monitor/Prometheus/prometheus01/">(01).部署Prometheus基于Grafana渲染数据</a></p><p><a href="https://chsblogs.com/2023/04/19/Monitor/Prometheus/prometheus02/">(02).Prometheus服务发现机制</a></p><p><a href="https://chsblogs.com/2023/04/19/Monitor/Prometheus/prometheus03/">(03).Prometheus监控案例</a></p><p><a href="https://chsblogs.com/2023/04/19/Monitor/Prometheus/prometheus04/">(04).Prometheus联邦集群机制</a></p><p><a href="https://chsblogs.com/2023/04/19/Monitor/Prometheus/prometheus05/">(05).Prometheus基于alertmanager实现告警通知</a></p><h2 id="◎-服务网格Istio"><a href="#◎-服务网格Istio" class="headerlink" title="◎ 服务网格Istio"></a>◎ 服务网格Istio</h2><h2 id="◎-链路追踪Skywalking"><a href="#◎-链路追踪Skywalking" class="headerlink" title="◎ 链路追踪Skywalking"></a>◎ 链路追踪Skywalking</h2><h1 id="●-分布式存储系统"><a href="#●-分布式存储系统" class="headerlink" title="● 分布式存储系统"></a>● 分布式存储系统</h1><h2 id="◎-Ceph"><a href="#◎-Ceph" class="headerlink" title="◎ Ceph"></a>◎ Ceph</h2><p><a href="https://chsblogs.com/2023/04/15/Storage/Ceph/ceph01/">(01).Ceph核心组件介绍</a></p><p><a href="https://chsblogs.com/2023/04/15/Storage/Ceph/ceph02/">(02).基于ceph-deploy在CentOS7.9部署Ceph 13.2.x集群</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph03/">(03).基于ceph-deploy在Ubuntu18.04部署Ceph 16.2.x集群</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph04/">(04).CephX认证机制</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph05/">(05).Ceph-RBD部署和使用</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph06/">(06).CephFS部署和使用</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph07/">(07).Ceph-RadosGW部署和使用</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph08/">(08).Ceph集群管理及工作原理</a></p><p><a href="https://chsblogs.com/2023/04/17/Storage/Ceph/ceph09/">(09).启用Ceph Dashboard并通过Prometheus监控Ceph集群状态</a></p><h1 id="●-日志系统"><a href="#●-日志系统" class="headerlink" title="● 日志系统"></a>● 日志系统</h1><h2 id="◎-ELK"><a href="#◎-ELK" class="headerlink" title="◎ ELK"></a>◎ ELK</h2><p><a href="https://chsblogs.com/2023/03/26/Log/ELK/elk01/">(01).ELK-Elasticsearch简介及集群部署</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk02/">(02).ELK-Logstash部署及使用</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk03/">(03).ELK-Kibana部署及使用</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk04/">(04).ELK-基于Logstash收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk05/">(05).ELK-Logstash基于Redis收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk06/">(06).ELK-Logstash基于Kafka收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk07/">(07).ELK-FileBeat部署及使用</a></p><h1 id="●-消息中间件"><a href="#●-消息中间件" class="headerlink" title="● 消息中间件"></a>● 消息中间件</h1><h2 id="◎-RabbitMQ"><a href="#◎-RabbitMQ" class="headerlink" title="◎ RabbitMQ"></a>◎ RabbitMQ</h2><p><a href="https://chsblogs.com/2023/03/23/MQ/RabbitMQ/rabbitmq01/">(01).RabbitMQ简介及安装</a></p><h2 id="◎-ActiveMQ"><a href="#◎-ActiveMQ" class="headerlink" title="◎ ActiveMQ"></a>◎ ActiveMQ</h2><h2 id="◎-Kafka"><a href="#◎-Kafka" class="headerlink" title="◎ Kafka"></a>◎ Kafka</h2><p><a href="https://chsblogs.com/2023/03/25/MQ/Kafka/kafka01/">(01).Kafka简介及安装</a></p><h1 id="●-微服务"><a href="#●-微服务" class="headerlink" title="● 微服务"></a>● 微服务</h1><h2 id="◎-Zookeeper"><a href="#◎-Zookeeper" class="headerlink" title="◎ Zookeeper"></a>◎ Zookeeper</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Zookeeper/zookeeper01/">(01).Zookeeper简介及安装</a></p><h2 id="◎-Dubbo"><a href="#◎-Dubbo" class="headerlink" title="◎ Dubbo"></a>◎ Dubbo</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Dubbo/dubbo01/">(01).Dubbo简介及安装</a></p><h2 id="◎-Nexus"><a href="#◎-Nexus" class="headerlink" title="◎ Nexus"></a>◎ Nexus</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Nexus/nexus01/">(01).Nexus简介及安装</a></p><h1 id="●-持续集成-x2F-持续部署"><a href="#●-持续集成-x2F-持续部署" class="headerlink" title="● 持续集成&#x2F;持续部署"></a>● 持续集成&#x2F;持续部署</h1><h2 id="◎-Jenkins-x2F-Gitlab-x2F-SonarQube-x2F-Git"><a href="#◎-Jenkins-x2F-Gitlab-x2F-SonarQube-x2F-Git" class="headerlink" title="◎ Jenkins&#x2F;Gitlab&#x2F;SonarQube&#x2F;Git"></a>◎ Jenkins&#x2F;Gitlab&#x2F;SonarQube&#x2F;Git</h2><p><a href="https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg01/">(01).GitLab简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg02/">(02).Jenkins简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/19/CI%E3%81%AECD/JG/jg03/">(03).SonarQube简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/19/CI%E3%81%AECD/JG/jg04/">(04).代码部署案例</a></p><p><a href="https://chsblogs.com/2023/03/19/CICD/JG/jg05/">(05).Git常用命令</a></p><h1 id="●-监控系统"><a href="#●-监控系统" class="headerlink" title="● 监控系统"></a>● 监控系统</h1><h2 id="◎-Zabbix-x2F-Grafana"><a href="#◎-Zabbix-x2F-Grafana" class="headerlink" title="◎ Zabbix&#x2F;Grafana"></a>◎ Zabbix&#x2F;Grafana</h2><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix01/">(01).Zabbix简介</a></p><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix02/">(02).Zabbix安装</a></p><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix03/">(03).Zabbix配置文件详解</a></p><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix04/">(04).Zabbix分布式监控Proxy</a></p><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix05/">(05).Zabbix监控案例</a></p><p><a href="https://chsblogs.com/2023/04/17/Monitor/Zabbix/zabbix06/">(06).Zabbix事件通知机制</a></p><h1 id="●-关系型数据库"><a href="#●-关系型数据库" class="headerlink" title="● 关系型数据库"></a>● 关系型数据库</h1><h2 id="◎-MySQL"><a href="#◎-MySQL" class="headerlink" title="◎ MySQL"></a>◎ MySQL</h2><h2 id="◎-PostgreSQL"><a href="#◎-PostgreSQL" class="headerlink" title="◎ PostgreSQL"></a>◎ PostgreSQL</h2><h1 id="●-非关系型数据库"><a href="#●-非关系型数据库" class="headerlink" title="● 非关系型数据库"></a>● 非关系型数据库</h1><h2 id="◎-Memcached"><a href="#◎-Memcached" class="headerlink" title="◎ Memcached"></a>◎ Memcached</h2><p><a href="https://chsblogs.com/2023/03/06/NoSQL/Memcached/memcached01/">(01).Memcached简介及安装</a></p><h2 id="◎-Redis"><a href="#◎-Redis" class="headerlink" title="◎ Redis"></a>◎ Redis</h2><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis01/">(01).Redis简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis02/">(02).Redis配置详解</a></p><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis03/">(03).Redis持久化</a></p><p><a href="https://chsblogs.com/2023/02/18/NoSQL/Redis/redis04/">(04).Redis主从复制</a></p><p><a href="https://chsblogs.com/2023/02/18/NoSQL/Redis/redis05/">(05).Redis哨兵机制</a></p><p><a href="https://chsblogs.com/2023/02/19/NoSQL/Redis/redis06/">(06).Redis之Cluster集群</a></p><h2 id="◎-MongoDB"><a href="#◎-MongoDB" class="headerlink" title="◎ MongoDB"></a>◎ MongoDB</h2><h1 id="●-负载均衡"><a href="#●-负载均衡" class="headerlink" title="● 负载均衡"></a>● 负载均衡</h1><h2 id="◎-LVS"><a href="#◎-LVS" class="headerlink" title="◎ LVS"></a>◎ LVS</h2><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs01/">(01).LVS工作模式</a></p><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs02/">(02).LVS调度算法</a></p><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs03/">(03).LVS实战案例</a></p><h2 id="◎-HAproxy"><a href="#◎-HAproxy" class="headerlink" title="◎ HAproxy"></a>◎ HAproxy</h2><p><a href="https://chsblogs.com/2023/02/09/LB/HAProxy/haproxy01/">(01).HAProxy简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/10/LB/HAProxy/haproxy02/">(02).HAProxy基础配置详解</a></p><p><a href="https://chsblogs.com/2023/02/12/LB/HAProxy/haproxy03/">(03).HAProxy调度算法</a></p><p><a href="https://chsblogs.com/2023/02/14/LB/HAProxy/haproxy04/">(04).HAProxy高级功能及配置</a></p><p><a href="https://chsblogs.com/2023/02/15/LB/HAProxy/haproxy05/">(05).HAProxy之ACL配置</a></p><h2 id="◎-Nginx"><a href="#◎-Nginx" class="headerlink" title="◎ Nginx"></a>◎ Nginx</h2><h1 id="●-高可用"><a href="#●-高可用" class="headerlink" title="● 高可用"></a>● 高可用</h1><h2 id="◎-Keepalived"><a href="#◎-Keepalived" class="headerlink" title="◎ Keepalived"></a>◎ Keepalived</h2><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived01/">(01).Keepalived简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived02/">(02).Keepalived配置说明</a></p><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived03/">(03).Keepalived企业应用</a></p><h1 id="●-Web服务"><a href="#●-Web服务" class="headerlink" title="● Web服务"></a>● Web服务</h1><h2 id="◎-Tomcat"><a href="#◎-Tomcat" class="headerlink" title="◎ Tomcat"></a>◎ Tomcat</h2><p><a href="https://chsblogs.com/2023/02/28/Web/Tomcat/tomcat01/">(01).Tomcat之JDK安装</a></p><p><a href="https://chsblogs.com/2023/03/01/Web/Tomcat/tomcat02/">(02).Tomcat安装及配置</a></p><p><a href="https://chsblogs.com/2023/03/02/Web/Tomcat/tomcat03/">(03).Tomcat集群部署</a></p><p><a href="https://chsblogs.com/2023/03/02/Web/Tomcat/tomcat04/">(04).Tomcat性能优化</a></p><h2 id="◎-Apache"><a href="#◎-Apache" class="headerlink" title="◎ Apache"></a>◎ Apache</h2><h1 id="●-虚拟化"><a href="#●-虚拟化" class="headerlink" title="● 虚拟化"></a>● 虚拟化</h1><h2 id="◎-KVM"><a href="#◎-KVM" class="headerlink" title="◎ KVM"></a>◎ KVM</h2><h1 id="●-VPN服务"><a href="#●-VPN服务" class="headerlink" title="● VPN服务"></a>● VPN服务</h1><h2 id="◎-OpenVPN"><a href="#◎-OpenVPN" class="headerlink" title="◎ OpenVPN"></a>◎ OpenVPN</h2><h1 id="●-网络服务"><a href="#●-网络服务" class="headerlink" title="● 网络服务"></a>● 网络服务</h1><h2 id="◎-NFS"><a href="#◎-NFS" class="headerlink" title="◎ NFS"></a>◎ NFS</h2><h2 id="◎-Samba"><a href="#◎-Samba" class="headerlink" title="◎ Samba"></a>◎ Samba</h2><h2 id="◎-FTP"><a href="#◎-FTP" class="headerlink" title="◎ FTP"></a>◎ FTP</h2><h1 id="●-集中管理工具"><a href="#●-集中管理工具" class="headerlink" title="● 集中管理工具"></a>● 集中管理工具</h1><h2 id="◎-Ansible"><a href="#◎-Ansible" class="headerlink" title="◎ Ansible"></a>◎ Ansible</h2><h1 id="●-Linux防火墙"><a href="#●-Linux防火墙" class="headerlink" title="● Linux防火墙"></a>● Linux防火墙</h1><h2 id="◎-Iptables"><a href="#◎-Iptables" class="headerlink" title="◎ Iptables"></a>◎ Iptables</h2><h1 id="●-Linux操作系统"><a href="#●-Linux操作系统" class="headerlink" title="● Linux操作系统"></a>● Linux操作系统</h1><h2 id="◎-CentOS"><a href="#◎-CentOS" class="headerlink" title="◎ CentOS"></a>◎ CentOS</h2><p><a href="https://chsblogs.com/2022/08/28/Linux/CentOS/CentosInstall/">(01).CentOS系统安装</a></p><p><a href="https://chsblogs.com/2022/08/28/Linux/CentOS/CentosBase/">(02).CentOS基础配置</a></p><h2 id="◎-Ubuntu"><a href="#◎-Ubuntu" class="headerlink" title="◎ Ubuntu"></a>◎ Ubuntu</h2><p><a href="https://chsblogs.com/2022/08/28/Linux/Ubuntu/UbuntuInstall/">(01).Ubuntu系统安装</a></p><p><a href="https://chsblogs.com/2022/08/28/Linux/Ubuntu/UbuntuBase/">(02).Ubuntu基础配置</a></p><h2 id="◎-Linux基本命令"><a href="#◎-Linux基本命令" class="headerlink" title="◎ Linux基本命令"></a>◎ Linux基本命令</h2><h2 id="◎-文本处理三剑客"><a href="#◎-文本处理三剑客" class="headerlink" title="◎ 文本处理三剑客"></a>◎ 文本处理三剑客</h2><h2 id="◎-软件管理"><a href="#◎-软件管理" class="headerlink" title="◎ 软件管理"></a>◎ 软件管理</h2><h2 id="◎-文件系统"><a href="#◎-文件系统" class="headerlink" title="◎ 文件系统"></a>◎ 文件系统</h2><h2 id="◎-Linux进程"><a href="#◎-Linux进程" class="headerlink" title="◎ Linux进程"></a>◎ Linux进程</h2><h2 id="◎-内核管理"><a href="#◎-内核管理" class="headerlink" title="◎ 内核管理"></a>◎ 内核管理</h2><h2 id="◎-加密安全"><a href="#◎-加密安全" class="headerlink" title="◎ 加密安全"></a>◎ 加密安全</h2><h2 id="◎-时间服务"><a href="#◎-时间服务" class="headerlink" title="◎ 时间服务"></a>◎ 时间服务</h2><h2 id="◎-自动化部署"><a href="#◎-自动化部署" class="headerlink" title="◎ 自动化部署"></a>◎ 自动化部署</h2><h2 id="◎-DNS服务"><a href="#◎-DNS服务" class="headerlink" title="◎ DNS服务"></a>◎ DNS服务</h2><h2 id="◎-Shell"><a href="#◎-Shell" class="headerlink" title="◎ Shell"></a>◎ Shell</h2>]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(04).Docker构建镜像</title>
    <link href="/2022/08/31/Container/Docker/docker04/"/>
    <url>/2022/08/31/Container/Docker/docker04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="1.Dockerfile"></a>1.Dockerfile</h1><h2 id="1-1-Dockerfile简介"><a href="#1-1-Dockerfile简介" class="headerlink" title="1.1 Dockerfile简介"></a>1.1 Dockerfile简介</h2><p>​Dockerfile是一个用来构建镜像的文本文件，由一行行命令语句组成，并且支持以 # 开头的注释行。一般的。Dockerfile分为四部分：基础镜像信息、维护者信息、镜像操作指令、容器启动时执行指令。</p><h2 id="1-2-Dockerfile指令"><a href="#1-2-Dockerfile指令" class="headerlink" title="1.2 Dockerfile指令"></a>1.2 Dockerfile指令</h2><h3 id="1-2-1-FROM"><a href="#1-2-1-FROM" class="headerlink" title="1.2.1 FROM"></a>1.2.1 FROM</h3><p>FROM：指定构建新镜像时使用的基础镜像，通常必须是Dockerfile除了注释之外的第一行，但其前面也可以出现ARG指令。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>digest<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>示例：FROM centos:7.8.2003</code></pre></div></figure><h3 id="1-2-2-RUN"><a href="#1-2-2-RUN" class="headerlink" title="1.2.2 RUN"></a>1.2.2 RUN</h3><p>RUN：基于FROM中定义的镜像为基础环境运行指定命令，并提交结果，生成的镜像将用于Dockerfile中的下一步。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：有2种形式<span class="token comment">#shell形式,非交互形式</span>RUN <span class="token operator">&lt;</span>command<span class="token operator">></span><span class="token comment">#exec执行</span>RUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span>示例：RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /etc/nginxRUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-3-CMD"><a href="#1-2-3-CMD" class="headerlink" title="1.2.3 CMD"></a>1.2.3 CMD</h3><p>CMD：为正在执行的容器提供默认值，默认值可以包括可执行文件，也可以省略可执行文件。Dockerfile中只能有一条CMD指令。如果列出多个CMD，则只有最后一个CMD生效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：Dockerfile中只能有一条CMD指令。如果列出多个CMD，则只有最后一个CMD生效。CMD <span class="token punctuation">[</span><span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>作为ENTRYPOINT 的默认参数<span class="token punctuation">)</span>CMD <span class="token builtin class-name">command</span> param1 param2<span class="token punctuation">(</span>执行shell<span class="token punctuation">)</span>示例：CMD <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-4-LABEL"><a href="#1-2-4-LABEL" class="headerlink" title="1.2.4 LABEL"></a>1.2.4 LABEL</h3><p>LABEL：将元数据添加到镜像。标签是键值对。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：LABEL <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.示例：LABEL <span class="token string">"blogs"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>LABEL <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.2.0"</span></code></pre></div></figure><h3 id="1-2-5-EXPOSE"><a href="#1-2-5-EXPOSE" class="headerlink" title="1.2.5 EXPOSE"></a>1.2.5 EXPOSE</h3><p>EXPOSE：指定容器暴露的端口，支持TCP、UDP协议</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：EXPOSE <span class="token operator">&lt;</span>port<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>port<span class="token operator">></span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>示例：EXPOSE <span class="token number">80</span> <span class="token number">443</span>EXPOSE <span class="token number">8080</span></code></pre></div></figure><h3 id="1-2-6-ENV"><a href="#1-2-6-ENV" class="headerlink" title="1.2.6 ENV"></a>1.2.6 ENV</h3><p>ENV：设置容器环境变量</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ENV <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.示例：ENV JAVA_HOME /usr/local/srcENV JRE_HOME <span class="token variable">$JAVA_HOME</span>/jreENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin</code></pre></div></figure><h3 id="1-2-7-ADD"><a href="#1-2-7-ADD" class="headerlink" title="1.2.7 ADD"></a>1.2.7 ADD</h3><p>ADD：ADD指令从＜src＞复制新文件、目录或远程文件URL，并将它们添加到路径＜dest＞的映像文件系统中。会自动解压tar.gz格式的压缩包，不会自动解压zip。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ADD <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>src<span class="token operator">></span><span class="token punctuation">..</span>. <span class="token operator">&lt;</span>dest<span class="token operator">></span>ADD <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">"&lt;src>"</span>,<span class="token punctuation">..</span>. <span class="token string">"&lt;dest>"</span><span class="token punctuation">]</span>示例：ADD jdk-8u341-linux-x64.tar.gz /usr/local/src</code></pre></div></figure><h3 id="1-2-8-COPY"><a href="#1-2-8-COPY" class="headerlink" title="1.2.8 COPY"></a>1.2.8 COPY</h3><p>COPY：从＜src＞复制新文件或目录，并将它们添加到路径＜dest＞的容器文件系统中。不会解压任何压缩。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：COPY <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>src<span class="token operator">></span><span class="token punctuation">..</span>. <span class="token operator">&lt;</span>dest<span class="token operator">></span>COPY <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">"&lt;src>"</span>,<span class="token punctuation">..</span>. <span class="token string">"&lt;dest>"</span><span class="token punctuation">]</span>示例：COPY jdk-8u341-linux-x64.tar.gz /usr/local/src</code></pre></div></figure><h3 id="1-2-9-ENTRYPOINT"><a href="#1-2-9-ENTRYPOINT" class="headerlink" title="1.2.9 ENTRYPOINT"></a>1.2.9 ENTRYPOINT</h3><p>ENTRYPOINT：用于定义容器在启动时候默认执行的命令或者脚本，如果是和CMD命令混合使用的时候，会将CMD的命令当做参数传递给ENTRYPOINT后面的脚本，可以在脚本中对参数做判断并相应的容器初始化操作。Dockerfile中只能有一条ENTRYPOINT指令。如果列出多个ENTRYPOINT，则只有最后一个ENTRYPOINT生效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>exec格式，首选<span class="token punctuation">)</span>ENTRYPOINT <span class="token builtin class-name">command</span> param1 param2<span class="token punctuation">(</span>shell形式<span class="token punctuation">)</span>示例：FROM ubuntuENTRYPOINT <span class="token punctuation">[</span><span class="token string">"top"</span>, <span class="token string">"-b"</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"top"</span>, <span class="token string">"-b"</span>, <span class="token string">"-c"</span><span class="token punctuation">]</span>CMD <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">]</span>注意：<span class="token function">docker</span> run命令中指定的参数将附加在ENTRYPOINT中的所有元素之后，并将覆盖使用CMD指定的所有元素。</code></pre></div></figure><h3 id="1-2-10-VOLUME"><a href="#1-2-10-VOLUME" class="headerlink" title="1.2.10 VOLUME"></a>1.2.10 VOLUME</h3><p>VOLUME：创建一个具有指定名称的挂载点，并将其标记为保存来自本机主机或其他容器的外部挂载卷。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：VOLUME <span class="token punctuation">[</span><span class="token string">"/data"</span><span class="token punctuation">]</span>示例：FROM ubuntuRUN <span class="token function">mkdir</span> /myvolRUN <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">></span> /myvol/greetingVOLUME /myvol</code></pre></div></figure><h3 id="1-2-11-USER"><a href="#1-2-11-USER" class="headerlink" title="1.2.11 USER"></a>1.2.11 USER</h3><p>USER：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：<span class="token environment constant">USER</span> <span class="token operator">&lt;</span>user<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span><span class="token environment constant">USER</span> <span class="token operator">&lt;</span><span class="token environment constant">UID</span><span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>GID<span class="token operator">></span><span class="token punctuation">]</span>示例：<span class="token environment constant">USER</span> nginx注意：使用<span class="token environment constant">USER</span>指定用户后，Dockerfile中其后命令都是用该用户和组。</code></pre></div></figure><h3 id="1-2-12-WORKDIR"><a href="#1-2-12-WORKDIR" class="headerlink" title="1.2.12 WORKDIR"></a>1.2.12 WORKDIR</h3><p>WORKDIR：为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：WORKDIR /path/to/workdir示例：WORKDIR /a    <span class="token comment">#工作目录/a</span>WORKDIR b     <span class="token comment">#工作目录/a/b</span>WORKDIR c     <span class="token comment">#工作目录/a/b/c</span></code></pre></div></figure><h3 id="1-2-13-ARG"><a href="#1-2-13-ARG" class="headerlink" title="1.2.13 ARG"></a>1.2.13 ARG</h3><p>ARG：定义一个变量。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ARG <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>default value<span class="token operator">></span><span class="token punctuation">]</span>示例1：ARG <span class="token assign-left variable">user</span><span class="token operator">=</span>www示例2：FROM centos:7.8.2003ARG parameterRUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release <span class="token operator">&amp;&amp;</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token variable">$parameter</span>EXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"nginx"</span>,<span class="token string">"-g"</span>,<span class="token string">"daemon off;"</span><span class="token punctuation">]</span><span class="token comment">#灵活传参</span><span class="token function">docker</span> build --build-arg <span class="token assign-left variable">parameter</span><span class="token operator">=</span>nginx <span class="token builtin class-name">.</span></code></pre></div></figure><h3 id="1-2-14-ONBUILD"><a href="#1-2-14-ONBUILD" class="headerlink" title="1.2.14 ONBUILD"></a>1.2.14 ONBUILD</h3><p>ONBUILD：特殊的指令，它后面跟的是其它指令，比如<code>RUN``COPY</code>等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ONBUILD <span class="token operator">&lt;</span>INSTRUCTION<span class="token operator">></span>示例：ONBUILD ADD <span class="token builtin class-name">.</span> /app/srcONBUILD RUN /usr/local/bin/python-build <span class="token parameter variable">--dir</span> /app/src</code></pre></div></figure><h1 id="2-构建Tomcat业务镜像"><a href="#2-构建Tomcat业务镜像" class="headerlink" title="2.构建Tomcat业务镜像"></a>2.构建Tomcat业务镜像</h1><p>​基于官方提供的centos、debian、ubuntu、alpine等基础镜像构建JDK，然后在基于构建的JDK镜像构建Tomcat业务镜像。</p><h2 id="2-1-构建centos基础镜像"><a href="#2-1-构建centos基础镜像" class="headerlink" title="2.1 构建centos基础镜像"></a>2.1 构建centos基础镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:/opt<span class="token comment"># mkdir -pv /opt/dockerfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,/system/&#123;centos,ubuntu,debian,alpine&#125;&#125;</span>root@node10:~<span class="token comment"># cd /opt/dockerfile/system/centos/</span>root@node10:/opt/dockerfile/system/centos<span class="token comment"># vim Dockerfile</span><span class="token comment"># CentOS:7.9.2009 Base Image</span>FROM centos:7.9.2009LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> ntpdate telnetRUN <span class="token function">groupadd</span> www <span class="token parameter variable">-g</span> <span class="token number">2022</span> <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> www <span class="token parameter variable">-u</span> <span class="token number">2022</span> <span class="token parameter variable">-g</span> www<span class="token comment">#构建centos基础镜像</span>root@node10:/opt/dockerfile/system/centos<span class="token comment"># docker build -t centos-base:v1 .</span></code></pre></div></figure><h2 id="2-2-基于centos-base-v1镜像构建JDK镜像"><a href="#2-2-基于centos-base-v1镜像构建JDK镜像" class="headerlink" title="2.2 基于centos-base:v1镜像构建JDK镜像"></a>2.2 基于centos-base:v1镜像构建JDK镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:~<span class="token comment"># cd /opt/dockerfile/web/jdk/</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># vim Dockerfile</span>FROM centos-base:v1LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD jdk-8u341-linux-x64.tar.gz /usr/local/src/RUN <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /usr/local/src/jdk1.8.0_341 /usr/local/jdkADD profile /etc/profileENV JAVA_HOME /usr/local/jdkENV JRE_HOME <span class="token variable">$JAVA_HOME</span>/jreENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/binRUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/localtime <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token comment">#准备JDK包和profile文件</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── jdk-8u341-linux-x64.tar.gz└── profile<span class="token number">0</span> directories, <span class="token number">3</span> files<span class="token comment">#构建JDK镜像</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker build -t jdk-base:v8.341 .</span><span class="token comment">#验证JDK</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker images | grep jdk</span>jdk-base      v8.341     8d86f86bef92   <span class="token number">7</span> hours ago     930MBroot@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker run -it 8d86f86bef92 bash</span><span class="token punctuation">[</span>root@c487eda328ef /<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="2-3-基于JDK镜像构建Tomcat-9-Base镜像"><a href="#2-3-基于JDK镜像构建Tomcat-9-Base镜像" class="headerlink" title="2.3 基于JDK镜像构建Tomcat 9 Base镜像"></a>2.3 基于JDK镜像构建Tomcat 9 Base镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment">#</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># vim Dockerfile</span><span class="token comment">#Tomcat Base Image</span>FROM jdk-base:v8.341LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ENV TZ <span class="token string">"Asia/Shanghai"</span>ENV <span class="token environment constant">LANG</span> en_US.UTF-8ENV <span class="token environment constant">TERM</span> termENV TOMCAT_MAJOR_VERSION <span class="token number">9</span>ENV TOMCAT_MINOR_VERSION <span class="token number">9.0</span>.65ENV CATALINA_HOME /apps/tomcatENV APP_DIR <span class="token variable">$&#123;CATALINA_HOME&#125;</span>/webappsRUN <span class="token function">mkdir</span> /appsADD apache-tomcat-9.0.65.tar.gz /appsRUN <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/apache-tomcat-9.0.65 /apps/tomcat<span class="token comment">#准备Tomcat包</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── apache-tomcat-9.0.65.tar.gz└── Dockerfile<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建Tomcat镜像</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># docker build -t tomcat-base:v9.0.65 .</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># docker images | grep tomcat</span>tomcat-base   v9.0.65    93c3e152f847   <span class="token number">5</span> minutes ago   946MB</code></pre></div></figure><h2 id="2-4-基于tomcat-base-v9-0-65构建业务镜像"><a href="#2-4-基于tomcat-base-v9-0-65构建业务镜像" class="headerlink" title="2.4 基于tomcat-base:v9.0.65构建业务镜像"></a>2.4 基于tomcat-base:v9.0.65构建业务镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建tomcat-app1目录，编写Dockerfile文件</span>root@node10:/opt/dockerfile/web/tomcat<span class="token comment"># mkdir tomcat-app1</span>root@node10:/opt/dockerfile/web/tomcat<span class="token comment"># cd tomcat-app1/</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># vim Dockerfile</span><span class="token comment">#tomcat app1</span>FROM tomcat-base:v9.0.65LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD run_tomcat.sh /apps/tomcat/bin/run_start.shADD server.xml /apps/tomcat/conf/server.xmlADD myapp.tar.gz /data/tomcat/webappsRUN <span class="token function">chown</span> www.www /data/ /apps/ <span class="token parameter variable">-R</span>EXPOSE <span class="token number">8080</span> <span class="token number">8443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/tomcat/bin/run_start.sh"</span><span class="token punctuation">]</span><span class="token comment">#自定义myapp页面</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># mkdir myapp</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># echo "&lt;h1>tomcat web app1&lt;/h1>" > myapp/index.html</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># cat myapp/index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>tomcat web app<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># tar -czvf myapp.tar.gz myapp/</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker cp 68af9479e007:/apps/tomcat/conf/server.xml ./</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># vim server.xml #更改tomcat路径</span>     <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/tomcat/webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token comment">#容器启动脚本</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># cat run_tomcat.sh </span><span class="token comment">#!/bin/bash</span><span class="token function">su</span> - www <span class="token parameter variable">-c</span> <span class="token string">"/apps/tomcat/bin/catalina.sh start"</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /etc/hostsroot@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># chmod +x run_tomcat.sh</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── myapp├── myapp.tar.gz├── run_tomcat.sh└── server.xml<span class="token number">1</span> directory, <span class="token number">4</span> files<span class="token comment">#构建tomcat-app1镜像</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker build -t tomcat-app1:v1 .</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker images | grep tomcat-app1</span>tomcat-app1   v1         19c9361f2568   <span class="token number">21</span> seconds ago      962MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker run -d -p 8080:8080 tomcat-app1:v1</span>086bd62738a1131c8538a21b4786df739aba058c0a65f16d639322102aff9e47<span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># curl http://192.168.1.10:8080/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>tomcat web app<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h1 id="3-构建Haproxy镜像"><a href="#3-构建Haproxy镜像" class="headerlink" title="3.构建Haproxy镜像"></a>3.构建Haproxy镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile<span class="token comment"># mkdir haproxy</span>root@node10:/opt/dockerfile<span class="token comment"># cd haproxy/</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># vim Dockerfile</span><span class="token comment">#Haproxy Base Image</span>FROM centos-base:v1LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD lua-5.4.4.tar.gz /usr/local/src/ADD haproxy-2.1.12.tar.gz /usr/local/src/RUN <span class="token builtin class-name">cd</span> /usr/local/src/lua-5.4.4/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> all <span class="token builtin class-name">test</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc openssl-devel pcre-devel systemd-devel <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /usr/local/src/haproxy-2.1.12/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86_64 <span class="token assign-left variable">TARGET</span><span class="token operator">=</span>linux-glibc <span class="token assign-left variable">USE_PCRE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_OPENSSL</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_ZLIB</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_SYSTEMD</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_LUA</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">LUA_INC</span><span class="token operator">=</span>/usr/local/src/lua-5.4.4/src/ <span class="token assign-left variable">LUA_LIB</span><span class="token operator">=</span>/usr/local/src/lua-5.4.4/src/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/apps/haproxy <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /apps/haproxy/sbin/haproxy /usr/sbin/RUN <span class="token function">mkdir</span> /var/lib/haproxy <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-d</span> /var/lib/haproxy haproxyADD haproxy.cfg /etc/haproxy/ADD run_haproxy.sh /usr/binRUN <span class="token function">chmod</span> +x /usr/bin/run_haproxy.shEXPOSE <span class="token number">80</span> <span class="token number">9999</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/bin/run_haproxy.sh"</span><span class="token punctuation">]</span><span class="token comment">#haproxy.cfg配置文件</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># cat haproxy.cfg </span>global    log         <span class="token number">127.0</span>.0.1 local2    <span class="token function">chroot</span>      /apps/haproxy    stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin    pidfile     /var/run/haproxy.pid    maxconn     <span class="token number">4000</span>    user        haproxy    group       haproxy    daemon    stats socket /var/lib/haproxy/statsdefaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except <span class="token number">127.0</span>.0.0/8    option                  redispatch    retries                 <span class="token number">3</span>    <span class="token function">timeout</span> http-request    10s    <span class="token function">timeout</span> queue           1m    <span class="token function">timeout</span> connect         10s    <span class="token function">timeout</span> client          1m    <span class="token function">timeout</span> server          1m    <span class="token function">timeout</span> http-keep-alive 10s    <span class="token function">timeout</span> check           10s    maxconn                 <span class="token number">3000</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin<span class="token comment">#容器启动脚本</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># cat run_haproxy.sh </span><span class="token comment">#!/bin/bash</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── haproxy-2.1.12.tar.gz├── haproxy.cfg├── lua-5.4.4.tar.gz└── run_haproxy.sh<span class="token number">0</span> directories, <span class="token number">5</span> files<span class="token comment">#构建haproxy:v2.1.12镜像</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker build -t haproxy:v2.1.12 .</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker images | grep haproxy</span>haproxy       v2.1.12    9c7138da5b0d   <span class="token number">4</span> minutes ago    854MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker run -d -it -p 9999:9999 haproxy:v2.1.12</span><span class="token comment">#验证容器</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                                               NAMES083eac675842   haproxy:v2.1.12   <span class="token string">"/usr/bin/run_haprox…"</span>   <span class="token number">4</span> minutes ago   Up <span class="token number">4</span> minutes   <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:9999-<span class="token operator">></span><span class="token number">9999</span>/tcp, :::9999-<span class="token operator">></span><span class="token number">9999</span>/tcp   eloquent_ptolemyroot@node10:/opt/dockerfile/haproxy<span class="token comment"># docker exec -it 083eac675842 bash</span><span class="token punctuation">[</span>root@083eac675842 /<span class="token punctuation">]</span><span class="token comment"># ss -tnl</span>State      Recv-Q Send-Q                                    Local Address:Port                                                   Peer Address:Port              LISTEN     <span class="token number">0</span>      <span class="token number">3000</span>                                                  *:9999                                                              *:* </code></pre></div></figure><h1 id="4-基于alpine基础镜像构建nginx镜像"><a href="#4-基于alpine基础镜像构建nginx镜像" class="headerlink" title="4.基于alpine基础镜像构建nginx镜像"></a>4.基于alpine基础镜像构建nginx镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># vim Dockerfiles</span>FROM alpineLABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositoriesRUN apk update <span class="token operator">&amp;&amp;</span> apk <span class="token function">add</span> iotop gcc libgcc libc-dev libcurl libc-utils pcre-dev zlib-dev libnfs <span class="token function">make</span> pcre pcre2 <span class="token function">zip</span> <span class="token function">unzip</span> net-tools pstree <span class="token function">wget</span> libevent libevent-dev iproute2ADD nginx-1.22.0.tar.gz /optRUN <span class="token builtin class-name">cd</span> /opt/nginx-1.22.0 <span class="token operator">&amp;&amp;</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/apps/nginx <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/nginx/sbin/nginx /usr/binRUN addgroup <span class="token parameter variable">-g</span> <span class="token number">2022</span> <span class="token parameter variable">-S</span> nginx <span class="token operator">&amp;&amp;</span> adduser <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-u</span> <span class="token number">2022</span> <span class="token parameter variable">-G</span> nginx nginxRUN <span class="token function">chown</span> nginx.nginx /apps/nginx <span class="token parameter variable">-R</span>RUN <span class="token builtin class-name">echo</span> <span class="token string">"daemon off;"</span> <span class="token operator">>></span> /apps/nginx/conf/nginx.confRUN <span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>nginx page test&lt;/h1>"</span> <span class="token operator">></span> /apps/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/nginx/sbin/nginx"</span><span class="token punctuation">]</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile└── nginx-1.22.0.tar.gz<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建nginx:v1.22.0镜像</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># docker build -t nginx:v1.22.0 .</span><span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># docker run -d -p 80:80 nginx:v1.22.0</span><span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># curl http://192.168.1.10/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>nginx page test<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h1 id="5-基于ubuntu基础镜像构建nginx镜像"><a href="#5-基于ubuntu基础镜像构建nginx镜像" class="headerlink" title="5.基于ubuntu基础镜像构建nginx镜像"></a>5.基于ubuntu基础镜像构建nginx镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># vim Dockerfile</span>FROM ubuntu:20.04LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*archive.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.listRUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*security.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.list<span class="token comment">#COPY sources.list /etc/apt/sources.list</span><span class="token comment">#RUN apt update</span>RUN <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> iproute2 ntpdate tcpdump telnet <span class="token function">traceroute</span> nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> iotop <span class="token function">unzip</span> <span class="token function">zip</span> gcc <span class="token function">make</span>ADD nginx-1.22.0.tar.gz /optRUN <span class="token builtin class-name">cd</span> /opt/nginx-1.22.0 <span class="token operator">&amp;&amp;</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/apps/nginx <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/nginx/sbin/nginx /usr/binRUN <span class="token function">groupadd</span> <span class="token parameter variable">-g</span> <span class="token number">2022</span> nginx <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> <span class="token parameter variable">-g</span> nginx <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-u</span> <span class="token number">2022</span> nginxRUN <span class="token function">chown</span> nginx.nginx /apps/nginx <span class="token parameter variable">-R</span>RUN <span class="token builtin class-name">echo</span> <span class="token string">"daemon off;"</span> <span class="token operator">>></span> /apps/nginx/conf/nginx.confRUN <span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>nginx page test&lt;/h1>"</span> <span class="token operator">></span> /apps/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/nginx/sbin/nginx"</span><span class="token punctuation">]</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile└── nginx-1.22.0.tar.gz<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建ubuntu-nginx:v1.22.0镜像</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker build -t ubuntu-nginx:v1.22.0 .</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker images | grep ubuntu-nginx</span>ubuntu-nginx   v1.22.0    4056f3a49504   <span class="token number">3</span> minutes ago    451MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker run -d -p 80:80 ubuntu-nginx:v1.22.0</span><span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># curl http://192.168.1.10/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>nginx page test<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03).Docker命令</title>
    <link href="/2022/08/30/Container/Docker/docker03/"/>
    <url>/2022/08/30/Container/Docker/docker03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker命令"><a href="#1-Docker命令" class="headerlink" title="1.Docker命令"></a>1.Docker命令</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考官方文档</span><span class="token comment">#中文</span>https://dockerdocs.cn/reference<span class="token comment">#英文</span>https://docs.docker.com/reference/</code></pre></div></figure><h2 id="1-1-docker-search"><a href="#1-1-docker-search" class="headerlink" title="1.1 docker search"></a>1.1 docker search</h2><p>docker search：在Docker Hub中搜索镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> search <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">TERM</span><span class="token comment">#选项</span>Options:  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板进行漂亮的打印搜索</span>      <span class="token parameter variable">--limit</span> int       <span class="token comment">#最多搜索结果数</span>      --no-trunc        <span class="token comment">#不要截断输出</span>      <span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker search  --limit 2 nginx</span>NAME            DESCRIPTION                  STARS     OFFICIAL   AUTOMATEDnginx           Official build of Nginx.     <span class="token number">17312</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       bitnami/nginx   Bitnami nginx Docker Image   <span class="token number">140</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span></code></pre></div></figure><h2 id="1-2-docker-pull-x2F-push"><a href="#1-2-docker-pull-x2F-push" class="headerlink" title="1.2 docker pull&#x2F;push"></a>1.2 docker pull&#x2F;push</h2><p>docker pull：拉取镜像</p><p>docker push：上传镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker pull用法</span><span class="token function">docker</span> pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span><span class="token comment">#docker pull选项</span>  -a, --all-tags                <span class="token comment">#下载存储库中所有标记的图像</span>      --disable-content-trust   <span class="token comment">#跳过镜像验证</span>      <span class="token parameter variable">--platform</span> string         <span class="token comment">#API 12+ 设置平台（如果服务器具有多平台功能）</span>  -q, <span class="token parameter variable">--quiet</span>                   <span class="token comment">#禁止详细输出</span><span class="token comment">#docker pull示例</span>root@node10:~<span class="token comment"># docker pull centos:7.8.2003</span><span class="token number">7.8</span>.2003: Pulling from library/centos9b4ebb48de8d: Pull complete Digest: sha256:8540a199ad51c6b7b51492fa9fee27549fd11b3bb913e888ab2ccf77cbb72cc1Status: Downloaded newer image <span class="token keyword">for</span> centos:7.8.2003docker.io/library/centos:7.8.2003<span class="token comment">#docker push上传镜像</span>root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Layer already exists <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><h2 id="1-3-docker-images"><a href="#1-3-docker-images" class="headerlink" title="1.3 docker images"></a>1.3 docker images</h2><p>docker images：列出镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有镜像（默认隐藏中间镜像）</span>      <span class="token parameter variable">--digests</span>         <span class="token comment">#显示摘要</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的图像</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示镜像ID</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker images -q</span>ba6acccedd29afb6fca791e0</code></pre></div></figure><h2 id="1-4-docker-save-x2F-load"><a href="#1-4-docker-save-x2F-load" class="headerlink" title="1.4 docker save&#x2F;load"></a>1.4 docker save&#x2F;load</h2><p>docker save：将一个或多个镜像保存到tar存档(默认情况下流式传输到STDOUT)</p><p>docker load：从tar存档或STDIN加载镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker save用法</span><span class="token function">docker</span> save <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker save选项</span>  -o, <span class="token parameter variable">--output</span> string   <span class="token comment">#写入文件，而不是STDOUT</span><span class="token comment">#docker load用法</span><span class="token function">docker</span> load <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#docker load选项</span>  -i, <span class="token parameter variable">--input</span> string   <span class="token comment">#从tar存档文件中读取，而不是从STDIN中读取</span>  -q, <span class="token parameter variable">--quiet</span>          <span class="token comment">#抑制负载输出</span><span class="token comment">#示例</span><span class="token comment">#导出镜像</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker save centos -o /opt/centos.tar.gz</span>root@node10:~<span class="token comment"># ll /opt/centos.tar.gz </span>-rw------- <span class="token number">1</span> root root <span class="token number">211077120</span> Aug <span class="token number">30</span> 03:27 /opt/centos.tar.gz<span class="token comment">#导入镜像</span>root@node11:~<span class="token comment"># docker load -i /opt/centos.tar.gz</span>fb82b029bea0: Loading layer <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span>  <span class="token number">211</span>.1MB/211.1MBLoaded image: centos:7.8.2003root@node11:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED       SIZEcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago   203MB</code></pre></div></figure><h2 id="1-5-docker-ps"><a href="#1-5-docker-ps" class="headerlink" title="1.5 docker ps"></a>1.5 docker ps</h2><p>docker ps：列出容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有容器（默认显示为正在运行）</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的容器</span>  -n, <span class="token parameter variable">--last</span> int        <span class="token comment">#显示n个最后创建的容器（包括所有状态）</span>  -l, <span class="token parameter variable">--latest</span>          <span class="token comment">#显示最新创建的容器（包括所有状态）</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示容器ID</span>  -s, <span class="token parameter variable">--size</span>            <span class="token comment">#显示文件总大小</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">3</span> seconds ago   Up <span class="token number">2</span> seconds   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker ps -q</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-6-docker-run"><a href="#1-6-docker-run" class="headerlink" title="1.6 docker run"></a>1.6 docker run</h2><p>docker run：在新容器中运行命令</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>      --add-host list                  <span class="token comment">#添加自定义主机到IP的映射（host：ip）</span>  -a, <span class="token parameter variable">--attach</span> list                    <span class="token comment">#附加到STDIN，STDOUT或STDERR</span>      --blkio-weight uint16            <span class="token comment">#块IO（相对权重），介于10到1000之间，或者为0禁用（默认为0）</span>      --blkio-weight-device list       <span class="token comment">#块IO重量（相对设备重量）</span>      --cap-add list                   <span class="token comment">#添加Linux功能</span>      --cap-drop list                  <span class="token comment">#放弃Linux功能</span>      --cgroup-parent string           <span class="token comment">#容器的可选父cgroup</span>      <span class="token parameter variable">--cgroupns</span> string                <span class="token comment">#要使用（host | private）'host'的API 1.41+ Cgroup命名空间：在Docker主机的cgroup命名空间'private'中运行容器：在其自己的私有cgroup命名空间中运行容器''：使用默认配置的cgroup命名空间守护程序上的-cgroupns-mode选项（默认）</span>      <span class="token parameter variable">--cidfile</span> string                 <span class="token comment">#将容器ID写入文件</span>      --cpu-period int                 <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int                  <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>      --cpu-rt-period int              <span class="token comment">#限制CPU实时时间（以微秒为单位）</span>      --cpu-rt-runtime int             <span class="token comment">#限制CPU实时运行时间（以微秒为单位）</span>  -c, --cpu-shares int                 <span class="token comment">#CPU份额（相对重量）</span>      <span class="token parameter variable">--cpus</span> decimal                   <span class="token comment">#CPU数量</span>      --cpuset-cpus string             <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string             <span class="token comment">#允许执行的MEM（0-3，0,1）</span>  -d, <span class="token parameter variable">--detach</span>                         <span class="token comment">#在后台运行容器并打印容器ID</span>      --detach-keys string             <span class="token comment">#覆盖分离容器的键序列</span>      <span class="token parameter variable">--device</span> list                    <span class="token comment">#将主机设备添加到容器</span>      --device-cgroup-rule list        <span class="token comment">#将规则添加到“允许cgroup的设备”列表中</span>      --device-read-bps list           <span class="token comment">#限制从设备读取的速率（每秒字节数）</span>      --device-read-iops list          <span class="token comment">#限制从设备读取的速率（每秒IO）</span>      --device-write-bps list          <span class="token comment">#限制对设备的写入速率（每秒字节数）</span>      --device-write-iops list         <span class="token comment">#限制对设备的写入速率（每秒IO）</span>      --disable-content-trust          <span class="token comment">#跳过镜像验证</span>      <span class="token parameter variable">--dns</span> list                       <span class="token comment">#设置自定义DNS服务器</span>      --dns-option list                <span class="token comment">#设定DNS选项</span>      --dns-search list                <span class="token comment">#设置自定义DNS搜索域</span>      <span class="token parameter variable">--domainname</span> string              <span class="token comment">#容器NIS域名</span>      <span class="token parameter variable">--entrypoint</span> string              <span class="token comment">#覆盖镜像的默认ENTRYPOINT</span>  -e, <span class="token parameter variable">--env</span> list                       <span class="token comment">#设置环境变量</span>      --env-file list                  <span class="token comment">#读入环境变量文件</span>      <span class="token parameter variable">--expose</span> list                    <span class="token comment">#公开一个或多个端口</span>      <span class="token parameter variable">--gpus</span> gpu-request               <span class="token comment">#GPU设备添加到容器中（“全部”传递所有GPU）</span>      --group-add list                 <span class="token comment">#添加其他群组即可加入</span>      --health-cmd string              <span class="token comment">#运行命令以检查运行状况</span>      --health-interval duration       <span class="token comment">#运行检查之间的时间（ms | s | m | h）（默认为0s）</span>      --health-retries int             <span class="token comment">#连续出现故障需要报告不健康</span>      --health-start-period duration   <span class="token comment">#容器在开始运行状况重试倒计时（ms | s | m | h）之前初始化的起始时间（默认为0s）</span>      --health-timeout duration        <span class="token comment">#允许执行一次检查的最长时间（ms | s | m | h）（默认为0s）</span>      <span class="token parameter variable">--help</span>                           <span class="token comment">#打印用量</span>  -h, <span class="token parameter variable">--hostname</span> string                <span class="token comment">#容器主机名</span>      <span class="token parameter variable">--init</span>                           <span class="token comment">#在容器内运行一个初始化程序，以转发信号并获取进程</span>  -i, <span class="token parameter variable">--interactive</span>                    <span class="token comment">#即使未连接STDIN，也应使其保持打开状态</span>      <span class="token parameter variable">--ip</span> string                      <span class="token comment">#IPv4地址</span>      <span class="token parameter variable">--ip6</span> string                     <span class="token comment">#IPv6地址</span>      <span class="token parameter variable">--ipc</span> string                     <span class="token comment">#使用的IPC模式</span>      <span class="token parameter variable">--isolation</span> string               <span class="token comment">#集装箱隔离技术</span>      --kernel-memory bytes            <span class="token comment">#内核内存限制</span>  -l, <span class="token parameter variable">--label</span> list                     <span class="token comment">#在容器上设置元数据</span>      --label-file list                <span class="token comment">#读入行分隔的标签文件</span>      <span class="token parameter variable">--link</span> list                      <span class="token comment">#将链接添加到另一个容器</span>      --link-local-ip list             <span class="token comment">#容器IPv4 / IPv6链接本地地址</span>      --log-driver string              <span class="token comment">#容器的日志记录驱动程序</span>      --log-opt list                   <span class="token comment">#日志驱动程序选项</span>      --mac-address string             <span class="token comment">#容器MAC地址（例如92：d0：c6：0a：29：33）</span>  -m, <span class="token parameter variable">--memory</span> bytes                   <span class="token comment">#内存限制</span>      --memory-reservation bytes       <span class="token comment">#内存软限制</span>      --memory-swap bytes              <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      --memory-swappiness int          <span class="token comment">#调整容器内存交换（0到100）</span>      <span class="token parameter variable">--mount</span> <span class="token function">mount</span>                    <span class="token comment">#将文件系统挂载附加到容器</span>      <span class="token parameter variable">--name</span> string                    <span class="token comment">#为容器分配一个名称</span>      <span class="token parameter variable">--network</span> network                <span class="token comment">#将容器连接到网络</span>      --network-alias list             <span class="token comment">#为容器添加网络范围的别名</span>      --no-healthcheck                 <span class="token comment">#禁用任何容器指定的健康检查</span>      --oom-kill-disable               <span class="token comment">#禁用OOM杀手</span>      --oom-score-adj int              <span class="token comment">#调整OOM首选项（-1000到1000）</span>      <span class="token parameter variable">--pid</span> string                     <span class="token comment">#使用的PID名称空间</span>      --pids-limit int                 <span class="token comment">#调整容器pids限制（将-1设置为无限制）</span>      <span class="token parameter variable">--platform</span> string                <span class="token comment">#设置平台（如果服务器具有多平台功能）</span>      <span class="token parameter variable">--privileged</span>                     <span class="token comment">#赋予此容器扩展的特权</span>  -p, <span class="token parameter variable">--publish</span> list                   <span class="token comment">#将容器的端口发布到主机</span>  -P, --publish-all                    <span class="token comment">#将所有公开的端口发布到随机端口</span>      <span class="token parameter variable">--pull</span> string                    <span class="token comment">#在运行之前拉镜像（“总是” |“缺少” |“从不”）</span>      --read-only                      <span class="token comment">#将容器的根文件系统挂载为只读</span>      <span class="token parameter variable">--restart</span> string                 <span class="token comment">#容器退出时重新启动策略以应用</span>      <span class="token parameter variable">--rm</span>                             <span class="token comment">#退出时自动删除容器</span>      <span class="token parameter variable">--runtime</span> string                 <span class="token comment">#用于此容器的运行时</span>      --security-opt list              <span class="token comment">#安全选项</span>      --shm-size bytes                 <span class="token comment">#/ dev / shm的大小</span>      --sig-proxy                      <span class="token comment">#代理接收到该过程的信号</span>      --stop-signal string             <span class="token comment">#停止容器的信号</span>      --stop-timeout int               <span class="token comment">#超时（以秒为单位）以停止容器</span>      --storage-opt list               <span class="token comment">#容器的存储驱动程序选项</span>      <span class="token parameter variable">--sysctl</span> map                     <span class="token comment">#Sysctl选项</span>      <span class="token parameter variable">--tmpfs</span> list                     <span class="token comment">#挂载tmpfs目录</span>  -t, <span class="token parameter variable">--tty</span>                            <span class="token comment">#分配伪TTY</span>      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>                  <span class="token comment">#Ulimit选项</span>  -u, <span class="token parameter variable">--user</span> string                    <span class="token comment">#用户名或UID（格式：&lt;名称| uid> [：&lt;组| gid>]）</span>      <span class="token parameter variable">--userns</span> string                  <span class="token comment">#要使用的用户名称空间</span>      <span class="token parameter variable">--uts</span> string                     <span class="token comment">#要使用的UTS命名空间</span>  -v, <span class="token parameter variable">--volume</span> list                    <span class="token comment">#绑定挂载卷</span>      --volume-driver string           <span class="token comment">#容器的可选音量驱动器</span>      --volumes-from list              <span class="token comment">#从指定的容器挂载卷</span>  -w, <span class="token parameter variable">--workdir</span> string                 <span class="token comment">#容器内的工作目录</span><span class="token comment">#示例</span><span class="token comment">#分配名称，分配伪TTY，将宿主机端口映射至容器，后台运行</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 nginx</span>7143ecc38299cf848fabf94ad0c50f0004d05b3aa8f4bd6b7cc316e6de274e05root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES7143ecc38299   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">5</span> seconds ago   Up <span class="token number">3</span> seconds   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx<span class="token comment">#分配名称，分配伪TTY，将宿主机端口映射至容器，后台运行，并将/data目录映射至容器/usr/share/nginx/html</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 -v /data:/usr/share/nginx/html nginx</span></code></pre></div></figure><h2 id="1-7-docker-commit"><a href="#1-7-docker-commit" class="headerlink" title="1.7 docker commit"></a>1.7 docker commit</h2><p>docker commit：根据容器的更改创建新镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--author</span> string    <span class="token comment">#作者</span>  -c, <span class="token parameter variable">--change</span> list      <span class="token comment">#将Dockerfile指令应用于创建的映像</span>  -m, <span class="token parameter variable">--message</span> string   <span class="token comment">#提交讯息</span>  -p, <span class="token parameter variable">--pause</span>            <span class="token comment">#提交期间暂停容器</span><span class="token comment">#示例</span><span class="token comment">#基于centos:7.8.2003镜像制作nginx镜像</span>root@node10:~<span class="token comment"># docker pull centos:7.8.2003</span>root@node10:~<span class="token comment"># docker run -it centos:7.8.2003 /bin/bash</span><span class="token comment">#安装基础命令</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># yum -y install wget vim lrzsz psmisc net-tools tree unzip zip gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop lsof ntpdate telnet</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx-1.22.0-1.el7.ngx.x86_64.rpm</span><span class="token punctuation">[</span>root@89fad2393882 /<span class="token punctuation">]</span><span class="token comment"># echo "Nginx Test" > /usr/share/nginx/html/index.html</span><span class="token comment">#提交镜像</span>root@node10:~<span class="token comment"># docker commit -a "chsblogs.com" -m "centos7-nginx" -c "EXPOSE 80 443" -c 'CMD ["/usr/sbin/nginx"]' -c 'CMD ["nginx","-g","daemon off;"]' 89fad2393882 chsblogs/testimage:v1</span>sha256:24a733bfb90a78fd71f4cf616bad38b932960b3182a1fb5fe4bb0aef31195fbfroot@node10:~<span class="token comment"># docker images</span>REPOSITORY           TAG        IMAGE ID       CREATED         SIZEchsblogs/testimage   v1         24a733bfb90a   <span class="token number">8</span> seconds ago   394MB<span class="token comment">#启动镜像</span>root@node10:~<span class="token comment"># docker run -it -d --name centos-nginx -p 80:80 chsblogs/testimage:v1</span>b017b72d341446610f2c4f790ba6463f70b0c07cc7247e993ff770f8b0f54b0f<span class="token comment">#访问测试</span>root@node11:~<span class="token comment"># curl http://192.168.1.10</span>Nginx Test</code></pre></div></figure><h2 id="1-8-docker-cp"><a href="#1-8-docker-cp" class="headerlink" title="1.8 docker cp"></a>1.8 docker cp</h2><p>docker cp：在容器和本地文件系统之间复制文件&#x2F;文件夹</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER:SRC_PATH DEST_PATH<span class="token operator">|</span>-<span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> SRC_PATH<span class="token operator">|</span>- CONTAINER:DEST_PATH<span class="token comment">#选项</span>  -a, <span class="token parameter variable">--archive</span>       <span class="token comment">#存档模式（复制所有uid / gid信息）</span>  -L, --follow-link   <span class="token comment">#始终遵循SRC_PATH中的符号链接</span><span class="token comment">#示例</span><span class="token comment">#从容器中复制文件到本地</span>root@node10:~<span class="token comment"># docker ps -q</span>f4da963a4e5froot@node10:~<span class="token comment"># docker cp f4da963a4e5f:/etc/nginx/nginx.conf /opt/</span>root@node10:~<span class="token comment"># ls /opt/nginx.conf </span>/opt/nginx.conf<span class="token comment">#从本地复制文件到容器</span>root@node10:~<span class="token comment"># docker cp /opt/centos.tar.gz f4da963a4e5f:/opt</span>root@node10:~<span class="token comment"># docker exec -it f4da963a4e5f bash</span>root@f4da963a4e5f:/<span class="token comment"># ls -l /opt/</span>total <span class="token number">206132</span>-rw------- <span class="token number">1</span> root root <span class="token number">211077120</span> Aug <span class="token number">30</span> 03:27 centos.tar.gz</code></pre></div></figure><h2 id="1-9-docker-rm-x2F-rmi"><a href="#1-9-docker-rm-x2F-rmi" class="headerlink" title="1.9 docker rm&#x2F;rmi"></a>1.9 docker rm&#x2F;rmi</h2><p>docker rm：删除一个或多个容器</p><p>docker rmi：删除一个或多个镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker rm用法</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker rm选项</span>  -f, <span class="token parameter variable">--force</span>     <span class="token comment">#强制删除正在运行的容器（使用SIGKILL）</span>  -l, <span class="token parameter variable">--link</span>      <span class="token comment">#删除指定的链接</span>  -v, <span class="token parameter variable">--volumes</span>   <span class="token comment">#删除与容器关联的匿名卷</span><span class="token comment">#docker rm示例</span><span class="token comment">#强制删除正在运行的容器并删除卷</span>root@node10:~<span class="token comment"># docker rm -fv 9a70d7871f42</span>9a70d7871f42<span class="token comment">#批量删除退出的容器</span>root@node10:~<span class="token comment"># docker rm -fv $(docker ps --filter status=exited -q)</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker rmi用法</span><span class="token function">docker</span> rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker rmi选项</span>  -f, <span class="token parameter variable">--force</span>      <span class="token comment">#强制删除镜像</span>      --no-prune   <span class="token comment">#不要删除未标记的父镜像</span><span class="token comment">#docker rmi示例</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEnginx        latest     605c77e624dd   <span class="token number">8</span> months ago    141MBredis        latest     7614ae9453d1   <span class="token number">8</span> months ago    113MBubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker rmi 7614ae9453d1</span>Untagged: redis:latestUntagged: redis@sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339Deleted: sha256:7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631Deleted: sha256:49c70179bc923a7d48583d58e2b6c21bde1787edf42ed1f8de9e9b96e2e88e65Deleted: sha256:396e06df5d1120368a7a8a4fd1e5467cdc2dd4083660890df078c654596ddc1cDeleted: sha256:434d118df2e9edb51238f6ba46e9efdfa21be68e88f54787531aa39a720a0740Deleted: sha256:2047f09c412ff06f4e2ee8a25d105055e714d99000711e27a55072e640796294Deleted: sha256:13d71c9ccb39b206211dd1900d06aa1984b0f5ab8abaa628c70b3eb733303a65<span class="token comment">#批量删除&lt;none>镜像</span>root@node10:~<span class="token comment"># docker rmi $(docker images -f "dangling=true" -q)</span></code></pre></div></figure><h2 id="1-10-docker-start-x2F-stop-x2F-restart"><a href="#1-10-docker-start-x2F-stop-x2F-restart" class="headerlink" title="1.10 docker start&#x2F;stop&#x2F;restart"></a>1.10 docker start&#x2F;stop&#x2F;restart</h2><p>docker start：启动一个或多个已停止的容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> start <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--attach</span>               <span class="token comment">#连接STDOUT / STDERR和转发信号</span>      --detach-keys string   <span class="token comment">#覆盖分离容器的键序列</span>  -i, <span class="token parameter variable">--interactive</span>          <span class="token comment">#附加容器的STDIN</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS                      PORTS     NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">13</span> seconds ago             nginx01root@node10:~<span class="token comment"># docker start f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><p>docker stop：停止一个或多个运行中的容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> stop <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -t, <span class="token parameter variable">--time</span> int   <span class="token comment">#等待杀死的秒数，然后将其杀死</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Up <span class="token number">2</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker stop f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><p>docker restart：重新启动一个或多个容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> restart <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -t, <span class="token parameter variable">--time</span> int   <span class="token comment">#等待杀死的秒数，然后将其杀死</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS        PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Up <span class="token number">1</span> second   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker restart f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-11-docker-exec"><a href="#1-11-docker-exec" class="headerlink" title="1.11 docker exec"></a>1.11 docker exec</h2><p>docker exec：在正在运行的容器中运行命令</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -d, <span class="token parameter variable">--detach</span>               <span class="token comment">#分离模式：在后台运行命令</span>      --detach-keys string   <span class="token comment">#覆盖分离容器的键序列</span>  -e, <span class="token parameter variable">--env</span> list             <span class="token comment">#设置环境变量</span>      --env-file list        <span class="token comment">#读取环境变量文件</span>  -i, <span class="token parameter variable">--interactive</span>          <span class="token comment">#即使未连接STDIN，也应使其保持打开状态</span>      <span class="token parameter variable">--privileged</span>           <span class="token comment">#赋予命令扩展权限</span>  -t, <span class="token parameter variable">--tty</span>                  <span class="token comment">#分配伪TTY</span>  -u, <span class="token parameter variable">--user</span> string          <span class="token comment">#用户名或UID（格式：&lt;名称| uid> [：&lt;组| gid>]）</span>  -w, <span class="token parameter variable">--workdir</span> string       <span class="token comment">#容器内的工作目录</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">8</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker exec -it f4da963a4e5f bash</span>root@f4da963a4e5f:/<span class="token comment"># </span></code></pre></div></figure><h2 id="1-12-docker-port"><a href="#1-12-docker-port" class="headerlink" title="1.12 docker port"></a>1.12 docker port</h2><p>docker port：列出端口映射或容器的特定映射</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">11</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker port f4da963a4e5f</span><span class="token number">80</span>/tcp -<span class="token operator">></span> <span class="token number">0.0</span>.0.0:80<span class="token number">80</span>/tcp -<span class="token operator">></span> :::80</code></pre></div></figure><h2 id="1-13-docker-rename"><a href="#1-13-docker-rename" class="headerlink" title="1.13 docker rename"></a>1.13 docker rename</h2><p>docker rename：重命名容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">12</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker rename f4da963a4e5f nginx</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">12</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx</code></pre></div></figure><h2 id="1-14-docker-update"><a href="#1-14-docker-update" class="headerlink" title="1.14 docker update"></a>1.14 docker update</h2><p>docker update：更新一个或多个容器的配置</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> update <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>      --blkio-weight uint16        <span class="token comment">#块IO（相对权重），介于10到1000之间，或者为0禁用（默认为0）</span>      --cpu-period int             <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int              <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>      --cpu-rt-period int          <span class="token comment">#将CPU实时时间限制为微秒</span>      --cpu-rt-runtime int         <span class="token comment">#限制CPU实时运行时间（以微秒为单位）</span>  -c, --cpu-shares int             <span class="token comment">#CPU份额（相对重量）</span>      <span class="token parameter variable">--cpus</span> decimal               <span class="token comment">#CPU数量</span>      --cpuset-cpus string         <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string         <span class="token comment">#允许执行的MEM（0-3，0,1）</span>      --kernel-memory bytes        <span class="token comment">#内核内存限制</span>  -m, <span class="token parameter variable">--memory</span> bytes               <span class="token comment">#内存限制</span>      --memory-reservation bytes   <span class="token comment">#内存软限制</span>      --memory-swap bytes          <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      --pids-limit int             <span class="token comment">#Tune容器pids限制（设置-1表示无限制）</span>      <span class="token parameter variable">--restart</span> string             <span class="token comment">#容器退出时重新启动策略以应用</span><span class="token comment">#示例</span><span class="token comment">#更新容器允许执行的CPU</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS              PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up About a minute   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginxroot@node10:~<span class="token comment"># docker update --cpuset-cpus 2 f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-15-docker-volume"><a href="#1-15-docker-volume" class="headerlink" title="1.15 docker volume"></a>1.15 docker volume</h2><p>docker volume：管理卷</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume COMMAND<span class="token comment">#选项</span>  create      <span class="token comment">#创建一个卷</span>  inspect     <span class="token comment">#显示一个或多个卷上的详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#显示卷</span>  prune       <span class="token comment">#删除所有未使用的本地卷</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个卷</span></code></pre></div></figure><ul><li>docker volume create</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>VOLUME<span class="token punctuation">]</span><span class="token comment">#选项</span>  -d, <span class="token parameter variable">--driver</span> string   <span class="token comment">#指定卷驱动程序名称</span>      <span class="token parameter variable">--label</span> list      <span class="token comment">#设置卷的元数据</span>  -o, <span class="token parameter variable">--opt</span> map         <span class="token comment">#设置驱动程序特定选项</span>  <span class="token comment">#示例</span><span class="token comment">#创建hello卷</span>root@node10:~<span class="token comment"># docker volume create hello</span><span class="token comment">#查看卷的位置</span>root@node10:~<span class="token comment"># find / -name "hello"</span>/var/lib/docker/volumes/hello<span class="token comment">#配置容器使用hello卷</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 -v hello:/usr/share/nginx/html nginx</span></code></pre></div></figure><ul><li>docker volume inspect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> VOLUME <span class="token punctuation">[</span>VOLUME<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume inspect hello</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"CreatedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2022-09-12T18:16:08+08:00"</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Mountpoint"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/hello/_data"</span>,        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"hello"</span>,        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></div></figure><ul><li>docker volume ls</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'dangling = true'）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的卷</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示卷名</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello</code></pre></div></figure><ul><li>docker volume prune</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume prune <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>      <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'label = &lt;label>'）</span>  -f, <span class="token parameter variable">--force</span>           <span class="token comment">#不提示确认</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume create test</span>root@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello<span class="token builtin class-name">local</span>     <span class="token builtin class-name">test</span>root@node10:~<span class="token comment"># docker volume prune -f</span>Deleted Volumes:<span class="token builtin class-name">test</span>Total reclaimed space: 0Broot@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello</code></pre></div></figure><ul><li>docker volume rm</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> VOLUME <span class="token punctuation">[</span>VOLUME<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--force</span>   <span class="token comment">#强制删除一个或多个卷</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker rm -f `docker ps -a -q`</span>a8af140c93baroot@node10:~<span class="token comment"># docker volume rm hello</span>hello</code></pre></div></figure><h2 id="1-16-docker-tag"><a href="#1-16-docker-tag" class="headerlink" title="1.16 docker tag"></a>1.16 docker tag</h2><p>docker tag：创建一个引用了SOURCE_IMAGE的标签TARGET_IMAGE</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将标识"605c77e624dd"的本地镜像标记为"v1"的"chsblogs"存储库</span>root@node10:~<span class="token comment"># docker tag 605c77e624dd chsblogs/nginx:v1</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY           TAG        IMAGE ID       CREATED          SIZEchsblogs/nginx       v1         605c77e624dd   <span class="token number">8</span> months ago     141MBnginx                latest     605c77e624dd   <span class="token number">8</span> months ago     141MB</code></pre></div></figure><h2 id="1-17-docker-inspect"><a href="#1-17-docker-inspect" class="headerlink" title="1.17 docker inspect"></a>1.17 docker inspect</h2><p>docker inspect：返回有关Docker对象的低级信息</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token operator">|</span>ID <span class="token punctuation">[</span>NAME<span class="token operator">|</span>ID<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>  -s, <span class="token parameter variable">--size</span>            <span class="token comment">#如果类型为容器，则显示文件总大小</span>      <span class="token parameter variable">--type</span> string     <span class="token comment">#返回指定类型的JSON</span><span class="token comment">#示例</span><span class="token comment">#获取容器的IP地址</span>root@node10:~<span class="token comment"># docker inspect --format='&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;' 54542ace04bb</span><span class="token number">172.17</span>.0</code></pre></div></figure><h2 id="1-18-docker-network"><a href="#1-18-docker-network" class="headerlink" title="1.18 docker network"></a>1.18 docker network</h2><p>docker network：管理网络</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network COMMAND<span class="token comment">#选项</span>  connect     <span class="token comment">#将容器连接到网络</span>  create      <span class="token comment">#创建一个网络</span>  disconnect  <span class="token comment">#断开容器与网络的连接</span>  inspect     <span class="token comment">#在一个或多个网络上显示详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#列出网络</span>  prune       <span class="token comment">#删除所有未使用的网络</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个网络</span>  <span class="token number">65</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME      DRIVER    SCOPE309f6ef2db22   bridge    bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none      null      <span class="token builtin class-name">local</span></code></pre></div></figure><h2 id="1-19-docker-logs"><a href="#1-19-docker-logs" class="headerlink" title="1.19 docker logs"></a>1.19 docker logs</h2><p>docker logs：获取容器的日志</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER<span class="token comment">#选项</span>      <span class="token parameter variable">--details</span>        <span class="token comment">#显示提供给日志的其他详细信息</span>  -f, <span class="token parameter variable">--follow</span>         <span class="token comment">#跟踪日志输出</span>      <span class="token parameter variable">--since</span> string   <span class="token comment">#显示自时间戳记以来的日志（例如2013-01-02T13：23：37Z）或相对记录（例如42m的42分钟）</span>  -n, <span class="token parameter variable">--tail</span> string    <span class="token comment">#从日志末尾开始显示的行数</span>  -t, <span class="token parameter variable">--timestamps</span>     <span class="token comment">#显示时间戳</span>      <span class="token parameter variable">--until</span> string   <span class="token comment">#在时间戳（例如2013-01-02T13：23：37Z）或相对时间戳（例如42m，持续42分钟）之前显示日志</span><span class="token comment">#示例</span><span class="token comment">#查看末尾3行日志</span>root@node10:~<span class="token comment"># docker logs -n 3 f4da963a4e5f</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span></code></pre></div></figure><h2 id="1-20-docker-build"><a href="#1-20-docker-build" class="headerlink" title="1.20 docker build"></a>1.20 docker build</h2><p>docker build：从Dockerfile构建镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> build <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">PATH</span> <span class="token operator">|</span> URL <span class="token operator">|</span> -<span class="token comment">#选项</span>      --add-host list           <span class="token comment">#添加自定义主机到IP的映射（host：ip）</span>      --build-arg list          <span class="token comment">#设置构建时变量</span>      --cache-from strings      <span class="token comment">#视为缓存源的镜像</span>      --cgroup-parent string    <span class="token comment">#容器的可选父cgroup</span>      <span class="token parameter variable">--compress</span>                <span class="token comment">#使用gzip压缩构建上下文</span>      --cpu-period int          <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int           <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>  -c, --cpu-shares int          <span class="token comment">#CPU份额（相对重量）</span>      --cpuset-cpus string      <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string      <span class="token comment">#允许执行的MEM（0-3，0,1）</span>      --disable-content-trust   <span class="token comment">#跳过镜像验证</span>  -f, <span class="token parameter variable">--file</span> string             <span class="token comment">#Dockerfile的名称（默认为“ PATH / Dockerfile”）</span>      --force-rm                <span class="token comment">#始终取出中间容器</span>      <span class="token parameter variable">--iidfile</span> string          <span class="token comment">#将镜像ID写入文件</span>      <span class="token parameter variable">--isolation</span> string        <span class="token comment">#集装箱隔离技术</span>      <span class="token parameter variable">--label</span> list              <span class="token comment">#设置镜像的元数据</span>  -m, <span class="token parameter variable">--memory</span> bytes            <span class="token comment">#内存限制</span>      --memory-swap bytes       <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      <span class="token parameter variable">--network</span> string          <span class="token comment">#在构建期间为RUN指令设置联网模式</span>      --no-cache                <span class="token comment">#构建镜像时不要使用缓存</span>      <span class="token parameter variable">--pull</span>                    <span class="token comment">#始终尝试提取镜像的较新版本</span>  -q, <span class="token parameter variable">--quiet</span>                   <span class="token comment">#禁止生成输出并在成功时打印图像ID</span>      <span class="token parameter variable">--rm</span>                      <span class="token comment">#成功构建后删除中间容器</span>      --security-opt strings    <span class="token comment">#公开文件的秘密文件（仅在启用BuildKit的情况下）：id = mysecret，src = / local / secret</span>      --shm-size bytes          <span class="token comment">#/ dev / shm的大小</span>  -t, <span class="token parameter variable">--tag</span> list                <span class="token comment">#名称以及“ name：tag”格式的标签（可选）</span>      <span class="token parameter variable">--target</span> string           <span class="token comment">#设置要构建的目标构建阶段。</span>      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>           <span class="token comment">#Ulimit选项</span><span class="token comment">#示例</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.com/apache:2.0 <span class="token builtin class-name">.</span></code></pre></div></figure><h2 id="1-21-docker-login-x2F-logout"><a href="#1-21-docker-login-x2F-logout" class="headerlink" title="1.21 docker login&#x2F;logout"></a>1.21 docker login&#x2F;logout</h2><p>docker login：登录仓库</p><p>docker logout：登出仓库</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登录仓库</span>root@node10:~<span class="token comment"># docker login harbor.chsblogs.com:80</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded<span class="token comment">#退出登录</span>root@node10:~<span class="token comment"># docker logout harbor.chsblogs.com:80</span>Removing login credentials <span class="token keyword">for</span> harbor.chsblogs.com:80</code></pre></div></figure><h2 id="1-22-docker-stats"><a href="#1-22-docker-stats" class="headerlink" title="1.22 docker stats"></a>1.22 docker stats</h2><p>docker stats：显示容器资源使用情况统计信息的实时流</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> stats <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有容器（默认显示为正在运行）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的图像</span>      --no-stream       <span class="token comment">#停用流媒体统计信息，仅获取第一个结果</span>      --no-trunc        <span class="token comment">#不要截断输出</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker stats</span>CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDSc00764d80e29   nginx     <span class="token number">0.27</span>%     <span class="token number">43</span>.31MiB / <span class="token number">1</span>.907GiB   <span class="token number">2.22</span>%     <span class="token number">16</span>.9MB / 80kB   <span class="token number">31</span>.6MB / <span class="token number">1</span>.71MB   <span class="token number">4</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02).Docker安装</title>
    <link href="/2022/08/30/Container/Docker/docker02/"/>
    <url>/2022/08/30/Container/Docker/docker02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方rpm包下载地址</span>https://download.docker.com/linux/centos/7/x86_64/stable/Packages/<span class="token comment">#二进制下载地址</span>https://download.docker.com/https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/</code></pre></div></figure><h2 id="1-1-CentOS7-9安装Docker"><a href="#1-1-CentOS7-9安装Docker" class="headerlink" title="1.1 CentOS7.9安装Docker"></a>1.1 CentOS7.9安装Docker</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span class="token comment"># Step 2: 添加软件源信息</span><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># Step 3</span><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> yum makecache fast<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token comment"># Step 4: 开启Docker服务</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start<span class="token comment"># 注意：</span><span class="token comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span><span class="token comment"># vim /etc/yum.repos.d/docker-ce.repo</span><span class="token comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span><span class="token comment">#</span><span class="token comment"># 安装指定版本的Docker-CE:</span><span class="token comment"># Step 1: 查找Docker-CE的版本:</span><span class="token comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><span class="token comment">#   Loading mirror speeds from cached hostfile</span><span class="token comment">#   Loaded plugins: branch, fastestmirror, langpacks</span><span class="token comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><span class="token comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><span class="token comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><span class="token comment">#   Available Packages</span><span class="token comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span><span class="token comment"># sudo yum -y install docker-ce-[VERSION]</span></code></pre></div></figure><h2 id="1-2-Ubuntu20-04安装Docker"><a href="#1-2-Ubuntu20-04安装Docker" class="headerlink" title="1.2 Ubuntu20.04安装Docker"></a>1.2 Ubuntu20.04安装Docker</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token comment"># step 2: 安装GPG证书</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># Step 3: 写入软件源信息</span><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token comment"># 安装指定版本的Docker-CE:</span><span class="token comment"># Step 1: 查找Docker-CE的版本:</span><span class="token comment"># apt-cache madison docker-ce</span><span class="token comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><span class="token comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><span class="token comment"># Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span><span class="token comment"># </span><span class="token comment"># sudo apt-get -y install docker-ce=[VERSION]</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#验证docker0网卡</span>root@node10:~<span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        ether 02:42:8c:bc:64:dd  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>        <span class="token comment">#验证docker信息</span>root@node10:~<span class="token comment"># docker info</span>Client: Context:    default Debug Mode: <span class="token boolean">false</span> Plugins:  app: Docker App <span class="token punctuation">(</span>Docker Inc., v0.9.1-beta3<span class="token punctuation">)</span>  buildx: Docker Buildx <span class="token punctuation">(</span>Docker Inc., v0.8.2-docker<span class="token punctuation">)</span>  scan: Docker Scan <span class="token punctuation">(</span>Docker Inc., v0.17.0<span class="token punctuation">)</span>Server: Containers: <span class="token number">1</span> <span class="token comment">#当前主机运行的容器总数</span>  Running: <span class="token number">1</span> <span class="token comment">#运行中的容器</span>  Paused: <span class="token number">0</span> <span class="token comment">#暂停的容器</span>  Stopped: <span class="token number">0</span> <span class="token comment">#停止的容器</span> Images: <span class="token number">6</span> <span class="token comment">#当前服务器的镜像数</span> Server Version: <span class="token number">20.10</span>.17 <span class="token comment">#服务端版本</span> Storage Driver: overlay2 <span class="token comment">#正在使用的存储引擎</span>  Backing Filesystem: xfs <span class="token comment">#服务器的磁盘文件系统</span>  Supports d_type: <span class="token boolean">true</span> <span class="token comment">#是否支持d_type</span>  Native Overlay Diff: <span class="token boolean">true</span> <span class="token comment">#是否支持差异数据存储</span>  userxattr: <span class="token boolean">false</span>  Logging Driver: json-file <span class="token comment">#日志类型</span> Cgroup Driver: cgroupfs <span class="token comment">#cgroups类型</span> Cgroup Version: <span class="token number">1</span> Plugins: <span class="token comment">#插件</span>  Volume: <span class="token builtin class-name">local</span> <span class="token comment">#卷 </span>  Network: bridge <span class="token function">host</span> ipvlan macvlan null overlay <span class="token comment">#overlay跨主机通信</span>  Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> logentries splunk syslog <span class="token comment">#日志类型</span> Swarm: inactive <span class="token comment">#是否支持swarm</span> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc <span class="token comment">#已安装的容器运行时</span> Default Runtime: runc <span class="token comment">#默认使用的容器运行时</span> Init Binary: docker-init <span class="token comment">#初始化容器的守护进程，即pid为1的进程</span> containerd version: 9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6 <span class="token comment">#版本</span> runc version: v1.1.4-0-g5fd4c4d <span class="token comment">#runc版本</span> init version: de40ad0 <span class="token comment">#init版本</span> Security Options: <span class="token comment">#安全选项</span>  apparmor <span class="token comment">#安全模块</span>  seccomp <span class="token comment">#审计</span>   Profile: default <span class="token comment">#默认的配置文件</span> Kernel Version: <span class="token number">5.4</span>.0-125-generic <span class="token comment">#宿主机内核版本</span> Operating System: Ubuntu <span class="token number">20.04</span>.4 LTS <span class="token comment">#宿主机操作系统</span> OSType: linux <span class="token comment">#宿主机操作系统类型</span> Architecture: x86_64 <span class="token comment">#宿主机架构</span> CPUs: <span class="token number">2</span> <span class="token comment">#宿主机cpu数量</span> Total Memory: <span class="token number">1</span>.907GiB <span class="token comment">#宿主机总内存</span> Name: node10 <span class="token comment">#宿主机hostname</span> ID: CQU2:BUIE:VTFV:C2VH:BJFV:KHPN:LV24:3VRM:OHB6:MWDK:QVOQ:PNR6 <span class="token comment">#宿主机id</span> Docker Root Dir: /var/lib/docker <span class="token comment">#宿主机数据保存目录</span> Debug Mode: <span class="token boolean">false</span> <span class="token comment">#是否开启debug</span> Registry: https://index.docker.io/v1/ Labels: <span class="token comment">#其他标签</span> Experimental: <span class="token boolean">false</span> <span class="token comment">#是否测试版</span> Insecure Registries: <span class="token comment">#非安全的镜像仓库</span>  <span class="token number">127.0</span>.0.0/8 Registry Mirrors:  https://x76gajt3.mirror.aliyuncs.com/ Live Restore Enabled: <span class="token boolean">false</span> <span class="token comment">#是否开启活动重启(重启docker-daemon不关闭容器)</span>WARNING: No swap limit support <span class="token comment">#系统警告信息(没有开启swap资源限制)</span></code></pre></div></figure><h2 id="1-3-镜像加速器"><a href="#1-3-镜像加速器" class="headerlink" title="1.3 镜像加速器"></a>1.3 镜像加速器</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#网易云 </span>https://hub-mirror.c.163.com<span class="token comment">#百度云 </span>https://mirror.baidubce.com<span class="token comment">#DaoCloud </span>http://f1361db2.m.daocloud.io<span class="token comment">#阿里云 </span>https://ustc-edu-cn.mirror.aliyuncs.com<span class="token comment">#Github </span>https://ghcr.io<span class="token comment">#阿里云加速器</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://x76gajt3.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span class="token comment">#中科大镜像加速器</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></code></pre></div></figure><h2 id="1-4-解决swap限制警告"><a href="#1-4-解决swap限制警告" class="headerlink" title="1.4 解决swap限制警告"></a>1.4 解决swap限制警告</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># vim /etc/default/grub</span><span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_TIMEOUT_STYLE</span><span class="token operator">=</span>hidden<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_DISTRIBUTOR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>lsb_release <span class="token parameter variable">-i</span> <span class="token parameter variable">-s</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token builtin class-name">echo</span> Debian<span class="token variable">`</span></span><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"maybe-ubiquity"</span><span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"cgroup_enable=memory swapaccount=1"</span>root@node10:~<span class="token comment"># update-grub</span>Sourcing <span class="token function">file</span> <span class="token variable"><span class="token variable">`</span>/etc/default/grub'Sourcing <span class="token function">file</span> <span class="token variable">`</span></span>/etc/default/grub.d/init-select.cfg'Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-5.4.0-125-genericFound initrd image: /boot/initrd.img-5.4.0-125-genericFound linux image: /boot/vmlinuz-5.4.0-124-genericFound initrd image: /boot/initrd.img-5.4.0-124-genericredoneroot@node10:~<span class="token comment"># reboot</span></code></pre></div></figure><h2 id="1-5-Docker存储引擎"><a href="#1-5-Docker存储引擎" class="headerlink" title="1.5 Docker存储引擎"></a>1.5 Docker存储引擎</h2><p>目前Docker的默认存储引擎overlay2，不同的存储引擎需要相应的系统支持，如需磁盘分区的时候传递d_type文件分层功能，需要传递内核参数开启格式化磁盘的时候指定的功能。</p><h2 id="1-6-Docker服务进程"><a href="#1-6-Docker服务进程" class="headerlink" title="1.6 Docker服务进程"></a>1.6 Docker服务进程</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker版本</span>root@node10:~<span class="token comment"># docker --version</span>Docker version <span class="token number">20.10</span>.17, build 100c701<span class="token comment">#查看docker进程，有4个进程</span><span class="token comment">#dockerd：被client直接访问，父进程为systemd守护进程</span><span class="token comment">#docker-proxy：实现容器通信，父进程为dockerd</span><span class="token comment">#containerd：被dockerd进程调用以实现与runc交互</span><span class="token comment">#containerd-shim：真正运行容器的载体，父进程systemd守护进程</span>root@node10:~<span class="token comment"># pstree -p 1</span>           ├─containerd<span class="token punctuation">(</span><span class="token number">814</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">866</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">867</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">868</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">869</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">930</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">932</span><span class="token punctuation">)</span>           │                 └─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">952</span><span class="token punctuation">)</span>           ├─containerd-shim<span class="token punctuation">(</span><span class="token number">2459</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">2484</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">2550</span><span class="token punctuation">)</span>           │                       │             └─nginx<span class="token punctuation">(</span><span class="token number">2551</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2460</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2461</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2462</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2463</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2464</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2465</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2466</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2467</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2468</span><span class="token punctuation">)</span>           │                       └─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2566</span><span class="token punctuation">)</span>           ├─dockerd<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span>─┬─docker-proxy<span class="token punctuation">(</span><span class="token number">2437</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2438</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2439</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2440</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2441</span><span class="token punctuation">)</span>           │              │                    └─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2443</span><span class="token punctuation">)</span>           │              ├─docker-proxy<span class="token punctuation">(</span><span class="token number">2442</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2444</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2445</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2446</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2447</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2448</span><span class="token punctuation">)</span>           │              │                    └─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2449</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">966</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">967</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">968</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">969</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">970</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">971</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">975</span><span class="token punctuation">)</span>           │              └─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2450</span><span class="token punctuation">)</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01).Docker简介</title>
    <link href="/2022/08/30/Container/Docker/docker01/"/>
    <url>/2022/08/30/Container/Docker/docker01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker是什么？"><a href="#1-Docker是什么？" class="headerlink" title="1.Docker是什么？"></a>1.Docker是什么？</h1><p>Docker是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。</p><p>Docker是基于Linux内核实现，最早采用LXC技术(LinuX Container)，LXC是Linux原生支持的容器技术，可以提供轻量级的虚拟化。Docker后改为自己研发并开源的runc技术运行容器。</p><p>Docker相比虚拟机的交付速度更快，资源消耗更低，Docker使用客户端-服务器(C&#x2F;S)架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker三个基本概念：</p><ul><li>镜像(Image)：Docker镜像，就相当于一个root文件系统。比如官方镜像ubuntu:20.04就包含了完整的一套Ubuntu20.04最小系统的root文件系统。</li><li>容器(Container)：镜像和容器的关系，就像面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行的实体。容器可以被创建，启动，停止，删除，暂停等。</li><li>仓库(Repository)：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p><img src="/2022/08/30/Container/Docker/docker01/image-20220829124549860.png" alt="image-20220829124549860"> </p><p>Docker的组成：</p><ul><li>Docker镜像(Image)：Docker镜像用于创建Docker容器的模板，比如Ubuntu系统。</li><li>Docker容器(Container)：容器是独立的一个或一组应用，是镜像运行时的实体。</li><li>Docker客户端(Client)：Docker客户端通过命令行或者其他工具使用Docker SDK与Docker的守护进程通信。</li><li>Docker服务端(Server)：Docker守护进程，运行Docker容器。</li><li>Docker主机(Host)：一个物理机或者虚拟机用于执行Docker守护进程和容器。</li><li>Docker仓库(Registry)：Docker仓库用来保存镜像，可以理解为代码控制中的代码仓库。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方仓库</span>https://hub.docker.com/</code></pre></div></figure><h1 id="2-Docker底层技术"><a href="#2-Docker底层技术" class="headerlink" title="2.Docker底层技术"></a>2.Docker底层技术</h1><p>Docker底层的核心技术包括：</p><ul><li>Linux上的名字空间(Namespaces)</li><li>控制组(Control Group)</li><li>Union文件系统(Union File Systems)</li><li>容器格式(Container Format)</li></ul><h2 id="2-1-Linux-Namespace"><a href="#2-1-Linux-Namespace" class="headerlink" title="2.1 Linux Namespace"></a>2.1 Linux Namespace</h2><p>​Namespace是Linux系统的底层概念，在内核层实现，即有一些不同类型的命名空间被部署在内核，各个Docker容器运行在同一个Docker主进程并且共用同一个宿主机系统内核，各Docker容器运行在宿主机的用户控件，每个容器都要有类似于虚拟机一样的相互隔离的运行空间，但是容器技术是在一个进程内实现运行指定服务的运行环境，并且还可以保护宿主机内核不受其他进程的干扰和影响，如文件系统空间，网络空间，进程空间等，目前主要通过以下技术实现容器运行空间的相互隔离。</p><table><thead><tr><th align="left">隔离类型</th><th>功能</th><th>系统调用参数</th><th>内核版本</th></tr></thead><tbody><tr><td align="left">MNT Namespace</td><td>提供磁盘挂载点和文件系统的隔离能力</td><td>CLONE_NEWNS</td><td>Linux 2.4.19</td></tr><tr><td align="left">IPC Namespace</td><td>提供进程间通信的隔离能力</td><td>CLONE_NEWIPC</td><td>Linux 2.6.19</td></tr><tr><td align="left">UTS Namespace</td><td>提供主机名隔离能力</td><td>CLONE_NEWUTS</td><td>Linux 2.6.19</td></tr><tr><td align="left">PID Namespace</td><td>提供进程隔离能力</td><td>CLONE_NEWPID</td><td>Linux 2.6.24</td></tr><tr><td align="left">Net Namespace</td><td>提供网络隔离能力</td><td>CLONE_NEWNET</td><td>Linux 2.6.29</td></tr><tr><td align="left">User Namespace</td><td>提供用户隔离能力</td><td>CLONE_NEWUSER</td><td>Linux 3.8</td></tr></tbody></table><h3 id="2-1-1-MNT-Namespace"><a href="#2-1-1-MNT-Namespace" class="headerlink" title="2.1.1 MNT Namespace"></a>2.1.1 MNT Namespace</h3><p>​每个容器都要有独立的根文件系统和独立的用户空间，以实现在容器里面启动服务并且使用容器的运行环境，即一个宿主机是ubuntu的服务器，可以在里面启动一个CentOS运行环境的容器并且在容器里面启动一个Nginx服务，这个Nginx运行时使用的运行环境就是CentOS系统目录的运行环境，但是在容器里面是不能访问宿主机的资源，宿主机是使用了chroot技术把容器锁定到一个指定的运行目录里面。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器验证</span><span class="token comment">#docke版本</span>root@node10:~<span class="token comment"># docker --version</span>Docker version <span class="token number">20.10</span>.17, build 100c701<span class="token comment">#启动容器</span>root@node10:~<span class="token comment"># docker run -d --name nginx1 -p 80:80 nginx</span>327eccd06f3e6dcd94c455943ecfa91f0083a906d1a1bb657359bdaaecd49d5froot@node10:~<span class="token comment"># docker run -d --name nginx2 -p 81:80 nginx</span>c882dc8e3514e7c1c83104680ff219cda18a3d016829ef564c086a1bb31e4d05root@node10:~<span class="token comment"># docker run -d --name nginx3 -p 82:80 nginx</span>c5c8712cf3e63149f82427347382b8486502541fe76775a4589290c983d2615d<span class="token comment">#Debian系统安装基础命令</span>~<span class="token comment"># apt update</span>~<span class="token comment"># apt -y install procps iputils-ping net-tools</span><span class="token comment">#验证容器根文件系统</span>root@node10:~<span class="token comment"># docker exec -it c5c8712cf3e6 bash</span>root@c5c8712cf3e6:/<span class="token comment"># cat /etc/issue</span>Debian GNU/Linux <span class="token number">11</span> <span class="token punctuation">\</span>n <span class="token punctuation">\</span>lroot@c5c8712cf3e6:/<span class="token comment"># ls /</span>bin   dev   docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  varboot  docker-entrypoint.d  etc lib   media  opt  root  sbin  sys  usr</code></pre></div></figure><h3 id="2-1-2-IPC-Namespace"><a href="#2-1-2-IPC-Namespace" class="headerlink" title="2.1.2 IPC Namespace"></a>2.1.2 IPC Namespace</h3><p>​一个容器内的进程间通信，允许一个容器内的不同进程的内存，缓存等数据访问，但是不能跨容器访问其他容器的数据。</p><h3 id="2-1-3-UTS-Namespace"><a href="#2-1-3-UTS-Namespace" class="headerlink" title="2.1.3 UTS Namespace"></a>2.1.3 UTS Namespace</h3><p>​UTS(“UNIX Time-sharing System”) 包含了运行内核的名称，版本，底层体系结构4类型等信息用于系统标识，其中包含了hostname和domain name，它使得一个容器拥有属于自己的hostname标识，这个主机名标识独立于宿主机系统和其上的其他容器。</p><h3 id="2-1-4-PID-Namespace"><a href="#2-1-4-PID-Namespace" class="headerlink" title="2.1.4 PID Namespace"></a>2.1.4 PID Namespace</h3><p>不同用户的进程就是通过 pid 名字空间隔离开的，且不同名字空间中可以有相同 pid</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个nginx容器</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS                               NAMES327eccd06f3e   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">8</span> hours ago   Up <span class="token number">8</span> hours   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx1<span class="token comment">#nginx容器内的主进程与工作进程</span>root@327eccd06f3e:/<span class="token comment"># ps -ef | grep nginx</span>root           <span class="token number">1</span>       <span class="token number">0</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: master process nginx <span class="token parameter variable">-g</span> daemon off<span class="token punctuation">;</span>nginx         <span class="token number">30</span>       <span class="token number">1</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processnginx         <span class="token number">31</span>       <span class="token number">1</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processroot         <span class="token number">455</span>     <span class="token number">442</span>  <span class="token number">0</span> <span class="token number">13</span>:17 pts/1    00:00:00 <span class="token function">grep</span> nginx<span class="token comment">#宿主机的pid与容器的pid关系，查看宿主机nginx进程，可以看到nginx的主进程pid:9212，它的父进程pid:9190</span>root@node10:~<span class="token comment"># ps -ef | grep nginx</span>root        <span class="token number">9212</span>    <span class="token number">9190</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: master process nginx <span class="token parameter variable">-g</span> daemon off<span class="token punctuation">;</span>systemd+    <span class="token number">9294</span>    <span class="token number">9212</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processsystemd+    <span class="token number">9295</span>    <span class="token number">9212</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processroot       <span class="token number">23593</span>   <span class="token number">20740</span>  <span class="token number">0</span> <span class="token number">13</span>:18 pts/0    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto nginx<span class="token comment">#查看宿主机pid:9190</span>root@node10:~<span class="token comment"># pstree -p 9190</span>containerd-shim<span class="token punctuation">(</span><span class="token number">9190</span><span class="token punctuation">)</span>─┬─bash<span class="token punctuation">(</span><span class="token number">12055</span><span class="token punctuation">)</span>                      ├─bash<span class="token punctuation">(</span><span class="token number">22913</span><span class="token punctuation">)</span>                      ├─nginx<span class="token punctuation">(</span><span class="token number">9212</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">9294</span><span class="token punctuation">)</span>                      │             └─nginx<span class="token punctuation">(</span><span class="token number">9295</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9191</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9192</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9193</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9194</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9195</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9196</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9197</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9198</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9261</span><span class="token punctuation">)</span>                      └─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9262</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="2-1-5-Net-Namespace"><a href="#2-1-5-Net-Namespace" class="headerlink" title="2.1.5 Net Namespace"></a>2.1.5 Net Namespace</h3><p>​Docker使用Net Namespace启用一个vethX接口，这样容器将拥有它自己的桥接IP地址，通常是docker0，而docker0实质就是Linux的虚拟网桥，网桥是在OSI七层模型的数据链路层的网络设备，通过Mac地址对网络进行划分，并且在不同网络直接传递数据。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看宿主机网卡信息</span>root@node10:~<span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        inet6 fe80::42:76ff:fea2:3ea  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 02:42:76:a2:03:ea  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1857</span>  bytes <span class="token number">90366</span> <span class="token punctuation">(</span><span class="token number">90.3</span> KB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">2369</span>  bytes <span class="token number">10118460</span> <span class="token punctuation">(</span><span class="token number">10.1</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>ens33: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">192.168</span>.1.10  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.1.255        inet6 fe80::20c:29ff:fea2:51d5  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 00:0c:29:a2:51:d5  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">99777</span>  bytes <span class="token number">45657571</span> <span class="token punctuation">(</span><span class="token number">45.6</span> MB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">8471</span>  bytes <span class="token number">976578</span> <span class="token punctuation">(</span><span class="token number">976.5</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>veth06a285f: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::747b:2fff:fea7:933  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">76</span>:7b:2f:a7:09:33  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">17</span>  bytes <span class="token number">1338</span> <span class="token punctuation">(</span><span class="token number">1.3</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>veth29ed0d6: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::406c:45ff:fe90:12e3  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">42</span>:6c:45:90:12:e3  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1842</span>  bytes <span class="token number">113991</span> <span class="token punctuation">(</span><span class="token number">113.9</span> KB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">2360</span>  bytes <span class="token number">10117153</span> <span class="token punctuation">(</span><span class="token number">10.1</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>vetha303916: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::f457:37ff:fe37:69c4  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether f6:57:37:37:69:c4  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">15</span>  bytes <span class="token number">1118</span> <span class="token punctuation">(</span><span class="token number">1.1</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span><span class="token comment">#查看宿主机桥接设备</span>root@node10:~<span class="token comment"># apt install bridge-utils</span>root@node10:~<span class="token comment"># brctl show</span>bridge namebridge <span class="token function">id</span>STP enabledinterfacesdocker0<span class="token number">8000</span>.024276a203eanoveth06a285f            veth29ed0d6            vetha303916    <span class="token comment">#查看容器IP</span>root@327eccd06f3e:/<span class="token comment"># ifconfig</span>eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.2  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        ether 02:42:ac:11:00:02  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">4195</span>  bytes <span class="token number">10217822</span> <span class="token punctuation">(</span><span class="token number">9.7</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">3380</span>  bytes <span class="token number">202715</span> <span class="token punctuation">(</span><span class="token number">197.9</span> KiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span></code></pre></div></figure><p> <img src="/2022/08/30/Container/Docker/docker01/image-20220829214559207.png" alt="image-20220829214559207">    </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看宿主机iptables规则</span>root@node10:~<span class="token comment"># iptables -t nat -vnL</span>Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1830</span> packets, 286K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">8</span>   <span class="token number">394</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ADDRTYPE match dst-type LOCALChain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1818</span> packets, 285K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">34</span> packets, <span class="token number">2419</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">0</span>     <span class="token number">0</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0           <span class="token operator">!</span><span class="token number">127.0</span>.0.0/8          ADDRTYPE match dst-type LOCAL<span class="token comment">#源地址转换，让容器通过宿主机访问外网</span>Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">34</span> packets, <span class="token number">2419</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination            <span class="token number">12</span>   <span class="token number">730</span> MASQUERADE  all  --  *      <span class="token operator">!</span>docker0  <span class="token number">172.17</span>.0.0/16        <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.2           <span class="token number">172.17</span>.0.2           tcp dpt:80    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.3           <span class="token number">172.17</span>.0.3           tcp dpt:80    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.4           <span class="token number">172.17</span>.0.4           tcp dpt:80<span class="token comment">#目的地址转换，以实现从外宿主机访问容器</span>Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">0</span>     <span class="token number">0</span> RETURN     all  --  docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:80 to:172.17.0.2:80    <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:81 to:172.17.0.3:80    <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:82 to:172.17.0.4:80            root@node10:~<span class="token comment"># iptables -vnL</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">16972</span> packets, 5634K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         <span class="token comment">#转发规则</span>Chain FORWARD <span class="token punctuation">(</span>policy DROP <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         <span class="token number">11758</span>   20M DOCKER-<span class="token environment constant">USER</span>  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0           <span class="token number">11758</span>   20M DOCKER-ISOLATION-STAGE-1  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            <span class="token number">6528</span>   20M ACCEPT     all  --  *      docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ctstate RELATED,ESTABLISHED    <span class="token number">2</span>   <span class="token number">104</span> DOCKER     all  --  *      docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            <span class="token number">5228</span>  246K ACCEPT     all  --  docker0 <span class="token operator">!</span>docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  docker0 docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0 </code></pre></div></figure><h3 id="2-1-6-User-Namespace"><a href="#2-1-6-User-Namespace" class="headerlink" title="2.1.6 User Namespace"></a>2.1.6 User Namespace</h3><p>​User Namespace允许在各个宿主机的各个容器空间内创建相同的用户名以及相同的用户UID和GID，只是会把用户的作用范围限制在每个容器内，即A容器和B容器可以有相同的用户名，但是此用户名的有效范围仅是当前容器内，不能访问另外一个容器内的文件系统，即相互隔离，互不影响。</p><h2 id="2-2-Linux-Control-groups"><a href="#2-2-Linux-Control-groups" class="headerlink" title="2.2 Linux Control groups"></a>2.2 Linux Control groups</h2><p>​Linux Control groups是Linux内核的一个特性(内核2.6.24开始支持)，主要用来对共享资源进行隔离，限制，审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时对系统资源的竞争。控制组可以提供对容器的内存，CPU，磁盘IO等资源的限制和审计管理。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7.9 cgroups</span><span class="token punctuation">[</span>root@node50 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release </span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node50 ~<span class="token punctuation">]</span><span class="token comment"># cat /boot/config-3.10.0-1160.el7.x86_64 | grep CGROUP</span><span class="token assign-left variable">CONFIG_CGROUPS</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_CGROUP_FREEZER</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PIDS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_DEVICE</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_CPUACCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_HUGETLB</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PERF</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_SCHED</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_BLK_CGROUP</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_DEBUG_BLK_CGROUP is not set</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NET_CLS_CGROUP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_NETPRIO_CGROUP</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04 cgroups</span>root@node10:~<span class="token comment"># cat /etc/issue</span>Ubuntu <span class="token number">20.04</span>.4 LTS <span class="token punctuation">\</span>n <span class="token punctuation">\</span>lroot@node10:~<span class="token comment"># uname -r</span><span class="token number">5.4</span>.0-125-genericroot@node10:~<span class="token comment"># cat /boot/config-5.4.0-125-generic | grep CGROUP</span><span class="token assign-left variable">CONFIG_CGROUPS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_BLK_CGROUP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_WRITEBACK</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_SCHED</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PIDS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_RDMA</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_FREEZER</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_HUGETLB</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_DEVICE</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_CPUACCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PERF</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_BPF</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_SOCK_CGROUP_DATA</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_BLK_CGROUP_IOLATENCY is not set</span><span class="token assign-left variable">CONFIG_BLK_CGROUP_IOCOST</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_BFQ_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NET_CLS_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_CGROUP_NET_PRIO</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_NET_CLASSID</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cgroups中内存模块</span>root@node10:~<span class="token comment"># cat /boot/config-5.4.0-125-generic | grep MEMCG</span><span class="token assign-left variable">CONFIG_MEMCG</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_MEMCG_SWAP</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_MEMCG_SWAP_ENABLED is not set</span><span class="token assign-left variable">CONFIG_MEMCG_KMEM</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_SLUB_MEMCG_SYSFS_ON</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cgroups具体实现</span>blkio：<span class="token comment">#块设备IO限制</span>cpu：<span class="token comment">#使用调度程序为cgroup任务提供cpu访问</span>cpuacct：<span class="token comment">#产生cgroup任务的cpu资源报告</span>cpuset：<span class="token comment">#如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存</span>devices：<span class="token comment">#允许或拒绝cgroup任务对设备的访问</span>freezer：<span class="token comment">#暂停和恢复cgroup任务</span>memory：<span class="token comment">#设置每个cgroup的内存限制以及产生内存资源报告</span>net_cls：<span class="token comment">#标记每个网络包以供cgroup方便使用</span>ns：<span class="token comment">#命名空间子系统</span>perf_event：<span class="token comment">#增加了对group的监测跟踪的能力，可以监测属于某个特定的group的所有线程以及运行在特定cpu上的线程。</span><span class="token comment">#查看系统cgroups</span>root@node10:~<span class="token comment"># ll /sys/fs/cgroup/</span>total <span class="token number">0</span>drwxr-xr-x <span class="token number">15</span> root root <span class="token number">380</span> Aug <span class="token number">29</span> 01:11 ./drwxr-xr-x <span class="token number">11</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 <span class="token punctuation">..</span>/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 blkio/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">11</span> Aug <span class="token number">29</span> 01:11 cpu -<span class="token operator">></span> cpu,cpuacct/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">11</span> Aug <span class="token number">29</span> 01:11 cpuacct -<span class="token operator">></span> cpu,cpuacct/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 cpu,cpuacct/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 cpuset/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 devices/dr-xr-xr-x  <span class="token number">4</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 freezer/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 hugetlb/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 memory/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">16</span> Aug <span class="token number">29</span> 01:11 net_cls -<span class="token operator">></span> net_cls,net_prio/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 net_cls,net_prio/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">16</span> Aug <span class="token number">29</span> 01:11 net_prio -<span class="token operator">></span> net_cls,net_prio/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 perf_event/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 pids/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 rdma/dr-xr-xr-x  <span class="token number">6</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 systemd/dr-xr-xr-x  <span class="token number">6</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:14 unified/</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Ansible部署及使用</title>
    <link href="/2022/08/29/Manage/Ansible/ansible01/"/>
    <url>/2022/08/29/Manage/Ansible/ansible01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ansible简介"><a href="#1-Ansible简介" class="headerlink" title="1.Ansible简介"></a>1.Ansible简介</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官网</span>https://www.ansible.com/https://docs.ansible.com/</code></pre></div></figure><p><strong>ansible功能：</strong></p><ul><li>批量执行远程命令，可以对远程的多台主机同时进行命令的执行。</li><li>批量安装和配置软件服务，可以对远程的多台主机进行自动化的方式配置和管理各种服务。</li><li>编排高级的企业级复杂的IT架构任务，ansible的playbook和role可以轻松实现大型的IT复杂架构。</li><li>提供自动化运维工具开发API，有很多运维工具，如jumpserver就是基于ansible实现自动化管理功能。</li></ul><p><strong>ansible特性：</strong></p><ul><li>模块化：调用特定的模块完成特定任务，支持自定义模块，可以使用任何编程语言写模块。</li><li>Paramiko(Python对SSH的实现)，PyYAML、JInJa2（模板语言）三个关键模块。</li><li>基于Python语言实现。</li><li>部署简单，基于Python和SSH(默认已经安装)，agentless，无需代理不依赖PKI(无需ssl)</li><li>安全：基于OpenSSH</li><li>幂等性：一个任务执行1遍和执行N遍效果一样，不因重复执行带来意外情况，此特性非绝对。</li><li>支持Playbook编排任务，YAML格式，编排任务，支持丰富的数据结构。</li><li>较强大的多层解决方案role</li></ul><p><strong>ansible架构：</strong></p><ul><li><strong>ANSIBLE PLAYBOOKS：</strong>任务剧本（任务集），编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，通常是JSON格式的YML文件；</li><li><strong>INVENTORY：</strong>Ansible管理主机的清单 &#x2F;etc&#x2F;anaible&#x2F;hosts；</li><li><strong>MODULES：</strong>Ansible执行命令的功能模块，多数为内置核心模块，也可自定义；</li><li><strong>PLUGINS：</strong>模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插件等，该功能不常用  </li><li><strong>API：</strong>供第三方程序调用的应用程序编程接口。</li></ul><h1 id="2-Ansible安装"><a href="#2-Ansible安装" class="headerlink" title="2.Ansible安装"></a>2.Ansible安装</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#yum安装</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ansible</span><span class="token comment">#编译安装</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-jinja2 PyYAML python-paramiko python-babel python-crypto<span class="token function">wget</span> https://releases.ansible.com/ansible/ansible-2.9.27.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> ansible-2.9.27.tar.gz<span class="token builtin class-name">cd</span> ansible-2.9.27python setup.py buildpython setup.py <span class="token function">install</span><span class="token function">mkdir</span> /etc/ansible<span class="token function">cp</span> <span class="token parameter variable">-r</span> examples/* /etc/ansible<span class="token comment">#确认安装</span><span class="token punctuation">[</span>root@centos7 ansible<span class="token punctuation">]</span><span class="token comment"># ansible --version</span>ansible <span class="token number">2.9</span>.27  config <span class="token function">file</span> <span class="token operator">=</span> /etc/ansible/ansible.cfg  configured module search path <span class="token operator">=</span> <span class="token punctuation">[</span>u<span class="token string">'/root/.ansible/plugins/modules'</span>, u<span class="token string">'/usr/share/ansible/plugins/modules'</span><span class="token punctuation">]</span>  ansible python module location <span class="token operator">=</span> /usr/lib/python2.7/site-packages/ansible-2.9.27-py2.7.egg/ansible  executable location <span class="token operator">=</span> /usr/bin/ansible  python version <span class="token operator">=</span> <span class="token number">2.7</span>.5 <span class="token punctuation">(</span>default, Oct <span class="token number">14</span> <span class="token number">2020</span>, <span class="token number">14</span>:45:30<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">4.8</span>.5 <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span>.5-44<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">#ansible相关文件</span>/etc/ansible/ansible.cfg <span class="token comment">#主配置文件，配置ansible工作特性，也可以在项目的目录中创建此文件,当前目录下如果也有ansible.cfg,则此文件优先生效,建议每个项目目录下,创建独有的ansible.cfg文件。</span>/etc/ansible/hosts       <span class="token comment">#主机清单</span>/etc/ansible/roles/      <span class="token comment">#存放角色的目录</span><span class="token comment">#/etc/ansible/ansible.cfg配置说明</span><span class="token comment">#/etc/ansible/hosts配置说明，inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中，此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明，如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机。</span>ansible_ssh_host     <span class="token comment">#将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span>ansible_ssh_port     <span class="token comment">#ssh端口号.如果不是默认的端口号,通过此变量设置.这种可以使用 ip:端口192.168.1.100:2222</span>ansible_ssh_user     <span class="token comment">#默认的 ssh 用户名</span>ansible_ssh_pass     <span class="token comment">#ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span>ansible_sudo_pass    <span class="token comment">#sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span>ansible_sudo_exe <span class="token punctuation">(</span>new <span class="token keyword">in</span> version <span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token comment">#sudo 命令路径(适用于1.8及以上版本)</span>ansible_connection   <span class="token comment">#与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 'smart','smart' 方式会根据是否支持 ControlPersist, 来判断'ssh' 方式是否可行.</span>ansible_ssh_private_key_file <span class="token comment">#ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span>ansible_shell_type   <span class="token comment">#目标系统的shell类型.默认情况下,命令的执行使用 'sh' 语法,可设置为'csh' 或 'fish'.</span>ansible_python_interpreter <span class="token comment">#目标主机的 python 路径.适用于的情况: 系统中有多个 Python,或者命令路径不是"/usr/bin/python",比如 \*BSD, 或者 /usr/bin/python 不是 2.X 版本的Python.之所以不使用 "/usr/bin/env" 机制,因为这要求远程用户的路径设置正确,且要求 "python"可执行程序名不可为 python以外的名字(实际有可能名为python26).与ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span></code></pre></div></figure><p>例如：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#范例</span><span class="token punctuation">[</span>webservers<span class="token punctuation">]</span>www1.magedu.com:2222www2.magedu.com<span class="token punctuation">[</span>dbservers<span class="token punctuation">]</span>db1.magedu.comdb2.magedu.comdb3.magedu.com<span class="token comment">#或者</span>db<span class="token punctuation">[</span><span class="token number">1</span>:3<span class="token punctuation">]</span>.magedu.com<span class="token comment">#组嵌套</span><span class="token punctuation">[</span>webservers<span class="token punctuation">]</span>www<span class="token punctuation">[</span><span class="token number">1</span>:100<span class="token punctuation">]</span>.example.com<span class="token punctuation">[</span>dbservers<span class="token punctuation">]</span>db-<span class="token punctuation">[</span>a:f<span class="token punctuation">]</span>.example.com<span class="token punctuation">[</span>appservers<span class="token punctuation">]</span><span class="token number">10.0</span>.0.<span class="token punctuation">[</span><span class="token number">1</span>:100<span class="token punctuation">]</span><span class="token comment">#定义testsrvs组中包括两个其它分组,实现组嵌套</span><span class="token punctuation">[</span>testsrvs:children<span class="token punctuation">]</span>webserversdbservers<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token number">10.0</span>.0.8 <span class="token assign-left variable">ansible_connection</span><span class="token operator">=</span>local <span class="token comment">#指定本地连接,无需ssh配置</span><span class="token comment">#ansible_connection=ssh 需要StrictHostKeyChecking no</span><span class="token number">10.0</span>.0.7 <span class="token assign-left variable">ansible_connection</span><span class="token operator">=</span>ssh <span class="token assign-left variable">ansible_ssh_port</span><span class="token operator">=</span><span class="token number">2222</span> <span class="token assign-left variable">ansible_ssh_user</span><span class="token operator">=</span>wang<span class="token assign-left variable">ansible_ssh_password</span><span class="token operator">=</span>magedu<span class="token number">10.0</span>.0.6 <span class="token assign-left variable">ansible_connection</span><span class="token operator">=</span>ssh <span class="token assign-left variable">ansible_ssh_user</span><span class="token operator">=</span>root<span class="token assign-left variable">ansible_ssh_password</span><span class="token operator">=</span><span class="token number">123456</span><span class="token comment">#执行ansible命令时显示别名,如web01</span><span class="token punctuation">[</span>websrvs<span class="token punctuation">]</span>web01 <span class="token assign-left variable">ansible_ssh_host</span><span class="token operator">=</span><span class="token number">10.0</span>.0.101web02 <span class="token assign-left variable">ansible_ssh_host</span><span class="token operator">=</span><span class="token number">10.0</span>.0.102<span class="token punctuation">[</span>websrvs:vars<span class="token punctuation">]</span><span class="token assign-left variable">ansible_ssh_password</span><span class="token operator">=</span>magedusome_host <span class="token assign-left variable">ansible_ssh_port</span><span class="token operator">=</span><span class="token number">2222</span> <span class="token assign-left variable">ansible_ssh_user</span><span class="token operator">=</span>manageraws_host <span class="token assign-left variable">ansible_ssh_private_key_file</span><span class="token operator">=</span>/home/example/.ssh/aws.pemfreebsd_host <span class="token assign-left variable">ansible_python_interpreter</span><span class="token operator">=</span>/usr/local/bin/pythonruby_module_host <span class="token assign-left variable">ansible_ruby_interpreter</span><span class="token operator">=</span>/usr/bin/ruby.1.9.3</code></pre></div></figure><p><strong>ansible相关工具：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ansible相关工具</span>/usr/bin/ansible          <span class="token comment">#主程序，临时命令执行工具</span>/usr/bin/ansible-doc      <span class="token comment">#查看配置文档，模块功能查看工具,相当于man</span>/usr/bin/ansible-playbook <span class="token comment">#定制自动化任务，编排剧本工具,相当于脚本</span>/usr/bin/ansible-pull     <span class="token comment">#远程执行命令的工具</span>/usr/bin/ansible-vault    <span class="token comment">#文件加密工具</span>/usr/bin/ansible-console  <span class="token comment">#基于Console界面与用户交互的执行工具</span>/usr/bin/ansible-galaxy   <span class="token comment">#下载/上传优秀代码或Roles模块的官网平台</span><span class="token comment">#利用ansible实现管理的主要方式</span>Ansible Ad-Hoc   <span class="token comment">#即利用ansible命令，主要用于临时命令使用场景</span>Ansible playbook <span class="token comment">#主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</span><span class="token comment">#ansible使用前准备:ansible 相关工具大多数是通过ssh协议，实现对远程主机的配置管理、应用部署、任务执行等功能,建议：使用此工具前，先配置ansible主控端能基于密钥认证的方式联系各个被管理节点.</span><span class="token comment">#利用sshpass批量实现基于key验证脚本1</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/ssh/ssh_config</span>StrictHostKeyChecking no<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># vim host.list</span><span class="token number">192.168</span>.1.10<span class="token number">192.168</span>.1.11<span class="token number">192.168</span>.1.12<span class="token number">192.168</span>.1.13<span class="token number">192.168</span>.1.14<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># vim push_ssh_key.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">rpm</span> <span class="token parameter variable">-q</span> sshpass <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> sshpass<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /root/.ssh/id_rsa <span class="token punctuation">]</span> <span class="token operator">||</span> ssh-keygen <span class="token parameter variable">-f</span> /root/.ssh/id_rsa <span class="token parameter variable">-P</span> <span class="token string">''</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SSHPASS</span><span class="token operator">=</span><span class="token number">123456</span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> IP<span class="token punctuation">;</span><span class="token keyword">do</span>  sshpass <span class="token parameter variable">-e</span> ssh-copy-id <span class="token parameter variable">-o</span> <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no <span class="token variable">$IP</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> hosts.list<span class="token comment">#实现基于key验证的脚本2</span><span class="token function">cat</span> ssh_key.sh<span class="token comment">#!/bin/bash</span><span class="token assign-left variable">IPLIST</span><span class="token operator">=</span>"<span class="token number">192.168</span>.1.10<span class="token number">192.168</span>.1.11<span class="token number">192.168</span>.1.12<span class="token number">192.168</span>.1.13<span class="token number">192.168</span>.1.14<span class="token function">rpm</span> <span class="token parameter variable">-q</span> sshpass <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> sshpass<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /root/.ssh/id_rsa <span class="token punctuation">]</span> <span class="token operator">||</span> ssh-keygen <span class="token parameter variable">-f</span> /root/.ssh/id_rsa <span class="token parameter variable">-P</span> <span class="token string">''</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SSHPASS</span><span class="token operator">=</span><span class="token number">123456</span><span class="token keyword">for</span> <span class="token for-or-select variable">IP</span> <span class="token keyword">in</span> <span class="token variable">$IPLIST</span><span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token punctuation">&#123;</span> sshpass <span class="token parameter variable">-e</span> ssh-copy-id <span class="token parameter variable">-o</span> <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no <span class="token variable">$IP</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span><span class="token keyword">done</span><span class="token function">wait</span></code></pre></div></figure><h1 id="3-Ansible常用模块"><a href="#3-Ansible常用模块" class="headerlink" title="3.Ansible常用模块"></a>3.Ansible常用模块</h1><h2 id="3-1-command模块"><a href="#3-1-command模块" class="headerlink" title="3.1 command模块"></a>3.1 command模块</h2><p>功能：在远程主机执行命令，此为默认模块，可忽略 -m 选项。</p><p>注意：此命令不支持$VARNAME &lt; &gt; | ; &amp;等，可用shell模块实现。此模块不具有幂等性。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'chdir=/etc cat centos-release'</span><span class="token number">192.168</span>.1.14 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token number">192.168</span>.1.12 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token number">192.168</span>.1.13 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token number">192.168</span>.1.11 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span></code></pre></div></figure><h2 id="3-2-shell模块"><a href="#3-2-shell模块" class="headerlink" title="3.2 shell模块"></a>3.2 shell模块</h2><p>功能：和command相似，用shell执行命令，支持各种符号</p><p>注意：</p><ul><li>此模块不具有幂等性。</li><li>调用bash执行命令 类似 cat &#x2F;tmp&#x2F;test.md | awk -F’|’ ‘{print $1,$2}’ &amp;&gt; &#x2F;tmp&#x2F;example.txt 这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m shell -a 'echo $&#123;HOSTNAME&#125;'</span><span class="token number">192.168</span>.1.14 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>node14<span class="token number">192.168</span>.1.11 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>node11<span class="token number">192.168</span>.1.13 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>node13<span class="token number">192.168</span>.1.12 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>node12<span class="token comment">#将shell模块代替command，设为模块</span><span class="token function">vim</span> /etc/ansible/ansible.cfg<span class="token comment">#修改下面一行</span>module_name <span class="token operator">=</span> shell</code></pre></div></figure><h2 id="3-3-script模块"><a href="#3-3-script模块" class="headerlink" title="3.3 script模块"></a>3.3 script模块</h2><p>功能：在远程主机上运行ansible服务器上的脚本(无需执行权限)</p><p>注意：此模块不具有幂等性。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/script -p</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># cat /data/script/test.sh </span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token environment constant">HOSTNAME</span>&#125;</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m script -a '/data/script/test.sh'</span><span class="token number">192.168</span>.1.11 <span class="token operator">|</span> CHANGED <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> true,     <span class="token string">"rc"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,     <span class="token string">"stderr"</span><span class="token builtin class-name">:</span> <span class="token string">"Shared connection to 192.168.1.11 closed.<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>,     <span class="token string">"stderr_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"Shared connection to 192.168.1.11 closed."</span>    <span class="token punctuation">]</span>,     <span class="token string">"stdout"</span><span class="token builtin class-name">:</span> <span class="token string">"node11<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>,     <span class="token string">"stdout_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"node11"</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">192.168</span>.1.13 <span class="token operator">|</span> CHANGED <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> true,     <span class="token string">"rc"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,     <span class="token string">"stderr"</span><span class="token builtin class-name">:</span> <span class="token string">"Shared connection to 192.168.1.13 closed.<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>,     <span class="token string">"stderr_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"Shared connection to 192.168.1.13 closed."</span>    <span class="token punctuation">]</span>,     <span class="token string">"stdout"</span><span class="token builtin class-name">:</span> <span class="token string">"node13<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>,     <span class="token string">"stdout_lines"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"node13"</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="3-4-copy模块"><a href="#3-4-copy模块" class="headerlink" title="3.4 copy模块"></a>3.4 copy模块</h2><p>功能：从ansible服务器主控端复制文件到远程主机</p><p>注意：src&#x3D;file如果没有指明路径，则为当前目录或当前目录下的files目录下的file文件。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如目标存在，默认覆盖，此处指定先备份</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m copy -a "src=/data/script/test.sh dest=/opt/test.sh owner=root mode=600 backup=yes"</span></code></pre></div></figure><h2 id="3-5-get-url模块"><a href="#3-5-get-url模块" class="headerlink" title="3.5 get_url模块"></a>3.5 get_url模块</h2><p>功能：用于将文件从http、https或ftp下载到被管理机节点上。</p><p>参数：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">url:            <span class="token comment">#下载文件的URL,支持HTTP，HTTPS或FTP协议</span>dest:           <span class="token comment">#下载到目标路径（绝对路径），如果目标是一个目录，就用服务器上面文件的名称，如果目标设置了名称就用目标设置的名称</span>owner：         <span class="token comment">#指定属主</span>group：         <span class="token comment">#指定属组</span>mode：          <span class="token comment">#指定权限</span>force:          <span class="token comment">#如果yes，dest不是目录，将每次下载文件，如果内容改变，替换文件。如果否，则只有在目标不存在时才会下载该文件</span>checksum:       <span class="token comment">#对目标文件在下载后计算摘要，以确保其完整性</span>                <span class="token comment">#示例: checksum="sha256:D98291AC[...]B6DC7B97",</span>                <span class="token comment">#     checksum="sha256:http://example.com/path/sha256sum.txt"</span>url_username:   <span class="token comment">#用于HTTP基本认证的用户名。 对于允许空密码的站点，此参数可以不使用`url_password'</span>url_password:   <span class="token comment">#用于HTTP基本认证的密码。 如果未指定`url_username'参数，则不会使用`url_password'参数</span>validate_certs： <span class="token comment">#如果“no”，SSL证书将不会被验证。 适用于自签名证书在私有网站上使用</span>timeout:        <span class="token comment">#URL请求的超时时间,秒为单位</span><span class="token comment">#示例</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m get_url -a 'url=http://nginx.org/download/nginx-1.18.0.tar.gz dest=/usr/local/src/nginx.tar.gz checksum="md5:b2d33d24d89b8b1f87ff5d251aa27eb8"'</span></code></pre></div></figure><h2 id="3-6-fetch模块"><a href="#3-6-fetch模块" class="headerlink" title="3.6 fetch模块"></a>3.6 fetch模块</h2><p>功能：从远程主机提取文件至ansible的主控端，copy相反，目前不支持目录。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m fetch -a 'src=/opt/test.sh dest=/data/'</span><span class="token number">192.168</span>.1.12 <span class="token operator">|</span> CHANGED <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> true,     <span class="token string">"checksum"</span><span class="token builtin class-name">:</span> <span class="token string">"ba4e41323210a64ee9ebd8f1a01ea31e84919a1a"</span>,     <span class="token string">"dest"</span><span class="token builtin class-name">:</span> <span class="token string">"/data/192.168.1.12/opt/test.sh"</span>,     <span class="token string">"md5sum"</span><span class="token builtin class-name">:</span> <span class="token string">"187eff4e116ccb10c4062fec77f51e3d"</span>,     <span class="token string">"remote_checksum"</span><span class="token builtin class-name">:</span> <span class="token string">"ba4e41323210a64ee9ebd8f1a01ea31e84919a1a"</span>,     <span class="token string">"remote_md5sum"</span><span class="token builtin class-name">:</span> null<span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@ansible data<span class="token punctuation">]</span><span class="token comment"># tree </span><span class="token builtin class-name">.</span>├── <span class="token number">192.168</span>.1.11│   └── opt│       └── test.sh├── <span class="token number">192.168</span>.1.12│   └── opt│       └── test.sh├── <span class="token number">192.168</span>.1.13│   └── opt│       └── test.sh├── <span class="token number">192.168</span>.1.14│   └── opt│       └── test.sh└── script    └── test.sh<span class="token number">9</span> directories, <span class="token number">5</span> files</code></pre></div></figure><h2 id="3-7-file模块"><a href="#3-7-file模块" class="headerlink" title="3.7 file模块"></a>3.7 file模块</h2><p>功能：设置文件属性,创建软链接等。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建data目录</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m file -a 'path=/data state=directory'</span><span class="token comment">#创建空文件</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m file -a 'path=/data/test.txt state=touch'</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m file -a 'path=/data/test.txt state=absent'</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m file -a "path=/root/test.sh owner=wang mode=755"</span><span class="token comment">#创建软链接</span><span class="token comment">#ansible all -m file -a 'src=/data/testfile path|dest|name=/data/testfile-link state=link'</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m file -a 'src=/data/test.txt path=/data/test-link state=link'</span><span class="token comment">#递归修改目录属性,但不递归至子目录</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"path=/data/mysql state=directory owner=mysql group=mysql"</span><span class="token comment">#递归修改目录及子目录的属性</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"path=/data/mysql state=directory owner=mysql group=mysql recurse=yes"</span></code></pre></div></figure><h2 id="3-8-stat模块"><a href="#3-8-stat模块" class="headerlink" title="3.8 stat模块"></a>3.8 stat模块</h2><p>功能：检查文件或文件系统的状态</p><p>注意：对于windows目标，用win_stat模块</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#stat模块选项</span><span class="token comment">#    path：文件/对象的完整路径（必须）。</span><span class="token comment">#常用的返回值判断：</span><span class="token comment">#    exists：判断是否存在。</span><span class="token comment">#    isuid： 调用用户的ID与所有者ID是否匹配。</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible 127.0.0.1 -m stat -a 'path=/etc/passwd'</span><span class="token number">127.0</span>.0.1 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,     <span class="token string">"stat"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"atime"</span><span class="token builtin class-name">:</span> <span class="token number">1682573363.543</span>,         <span class="token string">"attr_flags"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,         <span class="token string">"attributes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,         <span class="token string">"block_size"</span><span class="token builtin class-name">:</span> <span class="token number">4096</span>,         <span class="token string">"blocks"</span><span class="token builtin class-name">:</span> <span class="token number">8</span>,         <span class="token string">"charset"</span><span class="token builtin class-name">:</span> <span class="token string">"us-ascii"</span>,         <span class="token string">"checksum"</span><span class="token builtin class-name">:</span> <span class="token string">"d937f489e461c91b5602fe6f1d4c94c2bfb8bc2c"</span>,         <span class="token string">"ctime"</span><span class="token builtin class-name">:</span> <span class="token number">1681783068.9370687</span>,         <span class="token string">"dev"</span><span class="token builtin class-name">:</span> <span class="token number">2050</span>,         <span class="token string">"device_type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,         <span class="token string">"executable"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"exists"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"gid"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,         <span class="token string">"gr_name"</span><span class="token builtin class-name">:</span> <span class="token string">"root"</span>,         <span class="token string">"inode"</span><span class="token builtin class-name">:</span> <span class="token number">67532801</span>,         <span class="token string">"isblk"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"ischr"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"isdir"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"isfifo"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"isgid"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"islnk"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"isreg"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"issock"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"isuid"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"mimetype"</span><span class="token builtin class-name">:</span> <span class="token string">"text/plain"</span>,         <span class="token string">"mode"</span><span class="token builtin class-name">:</span> <span class="token string">"0644"</span>,         <span class="token string">"mtime"</span><span class="token builtin class-name">:</span> <span class="token number">1681783068.9350693</span>,         <span class="token string">"nlink"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,         <span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"/etc/passwd"</span>,         <span class="token string">"pw_name"</span><span class="token builtin class-name">:</span> <span class="token string">"root"</span>,         <span class="token string">"readable"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"rgrp"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"roth"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"rusr"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">882</span>,         <span class="token string">"uid"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,         <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"18446744072802479646"</span>,         <span class="token string">"wgrp"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"woth"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"writeable"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"wusr"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"xgrp"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"xoth"</span><span class="token builtin class-name">:</span> false,         <span class="token string">"xusr"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#案例</span>- name: <span class="token function">install</span> <span class="token operator">|</span> Check <span class="token keyword">if</span> <span class="token function">file</span> is already configured.  stat: <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> nginx_file_path <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  connection: <span class="token builtin class-name">local</span>  register: nginx_file_result- name: <span class="token function">install</span> <span class="token operator">|</span> Download nginx <span class="token function">file</span>  get_url: <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> nginx_file_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">dest</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> software_files_path <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token assign-left variable">validate_certs</span><span class="token operator">=</span>no  connection: <span class="token builtin class-name">local</span>  when:，not. nginx_file_result.stat.exists</code></pre></div></figure><h2 id="3-9-unarchive模块"><a href="#3-9-unarchive模块" class="headerlink" title="3.9 unarchive模块"></a>3.9 unarchive模块</h2><p>功能：解包解压缩</p><p>用法：</p><ul><li>将ansible主机上的压缩包传到远程主机后解压缩至特定目录，设置copy&#x3D;yes,此为默认值,可省略。</li><li>将远程主机上的某个压缩包解压缩到指定路径下，设置copy&#x3D;no</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#unarchive模块常用参数</span>copy：      <span class="token comment">#默认为yes，当copy=yes，拷贝的文件是从ansible主机复制到远程主机上，如果设置为copy=no，会在远程主机上寻找src源文件</span>remote_src：<span class="token comment">#和copy功能一样且互斥，yes表示在远程主机，不在ansible主机，no表示文件在ansible主机上</span>src：       <span class="token comment">#源路径，可以是ansible主机上的路径，也可以是远程主机(被管理端或者第三方主机)上的路径，如果是远程主机上的路径，则需要设置copy=no</span>dest：      <span class="token comment">#远程主机上的目标路径</span>mode：      <span class="token comment">#设置解压缩后的文件权限</span><span class="token comment">#示例</span><span class="token punctuation">[</span>root@ansible src<span class="token punctuation">]</span><span class="token comment"># wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><span class="token punctuation">[</span>root@ansible src<span class="token punctuation">]</span><span class="token comment"># ansible all -m unarchive -a 'src=/usr/local/src/nginx-1.18.0.tar.gz dest=/usr/local/src/'</span></code></pre></div></figure><h2 id="3-10-archive模块"><a href="#3-10-archive模块" class="headerlink" title="3.10 archive模块"></a>3.10 archive模块</h2><p>功能：打包压缩保存在被管理节点</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible src<span class="token punctuation">]</span><span class="token comment"># ansible all -m archive -a 'path=/var/log/ dest=/data/log.tar.bz2 format=bz2'</span></code></pre></div></figure><h2 id="3-11-hostname"><a href="#3-11-hostname" class="headerlink" title="3.11 hostname"></a>3.11 hostname</h2><p>功能：管理主机名</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible 192.168.1.11 -m hostname -a 'name=node11.chsblogs.com'</span></code></pre></div></figure><h2 id="3-12-cron"><a href="#3-12-cron" class="headerlink" title="3.12 cron"></a>3.12 cron</h2><p>功能：计划任务，支持时间：minute,hour,day,month,weekday</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#备份数据库脚本</span><span class="token function">vim</span> /data/script/mysql_backup.sh<span class="token comment">#!/bin/bash</span>mysqldump <span class="token parameter variable">-A</span> <span class="token parameter variable">-F</span> --single-transaction --master-data<span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-uroot</span> <span class="token operator">|</span><span class="token function">gzip</span> <span class="token operator">></span> /data/mysql_<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F_%T<span class="token variable">`</span></span>.sql.gz<span class="token comment">#创建任务</span>ansible <span class="token number">192.168</span>.1.11 <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">'hour=2 minute=30 weekday=1-5 name="backup mysql" job=/root/mysql_backup.sh'</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate ntp.aliyun.com &amp;>/dev/null' name=Synctime"</span><span class="token comment">#禁用计划任务</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate 172.20.0.1 &amp;>/dev/null' name=Synctime disabled=yes"</span><span class="token comment">#启用计划任务</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate 172.20.0.1 &amp;>/dev/null' name=Synctime disabled=no"</span><span class="token comment">#删除任务</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"name='backup mysql' state=absent"</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">'state=absent name=Synctime'</span></code></pre></div></figure><h2 id="3-13-yum-x2F-apt模块"><a href="#3-13-yum-x2F-apt模块" class="headerlink" title="3.13 yum&#x2F;apt模块"></a>3.13 yum&#x2F;apt模块</h2><p>功能：</p><ul><li>yum 管理软件包，只支持RHEL，CentOS，fedora，不支持Ubuntu其它版本。</li><li>apt 模块管理 Debian 相关版本的软件包。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=present'</span>ansible all <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> <span class="token string">'name=nginx state=present enablerepo=epel'</span> <span class="token comment">#启用epel源进行安装</span>ansible websrvs <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=absent'</span> <span class="token comment">#删除</span></code></pre></div></figure><h2 id="3-14-yum-repository模块"><a href="#3-14-yum-repository模块" class="headerlink" title="3.14 yum_repository模块"></a>3.14 yum_repository模块</h2><p>功能：</p><p>注意：</p><h2 id="3-15-service模块"><a href="#3-15-service模块" class="headerlink" title="3.15 service模块"></a>3.15 service模块</h2><p>功能：管理服务</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">'name=nginx state=started enabled=yes'</span>ansible all <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">"sed -i 's/^Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf"</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=started enabled=yes'</span></code></pre></div></figure><h2 id="3-16-user模块"><a href="#3-16-user模块" class="headerlink" title="3.16 user模块"></a>3.16 user模块</h2><p>功能：管理用户</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建用户</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=user1 comment="test user" uid=2048 home=/app/user1 group=root'</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=nginx comment=nginx uid=88 group=nginx groups="root,daemon" shell=/sbin/nologin system=yes create_home=no home=/data/nginx non_unique=yes'</span><span class="token comment">#remove=yes表示删除用户及家目录等数据,默认remove=no</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=nginx state=absent remove=yes'</span><span class="token comment">#生成123456加密的密码</span>ansible localhost <span class="token parameter variable">-m</span> debug <span class="token parameter variable">-a</span> <span class="token string">"msg=&#123;&#123; '123456'| password_hash('sha512','salt')&#125;&#125;"</span>localhost <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"msg"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token variable">$6</span><span class="token variable">$salt</span><span class="token variable">$MktMKPZJ6t59GfxcJU20DwcwQzfMvOlHFVZiOVD71w</span>.igcOo1R7vBYR65JquIQ/7siC7VRpmteKvZmfSkNc69."</span><span class="token punctuation">&#125;</span><span class="token comment">#用上面创建的密码创建用户</span>ansible websrvs <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=test password="$6$salt$MktMKPZJ6t59GfxcJU20DwcwQzfMvOlHFVZiOVD71w.igcOo1R7vBYR65JquIQ/7siC7VRpmteKvZmfSkNc69."'</span><span class="token comment">#创建用户test,并生成4096bit的私钥</span>ansible websrvs <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=test generate_ssh_key=yes ssh_key_bits=4096 ssh_key_file=.ssh/id_rsa'</span></code></pre></div></figure><h2 id="3-17-group模块"><a href="#3-17-group模块" class="headerlink" title="3.17 group模块"></a>3.17 group模块</h2><p>功能：管理组</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建组</span>ansible websrvs <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">'name=mysql gid=88 system=yes'</span><span class="token comment">#删除组</span>ansible websrvs <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">'name=mysql state=absent'</span></code></pre></div></figure><h2 id="3-18-lineinfile模块"><a href="#3-18-lineinfile模块" class="headerlink" title="3.18 lineinfile模块"></a>3.18 lineinfile模块</h2><p>功能：</p><p>注意：</p><h2 id="3-19-replace模块"><a href="#3-19-replace模块" class="headerlink" title="3.19 replace模块"></a>3.19 replace模块</h2><p>功能：</p><p>注意：</p><h2 id="3-20-selinux模块"><a href="#3-20-selinux模块" class="headerlink" title="3.20 selinux模块"></a>3.20 selinux模块</h2><p>功能：该模块管理SELInux策略</p><p>注意：</p><h2 id="3-21-reboot模块"><a href="#3-21-reboot模块" class="headerlink" title="3.21 reboot模块"></a>3.21 reboot模块</h2><p>功能：重启</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">reboot</span></code></pre></div></figure><h2 id="3-22-mount模块"><a href="#3-22-mount模块" class="headerlink" title="3.22 mount模块"></a>3.22 mount模块</h2><p>功能：挂载和卸载文件系统</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">``<span class="token variable"><span class="token variable">`</span><span class="token comment">## 3.23 setup模块</span>功能：setup 模块来收集主机的系统信息，这些 facts 信息可以直接以变量的形式使用，但是如果主机较多，会影响执行速度。可以使用 gather_facts: no来禁止 Ansible收集facts信息。<span class="token variable">`</span></span>``shell</code></pre></div></figure><h2 id="3-24-debug模块"><a href="#3-24-debug模块" class="headerlink" title="3.24 debug模块"></a>3.24 debug模块</h2><p>功能：此模块可以用于输出信息,并且通过 msg 定制输出的信息内容。</p><p>注意：msg后面的变量有时需要加 “” 引起来。  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"></code></pre></div></figure><h1 id="4-Ansible-Playbook"><a href="#4-Ansible-Playbook" class="headerlink" title="4.Ansible-Playbook"></a>4.Ansible-Playbook</h1><h1 id="5-Roles"><a href="#5-Roles" class="headerlink" title="5.Roles"></a>5.Roles</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Ubuntu基础配置</title>
    <link href="/2022/08/28/Linux/Ubuntu/UbuntuBase/"/>
    <url>/2022/08/28/Linux/Ubuntu/UbuntuBase/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ubuntu20-04基础配置"><a href="#1-Ubuntu20-04基础配置" class="headerlink" title="1.Ubuntu20.04基础配置"></a>1.Ubuntu20.04基础配置</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官⽅使⽤⽂档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//help.ubuntu.com</span></span></code></pre></div></figure><h2 id="1-1-更改主机名-x2F-时区"><a href="#1-1-更改主机名-x2F-时区" class="headerlink" title="1.1 更改主机名&#x2F;时区"></a>1.1 更改主机名&#x2F;时区</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更改主机名</span><span class="token comment">#方式一：</span>root@node80:~<span class="token comment"># cat /etc/hostname </span>node80<span class="token comment">#方式二：</span>root@node80:~<span class="token comment"># hostnamectl set-hostname gitlab</span><span class="token comment">#更改时区</span>root@node80:~<span class="token comment"># timedatectl set-timezone Asia/Shanghai</span><span class="token function">ln</span> <span class="token parameter variable">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token builtin class-name">echo</span> <span class="token string">"LC_TIME=en_DK.UTF-8"</span> <span class="token operator">>></span> /etc/default/locale</code></pre></div></figure><h2 id="1-2-更改网卡名称为eth"><a href="#1-2-更改网卡名称为eth" class="headerlink" title="1.2 更改网卡名称为eth*"></a>1.2 更改网卡名称为eth*</h2><p>如果没有在安装系统之前传递内核参数将⽹卡名称更改为eth*，则可以在安装系统之后使用以下方式修改： </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/default/grub</span><span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_TIMEOUT_STYLE</span><span class="token operator">=</span>hidden<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_DISTRIBUTOR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>lsb_release <span class="token parameter variable">-i</span> <span class="token parameter variable">-s</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token builtin class-name">echo</span> Debian<span class="token variable">`</span></span><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">""</span><span class="token comment">#GRUB_CMDLINE_LINUX=""</span><span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"net.ifnames=0 biosdevname=0"</span>root@node80:~<span class="token comment"># update-grub</span>Sourcing <span class="token function">file</span> <span class="token variable"><span class="token variable">`</span>/etc/default/grub'Sourcing <span class="token function">file</span> <span class="token variable">`</span></span>/etc/default/grub.d/init-select.cfg'Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-5.15.0-25-genericFound initrd image: /boot/initrd.img-5.15.0-25-genericWarning: os-prober will not be executed to detect other bootable partitions.Systems on them will not be added to the GRUB boot configuration.Check GRUB_DISABLE_OS_PROBER documentation entry.<span class="token keyword">done</span>root@node80:~<span class="token comment"># reboot</span></code></pre></div></figure><h2 id="1-3-配置root远程登录"><a href="#1-3-配置root远程登录" class="headerlink" title="1.3 配置root远程登录"></a>1.3 配置root远程登录</h2><p>默认情况下，ubuntu不允许root用户远程ssh，如果有实际场景需要允许root⽤⼾远程ssh，则需要设置root密码，并且编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config⽂件修改如下：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">#默认为禁⽌登录</span><span class="token number">33</span> <span class="token comment">#PermitRootLogin prohibit-password</span><span class="token comment">#改为允许登录</span><span class="token number">34</span> PermitRootLogin <span class="token function">yes</span><span class="token comment">#打开密码认证，其实默认就是允许通过密码认证登录</span><span class="token number">58</span> PasswordAuthentication <span class="token function">yes</span>~$ <span class="token function">sudo</span> <span class="token function">su</span> - root <span class="token comment">#切换到root⽤⼾环境</span>~<span class="token comment"># passwd #设置密码</span>Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully<span class="token comment">#重启ssh服务并测试root⽤⼾远程ssh连接</span>~<span class="token comment"># systemctl restart sshd</span></code></pre></div></figure><h2 id="1-4-网络配置"><a href="#1-4-网络配置" class="headerlink" title="1.4 网络配置"></a>1.4 网络配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官⽅⽂档</span>https://netplan.io/<span class="token comment">#Ubuntu从17.10开始，已放弃在/etc/network/interfaces⾥固定IP的配置,⽽是改成netplan⽅式,配置⽂件是：</span>root@node80:~<span class="token comment"># cat /etc/netplan/00-installer-config.yaml</span></code></pre></div></figure><h3 id="1-4-1-单网卡静态IP地址"><a href="#1-4-1-单网卡静态IP地址" class="headerlink" title="1.4.1 单网卡静态IP地址"></a>1.4.1 单网卡静态IP地址</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml </span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5  version: <span class="token number">2</span>root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-2-配置多网卡静态IP"><a href="#1-4-2-配置多网卡静态IP" class="headerlink" title="1.4.2 配置多网卡静态IP"></a>1.4.2 配置多网卡静态IP</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5    ens37:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-3-单网卡桥接"><a href="#1-4-3-单网卡桥接" class="headerlink" title="1.4.3 单网卡桥接"></a>1.4.3 单网卡桥接</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no  bridges:    br0:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens33  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-4-多网卡桥接"><a href="#1-4-4-多网卡桥接" class="headerlink" title="1.4.4 多网卡桥接"></a>1.4.4 多网卡桥接</h3><p>ubuntu 22.04多网卡的桥接配置，将br0和br1分别桥接到ens33和ens37</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bridges:    br0:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens33    br1:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens37  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-5-双网卡绑定"><a href="#1-4-5-双网卡绑定" class="headerlink" title="1.4.5 双网卡绑定"></a>1.4.5 双网卡绑定</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#7种bond模式说明</span>第1种模式：mod<span class="token operator">=</span><span class="token number">0</span>，即：<span class="token punctuation">(</span>balance-rr<span class="token punctuation">)</span> Round-robin policy（平衡抡循环策略）特点：传输数据包顺序是依次传输（即：第1个包⾛eth0，下⼀个包就⾛eth1….⼀直循环下去，直到最后⼀个传输完毕），此模式提供负载平衡和容错能⼒。第2种模式：mod<span class="token operator">=</span><span class="token number">1</span>，即： <span class="token punctuation">(</span>active-backup<span class="token punctuation">)</span> Active-backup policy（主-备份策略）特点：只有⼀个设备处于活动状态，当⼀个宕掉另⼀个⻢上由备份转换为主设备。mac地址是外部可⻅得，从外⾯看来，bond的MAC地址是唯⼀的，以避免switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>发⽣混乱。此模式只提供了容错能⼒；由此可⻅此算法的优点是可以提供⾼⽹络连接的可⽤性，但是它的资源利⽤率较低，只有⼀个接⼝处于⼯作状态，在有 N 个⽹络接⼝的情况下，资源利⽤率为1/N。第3种模式：mod<span class="token operator">=</span><span class="token number">2</span>，即：<span class="token punctuation">(</span>balance-xor<span class="token punctuation">)</span> XOR policy（平衡策略）特点：基于指定的传输HASH策略传输数据包。缺省的策略是：<span class="token punctuation">(</span>源MAC地址 XOR ⽬标MAC地址<span class="token punctuation">)</span> % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能⼒。第4种模式：mod<span class="token operator">=</span><span class="token number">3</span>，即：broadcast（⼴播策略）特点：在每个slave接⼝上传输每个数据包，此模式提供了容错能⼒。第5种模式：mod<span class="token operator">=</span><span class="token number">4</span>，即：<span class="token punctuation">(</span><span class="token number">802</span>.3ad<span class="token punctuation">)</span> IEEE <span class="token number">802</span>.3adDynamic <span class="token function">link</span> aggregation（IEEE <span class="token number">802</span>.3ad 动态链接聚合）特点：创建⼀个聚合组，它们共享同样的速率和双⼯设定。根据802.3ad规范将多个slave⼯作在同⼀个激活的聚合体下。必要条件：条件1：ethtool⽀持获取每个slave的速率和双⼯设定。条件2：switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>⽀持IEEE <span class="token number">802</span>.3ad Dynamic <span class="token function">link</span> aggregation。条件3：⼤多数switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>需要经过特定配置才能⽀持802.3ad模式。第6种模式：mod<span class="token operator">=</span><span class="token number">5</span>，即：<span class="token punctuation">(</span>balance-tlb<span class="token punctuation">)</span> Adaptive transmit load balancing（适配器传输负载均衡）特点：不需要任何特别的switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>⽀持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另⼀个slave接管失败的slave的MAC地址。该模式的必要条件：ethtool⽀持获取每个slave的速率第7种模式：mod<span class="token operator">=</span><span class="token number">6</span>，即：<span class="token punctuation">(</span>balance-alb<span class="token punctuation">)</span> Adaptive load balancing（适配器适应性负载均衡）特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡<span class="token punctuation">(</span>receive load balance,rlb<span class="token punctuation">)</span>，⽽且不需要任何switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>的⽀持。</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-6-双网卡绑定-桥接"><a href="#1-4-6-双网卡绑定-桥接" class="headerlink" title="1.4.6 双网卡绑定+桥接"></a>1.4.6 双网卡绑定+桥接</h3><p>网卡绑定用于提供网卡接口冗余以及高可用和端口聚合共功能，桥接网卡再给需要桥接设备的服务使用。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  bridges:    br0:      dhcp4: no      dhcp6: no      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond0  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-7-内外多网卡绑定"><a href="#1-4-7-内外多网卡绑定" class="headerlink" title="1.4.7 内外多网卡绑定"></a>1.4.7 内外多网卡绑定</h3><p>多网络情况下实现网卡绑定</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no    ens38:      dhcp4: no      dhcp6: no    ens39:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>    bond1:      interfaces:        - ens38        - ens39      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-8-内网多网卡绑定-桥接"><a href="#1-4-8-内网多网卡绑定-桥接" class="headerlink" title="1.4.8 内网多网卡绑定+桥接"></a>1.4.8 内网多网卡绑定+桥接</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no    ens38:      dhcp4: no      dhcp6: no    ens39:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>    bond1:      interfaces:        - ens38        - ens39      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  bridges:    br0:      dhcp4: no      dhcp6: no      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond0    br1:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond1  version: <span class="token number">2</span>root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h2 id="1-5-软件包管理"><a href="#1-5-软件包管理" class="headerlink" title="1.5 软件包管理"></a>1.5 软件包管理</h2><p>在ubuntu安装、升级、卸载软件包等常规操作。  </p><h3 id="1-5-1-修改软件仓库"><a href="#1-5-1-修改软件仓库" class="headerlink" title="1.5.1 修改软件仓库"></a>1.5.1 修改软件仓库</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿⾥云仓库地址</span>https://opsx.alibaba.com/mirror<span class="token comment">#中科⼤</span>http://mirrors.ustc.edu.cn/help/ubuntu.html<span class="token comment">#清华⼤学</span>https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/<span class="token comment">#华为</span>https://mirrors.huaweicloud.com/</code></pre></div></figure><h3 id="1-5-2-apt-x2F-apt-get"><a href="#1-5-2-apt-x2F-apt-get" class="headerlink" title="1.5.2 apt&#x2F;apt-get"></a>1.5.2 apt&#x2F;apt-get</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt list #apt列出仓库软件包，等于yum list</span><span class="token comment"># apt search NAME #搜索安装包</span><span class="token comment"># apt show apache2 #查看某个安装包的详细信息</span><span class="token comment"># apt install apache2 #在线安装软件包</span><span class="token comment"># apt remove apache2 #卸载单个软件包但是保留配置⽂件</span><span class="token comment"># apt autoremove apache2 #删除安装包并解决依赖关系</span><span class="token comment"># apt update #更新本地软件包列表索引，修改了apt仓库后必须执⾏</span><span class="token comment"># apt purge apache2 #卸载单个软件包删除配置⽂件</span><span class="token comment"># apt upgrade #升级所有已安装且可升级到新版本的软件包</span><span class="token comment"># apt full-upgrade #升级整个系统，必要时可以移除旧软件包。</span><span class="token comment"># apt edit-sources #编辑source源⽂件</span><span class="token comment"># apt-cache madison nginx #查看仓库中软件包有哪些版本可以安装</span><span class="token comment"># apt install nginx=1.14.0-0ubuntu1.6 #安装软件包的时候指定安装具体的版本</span></code></pre></div></figure><h3 id="1-5-3-设置oracle-JDK环境"><a href="#1-5-3-设置oracle-JDK环境" class="headerlink" title="1.5.3 设置oracle JDK环境"></a>1.5.3 设置oracle JDK环境</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># cd /usr/local/src/</span>root@node80:/usr/local/src<span class="token comment"># ls</span>jdk-8u341-linux-x64.tar.gzroot@node80:/usr/local/src<span class="token comment"># tar -xvf jdk-8u341-linux-x64.tar.gz</span>root@node80:/usr/local/src<span class="token comment"># ln -sv /usr/local/src/jdk1.8.0_341/ /usr/local/jdk</span><span class="token string">'/usr/local/jdk'</span> -<span class="token operator">></span> <span class="token string">'/usr/local/src/jdk1.8.0_341/'</span>root@node80:~<span class="token comment"># vim /etc/profile</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JAVA_HOME</span>/jre/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JAVA_HOME</span>/jre/lib:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarroot@node80:~<span class="token comment"># source /etc/profile</span>root@node80:/usr/local/src<span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h3 id="1-5-4-安装OpenJDK"><a href="#1-5-4-安装OpenJDK" class="headerlink" title="1.5.4 安装OpenJDK"></a>1.5.4 安装OpenJDK</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># apt install openjdk-8-jdk</span></code></pre></div></figure><h3 id="1-5-5-安装常用系统命令"><a href="#1-5-5-安装常用系统命令" class="headerlink" title="1.5.5 安装常用系统命令"></a>1.5.5 安装常用系统命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># apt install iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute iotop unzip zip net-tools make</span></code></pre></div></figure><h3 id="1-5-6-系统资源限制优化"><a href="#1-5-6-系统资源限制优化" class="headerlink" title="1.5.6 系统资源限制优化"></a>1.5.6 系统资源限制优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure><h3 id="1-5-7-内核参数优化"><a href="#1-5-7-内核参数优化" class="headerlink" title="1.5.7 内核参数优化"></a>1.5.7 内核参数优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Controls source route verification</span>net.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#启用源路由核查功能</span>net.ipv4.ip_nonlocal_bind <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#允许非本地IP地址socket监听</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#开启IPV4转发</span><span class="token comment"># Do not accept source routing</span>net.ipv4.conf.default.accept_source_route <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#禁用所有IP源路由</span><span class="token comment"># Controls the System Request debugging functionality of the kernel</span>kernel.sysrq <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#关闭sysrq组合键</span><span class="token comment"># Controls whether core dumps will append the PID to the core filename.</span><span class="token comment"># Useful for debugging multi-threaded applications.</span>kernel.core_uses_pid <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#控制core文件的文件名是否添加pid作为扩展</span><span class="token comment"># Controls the use of TCP syncookies</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#与性能无关。用于解决TCP的SYN攻击</span><span class="token comment"># Disable netfilter on bridges.</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">0</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">0</span>net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># Controls the default maxmimum size of a mesage queue</span>kernel.msgmnb <span class="token operator">=</span> <span class="token number">65536</span> <span class="token comment">#每个消息队列的大小限制（单位：字节）</span><span class="token comment"># # Controls the maximum size of a message, in bytes</span>kernel.msgmax <span class="token operator">=</span> <span class="token number">65536</span> <span class="token comment">#整个系统最大消息队列数量限制</span><span class="token comment"># Controls the maximum shared segment size, in bytes</span>kernel.shmmax <span class="token operator">=</span> <span class="token number">68719476736</span> 单个共享内存段大小（单位：字节）<span class="token comment"># # Controls the maximum number of shared memory segments, in pages</span>kernel.shmall <span class="token operator">=</span> <span class="token number">4294967296</span> <span class="token comment">#所有内存大小（单位：页）</span><span class="token comment"># TCP kernel paramater</span>net.ipv4.tcp_mem <span class="token operator">=</span> <span class="token number">786432</span> <span class="token number">1048576</span> <span class="token number">1572864</span> <span class="token comment">#1st低于此值，TCP没有内存压力，2nd进入内存压力阶段，3rd TCP拒绝分配socket（单位：内存页）</span>net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">87380</span> <span class="token number">4194304</span> <span class="token comment">#定义TCP接受socket请求缓存的内存最小值、默认值、较大值</span>net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">16384</span> <span class="token number">4194304</span> <span class="token comment">#定义TCP发送缓存的最小值、默认值、最大值</span>net.ipv4.tcp_window_scaling <span class="token operator">=</span> <span class="token number">1</span> 支持更大的TCP窗口，如果TCP窗口最大超过65535（64K），必须设置该数值为1net.ipv4.tcp_sack <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#开启有选择应答</span><span class="token comment"># socket buffer</span>net.core.wmem_default <span class="token operator">=</span> <span class="token number">8388608</span> <span class="token comment">#表示内核套接字接受缓存区默认大小</span>net.core.rmem_default <span class="token operator">=</span> <span class="token number">8388608</span> <span class="token comment">#表示内核套接字发送缓存区默认大小</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">#表示内核套接字接受缓存区较大大小</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">#表示内核套接字发送缓存区较大大小</span>net.core.netdev_max_backlog <span class="token operator">=</span> <span class="token number">262144</span> <span class="token comment">#当网卡接收数据包的速度大于内核处理速度时，会有一个队列保存这些数据。这个参数表示该队列的较大值</span><span class="token comment">#默认值128，这个参数用于调节系统同时发起TCP连接数，在高并发的请求中，默认值可能会导致连接超时或者重传，因此需要结合高并发请求数来调整此值</span>net.core.somaxconn <span class="token operator">=</span> <span class="token number">20480</span>net.core.optmem_max <span class="token operator">=</span> <span class="token number">81920</span> <span class="token comment"># TCP conn</span><span class="token comment">#这个参数表示TCP三次握手建立阶段接受SYN请求队列的较大长度，默认1024，将其设置大一些可使出现nginx繁忙来不及accept新连接，linux不至于丢失客户端发起的连接请求</span>net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">#该变量设置放弃回应一个tcp连接请求前，需要进行多少次重试。</span><span class="token comment">#该变量设置放弃回应一个tcp连接请求前，需要进行多少次重试。</span>net.ipv4.tcp_retries1 <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#控制内核向已经建立连接的远程主机重新发送数据的次数，低值可以更早的检测到与远程主机失效的连接，因此服务器可以更快的释放该连接，可以修改为5</span>net.ipv4.tcp_retries2 <span class="token operator">=</span> <span class="token number">15</span><span class="token comment"># tcp conn reuse</span>net.ipv4.tcp_timestamps <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#是否开启数据包时间戳</span><span class="token comment">#端口复用，参数值设置为1，表示允许将TIME_WAIT的状态socket重新用于新的TCP连接，这对于服务器来说意义重大，因为总是有大量TIME_WAIT状态的连接存在</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">0</span> net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#当服务器主动关闭连接时，socket保持在FIN_WAIT_2状态的较大时间</span><span class="token comment">#表示操作系统允许TIME_WAIT套接字数量的最大值，如果超过此值，TIME_WAIT套接字将立刻被清除并打印警告信息默认为8000，过多的TIME_WAIT套接字会使web服务变慢</span>net.ipv4.tcp_max_tw_buckets <span class="token operator">=</span> <span class="token number">20000</span><span class="token comment">#选项用于设置系统中最多有多少个TCP套接字不被关联到任何一个用户句柄上。如果超过这个数字，孤立连接数将立即被复位并输出警告信息。这个限制只是为了防止简单DOS攻击不用过分依靠这个限制，甚至认为减小这个值 ，更多的情况是增加这个值</span>net.ipv4.tcp_max_orphans <span class="token operator">=</span> <span class="token number">3276800</span> <span class="token comment">#表示应用程序进行connect()系统调用时，在对方不返回SYN + ACK的情况下(也就是超时的情况下)，第一次发送之后，内核最多重试几次发送SYN包;</span>net.ipv4.tcp_synack_retries <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#开启SYN Cookies，当出现SYN等待队列溢出时，启用cookies来处理</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># keepalive conn</span><span class="token comment">#当keepalive启动时，TCP发送keepalive消息的频度，默认2小时，将其设置为5分钟，可更快的清理无效连接</span>net.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">300</span><span class="token comment">#当探测没有确认时，重新发送探测的频度。缺省是75秒。</span>net.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">#在认定连接失效之前，发送多少个TCP的keepalive探测包。缺省值是9。这个值乘以tcp_keepalive_intvl之后决定了，一个连接发送了keepalive之后可以有多少时间没有回应</span>net.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#定义UDP和TCP连接的本地端口的取值范围</span>net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">10001</span> <span class="token number">65000</span><span class="token comment"># swap</span><span class="token comment">#0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。2， 表示内核允许分配超过所有物理内存和交换空间总和的内存</span>vm.overcommit_memory <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#数值可设置范围在0到100之间。 低参数值会让内核尽量少用交换，更高参数值会使内核更多的去使用交换空间。默认值为60。当系统存在足够内存时，推荐设置为该值以提高性能。</span>vm.swappiness <span class="token operator">=</span> <span class="token number">10</span>fs.file-max <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token comment"># 表示单个进程可以打开的句柄数</span><span class="token comment">#net.ipv4.conf.eth1.rp_filter = 0</span><span class="token comment">#net.ipv4.conf.lo.arp_ignore = 1</span><span class="token comment">#net.ipv4.conf.lo.arp_announce = 2</span><span class="token comment">#net.ipv4.conf.all.arp_ignore = 1</span><span class="token comment">#net.ipv4.conf.all.arp_announce = 2</span></code></pre></div></figure><h3 id="1-5-8-dpkg安装包管理"><a href="#1-5-8-dpkg安装包管理" class="headerlink" title="1.5.8 dpkg安装包管理"></a>1.5.8 dpkg安装包管理</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dpkg -i gitlab-ce_11.9.8-ce.0_amd64.deb #安装某个软件包</span><span class="token comment"># dpkg -r gitlab-ce #删除某个软件包保留配置⽂件</span><span class="token comment"># dpkg -r -P gitlab-ce #删除某个软件包不保留配置⽂件</span><span class="token comment"># dpkg -I gitlab-ce_11.9.8-ce.0_amd64.deb #查看软件包信息</span><span class="token comment"># dpkg -c gitlab-ce_11.9.8-ce.0_amd64.deb #查看软件包内的⽂件及⽬录内容</span><span class="token comment"># dpkg -l #列出本机已经安装的所有软件</span><span class="token comment">#安装Nginx</span>root@node80:~<span class="token comment"># apt install nginx=1.18.0-6ubuntu14.1</span>root@node80:~<span class="token comment"># systemctl start nginx</span>root@node80:~<span class="token comment"># systemctl enable nginx</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Ubuntu系统安装</title>
    <link href="/2022/08/28/Linux/Ubuntu/UbuntuInstall/"/>
    <url>/2022/08/28/Linux/Ubuntu/UbuntuInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ubuntu20-04安装"><a href="#1-Ubuntu20-04安装" class="headerlink" title="1.Ubuntu20.04安装"></a>1.Ubuntu20.04安装</h1><p>使用VMware Workstation16进行安装</p><h2 id="1-1-Ubuntu20-04镜像下载"><a href="#1-1-Ubuntu20-04镜像下载" class="headerlink" title="1.1 Ubuntu20.04镜像下载"></a>1.1 Ubuntu20.04镜像下载</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿里源地址下载</span>https://mirrors.aliyun.com/ubuntu-releases/focal/ubuntu-20.04.4-live-server-amd64.iso</code></pre></div></figure><h2 id="1-2-基本设置"><a href="#1-2-基本设置" class="headerlink" title="1.2 基本设置"></a>1.2 基本设置</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170358770.png" alt="image-20220828170358770"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170453917.png" alt="image-20220828170453917"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170519785.png" alt="image-20220828170519785"> </p><h2 id="1-3-配置网络"><a href="#1-3-配置网络" class="headerlink" title="1.3 配置网络"></a>1.3 配置网络</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170629665.png" alt="image-20220828170629665"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170703158.png" alt="image-20220828170703158"> </p><h2 id="1-4-配置源"><a href="#1-4-配置源" class="headerlink" title="1.4 配置源"></a>1.4 配置源</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170748249.png" alt="image-20220828170748249"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿里源：https://mirrors.aliyun.com/ubuntu/</span><span class="token comment">#清华源：https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span></code></pre></div></figure><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170844479.png" alt="image-20220828170844479"> </p><h2 id="1-5-配置分区"><a href="#1-5-配置分区" class="headerlink" title="1.5 配置分区"></a>1.5 配置分区</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170959400.png" alt="image-20220828170959400"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171054576.png" alt="image-20220828171054576"> </p><h2 id="1-6-配置服务器信息"><a href="#1-6-配置服务器信息" class="headerlink" title="1.6 配置服务器信息"></a>1.6 配置服务器信息</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171150242.png" alt="image-20220828171150242"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171230825.png" alt="image-20220828171230825"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171300998.png" alt="image-20220828171300998"> </p><h2 id="1-7-安装完成-x2F-重启"><a href="#1-7-安装完成-x2F-重启" class="headerlink" title="1.7 安装完成&#x2F;重启"></a>1.7 安装完成&#x2F;重启</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828174120596.png" alt="image-20220828174120596"> </p><h2 id="1-8-基础配置"><a href="#1-8-基础配置" class="headerlink" title="1.8 基础配置"></a>1.8 基础配置</h2><p>配置root远程登录：默认情况下，ubuntu不允许root用户远程ssh，如果有实际场景需要允许root⽤⼾远程ssh，则需要设置root密码，并且编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config⽂件修改如下：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">#默认为禁⽌登录</span><span class="token number">33</span> <span class="token comment">#PermitRootLogin prohibit-password</span><span class="token comment">#改为允许登录</span><span class="token number">34</span> PermitRootLogin <span class="token function">yes</span><span class="token comment">#打开密码认证，其实默认就是允许通过密码认证登录</span><span class="token number">58</span> PasswordAuthentication <span class="token function">yes</span>~$ <span class="token function">sudo</span> <span class="token function">su</span> - root <span class="token comment">#切换到root⽤⼾环境</span>~<span class="token comment"># passwd #设置密码</span>Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully<span class="token comment">#重启ssh服务并测试root⽤⼾远程ssh连接</span>~<span class="token comment"># systemctl restart sshd</span></code></pre></div></figure><p>关闭Swap分区</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭swap分区</span>~<span class="token comment"># swapoff -a</span><span class="token comment">#修改配置文件/etc/fstab，注释sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>~<span class="token comment"># sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>~<span class="token comment"># free -h</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          <span class="token number">1</span>.9Gi       565Mi       246Mi       <span class="token number">1</span>.0Mi       <span class="token number">1</span>.1Gi       <span class="token number">1</span>.2GiSwap:            0B          0B          0B</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).CentOS基础配置</title>
    <link href="/2022/08/28/Linux/CentOS/CentosBase/"/>
    <url>/2022/08/28/Linux/CentOS/CentosBase/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS7-9初始化"><a href="#1-CentOS7-9初始化" class="headerlink" title="1.CentOS7.9初始化"></a>1.CentOS7.9初始化</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment">#关闭SELiunx</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/config<span class="token comment">#安装基本软件</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> ntpdate telnet lrzsz<span class="token comment">#阿里源</span><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'/mirrors.cloud.aliyuncs.com/d'</span> <span class="token parameter variable">-e</span> <span class="token string">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo<span class="token comment">#清华源</span><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s|^mirrorlist=|#mirrorlist=|g'</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-e</span> <span class="token string">'s|^#baseurl=http://mirror.centos.org|baseurl=https://mirrors.tuna.tsinghua.edu.cn|g'</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-i.bak</span> <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-*.repo<span class="token comment">#清除缓存</span>yum clean allyum makecache<span class="token comment">#安装epel源(清华源)</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release<span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s!^metalink=!#metalink=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!^#baseurl=!baseurl=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.fedoraproject\.org/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.example/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://mirrors!https://mirrors!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-i</span> /etc/yum.repos.d/epel*.repo</code></pre></div></figure><h1 id="2-CentOS8-5初始化"><a href="#2-CentOS8-5初始化" class="headerlink" title="2.CentOS8.5初始化"></a>2.CentOS8.5初始化</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment">#关闭SELiunx</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/config<span class="token comment">#清华源</span><span class="token assign-left variable">minorver</span><span class="token operator">=</span><span class="token number">8.5</span>.2111<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">"s|^mirrorlist=|#mirrorlist=|g"</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-e</span> <span class="token string">"s|^#baseurl=http://mirror.centos.org/\<span class="token variable">$contentdir</span>/\<span class="token variable">$releasever</span>|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/<span class="token variable">$minorver</span>|g"</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-i.bak</span> <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-*.repo<span class="token comment">#清除缓存</span>yum clean allyum makecache<span class="token comment">#安装基本软件</span>dnf <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> telnet lrzsz<span class="token comment">#安装epel源(清华源)</span>yum <span class="token function">install</span> epel-release<span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s!^metalink=!#metalink=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!^#baseurl=!baseurl=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.fedoraproject\.org/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.example/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://mirrors!https://mirrors!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-i</span> /etc/yum.repos.d/epel*.repo</code></pre></div></figure><h1 id="3-CentOS-x2F-Ubuntu内核优化"><a href="#3-CentOS-x2F-Ubuntu内核优化" class="headerlink" title="3.CentOS&#x2F;Ubuntu内核优化"></a>3.CentOS&#x2F;Ubuntu内核优化</h1><h2 id="3-1-系统资源限制优化"><a href="#3-1-系统资源限制优化" class="headerlink" title="3.1 系统资源限制优化"></a>3.1 系统资源限制优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure><h2 id="3-2-内核参数优化"><a href="#3-2-内核参数优化" class="headerlink" title="3.2 内核参数优化"></a>3.2 内核参数优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).CentOS系统安装</title>
    <link href="/2022/08/28/Linux/CentOS/CentosInstall/"/>
    <url>/2022/08/28/Linux/CentOS/CentosInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS7-9安装"><a href="#1-CentOS7-9安装" class="headerlink" title="1.CentOS7.9安装"></a>1.CentOS7.9安装</h1><p>使用VMware Workstation16进行安装</p><h2 id="1-1-CentOS7-9镜像下载"><a href="#1-1-CentOS7-9镜像下载" class="headerlink" title="1.1 CentOS7.9镜像下载"></a>1.1 CentOS7.9镜像下载</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</span></span></code></pre></div></figure><h2 id="1-2-创建虚拟机环境"><a href="#1-2-创建虚拟机环境" class="headerlink" title="1.2 创建虚拟机环境"></a>1.2 创建虚拟机环境</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181007425.png" alt="image-20220807181007425"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181032110.png" alt="image-20220807181032110"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181111922.png" alt="image-20220807181111922"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181148677.png" alt="image-20220807181148677"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181229602.png" alt="image-20220807181229602"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181400328.png" alt="image-20220807181400328"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181429795.png" alt="image-20220807181429795"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181506431.png" alt="image-20220807181506431"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181543170.png" alt="image-20220807181543170"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181603290.png" alt="image-20220807181603290"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181629133.png" alt="image-20220807181629133"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181656860.png" alt="image-20220807181656860"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181736017.png" alt="image-20220807181736017"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181756158.png" alt="image-20220807181756158"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181847715.png" alt="image-20220807181847715"></p><h2 id="1-3-加电开机"><a href="#1-3-加电开机" class="headerlink" title="1.3 加电开机"></a>1.3 加电开机</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182013796.png" alt="image-20220807182013796"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182053601.png" alt="image-20220807182053601"></p><h2 id="1-4-选择语言"><a href="#1-4-选择语言" class="headerlink" title="1.4 选择语言"></a>1.4 选择语言</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182212850.png" alt="image-20220807182212850"></p><h2 id="1-5-配置网络-x2F-主机名"><a href="#1-5-配置网络-x2F-主机名" class="headerlink" title="1.5 配置网络&#x2F;主机名"></a>1.5 配置网络&#x2F;主机名</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182438882.png" alt="image-20220807182438882"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182522414.png" alt="image-20220807182522414"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182636553.png" alt="image-20220807182636553"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182702915.png" alt="image-20220807182702915"></p><h2 id="1-6-选择时区"><a href="#1-6-选择时区" class="headerlink" title="1.6 选择时区"></a>1.6 选择时区</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182746078.png" alt="image-20220807182746078"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182929454.png" alt="image-20220807182929454"></p><h2 id="1-7-添加中文语言"><a href="#1-7-添加中文语言" class="headerlink" title="1.7 添加中文语言"></a>1.7 添加中文语言</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183006735.png" alt="image-20220807183006735"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183033203.png" alt="image-20220807183033203"></p><h2 id="1-8-配置分区"><a href="#1-8-配置分区" class="headerlink" title="1.8 配置分区"></a>1.8 配置分区</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183123111.png" alt="image-20220807183123111"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183201413.png" alt="image-20220807183201413"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183318312.png" alt="image-20220807183318312"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183351990.png" alt="image-20220807183351990"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183416291.png" alt="image-20220807183416291"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183446596.png" alt="image-20220807183446596"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183510410.png" alt="image-20220807183510410"></p><h2 id="1-9-创建用户"><a href="#1-9-创建用户" class="headerlink" title="1.9 创建用户"></a>1.9 创建用户</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183610694.png" alt="image-20220807183610694"></p><p> <img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183636949.png" alt="image-20220807183636949"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183705127.png" alt="image-20220807183705127"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183728159.png" alt="image-20220807183728159"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183800510.png" alt="image-20220807183800510"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807184003894.png" alt="image-20220807184003894"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
