<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>(7).ELK-FileBeat部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk07/"/>
    <url>/2023/04/05/Log/ELK/elk07/</url>
    
    <content type="html"><![CDATA[<h1 id="1-FileBeat部署及使用"><a href="#1-FileBeat部署及使用" class="headerlink" title="1.FileBeat部署及使用"></a>1.FileBeat部署及使用</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).ELK-Logstash基于Kafka收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk06/"/>
    <url>/2023/04/05/Log/ELK/elk06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash基于Kafka收集日志"><a href="#1-Logstash基于Kafka收集日志" class="headerlink" title="1.Logstash基于Kafka收集日志"></a>1.Logstash基于Kafka收集日志</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).ELK-Logstash基于Redis收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk05/"/>
    <url>/2023/04/05/Log/ELK/elk05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash基于Redis收集日志"><a href="#1-Logstash基于Redis收集日志" class="headerlink" title="1.Logstash基于Redis收集日志"></a>1.Logstash基于Redis收集日志</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).ELK-基于Logstash收集日志</title>
    <link href="/2023/04/05/Log/ELK/elk04/"/>
    <url>/2023/04/05/Log/ELK/elk04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于Logstash收集日志"><a href="#1-基于Logstash收集日志" class="headerlink" title="1.基于Logstash收集日志"></a>1.基于Logstash收集日志</h1><h2 id="1-1-Logstash收集系统日志"><a href="#1-1-Logstash收集系统日志" class="headerlink" title="1.1 Logstash收集系统日志"></a>1.1 Logstash收集系统日志</h2><h2 id="1-2-Logstash收集Tomcat日志"><a href="#1-2-Logstash收集Tomcat日志" class="headerlink" title="1.2 Logstash收集Tomcat日志"></a>1.2 Logstash收集Tomcat日志</h2><h2 id="1-3-Logstash收集Nginx日志"><a href="#1-3-Logstash收集Nginx日志" class="headerlink" title="1.3 Logstash收集Nginx日志"></a>1.3 Logstash收集Nginx日志</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).ELK-Kibana部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk03/"/>
    <url>/2023/04/05/Log/ELK/elk03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Kibana部署及使用"><a href="#1-Kibana部署及使用" class="headerlink" title="1.Kibana部署及使用"></a>1.Kibana部署及使用</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).ELK-Logstash部署及使用</title>
    <link href="/2023/04/05/Log/ELK/elk02/"/>
    <url>/2023/04/05/Log/ELK/elk02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Logstash部署及使用"><a href="#1-Logstash部署及使用" class="headerlink" title="1.Logstash部署及使用"></a>1.Logstash部署及使用</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).ELK-Elasticsearch简介及集群部署</title>
    <link href="/2023/03/26/Log/ELK/elk01/"/>
    <url>/2023/03/26/Log/ELK/elk01/</url>
    
    <content type="html"><![CDATA[<p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>logstash1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>redis</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Redis 6.2.9</td><td></td></tr><tr><td>kafka1</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>logstash2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Logstash 7.12.1</td><td></td></tr><tr><td>web1</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash | FileBeat</td><td></td></tr><tr><td>web2</td><td>192.168.1.42</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72 &amp; Nginx 1.22.1 &amp; Logstash | FileBeat</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406194555381.png" alt="image-20230406194555381"> </p><h1 id="1-Elasticsearch简介及安装"><a href="#1-Elasticsearch简介及安装" class="headerlink" title="1.Elasticsearch简介及安装"></a>1.Elasticsearch简介及安装</h1><h2 id="1-1-Elasticsearch简介"><a href="#1-1-Elasticsearch简介" class="headerlink" title="1.1 Elasticsearch简介"></a>1.1 Elasticsearch简介</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方介绍</span>https://www.elastic.co/cn/what-is/elk-stack</code></pre></div></figure><p>ELK，作为大数据时代的宠儿，是日志分析界中的”扛把子”，在实际应用场景中，ELK起到了日志收集、日志归档、日志存储、日志分析的作用。</p><p>ELK实际上是一整套的解决方案，由三个开源软件组成：Elasticsearch , Logstash, Kibana。</p><p>Elasticsearch是实时全文搜索和分析引擎，主要负责日志搜索、分析。</p><p>Logstash是一个对日志进行搜集、过滤的工具。</p><p>Kibana可以为 Logstash 和 ElasticSearch 提供web前端显示界面，让日志分析变得方便明了。</p><h2 id="1-2-安装配置Haproxy"><a href="#1-2-安装配置Haproxy" class="headerlink" title="1.2 安装配置Haproxy"></a>1.2 安装配置Haproxy</h2><p><strong>主机ha1【192.168.1.30】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha1:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin  listen es_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9200  mode tcp  log global  server es1 <span class="token number">192.168</span>.1.32:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server es2 <span class="token number">192.168</span>.1.33:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server es3 <span class="token number">192.168</span>.1.34:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha1:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha1:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha1:~<span class="token comment"># systemctl start keepalived</span>root@ha1:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><p><strong>主机ha2【192.168.1.31】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha2:~<span class="token comment"># apt update &amp;&amp; apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin  listen es_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9200  mode tcp  log global  server es1 <span class="token number">192.168</span>.1.32:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server es2 <span class="token number">192.168</span>.1.33:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server es3 <span class="token number">192.168</span>.1.34:9200 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha2:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha2:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha2:~<span class="token comment"># systemctl start keepalived</span>root@ha2:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><h2 id="1-3-Elasticsearch集群部署"><a href="#1-3-Elasticsearch集群部署" class="headerlink" title="1.3 Elasticsearch集群部署"></a>1.3 Elasticsearch集群部署</h2><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>es1</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1 &amp; Kibana 7.12.1 &amp; Nginx 1.22.1</td><td></td></tr><tr><td>es2</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr><tr><td>es3</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Elasticsearch 7.12.1</td><td></td></tr></tbody></table><p><strong>部署拓扑图：</strong></p><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406210653759.png" alt="image-20230406210653759"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址：</span>https://github.com/elastic/elasticsearch<span class="token comment">#Elasticsearch服务器配置</span>万兆 PCI-E扩展网口<span class="token number">8</span>块 600G 15k Raid1032G Memory</code></pre></div></figure><h3 id="1-3-1-环境初始化"><a href="#1-3-1-环境初始化" class="headerlink" title="1.3.1 环境初始化"></a>1.3.1 环境初始化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名配置</span>hostnamectl set-hostname es1.chsblogs.comhostnamectl set-hostname es2.chsblogs.comhostnamectl set-hostname es3.chsblogs.com<span class="token comment">#2.三台主机上添加一块单独的数据磁盘为100G并格式化挂载到/data</span>root@es1:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es1:~<span class="token comment"># mkdir /data</span>root@es1:~<span class="token comment"># blkid /dev/sdb </span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"28bfab7d-5443-4447-b78b-e0f6a5486647"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es1:~<span class="token comment"># echo 'UUID="28bfab7d-5443-4447-b78b-e0f6a5486647" /data xfs defaults 0 0' >> /etc/fstab</span>root@es1:~<span class="token comment"># reboot</span>root@es2:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es2:~<span class="token comment"># mkdir /data</span>root@es2:~<span class="token comment"># blkid /dev/sdb</span>root@es2:~<span class="token comment"># blkid /dev/sdb </span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"413a0cca-e9a3-4165-8607-76713a95939f"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es2:~<span class="token comment"># echo 'UUID="413a0cca-e9a3-4165-8607-76713a95939f" /data xfs defaults 0 0' >> /etc/fstab</span>root@es2:~<span class="token comment"># reboot</span>root@es3:~<span class="token comment"># mkfs.xfs /dev/sdb</span>root@es3:~<span class="token comment"># mkdir /data</span>root@es3:~<span class="token comment"># blkid /dev/sdb</span>root@es3:~<span class="token comment"># blkid /dev/sdb</span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"26ccdb0b-ae65-45a1-9e3b-eb89c471e480"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>root@es3:~<span class="token comment"># echo 'UUID="26ccdb0b-ae65-45a1-9e3b-eb89c471e480" /data xfs defaults 0 0' >> /etc/fstab</span>root@es3:~<span class="token comment"># reboot</span></code></pre></div></figure><h3 id="1-3-2-安装Elasticsearch集群"><a href="#1-3-2-安装Elasticsearch集群" class="headerlink" title="1.3.2 安装Elasticsearch集群"></a>1.3.2 安装Elasticsearch集群</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@es1:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.debroot@es2:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.debroot@es3:~<span class="token comment"># ll elasticsearch-7.12.1-amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">325583750</span> Apr  <span class="token number">6</span> <span class="token number">20</span>:29 elasticsearch-7.12.1-amd64.deb<span class="token comment">#2.安装Elasticsearch</span>root@es1:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span>root@es2:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span>root@es3:~<span class="token comment"># dpkg -i elasticsearch-7.12.1-amd64.deb</span><span class="token comment">#3.更改Elasticsearch配置文件，官方文档内存最大不超过32G</span>root@es1:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-1path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.32http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span>root@es2:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-2path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.33http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span><span class="token comment">#bootstrap.memory_lock: true #如果启动这个参数需要启动文件中/usr/lib/systemd/system/elasticsearch.service添加LimitMEMLOCK=infinity，无限制使用内存</span>root@es3:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>cluster.name: chsblogs-cluster1node.name: node-3path.data: /data/elasticsearch/esdatapath.logs: /data/elasticsearch/eslogsnetwork.host: <span class="token number">192.168</span>.1.34http.port: <span class="token number">9200</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"192.168.1.32"</span>,<span class="token string">"192.168.1.33"</span>,<span class="token string">"192.168.1.34"</span><span class="token punctuation">]</span>action.destructive_requires_name: <span class="token boolean">true</span><span class="token comment">#4.启动Elasticsearch</span>root@es1:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es2:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es3:~<span class="token comment"># chown elasticsearch.elasticsearch /data -R</span>root@es1:~<span class="token comment"># systemctl start elasticsearch</span>root@es1:~<span class="token comment"># systemctl enable elasticsearch</span>root@es2:~<span class="token comment"># systemctl start elasticsearch</span>root@es2:~<span class="token comment"># systemctl enable elasticsearch</span>root@es3:~<span class="token comment"># systemctl start elasticsearch</span>root@es3:~<span class="token comment"># systemctl enable elasticsearch</span></code></pre></div></figure><h3 id="1-3-3-安装head插件"><a href="#1-3-3-安装head插件" class="headerlink" title="1.3.3 安装head插件"></a>1.3.3 安装head插件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址</span>https://github.com/mobz/elasticsearch-head<span class="token comment">#1.安装head插件</span>root@es1:~<span class="token comment"># apt update &amp;&amp; apt install npm</span>root@es1:~<span class="token comment"># ls</span>elasticsearch-head-5.0.0.tar.gzroot@es1:~<span class="token comment"># tar -xvf elasticsearch-head-5.0.0.tar.gz</span>root@es1:~<span class="token comment"># cd elasticsearch-head-5.0.0/</span>root@es1:~/elasticsearch-head-5.0.0<span class="token comment"># npm install</span>root@es1:~/elasticsearch-head-5.0.0<span class="token comment"># npm run start</span><span class="token comment">#2.修改elasticsearch服务配置文件</span>root@es1:~<span class="token comment"># vim /etc/elasticsearch/elasticsearch.yml</span>http.cors.enabled: <span class="token boolean">true</span>     <span class="token comment">#开启支持跨域访问</span>http.cors.allow-origin: <span class="token string">"*"</span> <span class="token comment">#指定允许访问范围</span>root@es1:~<span class="token comment"># systemctl restart elasticsearch</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker启动head插件</span><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token comment"># step 2: 安装GPG证书</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># Step 3: 写入软件源信息</span><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-cesystemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9100</span>:9100 mobz/elasticsearch-head:5<span class="token comment">#访问测试,</span>http://192.168.1.33:9100/集群状态：    绿色<span class="token punctuation">(</span>green）：表示集群一切工作正常，包括master节点和node节点都在线，主分片和副本分片丢失。    黄色（yellow）：警告级别，由于主机宕机引起的副本分片丢失，但是还没有丢失数据。    红色（red）：严重级别，由于主机宕机引起的主分片丢失，已经丢失部分数据。11</code></pre></div></figure><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406215428017.png" alt="image-20230406215428017"> </p><h3 id="1-3-4-安装cerebro插件"><a href="#1-3-4-安装cerebro插件" class="headerlink" title="1.3.4 安装cerebro插件"></a>1.3.4 安装cerebro插件</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github地址</span>https://github.com/lmenezes/cerebro<span class="token comment">#1.安装cerebro插件</span>root@ha1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-11-jdk</span>root@ha1:~<span class="token comment"># ll cerebro-0.9.4.zip </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">57251010</span> Apr  <span class="token number">6</span> <span class="token number">14</span>:21 cerebro-0.9.4.ziproot@ha1:~<span class="token comment"># mkdir /apps</span>root@ha1:~<span class="token comment"># mv cerebro-0.9.4.zip /apps/</span>root@ha1:~<span class="token comment"># cd /apps/</span>root@ha1:/apps<span class="token comment"># unzip cerebro-0.9.4.zip</span>root@ha1:/apps<span class="token comment"># ln -sv cerebro-0.9.4 cerebro</span>root@ha1:/apps<span class="token comment"># cd cerebro</span>root@ha1:/apps/cerebro<span class="token comment"># vim conf/application.conf</span>hosts <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">"http://192.168.1.33:9200"</span>    name <span class="token operator">=</span> <span class="token string">"chsblogs-cluster1"</span>  <span class="token comment">#  headers-whitelist = [ "x-proxy-user", "x-proxy-roles", "X-Forwarded-For" ]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment"># Example of host with authentication</span>  <span class="token comment">#&#123;</span>  <span class="token comment">#  host = "http://some-authenticated-host:9200"</span>  <span class="token comment">#  name = "Secured Cluster"</span>  <span class="token comment">#  auth = &#123;</span>  <span class="token comment">#    username = "username"</span>  <span class="token comment">#    password = "secret-password"</span>  <span class="token comment">#  &#125;</span>  <span class="token comment">#&#125;</span><span class="token punctuation">]</span>root@ha1:/apps/cerebro<span class="token comment"># ./bin/cerebro</span><span class="token comment">#2.访问测试</span>http://192.168.1.30:9000/</code></pre></div></figure><p><img src="/2023/03/26/Log/ELK/elk01/image-20230406222635679.png" alt="image-20230406222635679"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Nexus简介及安装</title>
    <link href="/2023/03/25/Service/Nexus/nexus01/"/>
    <url>/2023/03/25/Service/Nexus/nexus01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Nexus简介及安装"><a href="#1-Nexus简介及安装" class="headerlink" title="1.Nexus简介及安装"></a>1.Nexus简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>nexus</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Nexus 3.49.0-02</td><td></td></tr></tbody></table><h2 id="1-1-Nexus简介"><a href="#1-1-Nexus简介" class="headerlink" title="1.1 Nexus简介"></a>1.1 Nexus简介</h2><p>Nexus是Sonatype公司发布的一款仓库（Repository）管理软件，常用来搭建Maven私服，所以也有人将Nexus称为“Maven仓库管理器”。</p><h2 id="1-2-Nexus安装"><a href="#1-2-Nexus安装" class="headerlink" title="1.2 Nexus安装"></a>1.2 Nexus安装</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Maven官方仓库</span>https://repo.maven.apache.org/maven2/<span class="token comment">#官方地址</span>https://help.sonatype.com/repomanager3/product-information/download<span class="token comment">#Nexus服务器配置建议</span>16C、32G</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.服务器优化</span>root@nexus:~<span class="token comment"># vim /etc/security/limits.conf</span>root - nofile <span class="token number">65536</span><span class="token comment">#2.安装JDK</span>root@nexus:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#3.安装nexus</span>root@nexus:~<span class="token comment"># mkdir /apps</span>root@nexus:~<span class="token comment"># cd /apps/</span>root@nexus:/apps<span class="token comment"># ls</span>nexus-3.49.0-02-unix.tar.gzroot@nexus:/apps<span class="token comment"># tar -xvf nexus-3.49.0-02-unix.tar.gz </span>root@nexus:/apps<span class="token comment"># ln -sv /apps/nexus-3.49.0-02 /apps/nexus</span>root@nexus:/apps<span class="token comment"># vim /lib/systemd/system/nexus.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>nexus <span class="token function">service</span><span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65536</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/nexus/bin/nexus start<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/apps/nexus/bin/nexus stop<span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.targetroot@nexus:~<span class="token comment"># systemctl daemon-reload</span>root@nexus:~<span class="token comment"># systemctl start nexus</span><span class="token comment">#登录测试</span>http://192.168.1.35:8081/</code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190256985.png" alt="image-20230326190256985"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190412108.png" alt="image-20230326190412108"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190515372.png" alt="image-20230326190515372"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326190550253.png" alt="image-20230326190550253"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326192913654.png" alt="image-20230326192913654"> </p><h2 id="1-3-Nexus使用"><a href="#1-3-Nexus使用" class="headerlink" title="1.3 Nexus使用"></a>1.3 Nexus使用</h2><h3 id="1-3-1-基于Nexus构建私有yum仓库"><a href="#1-3-1-基于Nexus构建私有yum仓库" class="headerlink" title="1.3.1 基于Nexus构建私有yum仓库"></a>1.3.1 基于Nexus构建私有yum仓库</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建存储目录</span>root@nexus:~<span class="token comment"># mkdir /data/nexus/yum -p</span><span class="token comment">#2.创建存储路径</span></code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194040550.png" alt="image-20230326194040550"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.创建仓库</span></code></pre></div></figure><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194534321.png" alt="image-20230326194534321"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194557972.png" alt="image-20230326194557972"> </p><p><img src="/2023/03/25/Service/Nexus/nexus01/image-20230326194616034.png" alt="image-20230326194616034"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.配置源测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/yum.repos.d/zabbix.repo</span><span class="token punctuation">[</span>zabbix<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>zabbix<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.1.35:8081/repository/zabbix-nexus/<span class="token assign-left variable">enable</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># yum -y install zabbix-agent</span></code></pre></div></figure><h2 id="1-4-Nexus数据备份"><a href="#1-4-Nexus数据备份" class="headerlink" title="1.4 Nexus数据备份"></a>1.4 Nexus数据备份</h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Nexus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Dubbo简介及安装</title>
    <link href="/2023/03/25/Service/Dubbo/dubbo01/"/>
    <url>/2023/03/25/Service/Dubbo/dubbo01/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Kafka简介及安装</title>
    <link href="/2023/03/25/MQ/Kafka/kafka01/"/>
    <url>/2023/03/25/MQ/Kafka/kafka01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Kafka简介及安装"><a href="#1-Kafka简介及安装" class="headerlink" title="1.Kafka简介及安装"></a>1.Kafka简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>kafka1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr><tr><td>kafka3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Kafka 2.7.1 &amp; Zookeeper 3.6.4</td><td></td></tr></tbody></table><h2 id="1-1-Kafka简介"><a href="#1-1-Kafka简介" class="headerlink" title="1.1 Kafka简介"></a>1.1 Kafka简介</h2><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。</p><h2 id="1-2-Kafka集群部署"><a href="#1-2-Kafka集群部署" class="headerlink" title="1.2 Kafka集群部署"></a>1.2 Kafka集群部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方地址</span>https://kafka.apache.org/downloads<span class="token comment">#1.三台主机安装Zookeeper</span>参考链接：https://chsblogs.com/2023/03/25/Service/Zookeeper/zookeeper01/<span class="token comment">#2.三台主机安装Kafka</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/kafka/2.7.1/kafka_2.13-2.7.1.tgz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf kafka_2.13-2.7.1.tgz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/kafka_2.13-2.7.1 /apps/kafka</span>root@zookeeper1:/apps<span class="token comment"># cd kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># mkdir /data/kafka -p</span><span class="token comment">#3.三台主机配置Kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181root@zookeeper2:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181root@zookeeper3:/apps/kafka<span class="token comment"># vim config/server.properties</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.1.30:9092<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/data/kafka<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2181,192.168.1.31:2181,192.168.1.32:2181<span class="token comment">#4.三台主机启动Kafka</span>root@zookeeper1:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span>root@zookeeper2:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span>root@zookeeper3:/apps/kafka<span class="token comment"># /apps/kafka/bin/kafka-server-start.sh /apps/kafka/config/server.properties &amp;</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Zookeeper简介及安装</title>
    <link href="/2023/03/25/Service/Zookeeper/zookeeper01/"/>
    <url>/2023/03/25/Service/Zookeeper/zookeeper01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Zookeeper简介及安装"><a href="#1-Zookeeper简介及安装" class="headerlink" title="1.Zookeeper简介及安装"></a>1.Zookeeper简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>zookeeper1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr><tr><td>zookeeper2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr><tr><td>zookeeper3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Zookeeper 3.4.14</td><td></td></tr></tbody></table><h2 id="1-1-Zookeeper简介"><a href="#1-1-Zookeeper简介" class="headerlink" title="1.1 Zookeeper简介"></a>1.1 Zookeeper简介</h2><p>Zookeeper是一个分布式服务框架（即：为其它分布式程序提供服务），主要是用来解决分布式应用中遇到的一些数据管理问题如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><h2 id="1-2-Zookeeper单机部署"><a href="#1-2-Zookeeper单机部署" class="headerlink" title="1.2 Zookeeper单机部署"></a>1.2 Zookeeper单机部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方地址</span>https://archive.apache.org/dist/zookeeper/<span class="token comment">#1.配置JDK环境</span>root@zookeeper1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#2.安装Zookeeper</span>root@zookeeper1:~<span class="token comment"># mkdir /apps</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf zookeeper-3.4.14.tar.gz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/zookeeper-3.4.14 /apps/zookeeper</span>root@zookeeper1:/apps<span class="token comment"># cd zookeeper/conf/</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># cp zoo_sample.cfg zoo.cfg </span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># mkdir /data/zookeeper -p #创建数据目录</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># vim zoo.cfg</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span> <span class="token comment">#服务器与服务器之间的单次心跳检测时间间隔，单位为毫秒</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#集群中leader服务器与follower服务器初始连接心跳次数，即多少个2000毫秒。</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#leader与follower之间连接完成之后，后期检测发送和应答的心跳次数，如果该follower在设置的时间内(5*2000)不能与leader进行通信，那么此follower将被视为不可用。</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/data/zookeeper <span class="token comment">#数据目录</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span> <span class="token comment">#端口</span><span class="token comment">#3.启动Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span><span class="token comment">#4.验证Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: standalone</code></pre></div></figure><h2 id="1-3-Zookeeper集群部署"><a href="#1-3-Zookeeper集群部署" class="headerlink" title="1.3 Zookeeper集群部署"></a>1.3 Zookeeper集群部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.三台服务器安装JDK</span>root@zookeeper1:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-8-jdk</span><span class="token comment">#2.三台服务器安装配置Zookeeper</span>root@zookeeper1:~<span class="token comment"># mkdir /apps</span>root@zookeeper1:~<span class="token comment"># cd /apps/</span>root@zookeeper1:/apps<span class="token comment"># wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span>root@zookeeper1:/apps<span class="token comment"># tar -xvf zookeeper-3.4.14.tar.gz </span>root@zookeeper1:/apps<span class="token comment"># ln -sv /apps/zookeeper-3.4.14 /apps/zookeeper</span>root@zookeeper1:/apps<span class="token comment"># cd zookeeper/conf/</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># cp zoo_sample.cfg zoo.cfg </span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># mkdir /data/zookeeper -p #创建数据目录</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># vim zoo.cfg</span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/data/zookeeper<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">120</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span><span class="token number">192.168</span>.1.30:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span><span class="token number">192.168</span>.1.31:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span><span class="token number">192.168</span>.1.32:2888:3888<span class="token comment">#3.三台服务器在数据目录下创建myid</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># echo 1 > /data/zookeeper/myid</span>root@zookeeper2:/apps/zookeeper/conf<span class="token comment"># echo 2 > /data/zookeeper/myid</span>root@zookeeper3:/apps/zookeeper/conf<span class="token comment"># echo 3 > /data/zookeeper/myid</span><span class="token comment">#4.三台服务器启动Zookeeper</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span>root@zookeeper2:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span>root@zookeeper3:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh start</span><span class="token comment">#5.验证Zookeeper集群状态</span><span class="token comment">#leader服务器会开启2888和3888端口</span><span class="token comment">#follower服务器开启3888端口</span>root@zookeeper1:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: followerroot@zookeeper2:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: followerroot@zookeeper3:/apps/zookeeper/conf<span class="token comment"># /apps/zookeeper/bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /apps/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: leader</code></pre></div></figure><h2 id="1-4-Zookeeper集群选举"><a href="#1-4-Zookeeper集群选举" class="headerlink" title="1.4 Zookeeper集群选举"></a>1.4 Zookeeper集群选举</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.节点角色状态</span>LOOKING：寻找leader状态，处于该状态需要进入选举流程LEADING:领导者状态，处于该状态的节点说明是角色已经是leaderFOLLOWING:跟随着状态，表示leader已经选举出来，当前节点角色是followerOBSERVER:观察者状态，表明当前节点角色是observer<span class="token comment">#2.选举ID</span>myid：服务器的唯一标识，通过配置myid文件指定，集群中唯一。Zxid<span class="token punctuation">(</span>Zookeeper transaction <span class="token function">id</span><span class="token punctuation">)</span>：每次改变Zookeeper状态的操作都会形成一个对应的Zxid。<span class="token comment">#3.leader选举过程</span>每个zookeeper都会发出投票，由于是第一次选举leader，因此每个节点都会把自己当作leader角色进行选举，每个zookeeper的投票中都会包括自己的myid和zxid，此时zookeeper1的投票myid为1，初始zxid为一个初始化，后期会随着数据更新而自动更新、zookeeper2的投票myid为2，初始zxid为一个初始化，后期会随着数据更新而自动更新、zookeeper3的投票myid为3，初始zxid为一个初始化，后期会随着数据更新而自动更新。每个节点接收并检查对方的投票信息，比如投票时间，是否状态为LOOKING状态的投票。对比投票，优先检查zxid，如果zxid不一样则zxid大的为leader，如果zxid相同则继续比myid，myid大的为leader。成为leader的必要条件：leader要具有最高的zxid，当集群的规则是n时，集群中大多数的机器<span class="token punctuation">(</span>至少n/2+1<span class="token punctuation">)</span>得到响应并follow选出的leader。心跳机制：leader与follower利用PING来感知对方是否存活，当leader无法响应PING时，将重新发起leader选举。</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).RabbitMQ简介及安装</title>
    <link href="/2023/03/23/MQ/RabbitMQ/rabbitmq01/"/>
    <url>/2023/03/23/MQ/RabbitMQ/rabbitmq01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-RabbitMQ简介及安装"><a href="#1-RabbitMQ简介及安装" class="headerlink" title="1.RabbitMQ简介及安装"></a>1.RabbitMQ简介及安装</h1><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>备注</th></tr></thead><tbody><tr><td>rabbitmq1</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr><tr><td>rabbitmq2</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr><tr><td>rabbitmq3</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Erlang 22.2.7 &amp; RabbitMQ 3.8.8</td><td></td></tr></tbody></table><h2 id="1-1-RabbitMQ简介"><a href="#1-1-RabbitMQ简介" class="headerlink" title="1.1 RabbitMQ简介"></a>1.1 RabbitMQ简介</h2><p>MQ定义：消息队列的目的是为了实现各个APP之间的通讯，APP基于MQ实现消息的发送和接收实现应用程序之间的通讯，这样多个应用程序可以运行在不同的主机上，通过MQ就可以实现跨网络通信，因此MQ实现了业务的解耦和异步机制。</p><p>MQ场景：消息队列作为高并发系统的核心组件之一，能够帮助业务系统结构提升开发效率和系统稳定性，消息队列主要具有以下特点：</p><ul><li>削峰填谷：主要解决瞬时写压力大于应用服务能力导致消息丢失，系统奔溃等问题。</li><li>系统解耦：解决不同重要程度，不同能力级别系统之间依赖导致一死全死。</li><li>提升性能：当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统。</li><li>蓄流压测：线上有些链路不好压测，可以通过堆积一定量消息再放开来压测。</li></ul><p>RabbitMQ简介：RabbitMQ是一款使用Erlang语言开发的，实现AMQP(高级消息队列协议)的开源消息中间件。特点：</p><ul><li>消息可靠性</li><li>支持集群</li><li>多种协议</li><li>支持多种语言客户端</li><li>可视化管理界面</li><li>插件机制</li></ul><p>RabbitMQ工作原理：</p><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326112346201.png" alt="image-20230326112346201"> </p><p>生产者(Producer)：发送消息的应用。</p><p>连接(Connection)：Producer&#x2F;Consumer和Broker之间的TCP连接。</p><p>信道(Channel)：Channel是在Connection内部建立的逻辑连接，如果应用程序支持多线程，通常每个Thread创建单独的Channel进行通讯，AMQP Method包含了Channel ID帮助客户端和Message Broker识别Channel，所以Channel之间是完全隔离的。Channel作为轻量级的Connection极大减少了操作系统建TCP Connection的开销。</p><p>代理(Broker)：接收和分发消息的应用，RabbitMQ Server就是Message Broker。</p><p>虚拟主机(Virtual Host)：出于多租户和安全因素设计的，把AMQP的基本组件划分到一个虚拟的分组中，类似于网络中的Namespace概念。当多个不同的用户使用同一个RabbitMQ Server提供的服务时，可以划分出多个Virtual Host，每个用户在自己的Virtual Host创建Exchange&#x2F;Queue等。</p><p>交换机(Exchange)：Message到达Broker的第一站，根据分发规则，匹配查询表中的Routing Key，分发消息到Queue中去。</p><p>队列(Queue)：存储消息的缓存。</p><p>绑定(Binding)：队列和交换机的一个关联连接。</p><p>路由键(Routing Key)：供交换机查看并根据键来决定如何分发消息到队列的一个键，路由键可以说是消息的目的地址。</p><p>消费者(Consumer)：接收消息的应用。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官网地址</span>https://www.rabbitmq.com/<span class="token comment">#github地址</span>https://github.com/rabbitmq/rabbitmq-server/releases</code></pre></div></figure><h2 id="1-2-RabbitMQ单机部署"><a href="#1-2-RabbitMQ单机部署" class="headerlink" title="1.2 RabbitMQ单机部署"></a>1.2 RabbitMQ单机部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04安装RabbitMQ</span>https://www.rabbitmq.com/install-debian.html<span class="token comment">#1.主机名解析，在当前RabbitMQ服务器配置本地主机名解析</span>root@node30:~<span class="token comment"># hostnamectl set-hostname rabbitmq1.chsblogs.com</span>root@rabbitmq1:~<span class="token comment"># vim /etc/hosts</span><span class="token number">192.168</span>.1.30 rabbitmq1 rabbitmq1.chsblogs.com<span class="token comment">#2.安装RabbitMQ,安装相应版本的Erlang和RabbitMQ</span><span class="token comment">#https://www.rabbitmq.com/which-erlang.html</span>root@rabbitmq1:~<span class="token comment"># apt-cache madison erlang</span>    erlang <span class="token operator">|</span> <span class="token number">1</span>:22.2.7+dfsg-1 <span class="token operator">|</span> https://mirrors.aliyun.com/ubuntu focal/universe amd64 Packagesroot@rabbitmq1:~<span class="token comment"># apt update &amp;&amp; apt -y install erlang</span>root@rabbitmq1:~<span class="token comment"># cd /opt</span>root@rabbitmq1:/opt<span class="token comment"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:/opt<span class="token comment"># apt install /opt/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl enable rabbitmq-server</span><span class="token comment">#3.启用可视化插件</span><span class="token comment">#https://www.rabbitmq.com/management.html</span><span class="token comment"># 5672  消费者访问端口</span><span class="token comment"># 15672 Web管理端口</span><span class="token comment"># 25672 集群状态通信端口</span>root@rabbitmq1:~<span class="token comment"># rabbitmq-plugins enable rabbitmq_management</span><span class="token comment">#4.创建用户、设置权限，在其他机器不能使用guest账号了，因为guest账号只能在本机登录</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl add_user admin admin</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl set_user_tags admin administrator</span>root@rabbitmq1:~<span class="token comment"># systemctl restart rabbitmq-server</span><span class="token comment">#5.登录测试</span>http://192.168.1.30:15672/</code></pre></div></figure><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326135951634.png" alt="image-20230326135951634"> </p><h2 id="1-3-RabbitMQ常用命令"><a href="#1-3-RabbitMQ常用命令" class="headerlink" title="1.3 RabbitMQ常用命令"></a>1.3 RabbitMQ常用命令</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.服务的启动与关闭</span><span class="token comment">#1.1 启动</span>rabbitmqctl start_appsystemctl start rabbitmq-server<span class="token comment">#1.2 关闭</span>rabbitmqctl stop_appsystemctl stop rabbitmq-server<span class="token comment">#1.3 重启</span>systemctl restart rabbitmq-server<span class="token comment">#2.用户管理</span><span class="token comment">#2.1 创建用户</span>rabbitmqctl add_user <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span><span class="token comment">#2.2 删除用户</span>rabbitmqctl delete_user <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token comment">#2.3 修改密码</span>rabbitmqctl change_password <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>newPassword<span class="token punctuation">&#125;</span><span class="token comment">#2.4 用户列表</span>rabbitmqctl  list_users<span class="token comment">#2.5 设置角色 tag可选administrator monitoring policymaker management</span>rabbitmqctl set_user_tags <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>tag <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token comment">#3.插件管理</span><span class="token comment">#3.1 开启某个插件</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token punctuation">&#123;</span>pluginName<span class="token punctuation">&#125;</span><span class="token comment">#3.2 关闭某个插件</span>rabbitmq-plugins disable <span class="token punctuation">&#123;</span>pluginName<span class="token punctuation">&#125;</span><span class="token comment">#4.权限管理</span><span class="token comment">#4.1 设置权限</span><span class="token comment">#Vhostpath：Vhost路径</span><span class="token comment">#user：用户名</span><span class="token comment">#Conf：一个正则表达式match哪些配置资源能够被该用户访问</span><span class="token comment">#Write：一个正则表达式match哪些配置资源能够被该用户读</span><span class="token comment">#Read：一个正则表达式match哪些配置资源能够被该用户访问</span>set_permissions <span class="token punctuation">[</span>-p vhostpath<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>conf<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>write<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>read<span class="token punctuation">&#125;</span><span class="token comment">#5.策略</span><span class="token comment">#5.1 查看当前策略</span>rabbitmqctl list_policies<span class="token comment">#5.2 添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hei'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> <span class="token comment">#5.3 删除策略</span>rabbitmqctl clear_policy ha-all</code></pre></div></figure><h2 id="1-4-RabbitMQ集群部署"><a href="#1-4-RabbitMQ集群部署" class="headerlink" title="1.4 RabbitMQ集群部署"></a>1.4 RabbitMQ集群部署</h2><h3 id="1-4-1-RabbitMQ集群方式"><a href="#1-4-1-RabbitMQ集群方式" class="headerlink" title="1.4.1 RabbitMQ集群方式"></a>1.4.1 RabbitMQ集群方式</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RabbitMQ集群分为两种方式：</span>普通模式：RabbitMQ集群默认模式。以两个节点（rabbitmq1、rabbitmq2）为例，对于Queue来说，消息实体只存在于其中一个节点rabbitmq1（或者 rabbitmq2），rabbitmq1和rabbitmq2两个节点仅有相同的元数据，即队列的结构。当消息进入rabbitmq1的Queue后，Consumer从rabbitmq2 消费时，RabbitMQ会临时在 rabbitmq1、rabbitmq2间进行消息传输，把A中的消息实体取出并经过B发送给Consumer。Consumer可以连接每一个节点，从中取消息，该模式存在一个问题就是当rabbitmq1节点故障后，rabbitmq2节点无法取到rabbitmq1节点中还未消费的消息实体。镜像模式：把需要的队列做成镜像队列，存在与多个节点属于RabbitMQ的HA方案。该模式解决了普通模式中的问题，其实质和普通模式不同之处在于，消息实体会主动在镜像节点间同步，而不是在Consumer取数据时临时拉取。该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉。所以在对可靠性要求较高的场合中适用。一个队列想做成镜像队列，需要先设置Policy，然后客户端创建队列的时候，RabbitMQ集群根据<span class="token string">"队列名称"</span>自动设置是普通集群模式或镜像队列。<span class="token comment">#RabbitMQ集群中有两种节点类型</span>内存节点磁盘节点</code></pre></div></figure><h3 id="1-4-2-RabbitMQ集群部署"><a href="#1-4-2-RabbitMQ集群部署" class="headerlink" title="1.4.2 RabbitMQ集群部署"></a>1.4.2 RabbitMQ集群部署</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.主机名解析配置，三台RabbitMQ服务器配置本地主机名解析</span><span class="token function">vim</span> /etc/hosts<span class="token number">192.168</span>.1.30 rabbitmq1 rabbitmq1.chsblogs.com<span class="token number">192.168</span>.1.31 rabbitmq2 rabbitmq2.chsblogs.com<span class="token number">192.168</span>.1.32 rabbitmq3 rabbitmq3.chsblogs.com<span class="token comment">#2.三台服务器安装RabbitMQ</span>root@rabbitmq1:~<span class="token comment"># apt update &amp;&amp; apt -y install erlang</span>root@rabbitmq1:~<span class="token comment"># cd /opt</span>root@rabbitmq1:/opt<span class="token comment"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:/opt<span class="token comment"># apt install /opt/rabbitmq-server_3.8.8-1_all.deb</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl enable rabbitmq-server</span><span class="token comment">#3.同步Cookie文件</span><span class="token comment">#将rabbitmq1机器的.erlang.cookie文件复制到rabbitmq2和rabbitmq3机器（此文件在rabbitmq服务启动时自动生成），因为节点之间需要通过此文件来判断是否允许交流（判断是否属于集群内部节点），如果三台机器的此文件内容不一致则集群无法启动成功。</span>root@rabbitmq1:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl stop rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># scp /var/lib/rabbitmq/.erlang.cookie root@192.168.1.31:/var/lib/rabbitmq/</span>root@rabbitmq1:~<span class="token comment"># scp /var/lib/rabbitmq/.erlang.cookie root@192.168.1.32:/var/lib/rabbitmq/</span><span class="token comment">#4.启动rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl start rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl start rabbitmq-server</span><span class="token comment">#5.在从节点rabbitmq2和rabbitmq3执行加入集群命令</span><span class="token comment">#rabbitmqctl stop_app #先停止服务（注：这里的参数stop_app和stop是不一样的，stop是停掉服务，stop_app是停掉这个节点，但是并没有停止rabbitmq依赖的erlang进程</span><span class="token comment">#rabbitmqctl reset #重置状态（注：这里重置节点将会把此节点下的所有数据全部清除，包括队列、交换器、虚拟主机和用户等）</span><span class="token comment">#rabbitmqctl join_cluster rabbit@rabbitmq1 --ram #节点加入集群, 初次加入集群必须通过这种加入基准节点的方式。--ram内存节点</span><span class="token comment">#rabbitmqctl start_app</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl stop_app</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl reset</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl join_cluster rabbit@rabbitmq1</span>root@rabbitmq2:~<span class="token comment"># rabbitmqctl start_app</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl stop_app</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl reset</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl join_cluster rabbit@rabbitmq1</span>root@rabbitmq3:~<span class="token comment"># rabbitmqctl start_app</span><span class="token comment">#6.重新启动rabbitmq-server</span>root@rabbitmq1:~<span class="token comment"># systemctl restart rabbitmq-server</span>root@rabbitmq2:~<span class="token comment"># systemctl restart rabbitmq-server</span>root@rabbitmq3:~<span class="token comment"># systemctl restart rabbitmq-server</span><span class="token comment">#7.查看集群状态</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl cluster_status</span>Cluster status of <span class="token function">node</span> rabbit@rabbitmq1 <span class="token punctuation">..</span>.BasicsCluster name: rabbit@rabbitmq1Disk Nodesrabbit@rabbitmq1rabbit@rabbitmq2rabbit@rabbitmq3Running Nodesrabbit@rabbitmq1rabbit@rabbitmq2rabbit@rabbitmq3Versionsrabbit@rabbitmq1: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7rabbit@rabbitmq2: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7rabbit@rabbitmq3: RabbitMQ <span class="token number">3.8</span>.8 on Erlang <span class="token number">22.2</span>.7Maintenance statusNode: rabbit@rabbitmq1, status: not under maintenanceNode: rabbit@rabbitmq2, status: not under maintenanceNode: rabbit@rabbitmq3, status: not under maintenanceAlarms<span class="token punctuation">(</span>none<span class="token punctuation">)</span>Network Partitions<span class="token punctuation">(</span>none<span class="token punctuation">)</span>ListenersNode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APINode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq1, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq2, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APINode: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">25672</span>, protocol: clustering, purpose: inter-node and CLI tool communicationNode: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">5672</span>, protocol: amqp, purpose: AMQP <span class="token number">0</span>-9-1 and AMQP <span class="token number">1.0</span>Node: rabbit@rabbitmq3, interface: <span class="token punctuation">[</span>::<span class="token punctuation">]</span>, port: <span class="token number">15672</span>, protocol: http, purpose: HTTP APIFeature flagsFlag: drop_unroutable_metric, state: enabledFlag: empty_basic_get_metric, state: enabledFlag: implicit_default_bindings, state: enabledFlag: maintenance_mode_status, state: enabledFlag: quorum_queue, state: enabledFlag: virtual_host_metadata, state: enabled<span class="token comment">#8.将集群设置为镜像模式，只需要在一台节点执行一下命令即可</span>root@rabbitmq1:~<span class="token comment"># rabbitmqctl set_policy ha-all '^' '&#123;"ha-mode":"all"&#125;'</span>Setting policy <span class="token string">"ha-all"</span> <span class="token keyword">for</span> pattern <span class="token string">"^"</span> to <span class="token string">"&#123;"</span>ha-mode<span class="token string">":"</span>all<span class="token string">"&#125;"</span> with priority <span class="token string">"0"</span> <span class="token keyword">for</span> vhost <span class="token string">"/"</span> <span class="token punctuation">..</span>.</code></pre></div></figure><p><img src="/2023/03/23/MQ/RabbitMQ/rabbitmq01/image-20230326145942533.png" alt="image-20230326145942533"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Goの学习笔记(大纲)</title>
    <link href="/2023/03/20/StudyNotes/Go/"/>
    <url>/2023/03/20/StudyNotes/Go/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(2).Pythonの学习笔记(大纲)</title>
    <link href="/2023/03/20/StudyNotes/Python/"/>
    <url>/2023/03/20/StudyNotes/Python/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(4).CI/CD-代码部署实战</title>
    <link href="/2023/03/19/CI%E3%81%AECD/JG/jg04/"/>
    <url>/2023/03/19/CI%E3%81%AECD/JG/jg04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基于Jenkins实现灰度部署"><a href="#1-基于Jenkins实现灰度部署" class="headerlink" title="1.基于Jenkins实现灰度部署"></a>1.基于Jenkins实现灰度部署</h1><h2 id="1-1-主机清单"><a href="#1-1-主机清单" class="headerlink" title="1.1 主机清单"></a>1.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>开发人员</td><td></td></tr><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66&#x2F;67&#x2F;77</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66&#x2F;67&#x2F;77</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>sonarqube</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>SonarQube 8.9.0.43852</td><td></td></tr><tr><td>test-web1</td><td>192.168.1.39</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>test-web2</td><td>192.168.1.40</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>test-web3</td><td>192.168.1.41</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr></tbody></table><h2 id="1-2-部署拓扑图"><a href="#1-2-部署拓扑图" class="headerlink" title="1.2 部署拓扑图"></a>1.2 部署拓扑图</h2><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230324185516008.png" alt="image-20230324185516008"> </p><h2 id="1-3-GitLab创建项目"><a href="#1-3-GitLab创建项目" class="headerlink" title="1.3 GitLab创建项目"></a>1.3 GitLab创建项目</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.GitLab上创建test项目</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230324231515848.png" alt="image-20230324231515848"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.新建README.md</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230324234845880.png" alt="image-20230324234845880"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.创建develop分支</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230324235019735.png" alt="image-20230324235019735"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.开发提交v1代码至develop分支</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># mkdir code</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd code/</span><span class="token punctuation">[</span>root@client code<span class="token punctuation">]</span><span class="token comment"># git clone -b develop http://192.168.1.30/chsblogs/test.git</span>Cloning into <span class="token string">'test'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> remote: Enumerating objects: <span class="token number">3</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>root@client code<span class="token punctuation">]</span><span class="token comment"># cd test/</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim sonar-project.properties</span><span class="token assign-left variable">sonar.projectKey</span><span class="token operator">=</span>chsblogs-test-key<span class="token assign-left variable">sonar.projectName</span><span class="token operator">=</span>chsblogs-test-name<span class="token assign-left variable">sonar.projectVersion</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">sonar.sources</span><span class="token operator">=</span>./<span class="token assign-left variable">sonar.language</span><span class="token operator">=</span>py<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v1"</span><span class="token punctuation">[</span>develop a360769<span class="token punctuation">]</span> chsblogs v1 <span class="token number">2</span> files changed, <span class="token number">7</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> index.html create mode <span class="token number">100644</span> sonar-project.properties<span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Delta compression using up to <span class="token number">2</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">4</span>/4<span class="token punctuation">)</span>, <span class="token number">456</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">4</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/test/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/test.git   c7d63c7<span class="token punctuation">..</span>a360769  develop -<span class="token operator">></span> develop</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.合并分支</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325010127093.png" alt="image-20230325010127093"> </p><h2 id="1-4-Jenkins创建任务"><a href="#1-4-Jenkins创建任务" class="headerlink" title="1.4 Jenkins创建任务"></a>1.4 Jenkins创建任务</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Jenkins创建chsblogs-test任务</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325000025624.png" alt="image-20230325000025624"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.添加选项参数，是部署deploy还是回滚rollback_last_version</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325000437857.png" alt="image-20230325000437857"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.添加选项参数,分支master和develop</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325000744346.png" alt="image-20230325000744346"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.添加选项参数,获取服务器分组IP列表</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325000828345.png" alt="image-20230325000828345"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.编写shell脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/chsblogs_test.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d_%H-%M-%S<span class="token variable">`</span></span><span class="token comment">#部署还是回滚</span><span class="token assign-left variable">METHOD</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token comment">#分支master和develop</span><span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token comment">#获取服务器分组IP列表</span><span class="token assign-left variable">GROUP_LIST</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token keyword">function</span> <span class="token function-name function">IP_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP1"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产灰度服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.35"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>     <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> disable server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> disable server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP2"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产除灰度外剩余服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.36 192.168.1.37"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>     <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP3"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#生产全部服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.35 192.168.1.36 192.168.1.37"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP4"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token comment">#测试全部服务器</span>     <span class="token assign-left variable">Server_IP</span><span class="token operator">=</span><span class="token string">"192.168.1.39 192.168.1.40 192.168.1.41"</span>     <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;Server_IP&#125;</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">clone_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"即将开始clone <span class="token variable">$&#123;BRANCH&#125;</span>分支的代码"</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">test</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> clone <span class="token parameter variable">-b</span>  <span class="token variable">$&#123;BRANCH&#125;</span> git@192.168.1.30:chsblogs/test.git  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;BRANCH&#125;</span>分支代码cllone完成"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">scanner_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs/test <span class="token operator">&amp;&amp;</span> /apps/sonar-scanner/bin/sonar-scanner  <span class="token builtin class-name">echo</span> <span class="token string">"代码扫描完成,请打开sonarqube查看扫描结果"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">code_maven</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span>  <span class="token string">"/data/git/chsblogs/test &amp;&amp; mvn clean package -Dmaven.test.skip=true"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"代码编译完成"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">make_gz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> /data/git/chsblogs/test <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> code.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-czvf</span> code.tar.gz ./*  <span class="token builtin class-name">echo</span> <span class="token string">"代码打包完成"</span><span class="token punctuation">&#125;</span><span class="token function-name function">down_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">"echo "</span>disable server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 从负载均衡192.168.1.33下线成功"</span>    <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">"echo "</span>disable server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 从负载均衡192.168.1.34下线成功"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">scp_gzfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">scp</span> /data/git/chsblogs/test/code.tar.gz tomcat@<span class="token variable">$&#123;node&#125;</span>:/data/tomcat/tomcat_appdir/code-<span class="token variable">$&#123;DATE&#125;</span>.tar.gz    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"mkdir /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> &amp;&amp; tar -xvf /data/tomcat/tomcat_appdir/code-<span class="token variable">$&#123;DATE&#125;</span>.tar.gz -C /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> &amp;&amp; rm -rf  /data/tomcat/tomcat_webapps/myapp &amp;&amp; ln -sv  /data/tomcat/tomcat_webdir/code-<span class="token variable">$&#123;DATE&#125;</span> /data/tomcat/tomcat_webapps/myapp"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">stop_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span>   <span class="token string">"/etc/init.d/tomcat stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">start_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span>   <span class="token string">"/etc/init.d/tomcat start"</span>    <span class="token comment">#sleep 5</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">web_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">sleep</span> <span class="token number">10</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span>  <span class="token parameter variable">-I</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span class="token parameter variable">-o</span> /dev/null  <span class="token parameter variable">-w</span> %<span class="token punctuation">&#123;</span>http_code<span class="token punctuation">&#125;</span>  http://$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>:8080/myapp/index.html<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;NUM&#125;</span> <span class="token parameter variable">-eq</span> <span class="token number">200</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>       <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> myapp URL 测试通过,即将添加到负载"</span>       add_node <span class="token variable">$&#123;node&#125;</span>    <span class="token keyword">else</span>       <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 测试失败,请检查该服务器是否成功启动tomcat"</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">add_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">node</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;node&#125;</span>,<span class="token string">"----->"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;GROUP_LIST&#125;</span> <span class="token operator">==</span> <span class="token string">"GROUP3"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span>  server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>      <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span>  server web_port/192.168.1.35<span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>     <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;node&#125;</span> <span class="token operator">==</span> <span class="token string">"192.168.1.35"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>       <span class="token builtin class-name">echo</span> <span class="token string">"灰度部署环境服务器[192.168.1.35]部署完毕,请进行代码测试!"</span>    <span class="token keyword">else</span>      <span class="token function">ssh</span> root@192.168.1.33 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>      <span class="token function">ssh</span> root@192.168.1.34 <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">enable</span> server web_port/<span class="token variable">$&#123;node&#125;</span><span class="token string">" | socat stdio /run/haproxy/admin.sock"</span>    <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">rollback_last_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$node</span>   <span class="token assign-left variable">NOW_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span>  <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webapps/ <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">"->"</span> <span class="token string">'&#123;print $2&#125;'</span>  <span class="token operator">|</span> <span class="token function">tail</span> -n1<span class="token string">""</span><span class="token variable">`</span></span>   <span class="token assign-left variable">NOW_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $<span class="token punctuation">&#123;</span>NOW_VERSION<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>   <span class="token builtin class-name">echo</span> <span class="token variable">$NOW_VERSION</span>,<span class="token string">"NOW_VERSION"</span>    <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span>  tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>  <span class="token string">""</span><span class="token function">ls</span>  <span class="token parameter variable">-l</span>  <span class="token parameter variable">-rt</span>  /data/tomcat/tomcat_webdir/ <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-B</span> <span class="token number">1</span> $<span class="token punctuation">&#123;</span>NOW_VERSION<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $9&#125;'</span><span class="token string">""</span><span class="token variable">`</span></span>   <span class="token builtin class-name">echo</span> <span class="token variable">$NAME</span>,<span class="token string">""</span>NAME   <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf /data/tomcat/tomcat_webapps/myapp &amp;&amp; ln -sv  /data/tomcat/tomcat_webdir/<span class="token variable">$&#123;NAME&#125;</span> /data/tomcat/tomcat_webapps/myapp"</span>  <span class="token keyword">done</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">delete_history_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">node</span> <span class="token keyword">in</span> <span class="token variable">$&#123;Server_IP&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf /data/tomcat/tomcat_appdir/*"</span>    <span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>  <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span> <span class="token parameter variable">-d</span>   <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webdir/code-* <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token string">""</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> --> <span class="token variable">$&#123;NUM&#125;</span>"</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;NUM&#125;</span> <span class="token parameter variable">-gt</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ssh</span> tomcat@$<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">""</span>/bin/ls <span class="token parameter variable">-l</span> <span class="token parameter variable">-d</span>   <span class="token parameter variable">-rt</span> /data/tomcat/tomcat_webdir/code-* <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $9&#125;'</span><span class="token string">""</span><span class="token variable">`</span></span>         <span class="token function">ssh</span> tomcat@<span class="token variable">$&#123;node&#125;</span> <span class="token string">"rm -rf <span class="token variable">$&#123;NAME&#125;</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;node&#125;</span> 删除历史版本<span class="token variable">$&#123;NAME&#125;</span>成功!"</span>      <span class="token keyword">fi</span>  <span class="token keyword">done</span> <span class="token punctuation">&#125;</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>      deploy<span class="token punctuation">)</span>        IP_list<span class="token punctuation">;</span>                clone_code<span class="token punctuation">;</span>        scanner_code<span class="token punctuation">;</span>        make_gz<span class="token punctuation">;</span>        down_node<span class="token punctuation">;</span>        stop_tomcat<span class="token punctuation">;</span>        scp_gzfile<span class="token punctuation">;</span>        start_tomcat<span class="token punctuation">;</span>        web_test<span class="token punctuation">;</span>        delete_history_version<span class="token punctuation">;</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>      rollback_last_version<span class="token punctuation">)</span>        IP_list<span class="token punctuation">;</span>        down_node<span class="token punctuation">;</span>        stop_tomcat<span class="token punctuation">;</span>        rollback_last_version<span class="token punctuation">;</span>        start_tomcat<span class="token punctuation">;</span>        web_test<span class="token punctuation">;</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token punctuation">&#125;</span>main <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span>root@jenkins:~<span class="token comment"># chmod +x /data/scripts/chsblogs/chsblogs_test.sh</span>/data/scripts/chsblogs/chsblogs_test.sh <span class="token variable">$METHOD</span> <span class="token variable">$BRANCH</span> <span class="token variable">$GROUP</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325014553627.png" alt="image-20230325014553627">  </p><p> <img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325001227886.png" alt="image-20230325001227886"></p><h2 id="1-5-配置负载均衡"><a href="#1-5-配置负载均衡" class="headerlink" title="1.5 配置负载均衡"></a>1.5 配置负载均衡</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#生产环境</span>listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.35 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.36 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.37 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#测试环境</span>listen web_port_test  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.77:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.39 <span class="token number">192.168</span>.1.39:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.40 <span class="token number">192.168</span>.1.40:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.41 <span class="token number">192.168</span>.1.41:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#测试访问灰度环境</span>listen web_test  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.67:80  mode http  log global  option httplog  server <span class="token number">192.168</span>.1.35 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-6-升级测试环境"><a href="#1-6-升级测试环境" class="headerlink" title="1.6 升级测试环境"></a>1.6 升级测试环境</h2><p>将测试环境test-web1、test-web2、test-web3升级至开发分支的V1版本。</p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325005047938.png" alt="image-20230325005047938"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.77/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com V<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h2 id="1-7-生产环境灰度部署"><a href="#1-7-生产环境灰度部署" class="headerlink" title="1.7 生产环境灰度部署"></a>1.7 生产环境灰度部署</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.将192.168.1.35灰度部署</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325011336989.png" alt="image-20230325011336989"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325011756070.png" alt="image-20230325011756070"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.生产环境除灰度外(192.168.1.35)剩余服务器升级(192.168.1.36 192.168.1.37)</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325012008368.png" alt="image-20230325012008368"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325011941710.png" alt="image-20230325011941710"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.生产全部服务器升级</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325012110489.png" alt="image-20230325012110489"> </p><h2 id="1-8-部署V2版本"><a href="#1-8-部署V2版本" class="headerlink" title="1.8 部署V2版本"></a>1.8 部署V2版本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.开发人员提交V2版本</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com V<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v2"</span><span class="token punctuation">[</span>develop 32203f7<span class="token punctuation">]</span> chsblogs v2 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span class="token punctuation">[</span>root@client test<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Delta compression using up to <span class="token number">2</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">348</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/test/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/test.git   a360769<span class="token punctuation">..</span>32203f7  develop -<span class="token operator">></span> develop</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#2.将V2版本部署至测试环境</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325012652770.png" alt="image-20230325012652770"> </p><p> <img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325013141011.png" alt="image-20230325013141011"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.合并分支</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.将V2版本灰度部署</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325013824160.png" alt="image-20230325013824160"></p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325013948756.png" alt="image-20230325013948756"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#5.生产除灰度外剩余服务器部署V2版本</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325014011404.png" alt="image-20230325014011404"> </p><h2 id="1-9-回退版本"><a href="#1-9-回退版本" class="headerlink" title="1.9 回退版本"></a>1.9 回退版本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将生产环境V2版本回退至V1版本</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325014307090.png" alt="image-20230325014307090"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg04/image-20230325014459248.png" alt="image-20230325014459248"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).CI/CD-SonarQube简介及安装</title>
    <link href="/2023/03/19/CI%E3%81%AECD/JG/jg03/"/>
    <url>/2023/03/19/CI%E3%81%AECD/JG/jg03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SonarQube简介及安装"><a href="#1-SonarQube简介及安装" class="headerlink" title="1.SonarQube简介及安装"></a>1.SonarQube简介及安装</h1><p>前文已经安装完了GitLab和Jenkins，接下来就开始安装和使用SonarQube：</p><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>sonarqube</td><td>192.168.1.38</td><td>Ubuntu20.04</td><td>SonarQube 8.9.0.43852</td><td></td></tr></tbody></table><h2 id="1-1-SonarQube简介"><a href="#1-1-SonarQube简介" class="headerlink" title="1.1 SonarQube简介"></a>1.1 SonarQube简介</h2><p>SonarQube是一个用于代码质量管理的开放平台，通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，例如Jenkins等。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方网站：</span>http://www.sonarqube.org/https://docs.sonarqube.org/8.9/</code></pre></div></figure><h2 id="1-2-SonarQube安装"><a href="#1-2-SonarQube安装" class="headerlink" title="1.2 SonarQube安装"></a>1.2 SonarQube安装</h2><h3 id="1-2-1-SonarQube下载"><a href="#1-2-1-SonarQube下载" class="headerlink" title="1.2.1 SonarQube下载"></a>1.2.1 SonarQube下载</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">https://www.sonarqube.org/downloads/</code></pre></div></figure><h3 id="1-2-2-SonarQube安装"><a href="#1-2-2-SonarQube安装" class="headerlink" title="1.2.2 SonarQube安装"></a>1.2.2 SonarQube安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装jdk11</span>root@sonarqube:~<span class="token comment"># apt update &amp;&amp; apt install openjdk-11-jdk</span><span class="token comment">#2.安装PostgreSQL</span>root@sonarqube:~<span class="token comment"># apt install postgresql -y</span>root@sonarqube:~<span class="token comment"># vim /etc/postgresql/12/main/postgresql.conf</span>listen_addresses <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span>max_connections <span class="token operator">=</span> <span class="token number">1000</span>root@sonarqube:~<span class="token comment"># vim /etc/postgresql/12/main/pg_hba.conf</span><span class="token function">host</span>    all             all             <span class="token number">0.0</span>.0.0/0            md5root@sonarqube:~<span class="token comment"># systemctl restart postgresql</span>root@sonarqube:~<span class="token comment"># su - postgres</span>postgres@sonarqube:~$ psql <span class="token parameter variable">-U</span> postgrespsql <span class="token punctuation">(</span><span class="token number">12.14</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">12.14</span>-0ubuntu0.20.04.1<span class="token punctuation">))</span>Type <span class="token string">"help"</span> <span class="token keyword">for</span> help.<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment">#</span><span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># CREATE DATABASE sonar; #创建数据库</span>CREATE DATABASE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># CREATE USER sonar WITH ENCRYPTED PASSWORD '123456'; #创建用户</span>CREATE ROLE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># GRANT ALL PRIVILEGES ON DATABASE sonar TO sonar; #授权用户</span>GRANT<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># ALTER DATABASE sonar OWNER TO sonar; #执行变更</span>ALTER DATABASE<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># \q #退出</span><span class="token comment">#3.系统优化</span>root@sonarqube:~<span class="token comment"># vim /etc/sysctl.conf</span><span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">524288</span>fs.file-max<span class="token operator">=</span><span class="token number">131072</span>root@sonarqube:~<span class="token comment"># sysctl -p</span>root@sonarqube:~<span class="token comment"># vim /etc/security/limits.conf</span>sonarqube - nofile <span class="token number">100000</span>sonarqube - nproc <span class="token number">100000</span><span class="token comment">#4.创建sonarqube用户，不能用root账号启动</span>root@sonarqube:~<span class="token comment"># useradd -s /bin/bash -m sonarqube</span><span class="token comment">#5.上传安装包</span>root@sonarqube:~<span class="token comment"># mkdir /apps</span>root@sonarqube:~<span class="token comment"># cd /apps/</span>root@sonarqube:/apps<span class="token comment"># ls</span>sonarqube-8.9.0.43852.ziproot@sonarqube:/apps<span class="token comment"># chown sonarqube.sonarqube /apps/ -R</span>root@sonarqube:/apps<span class="token comment"># su - sonarqube</span>sonarqube@sonarqube:~$ <span class="token builtin class-name">cd</span> /apps/sonarqube@sonarqube:/apps$ <span class="token function">ls</span>sonarqube-8.9.0.43852.zipsonarqube@sonarqube:/apps$ <span class="token function">unzip</span> sonarqube-8.9.0.43852.zipsonarqube@sonarqube:/apps$ <span class="token function">ln</span> <span class="token parameter variable">-sv</span> sonarqube-8.9.0.43852 sonarqube<span class="token comment">#6.配置sonarqube</span>sonarqube@sonarqube:/apps$ <span class="token builtin class-name">cd</span> sonarqubesonarqube@sonarqube:/apps/sonarqube$ <span class="token function">vim</span> conf/sonar.properties<span class="token assign-left variable">sonar.jdbc.username</span><span class="token operator">=</span>sonar<span class="token assign-left variable">sonar.jdbc.password</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">sonar.jdbc.url</span><span class="token operator">=</span>jdbc:postgresql://192.168.1.38/sonar<span class="token comment">#7.启动sonarqube</span>sonarqube@sonarqube:/apps/sonarqube$ ./bin/linux-x86-64/sonar.sh start<span class="token comment">#8.访问测试</span><span class="token comment">#账号密码 admin</span>http://192.168.1.38:9000/</code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230321000302252.png" alt="image-20230321000302252"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230321000348068.png" alt="image-20230321000348068"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更改中文，可以直接去github下载，放到/apps/sonarqube/extensions/plugins目录下，重启sonarqube服务</span>https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-8.9</code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230321000517485.png" alt="image-20230321000517485"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230321001230603.png" alt="image-20230321001230603"> </p><h2 id="1-3-Jenkins部署sonar-scanner"><a href="#1-3-Jenkins部署sonar-scanner" class="headerlink" title="1.3 Jenkins部署sonar-scanner"></a>1.3 Jenkins部署sonar-scanner</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载地址</span>https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/<span class="token comment">#官方文档</span>https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@jenkins:~<span class="token comment"># mkdir /apps</span>root@jenkins:~<span class="token comment"># cd /apps/</span>root@jenkins:/apps<span class="token comment"># ls</span>sonar-scanner-cli-4.6.2.2472-linux.ziproot@jenkins:/apps<span class="token comment"># unzip sonar-scanner-cli-4.6.2.2472-linux.zip </span>root@jenkins:/apps<span class="token comment"># ln -sv /apps/sonar-scanner-4.6.2.2472-linux/ /apps/sonar-scanner</span>root@jenkins:/apps/sonar-scanner<span class="token comment"># vim conf/sonar-scanner.properties</span><span class="token assign-left variable">sonar.host.url</span><span class="token operator">=</span>http://192.168.1.38:9000<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token comment">#2.上传测试代码</span>root@jenkins:/opt<span class="token comment"># ls</span>sonar-examples-master.ziproot@jenkins:/opt<span class="token comment"># unzip sonar-examples-master.zip</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.SonarQube服务关闭Force user authentication</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230322195439103.png" alt="image-20230322195439103"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#4.测试代码扫描</span>root@jenkins:~<span class="token comment"># cd /opt/sonar-examples-master/projects/languages/python/python-sonar-runner</span>root@jenkins:/opt/sonar-examples-master/projects/languages/python/python-sonar-runner<span class="token comment"># /apps/sonar-scanner/bin/sonar-scanner</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>INFO: ------------------------------------------------------------------------INFO: EXECUTION SUCCESSINFO: ------------------------------------------------------------------------INFO: Total time: <span class="token number">30</span>.165sINFO: Final Memory: 7M/27MINFO: ------------------------------------------------------------------------</code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230322195818510.png" alt="image-20230322195818510"> </p><h3 id="1-3-1-脚本执行代码扫描"><a href="#1-3-1-脚本执行代码扫描" class="headerlink" title="1.3.1 脚本执行代码扫描"></a>1.3.1 脚本执行代码扫描</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.开发上传代码</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># ls</span>index.html  Jenkinsfile<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim sonar-project.properties</span><span class="token assign-left variable">sonar.projectKey</span><span class="token operator">=</span>chsblogs-web2-key<span class="token assign-left variable">sonar.projectName</span><span class="token operator">=</span>chsblogs-web2-name<span class="token assign-left variable">sonar.projectVersion</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">sonar.sources</span><span class="token operator">=</span>./<span class="token assign-left variable">sonar.language</span><span class="token operator">=</span>py<span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "sonar-project.properties"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span><span class="token comment">#2.新建任务</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone git@192.168.1.30:chsblogs/web2.git<span class="token builtin class-name">cd</span> /data/git/chsblogs/web2 <span class="token operator">&amp;&amp;</span> /apps/sonar-scanner/bin/sonar-scanner<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230322203027160.png" alt="image-20230322203027160"> </p><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230322203756678.png" alt="image-20230322203756678"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#3.立即构建，查看SonarQube扫描结果</span></code></pre></div></figure><p><img src="/2023/03/19/CI%E3%81%AECD/JG/jg03/image-20230322204414733.png" alt="image-20230322204414733"> </p><h3 id="1-3-2-Jenkins执行代码扫描"><a href="#1-3-2-Jenkins执行代码扫描" class="headerlink" title="1.3.2 Jenkins执行代码扫描"></a>1.3.2 Jenkins执行代码扫描</h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).CI/CD-Jenkins简介及安装</title>
    <link href="/2023/03/12/CI%E3%81%AECD/JG/jg02/"/>
    <url>/2023/03/12/CI%E3%81%AECD/JG/jg02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Jenkins简介及安装"><a href="#1-Jenkins简介及安装" class="headerlink" title="1.Jenkins简介及安装"></a>1.Jenkins简介及安装</h1><p>前文已经安装完了GitLab，接下来就开始安装和使用Jenkins：</p><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>VIP</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td><td></td></tr><tr><td>jenkins</td><td>192.168.1.31</td><td>Ubuntu20.04</td><td>Jenkins 2.277.4</td><td></td></tr><tr><td>jenkins-slave</td><td>192.168.1.32</td><td>Ubuntu20.04</td><td>Jenkins Slave 2.277.4</td><td></td></tr><tr><td>ha1</td><td>192.168.1.33</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>ha2</td><td>192.168.1.34</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td><td>192.168.1.66</td></tr><tr><td>web1</td><td>192.168.1.35</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web2</td><td>192.168.1.36</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr><tr><td>web3</td><td>192.168.1.37</td><td>Ubuntu20.04</td><td>Tomcat 9.0.72</td><td></td></tr></tbody></table><h2 id="1-1-Jenkins简介"><a href="#1-1-Jenkins简介" class="headerlink" title="1.1 Jenkins简介"></a>1.1 Jenkins简介</h2><p>Jenkins是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</p><h2 id="1-2-Jenkins之Web环境准备"><a href="#1-2-Jenkins之Web环境准备" class="headerlink" title="1.2 Jenkins之Web环境准备"></a>1.2 Jenkins之Web环境准备</h2><h3 id="1-2-1-安装配置Haproxy"><a href="#1-2-1-安装配置Haproxy" class="headerlink" title="1.2.1 安装配置Haproxy"></a>1.2.1 安装配置Haproxy</h3><p><strong>主机ha1【192.168.1.33】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha1:~<span class="token comment"># apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha1:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode http  log global  option httplog  server web1 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server web3 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha1:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha1:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha1:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha1:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived  global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha1:~<span class="token comment"># systemctl start keepalived</span>root@ha1:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><p><strong>主机ha2【192.168.1.34】安装配置Haproxy+Keepalived</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Haproxy+Keepalived</span>root@ha2:~<span class="token comment"># apt install haproxy keepalived</span><span class="token comment">#2.配置Haproxy</span>root@ha2:~<span class="token comment"># vim /etc/haproxy/haproxy.cfg </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:80  mode http  log global  option httplog  server web1 <span class="token number">192.168</span>.1.35:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.36:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>            server web3 <span class="token number">192.168</span>.1.37:8080 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>root@ha2:~<span class="token comment"># systemctl start haproxy                                                               </span>root@ha2:~<span class="token comment"># systemctl enable haproxy</span><span class="token comment">#3.配置Keepalived</span>root@ha2:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@ha2:~<span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root@ha2:~<span class="token comment"># systemctl start keepalived</span>root@ha2:~<span class="token comment"># systemctl enable keepalived</span></code></pre></div></figure><h3 id="1-2-2-安装配置Tomcat"><a href="#1-2-2-安装配置Tomcat" class="headerlink" title="1.2.2 安装配置Tomcat"></a>1.2.2 安装配置Tomcat</h3><p>三台Web服务器安装Tomcat</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装JDK</span>root@web1:~<span class="token comment"># vim install_jdk.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token punctuation">&#125;</span>install_jdkroot@web1:~<span class="token comment"># chmod +x install_jdk.sh</span>root@web1:~<span class="token comment"># sh install_jdk.sh</span>root@web2:~<span class="token comment"># . /etc/profile.d/jdk.sh </span>root@web2:~<span class="token comment"># java -version</span><span class="token comment">#2.安装Tomcat</span>root@web1:~<span class="token comment"># mkdir /apps</span>root@web1:~<span class="token comment"># cd /apps/</span>root@web1:/apps<span class="token comment"># ls</span>apache-tomcat-9.0.72.tar.gzroot@web1:/apps<span class="token comment"># tar -xvf apache-tomcat-9.0.72.tar.gz</span>root@web1:/apps<span class="token comment"># ln -sv /apps/apache-tomcat-9.0.72 /apps/tomcat</span><span class="token comment">#3.配置tomcat启动脚本</span>root@web1:/apps<span class="token comment"># vim /etc/init.d/tomcat</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">JDK_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token assign-left variable">CATALINA_HOME</span><span class="token operator">=</span>/apps/tomcat<span class="token builtin class-name">export</span> JDK_HOME CATALINA_HOME<span class="token builtin class-name">source</span> /etc/profile<span class="token comment">#PID=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;'`</span><span class="token comment">#NUM=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;' | wc -l`</span><span class="token comment">#case $1 in</span><span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"正在判断服务状态，请稍等！"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"请稍等3秒钟"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>   <span class="token keyword">if</span><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null     <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"Tomcat已经正在运行了！"</span>    <span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Tomcat没有运行，1秒后启动！"</span><span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>    <span class="token variable">$CATALINA_HOME</span>/bin/catalina.sh start   <span class="token builtin class-name">echo</span>  <span class="token string">"Tomcat 已经成功启动完成,5秒后判断是否启动成功"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"5"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"4"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span>        <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null    <span class="token keyword">then</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  tomcat <span class="token operator">|</span> <span class="token function">grep</span> jdk <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  tomcat <span class="token operator">|</span> <span class="token function">grep</span> jdk <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat 已经成功启动<span class="token variable">$&#123;NUM&#125;</span> 个Tomcat进程!,PID为<span class="token variable">$&#123;PID&#125;</span>"</span>    <span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat启动失败，请重新启动！"</span>        <span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token keyword">fi</span> <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token string">"color"</span>  <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"正在判断服务状态，请稍等3秒钟！"</span><span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null    <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat运行中，1秒后关闭！"</span><span class="token builtin class-name">echo</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span> <span class="token string">"即将关闭Tomcat服务，请稍等！"</span>         <span class="token variable">$CATALINA_HOME</span>/bin/catalina.sh stop <span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"已经执行关闭命令,正在检查关闭了多少Tomcat进程，请稍等5秒钟！"</span><span class="token function">sleep</span> <span class="token number">2</span>        <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token function">pkill</span> <span class="token function">java</span> <span class="token operator">&amp;&amp;</span> <span class="token function">pkill</span> tomcat<span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token string">"color"</span>  <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$PID</span> <span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"已成功关闭<span class="token variable">$&#123;NUM&#125;</span> 个tomcat进程"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span>  <span class="token string">"Tomcat 已经关闭完成！"</span>         <span class="token builtin class-name">echo</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span> <span class="token keyword">fi</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"Tomcat 没有运行"</span><span class="token builtin class-name">echo</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span>            <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token operator">|</span> <span class="token function">grep</span>  <span class="token parameter variable">-v</span> <span class="token function">grep</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span>            <span class="token comment">#NUM=`ps -ef | grep  -v "color"  | grep tomcat | awk '&#123;print $2&#125;' | wc -l`</span>            <span class="token builtin class-name">echo</span> <span class="token string">"关闭失败，即将强制删除tomcat进程!"</span>            <span class="token function">sleep</span> <span class="token number">2</span>            <span class="token function">pkill</span> tomcat <span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">2</span>             <span class="token keyword">if</span>  <span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN <span class="token operator">></span>/dev/null<span class="token punctuation">;</span><span class="token keyword">then</span>                <span class="token builtin class-name">echo</span> <span class="token string">"强制关闭失败，即将再次强制删除tomcat进程!"</span>                <span class="token function">pkill</span> <span class="token function">java</span><span class="token punctuation">;</span> <span class="token function">sleep</span> <span class="token number">2</span>            <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stop start  <span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span> start<span class="token punctuation">)</span> start <span class="token punctuation">;</span><span class="token punctuation">;</span> stop<span class="token punctuation">)</span> stop <span class="token punctuation">;</span><span class="token punctuation">;</span> restart<span class="token punctuation">)</span> restart <span class="token punctuation">;</span><span class="token punctuation">;</span> *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> $<span class="token string">"Usage: <span class="token variable">$0</span> &#123;start|stop|restart|status&#125;"</span> <span class="token keyword">esac</span>root@web1:/apps<span class="token comment"># chmod +x /etc/init.d/tomcat</span><span class="token comment">#4.配置tomcat目录</span>root@web1:~<span class="token comment"># groupadd -g 2023 tomcat &amp;&amp; useradd -m -g tomcat -u 2023 -s /bin/bash tomcat</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_appdir -p #保存web目录</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webdir    #保存解压后的web目录</span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webapps   #tomcat app加载目录</span>root@web1:/apps<span class="token comment"># vim /apps/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/tomcat/tomcat_webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>root@web1:/apps<span class="token comment"># mkdir /data/tomcat/tomcat_webdir/myapp #测试目录</span>root@web1:/apps<span class="token comment"># echo "web1 192.168.1.35" > /data/tomcat/tomcat_webdir/myapp/index.html</span>root@web1:/apps<span class="token comment"># ln -sv /data/tomcat/tomcat_webdir/myapp/ /data/tomcat/tomcat_webapps/</span>root@web1:/apps<span class="token comment"># chown tomcat.tomcat /apps/ /data/ -R</span>root@web1:~<span class="token comment"># su - tomcat</span>tomcat@web1:~$ /etc/init.d/tomcat start<span class="token comment">#5.访问测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web2 <span class="token number">192.168</span>.1.36<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web1 <span class="token number">192.168</span>.1.35<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span>web3 <span class="token number">192.168</span>.1.37</code></pre></div></figure><h2 id="1-3-Jenkins安装"><a href="#1-3-Jenkins安装" class="headerlink" title="1.3 Jenkins安装"></a>1.3 Jenkins安装</h2><h3 id="1-3-1-Jenkins下载"><a href="#1-3-1-Jenkins下载" class="headerlink" title="1.3.1 Jenkins下载"></a>1.3.1 Jenkins下载</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/<span class="token comment">#清华源</span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/<span class="token comment">#历史版本下载</span>https://mirrors.jenkins.io/</code></pre></div></figure><h3 id="1-3-2-Jenkins安装"><a href="#1-3-2-Jenkins安装" class="headerlink" title="1.3.2 Jenkins安装"></a>1.3.2 Jenkins安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@jenkins:~<span class="token comment"># ll jenkins_2.277.4_all.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">68308504</span> Mar <span class="token number">18</span> <span class="token number">15</span>:40 jenkins_2.277.4_all.deb<span class="token comment">#2.安装jdk</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u341-linux-x64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.0_341/ jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/usr/local/jdkexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/EOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh root@jenkins:~<span class="token comment"># ln -s /usr/local/jdk1.8.0_341/bin/java /usr/bin/java</span>root@jenkins:~<span class="token comment"># apt update &amp;&amp; apt install fontconfig daemon net-tools</span><span class="token comment">#3.安装Jenkins</span>root@jenkins:~<span class="token comment"># dpkg -i jenkins_2.277.4_all.deb</span>Selecting previously unselected package jenkins.<span class="token punctuation">(</span>Reading database <span class="token punctuation">..</span>. <span class="token number">72080</span> files and directories currently installed.<span class="token punctuation">)</span>Preparing to unpack jenkins_2.277.4_all.deb <span class="token punctuation">..</span>.Unpacking jenkins <span class="token punctuation">(</span><span class="token number">2.277</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.Setting up jenkins <span class="token punctuation">(</span><span class="token number">2.277</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.Processing triggers <span class="token keyword">for</span> systemd <span class="token punctuation">(</span><span class="token number">245.4</span>-4ubuntu3.15<span class="token punctuation">)</span> <span class="token punctuation">..</span>.</code></pre></div></figure><h3 id="1-3-3-Jenkins配置"><a href="#1-3-3-Jenkins配置" class="headerlink" title="1.3.3 Jenkins配置"></a>1.3.3 Jenkins配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.修改jenkins配置文件</span>root@node31:~<span class="token comment"># vim /etc/default/jenkins</span><span class="token assign-left variable">JENKINS_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">JENKINS_GROUP</span><span class="token operator">=</span>root<span class="token comment">#2.启动jenkins</span>root@jenkins:~<span class="token comment"># systemctl start jenkins</span><span class="token comment">#3.访问测试</span>http://192.168.1.31:8080/</code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230318155225321.png" alt="image-20230318155225321"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230318155351364.png" alt="image-20230318155351364"> </p><p>选择安装推荐的插件</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230318161128345.png" alt="image-20230318161128345"> </p><p>这里网不好的话插件可能会下载失败</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319103656662.png" alt="image-20230319103656662"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319104634975.png" alt="image-20230319104634975"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319104647558.png" alt="image-20230319104647558"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319104659568.png" alt="image-20230319104659568"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319105257151.png" alt="image-20230319105257151"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319105433190.png" alt="image-20230319105433190"> </p><h3 id="1-3-4-Jenkins相关目录"><a href="#1-3-4-Jenkins相关目录" class="headerlink" title="1.3.4 Jenkins相关目录"></a>1.3.4 Jenkins相关目录</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># cd /var/lib/jenkins/</span>root@jenkins:/var/lib/jenkins<span class="token comment"># ll</span>total <span class="token number">68</span>drwxr-xr-x <span class="token number">12</span> jenkins jenkins <span class="token number">4096</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 ./drwxr-xr-x <span class="token number">42</span> root    root    <span class="token number">4096</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 <span class="token punctuation">..</span>/-rw-r--r--  <span class="token number">1</span> root    root    <span class="token number">1597</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 config.xml-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">156</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 hudson.model.UpdateCenter.xml-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">370</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 hudson.plugins.git.GitTool.xml-rw-------  <span class="token number">1</span> jenkins jenkins <span class="token number">1712</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 identity.key.encdrwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">19</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 .java/-rw-r--r--  <span class="token number">1</span> root    root    <span class="token number">1701</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 jenkins.install.InstallUtil.installingPlugins-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">7</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 jenkins.install.InstallUtil.lastExecVersion-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">7</span> Mar <span class="token number">19</span> <span class="token number">10</span>:47 jenkins.install.UpgradeWizard.state-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">182</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 jenkins.model.JenkinsLocationConfiguration.xml-rw-r--r--  <span class="token number">1</span> jenkins jenkins  <span class="token number">171</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 jenkins.telemetry.Correlator.xmldrwxr-xr-x  <span class="token number">2</span> jenkins jenkins    <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 jobs/-rw-r--r--  <span class="token number">1</span> root    root       <span class="token number">0</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 .lastStarteddrwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">19</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 logs/-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">907</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 nodeMonitors.xmldrwxr-xr-x  <span class="token number">2</span> jenkins jenkins    <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 nodes/drwxr-xr-x <span class="token number">81</span> jenkins jenkins <span class="token number">8192</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 plugins/-rw-r--r--  <span class="token number">1</span> root    root     <span class="token number">129</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 queue.xml.bak-rw-r--r--  <span class="token number">1</span> jenkins jenkins   <span class="token number">64</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 secret.key-rw-r--r--  <span class="token number">1</span> jenkins jenkins    <span class="token number">0</span> Mar <span class="token number">19</span> <span class="token number">10</span>:30 secret.key.not-so-secretdrwx------  <span class="token number">4</span> jenkins jenkins  <span class="token number">237</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 secrets/drwxr-xr-x  <span class="token number">2</span> root    root     <span class="token number">182</span> Mar <span class="token number">19</span> <span class="token number">10</span>:50 updates/drwxr-xr-x  <span class="token number">2</span> jenkins jenkins   <span class="token number">24</span> Mar <span class="token number">19</span> <span class="token number">10</span>:31 userContent/drwxr-xr-x  <span class="token number">3</span> jenkins jenkins   <span class="token number">56</span> Mar <span class="token number">19</span> <span class="token number">10</span>:46 users/drwxr-xr-x  <span class="token number">2</span> root    root       <span class="token number">6</span> Mar <span class="token number">19</span> <span class="token number">10</span>:49 workflow-libs/</code></pre></div></figure><h3 id="1-3-5-Jenkins升级"><a href="#1-3-5-Jenkins升级" class="headerlink" title="1.3.5 Jenkins升级"></a>1.3.5 Jenkins升级</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载jenkins.war包，将/usr/share/jenkins的jenkins.war替换重启jenkins即可</span>root@jenkins:/usr/share/jenkins<span class="token comment"># pwd</span>/usr/share/jenkinsroot@jenkins:/usr/share/jenkins<span class="token comment"># ls</span>jenkins.war</code></pre></div></figure><h1 id="2-Jenkins使用"><a href="#2-Jenkins使用" class="headerlink" title="2.Jenkins使用"></a>2.Jenkins使用</h1><h2 id="2-1-Jenkins插件管理"><a href="#2-1-Jenkins插件管理" class="headerlink" title="2.1 Jenkins插件管理"></a>2.1 Jenkins插件管理</h2><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319110000497.png" alt="image-20230319110000497"> </p><p>搜索需要的插件名并安装，安装完后需重启Jenkins</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319110058812.png" alt="image-20230319110058812"> </p><h2 id="2-2-Jenkins基本Job配置"><a href="#2-2-Jenkins基本Job配置" class="headerlink" title="2.2 Jenkins基本Job配置"></a>2.2 Jenkins基本Job配置</h2><h3 id="2-2-1-配置免密认证"><a href="#2-2-1-配置免密认证" class="headerlink" title="2.2.1 配置免密认证"></a>2.2.1 配置免密认证</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.三台Tomcat配置密码</span>root@web1:~<span class="token comment"># passwd tomcat</span>New password: Retype new password: passwd: password updated successfully<span class="token comment">#2.Jenkins生成密钥</span>root@jenkins:~<span class="token comment"># ssh-keygen </span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsaYour public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pubThe key fingerprint is:SHA256:bBe7uNTkAr/Qek3RsLoyWM0oWjM+c4c+NULNGzb0Y24 root@jenkinsThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">3072</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>                 <span class="token operator">|</span><span class="token operator">|</span>        <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>      <span class="token operator">|</span><span class="token operator">|</span>       + <span class="token punctuation">..</span>+     <span class="token operator">|</span><span class="token operator">|</span>      <span class="token punctuation">..</span>* *o.    <span class="token operator">|</span><span class="token operator">|</span>     <span class="token punctuation">..</span><span class="token operator">=</span>SB+o     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">=</span> <span class="token operator">+=</span>B*E.     <span class="token operator">|</span><span class="token operator">|</span>   + *.+**+      <span class="token operator">|</span><span class="token operator">|</span>  <span class="token builtin class-name">.</span> <span class="token operator">=</span> *+++.      <span class="token operator">|</span><span class="token operator">|</span>     <span class="token operator">=</span>o*o        <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token comment">#3.分发密钥</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.35</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.36</span>root@jenkins:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.37</span><span class="token comment">#4.创建测试index.html</span>root@jenkins:~<span class="token comment"># mkdir /opt/web1</span>root@jenkins:~<span class="token comment"># vim /opt/web1/index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-2-2-创建Job"><a href="#2-2-2-创建Job" class="headerlink" title="2.2.2 创建Job"></a>2.2.2 创建Job</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319123541454.png" alt="image-20230319123541454"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319123608295.png" alt="image-20230319123608295"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319123800058.png" alt="image-20230319123800058"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /opt/web1/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319130946637.png" alt="image-20230319130946637"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319131027285.png" alt="image-20230319131027285"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319131227206.png" alt="image-20230319131227206"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h2 id="2-3-Jenkins用户管理"><a href="#2-3-Jenkins用户管理" class="headerlink" title="2.3 Jenkins用户管理"></a>2.3 Jenkins用户管理</h2><p>创建chsblogs-app1、chsblogs-app2、python-app1、python-app2任务，创建zhangsan、lisi用户，将zhangsan用户分配至chsblogs-项目，将lisi用户分配至python-项目。</p><h3 id="2-3-1-创建Job"><a href="#2-3-1-创建Job" class="headerlink" title="2.3.1 创建Job"></a>2.3.1 创建Job</h3><p>创建chsblogs-app1、chsblogs-app2、python-app1、python-app2任务</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165543113.png" alt="image-20230319165543113"> </p><h3 id="2-3-2-安装Role-based插件"><a href="#2-3-2-安装Role-based插件" class="headerlink" title="2.3.2 安装Role-based插件"></a>2.3.2 安装Role-based插件</h3><p>安装Role-based Authorization Strategy插件</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165246857.png" alt="image-20230319165246857"> </p><h3 id="2-3-4-创建用户"><a href="#2-3-4-创建用户" class="headerlink" title="2.3.4 创建用户"></a>2.3.4 创建用户</h3><p>创建zhangsan、lisi用户</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165638507.png" alt="image-20230319165638507"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165702556.png" alt="image-20230319165702556"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165747084.png" alt="image-20230319165747084"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319165829191.png" alt="image-20230319165829191"> </p><h3 id="2-3-5-创建角色"><a href="#2-3-5-创建角色" class="headerlink" title="2.3.5 创建角色"></a>2.3.5 创建角色</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319173909270.png" alt="image-20230319173909270"> </p><p>将登录用户可以做任何事改为Role-Base Strategy</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319173939602.png" alt="image-20230319173939602"> </p><p>创建角色</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319174135447.png" alt="image-20230319174135447"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319174828664.png" alt="image-20230319174828664"> </p><p>将用户和角色关联</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319175121208.png" alt="image-20230319175121208"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319175229130.png" alt="image-20230319175229130"> </p><p>zhangsan用户登录查看是否有权限：</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319175351208.png" alt="image-20230319175351208"> </p><h2 id="2-4-Jenkins邮件配置"><a href="#2-4-Jenkins邮件配置" class="headerlink" title="2.4 Jenkins邮件配置"></a>2.4 Jenkins邮件配置</h2><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319181129879.png" alt="image-20230319181129879"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319181153245.png" alt="image-20230319181153245"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319181236205.png" alt="image-20230319181236205"> </p><h2 id="2-5-Jenkins-SSH"><a href="#2-5-Jenkins-SSH" class="headerlink" title="2.5 Jenkins SSH"></a>2.5 Jenkins SSH</h2><p>基于SSH Key拉取代码</p><h3 id="2-5-1-方式一"><a href="#2-5-1-方式一" class="headerlink" title="2.5.1 方式一"></a>2.5.1 方式一</h3><h4 id="2-5-1-1-GitLab创建项目"><a href="#2-5-1-1-GitLab创建项目" class="headerlink" title="2.5.1.1 GitLab创建项目"></a>2.5.1.1 GitLab创建项目</h4><p>GitLab创建web2项目</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319185750341.png" alt="image-20230319185750341"> </p><p>提交v1代码</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web2.git</span>Cloning into <span class="token string">'web2'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> warning: You appear to have cloned an empty repository.<span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2/</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v1"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push -u origin master</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsan Password <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">238</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.30/chsblogs/web2.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> masterBranch master <span class="token builtin class-name">set</span> up to track remote branch master from origin.</code></pre></div></figure><h4 id="2-5-1-2-GitLab配置公钥"><a href="#2-5-1-2-GitLab配置公钥" class="headerlink" title="2.5.1.2 GitLab配置公钥"></a>2.5.1.2 GitLab配置公钥</h4><p>将Jenkins服务器的公钥配置至GitLab</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Jenkins服务器的公钥</span>root@jenkins:~<span class="token comment"># cat /root/.ssh/id_rsa.pub </span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7gjifemfwJG++KPvaQ0ANxIgTp+PwLZ5doKW4eBrjfSWSmoGWR297fUGz2rou5AHcOI74feF5GDX9JzS0+yXXNQglUKNSDYLmboYcmsAJJw2n8umQVVgZSwJBS4NQxUOGnOEkkRRzvH/hS3O36UibWeBawAEd42FbOxgos2XM4jvjaNKDWS0BsAHSd4dqX2u0rFWXOUTg7e2/+fv9k3FhOp456po2Pzz8aBCqCDOKRuCo7BnAdi053hMvom3PaQDjOgdrJJGqtwTSmDsK4aazJfMZlYgSryNwfbyZGAMReAza96ctwrKe4Z6syb++UGnxhBuiSr82KsZ6BmzICwLcFdJpD7G1rugslLoMw9hMm6+HO5KPcpvj0MpIUZMxT0AkkOlFa/Ewfm2OnHRW4NEICXqSSjwplLVQtDrz2noG2QCHYNtpH2nEiXMFD/n4WUCFVmHneG4BuJMn/AXPkU8wfCSIXmYoLqBu4AS+UOj7u/Wyn6sb4x4M4z1gZ1RTf4c<span class="token operator">=</span> root@jenkins</code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319190550280.png" alt="image-20230319190550280"> </p><h4 id="2-5-1-3-配置执行Job"><a href="#2-5-1-3-配置执行Job" class="headerlink" title="2.5.1.3 配置执行Job"></a>2.5.1.3 配置执行Job</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建git克隆项目目录</span>root@jenkins:~<span class="token comment"># mkdir /data/git/chsblogs -p</span><span class="token comment">#创建脚本执行目录</span>root@jenkins:~<span class="token comment"># mkdir /data/scripts/chsblogs -p</span><span class="token comment">#编写执行脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> <span class="token function">mkdir</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone git@192.168.1.30:chsblogs/web2.git<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token comment">#赋予脚本执行权限</span>root@jenkins:~<span class="token comment"># chmod +x /data/scripts/chsblogs/web2_deploy.sh</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319191606520.png" alt="image-20230319191606520"> </p><p>立即构建：</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319191750401.png" alt="image-20230319191750401"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#访问测试</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-5-2-方式二"><a href="#2-5-2-方式二" class="headerlink" title="2.5.2 方式二"></a>2.5.2 方式二</h3><p>使用Jenkins Job拉取代码</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#提交v2版本代码</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cd web2</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># ls</span>index.html<span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v2"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span><span class="token comment">#查看Jenkins私钥</span>root@jenkins:~<span class="token comment"># cat /root/.ssh/id_rsa</span>-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAu4I4n3pn8CRvvij72kNADcSIE6fj8C2eXaCluHga430lkpqBlkdve31Bs9q6LuQB3DiO+H3heRg1/Sc0tPsl1zUIJVCjUg2C5m6GHJrACScNp/LpkFVYGUsCQUuDUMVDhpzhJJEUc7x/4Utzt+lIm1ngWsABHeNhWzsYKLNlzOI742jSg1ktAbAB0neHal9rtKxVlzlE4O3tv/n7/ZNxYTqeOeqaNj88/GgQqggzikbgqOwZwHYtOd4TL6Jtz2kA4zoHaySRqrcE0pg7CuGmsyXzGZWIEq8jcH28mRgDEXgM2venLcKynuGerMm/vlBp8YQbokq/NirGegZsyAsC3BXSaQ+xta7oLJS6DMPYTJuvhzuSj3Kb49DKSFGTMU9AJJDpRWvxMH5tjpx0VuDRCAl6kko8KZS1ULQ689p6BtkAh2DbaR9pxIlzBQ/5+FlAhVZh53huAbiTJ/wFz5FPMHwkiF5mKC6gbuAEvlDo+7v1sp+rG+MeDOM9YGdUU3+HAAAFiOG/pAHhv6QBAAAAB3NzaC1yc2EAAAGBALuCOJ96Z/Akb74o+9pDQA3EiBOn4/Atnl2gpbh4GuN9JZKagZZHb3t9QbPaui7kAdw4jvh94XkYNf0nNLT7Jdc1CCVQo1INguZuhhyawAknDafy6ZBVWBlLAkFLg1DFQ4ac4SSRFHO8f+FLc7fpSJtZ4FrAAR3jYVs7GCizZcziO+No0oNZLQGwAdJ3h2pfa7SsVZc5RODt7b/5+/2TcWE6njnqmjY/PPxoEKoIM4pG4KjsGcB2LTneEy+ibc9pAOM6B2skkaq3BNKYOwrhprMl8xmViBKvI3B9vJkYAxF4DNr3py3Csp7hnqzJv75QafGEG6JKvzYqxnoGbMgLAtwV0mkPsbWu6CyUugzD2Eybr4c7ko9ym+PQykhRkzFPQCSQ6UVr8TB+bY6cdFbg0QgJepJKPCmUtVC0OvPaegbZAIdg22kfacSJcwUP+fhZQIVWYed4bgG4kyf8Bc+RTzB8JIheZiguoG7gBL5Q6Pu79bKfqxvjHgzjPWBnVFN/hwAAAAMBAAEAAAGAXAzwmTHxRo3MoZDjGuI61sdteiDIoIb0oMgVsvqbUKSGRnM9PLYy/2+dSpsNHannU+IcJdc+UkFVd8LAeDx29jBdoFv24Xgqk88cXXyG27dlV9bDXIzZJAmTwNQ+Ue+VV8c6K8ZhQPP/3204EMggUcuMfWCW68JNcAkRsiFnz24csmYqOjsUAikSq+zr+IeBi3+ywPtnWfjT55PkZjb0ySOKu6n1LL5cxRidXauLCc4Dykml1rrtNuRTjOXzfIfyBGfv9LuaMpmPBmYpo2cMnH3ySyJKO9FNxk/lKUakmjYr+SbotS+ifBph6OLlH8LvoP038e1jRl+ORcFPjsphlOKxJLheiWLB5sXghEYJ+HbBpiU3l8AI7MOhtgnt/IC24RhghljM+8c440VEw2YtUkcuG565Z4sq/zUukptQ98aRniouD9Efky40Bq5eEUvOI3FZ1MJzy1R0YTZ9CL38BsKfACj+og5AmZ0b5DeUt9csB1kJjPk0WxxGCutG0bfZAAAAwQDX/TwI7F5eYPoFD8WwiGZj+weftyjj54/Jukc0tegmoRHUbk5QOhNknz+P96fxQM9POtC3CBXMVgU+KLEcJxWLAqGCDynbtw1QC3coyRqFN9it8MZaMVlgu7GC3zWgZx7mUsFYcdAWRSDzHhx4nRu77DQ4s75H7o5k85KhPRlUPrfMCxK+LCdFZerKuF2Uc2W6IvRWHxJ8EZ5GuTPcabfxclPFClg/D532fHTKe8kkAg4qwce57+Ct8LOSm2NxqhwAAADBAPI2LAdFidQbehotfzBnNjr1GPnoAxAChdhoHQOLoNVTGqrbMZTpwJap/DNntZOHTnD3Thrc9SDW8YolEOHvmOCSbLc0By8ciTMafC3q8fKbEBk0HMljpA3hYBgVV60rhjBAPJbS9f6C8rDtEla+vKWiOrtJOu2twFKpOgwqSPQBBk33fj6SmWOzSlWXs10r3irtHf2aZ+JS4+MTXhM83Lj8FnqQH/p9FVpEyhEX9WQi2jms99kSMvrzz3y26AGCEwAAAMEAxi7YfxRkBLJFHvkVe/3ZSly0Zif3dnvf1snB+xjRRpoB+NW/LK1wdGjTGuc/WrXCylQP566MtoeB2w9pWGjdQthu6+yOhulcxjBFccCrOiknnUVT4phdKVgFftRKS/tHKx7sLEiSw2DvIy4dCDO04Y1J5CBW104xzfkykv64+F3ToIcY7Vn3OtPr3wJ5hIJEDQ62cAD7hIlThx6yc662hl/nEwyolQQPV6+ge9BVaXbgnlRVTgubOB+v6C6rsps9AAAADHJvb3RAamVua2lucwECAwQFBg<span class="token operator">==</span>-----END OPENSSH PRIVATE KEY-----</code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319192740789.png" alt="image-20230319192740789"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319192922104.png" alt="image-20230319192922104"> </p><p> <img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319193127300.png" alt="image-20230319193127300"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写执行脚本</span>root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /var/lib/jenkins/workspace/test-job1/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token comment">#立即构建Job后，测试访问</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.1.66/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>www.chsblogs.com v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h3 id="2-5-3-参数化构建"><a href="#2-5-3-参数化构建" class="headerlink" title="2.5.3 参数化构建"></a>2.5.3 参数化构建</h3><p>执行脚本时可以传递参数，拉取master分支还是develop分支</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@jenkins:~<span class="token comment"># vim /data/scripts/chsblogs/web2_deploy.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat stop"</span><span class="token builtin class-name">cd</span> <span class="token function">mkdir</span> /data/git/chsblogs <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> web2<span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token variable">$&#123;BRANCH&#125;</span> git@192.168.1.30:chsblogs/web2.git<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.35:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.36:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">scp</span> /data/git/chsblogs/index.html tomcat@192.168.1.37:/data/tomcat/tomcat_webdir/myapp/index.html<span class="token function">ssh</span> tomcat@192.168.1.35 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.36 <span class="token string">"/etc/init.d/tomcat start"</span><span class="token function">ssh</span> tomcat@192.168.1.37 <span class="token string">"/etc/init.d/tomcat start"</span></code></pre></div></figure><p> <img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319195832049.png" alt="image-20230319195832049"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319195915693.png" alt="image-20230319195915693"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319200026809.png" alt="image-20230319200026809"> </p><h2 id="2-6-Jenkins触发器"><a href="#2-6-Jenkins触发器" class="headerlink" title="2.6 Jenkins触发器"></a>2.6 Jenkins触发器</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#生成身份验证令牌</span>root@jenkins:~<span class="token comment"># echo $RANDOM |md5sum |cut -c 1-32</span>4b8b12eadfdcc25574fc18070f13685a</code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319214711213.png" alt="image-20230319214711213"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319214734466.png" alt="image-20230319214734466"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#触发执行Job</span>root@jenkins:~<span class="token comment"># curl http://192.168.1.31:8080/job/chsblogs-app1/build?token=4b8b12eadfdcc25574fc18070f13685a</span></code></pre></div></figure><p>执行chsblogs-app1后触发chsblogs-app2执行</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319215735968.png" alt="image-20230319215735968"> </p><h2 id="2-7-Jenkins分布式"><a href="#2-7-Jenkins分布式" class="headerlink" title="2.7 Jenkins分布式"></a>2.7 Jenkins分布式</h2><p>创建Jenkins-Slave1，由Jenkins-Slave1执行任务</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装JDK环境</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u341-linux-x64.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token builtin class-name">cd</span> /usr/local/<span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.0_341/ jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/usr/local/jdkexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/EOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh <span class="token comment">#创建/var/lib/jenkins目录</span>root@jenkins-slave:~<span class="token comment"># mkdir /var/lib/jenkins -p</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319221231930.png" alt="image-20230319221231930"></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319220827811.png" alt="image-20230319220827811"></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319220937051.png" alt="image-20230319220937051"></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230319221102077.png" alt="image-20230319221102077"></p><h2 id="2-8-Jenkins视图"><a href="#2-8-Jenkins视图" class="headerlink" title="2.8 Jenkins视图"></a>2.8 Jenkins视图</h2><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320215950831.png" alt="image-20230320215950831"></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320220022218.png" alt="image-20230320220022218"></p><h1 id="3-Jenkins之Pipeline"><a href="#3-Jenkins之Pipeline" class="headerlink" title="3.Jenkins之Pipeline"></a>3.Jenkins之Pipeline</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/doc/book/pipeline/</code></pre></div></figure><h2 id="3-1-Pipeline语法"><a href="#3-1-Pipeline语法" class="headerlink" title="3.1 Pipeline语法"></a>3.1 Pipeline语法</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>https://www.jenkins.io/zh/doc/book/pipeline/syntax/</code></pre></div></figure><h2 id="3-2-脚本化流水线"><a href="#3-2-脚本化流水线" class="headerlink" title="3.2 脚本化流水线"></a>3.2 脚本化流水线</h2><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320195332239.png" alt="image-20230320195332239"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以自动生成Pipeline</span>http://192.168.1.31:8080/job/test-pipeline1/pipeline-syntax/</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">&#123;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码克隆'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码打包'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'停止Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码拷贝'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码替换'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'启动Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320205024130.png" alt="image-20230320205024130"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让Jenkins节点执行任务，需配置免密钥认证</span>node<span class="token punctuation">(</span><span class="token string">'Jenkins-Slave1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span class="token comment">#jenkins-slave生成密钥</span>root@jenkins-slave:~<span class="token comment"># ssh-keygen</span><span class="token comment">#分发密钥</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.35</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.36</span>root@jenkins-slave:~<span class="token comment"># ssh-copy-id tomcat@192.168.1.37</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320210547288.png" alt="image-20230320210547288"></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#把Jenkinsfile保存至GitLab</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># vim Jenkinsfile</span>node<span class="token punctuation">(</span><span class="token string">'Jenkins-Slave1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码克隆'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码打包'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'停止Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码拷贝'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>    <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline1 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'代码替换'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>  <span class="token punctuation">&#125;</span>  stage<span class="token punctuation">(</span><span class="token string">'启动Web服务'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>    <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git commit -m "chsblogs v4 and Jenkinsfile"</span><span class="token punctuation">[</span>root@client web2<span class="token punctuation">]</span><span class="token comment"># git push</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320211711903.png" alt="image-20230320211711903"> </p><h2 id="3-3-声明式流水线"><a href="#3-3-声明式流水线" class="headerlink" title="3.3 声明式流水线"></a>3.3 声明式流水线</h2><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320213815990.png" alt="image-20230320213815990"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">pipeline <span class="token punctuation">&#123;</span>  agent <span class="token punctuation">&#123;</span> label <span class="token string">'Jenkins-Slave1'</span> <span class="token punctuation">&#125;</span>  stages<span class="token punctuation">&#123;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码克隆"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; rm -rf ./*"</span>        <span class="token function">git</span> <span class="token string">'git@192.168.1.30:chsblogs/web2.git'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码打包"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">"cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; rm -rf myapp.tar.gz &amp;&amp; tar -czvf myapp.tar.gz ./*"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"停止Web服务"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span><span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*"'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码拷贝"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.35:/data/tomcat/tomcat_appdir'</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.36:/data/tomcat/tomcat_appdir'</span>        <span class="token function">sh</span> <span class="token string">'cd /var/lib/jenkins/workspace/test-pipeline2 &amp;&amp; scp myapp.tar.gz tomcat@192.168.1.37:/data/tomcat/tomcat_appdir'</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"代码替换"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "tar -xvf /data/tomcat/tomcat_appdir/myapp.tar.gz -C /data/tomcat/tomcat_webdir/myapp/"'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    stage<span class="token punctuation">(</span><span class="token string">"启动Web服务"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      steps<span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.35 "/etc/init.d/tomcat start"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.36 "/etc/init.d/tomcat start"'</span>        <span class="token function">sh</span> <span class="token string">'ssh tomcat@192.168.1.37 "/etc/init.d/tomcat start"'</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg02/image-20230320214057798.png" alt="image-20230320214057798"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).CI/CD-GitLab简介及安装</title>
    <link href="/2023/03/12/CI%E3%81%AECD/JG/jg01/"/>
    <url>/2023/03/12/CI%E3%81%AECD/JG/jg01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-GitLab简介及安装"><a href="#1-GitLab简介及安装" class="headerlink" title="1.GitLab简介及安装"></a>1.GitLab简介及安装</h1><h2 id="1-1-GitLab简介"><a href="#1-1-GitLab简介" class="headerlink" title="1.1 GitLab简介"></a>1.1 GitLab简介</h2><p>极狐GitLab 是支持并发 DevOps 的软件开发、安全和操作的单一应用程序，使软件生命周期更快，并从根本上提高了业务速度。</p><h2 id="1-2-GitLab安装"><a href="#1-2-GitLab安装" class="headerlink" title="1.2 GitLab安装"></a>1.2 GitLab安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官网文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//docs.gitlab.cn/jh/index.html</span></span></code></pre></div></figure><p><strong>主机清单：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>gitlab</td><td>192.168.1.30</td><td>Ubuntu20.04</td><td>GitLab 13.11.3-ce</td></tr></tbody></table><h3 id="1-2-1-GitLab下载"><a href="#1-2-1-GitLab下载" class="headerlink" title="1.2.1 GitLab下载"></a>1.2.1 GitLab下载</h3><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//packages.gitlab.com/gitlab/gitlab-ce</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/focal/main/g/gitlab-ce/</span></span></code></pre></div></figure><h3 id="1-2-2-GitLab安装"><a href="#1-2-2-GitLab安装" class="headerlink" title="1.2.2 GitLab安装"></a>1.2.2 GitLab安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.上传安装包</span>root@gitlab:~<span class="token comment"># ll gitlab-ce_13.11.3-ce.0_amd64.deb </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">899088542</span> Mar <span class="token number">13</span> <span class="token number">10</span>:27 gitlab-ce_13.11.3-ce.0_amd64.deb<span class="token comment">#2.安装GitLab</span>root@gitlab:~<span class="token comment"># dpkg -i gitlab-ce_13.11.3-ce.0_amd64.deb </span></code></pre></div></figure><h3 id="1-2-3-GitLab配置"><a href="#1-2-3-GitLab配置" class="headerlink" title="1.2.3 GitLab配置"></a>1.2.3 GitLab配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.修改配置文件</span>root@gitlab:~<span class="token comment"># vim /etc/gitlab/gitlab.rb</span>external_url <span class="token string">'http://192.168.1.30'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"804214916@qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你的授权码"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'804214916@qq.com'</span>user<span class="token punctuation">[</span><span class="token string">'git_user_email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"804214916@qq.com"</span><span class="token comment">#2.初始化服务,修改完配置文件要执行此操作</span>root@gitlab:~<span class="token comment"># gitlab-ctl reconfigure</span><span class="token comment">#3.访问测试</span>http://192.168.1.30/</code></pre></div></figure><h3 id="1-2-4-GitLab相关目录"><a href="#1-2-4-GitLab相关目录" class="headerlink" title="1.2.4 GitLab相关目录"></a>1.2.4 GitLab相关目录</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/gitlab       <span class="token comment">#配置文件目录</span>/run/gitlab       <span class="token comment">#运行PID目录</span>/opt/gitlab       <span class="token comment">#安装目录</span>/var/opt/gitlab   <span class="token comment">#数据目录 </span>/var/log/gitlab   <span class="token comment">#日志目录</span></code></pre></div></figure><h3 id="1-2-5-GitLab命令"><a href="#1-2-5-GitLab命令" class="headerlink" title="1.2.5 GitLab命令"></a>1.2.5 GitLab命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">gitlab-rake           <span class="token comment">#数据备份恢复等数据操作</span>gitlab-ctl            <span class="token comment">#客户端命令行操作行</span>gitlab-ctl stop       <span class="token comment">#停止gitlab</span>gitlab-ctl start      <span class="token comment">#启动gitlab</span>gitlab-ctl restart    <span class="token comment">#重启gitlab</span>gitlab-ctl status     <span class="token comment">#查看组件运行状态 </span>gitlab-ctl <span class="token function">tail</span> nginx <span class="token comment">#查看某个组件的日志 </span></code></pre></div></figure><h2 id="1-3-GitLab使用"><a href="#1-3-GitLab使用" class="headerlink" title="1.3 GitLab使用"></a>1.3 GitLab使用</h2><h3 id="1-3-1-设置中文"><a href="#1-3-1-设置中文" class="headerlink" title="1.3.1 设置中文"></a>1.3.1 设置中文</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313214045730.png" alt="image-20230313214045730"> </p><h3 id="1-3-2-新建群组"><a href="#1-3-2-新建群组" class="headerlink" title="1.3.2 新建群组"></a>1.3.2 新建群组</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313220050696.png" alt="image-20230313220050696"> </p><h3 id="1-3-3-新建项目"><a href="#1-3-3-新建项目" class="headerlink" title="1.3.3 新建项目"></a>1.3.3 新建项目</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313220222781.png" alt="image-20230313220222781"> </p><h3 id="1-3-4-新建用户"><a href="#1-3-4-新建用户" class="headerlink" title="1.3.4 新建用户"></a>1.3.4 新建用户</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313220731502.png" alt="image-20230313220731502"> </p><h3 id="1-3-5-用户添加至群组"><a href="#1-3-5-用户添加至群组" class="headerlink" title="1.3.5 用户添加至群组"></a>1.3.5 用户添加至群组</h3><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313221401832.png" alt="image-20230313221401832"> </p><h3 id="1-3-6-上传代码"><a href="#1-3-6-上传代码" class="headerlink" title="1.3.6 上传代码"></a>1.3.6 上传代码</h3><p>zhangsan用户上传v1版本至chsblogs&#x2F;web1</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装git</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install git</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "zhangsan"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.email "zhangsan@test.com"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web1.git</span>Cloning into <span class="token string">'web1'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> warning: You appear to have cloned an empty repository.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  web1<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd web1/</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git commit -m "v1"</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> <span class="token number">6212610</span><span class="token punctuation">]</span> v1 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> index.html<span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git push -u origin master</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">212</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To http://192.168.1.30/chsblogs/web1.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> masterBranch master <span class="token builtin class-name">set</span> up to track remote branch master from origin.</code></pre></div></figure><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313222806015.png" alt="image-20230313222806015"> </p><h3 id="1-3-7-分支管理"><a href="#1-3-7-分支管理" class="headerlink" title="1.3.7 分支管理"></a>1.3.7 分支管理</h3><p><strong>新建develop分支：</strong></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313231753781.png" alt="image-20230313231753781"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313231859633.png" alt="image-20230313231859633"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313232024511.png" alt="image-20230313232024511"></p><p><strong>提交develop分支v2版本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@node10 opt<span class="token punctuation">]</span><span class="token comment"># git clone http://192.168.1.30/chsblogs/web1.git</span>Cloning into <span class="token string">'web1'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsanPassword <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> remote: Enumerating objects: <span class="token number">3</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>root@node10 opt<span class="token punctuation">]</span><span class="token comment"># cd web1/</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git checkout develop</span>Branch develop <span class="token builtin class-name">set</span> up to track remote branch develop from origin.Switched to a new branch <span class="token string">'develop'</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git branch</span>* develop  master<span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># vim index.html</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>v<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git commit -m "v2"</span><span class="token punctuation">[</span>develop 693ff34<span class="token punctuation">]</span> v2 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 web1<span class="token punctuation">]</span><span class="token comment"># git push</span>warning: push.default is <span class="token builtin class-name">unset</span><span class="token punctuation">;</span> its implicit value is changing <span class="token keyword">in</span>Git <span class="token number">2.0</span> from <span class="token string">'matching'</span> to <span class="token string">'simple'</span><span class="token builtin class-name">.</span> To squelch this messageand maintain the current behavior after the default changes, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default matchingTo squelch this message and adopt the new behavior now, use:  <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simpleSee <span class="token string">'git help config'</span> and search <span class="token keyword">for</span> <span class="token string">'push.default'</span> <span class="token keyword">for</span> further information.<span class="token punctuation">(</span>the <span class="token string">'simple'</span> mode was introduced <span class="token keyword">in</span> Git <span class="token number">1.7</span>.11. Use the similar mode<span class="token string">'current'</span> instead of <span class="token string">'simple'</span> <span class="token keyword">if</span> you sometimes use older versions of Git<span class="token punctuation">)</span>Username <span class="token keyword">for</span> <span class="token string">'http://192.168.1.30'</span><span class="token builtin class-name">:</span> zhangsan     Password <span class="token keyword">for</span> <span class="token string">'http://zhangsan@192.168.1.30'</span><span class="token builtin class-name">:</span> Counting objects: <span class="token number">5</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">248</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> develop, visit:remote:   http://192.168.1.30/chsblogs/web1/-/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>developremote: To http://192.168.1.30/chsblogs/web1.git   <span class="token number">6212610</span><span class="token punctuation">..</span>693ff34  develop -<span class="token operator">></span> develop</code></pre></div></figure><p><strong>lisi提交合并代码请求：</strong></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313233129391.png" alt="image-20230313233129391"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313233318929.png" alt="image-20230313233318929"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313233530526.png" alt="image-20230313233530526"> </p><p><strong>zhangsan合并代码：</strong></p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313233656946.png" alt="image-20230313233656946"> </p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230313233752467.png" alt="image-20230313233752467"> </p><h2 id="1-4-GitLab数据备份与恢复"><a href="#1-4-GitLab数据备份与恢复" class="headerlink" title="1.4 GitLab数据备份与恢复"></a>1.4 GitLab数据备份与恢复</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.停止GitLab数据服务</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop unicorn</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop sidekiq</span>ok: down: sidekiq: 0s, normally up<span class="token comment">#2.手动备份数据，在任意目录即可备份当前GitLab数据，备份完成后启动GitLab。</span>root@gitlab:~<span class="token comment"># gitlab-rake gitlab:backup:create</span>root@gitlab:~<span class="token comment"># gitlab-ctl start </span><span class="token comment">#3.查看要恢复的文件</span>/var/opt/gitlab/backups/        <span class="token comment">#GitLab数据备份目录，需要使用命令备份的</span>/var/opt/gitlab/nginx/conf      <span class="token comment">#nginx 配置文件</span>/etc/gitlab/gitlab.rb           <span class="token comment">#GitLab配置文件</span>/etc/gitlab/gitlab-secrets.json <span class="token comment">#key文件</span>root@gitlab:~<span class="token comment"># ll /var/opt/gitlab/backups/</span>total <span class="token number">284</span>drwx------  <span class="token number">2</span> <span class="token function">git</span>  root     <span class="token number">61</span> Mar <span class="token number">13</span> <span class="token number">23</span>:52 ./drwxr-xr-x <span class="token number">21</span> root root   <span class="token number">4096</span> Mar <span class="token number">13</span> <span class="token number">15</span>:07 <span class="token punctuation">..</span>/-rw-------  <span class="token number">1</span> <span class="token function">git</span>  <span class="token function">git</span>  <span class="token number">286720</span> Mar <span class="token number">13</span> <span class="token number">23</span>:52 1678722762_2023_03_13_13.11.3_gitlab_backup.tar<span class="token comment">#4.恢复GitLab数据服务</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop unicorn</span>root@gitlab:~<span class="token comment"># gitlab-ctl stop sidekiq</span>root@gitlab:~<span class="token comment"># gitlab-rake gitlab:backup:restore BACKUP=1678722762_2023_03_13_13.11.3</span>root@gitlab:~<span class="token comment"># gitlab-ctl start </span></code></pre></div></figure><h1 id="2-常见的代码部署方式"><a href="#2-常见的代码部署方式" class="headerlink" title="2.常见的代码部署方式"></a>2.常见的代码部署方式</h1><h2 id="2-1-蓝绿部署"><a href="#2-1-蓝绿部署" class="headerlink" title="2.1 蓝绿部署"></a>2.1 蓝绿部署</h2><p>蓝绿部署（Blue&#x2F;Green Deployment）：不停老版本代码(不影响上一个版本访问)，而是在另外一套环境部署新 版本然后进行测试，测试通过后将用户流量切到新版本。</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230314203310707.png" alt="image-20230314203310707"> </p><h2 id="2-2-金丝雀-x2F-灰度发布"><a href="#2-2-金丝雀-x2F-灰度发布" class="headerlink" title="2.2 金丝雀&#x2F;灰度发布"></a>2.2 金丝雀&#x2F;灰度发布</h2><p>金丝雀&#x2F;灰度发布：在黑与白之间，能够平滑过渡的一种发布方式。金丝雀部署也就是灰度发布的一种方式，是增量发布的一种。在原有版本可用的情况下，同时部署一个新版本应用作为「金丝雀」服务器来测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。同时运行同一个软件产品的多个版本，需要软件针对配置和完美自动化部署进行特别设计。</p><p>灰度发布中，常常按照用户设置路由权重，例如90%的用户维持使用老版本，10%的用户尝鲜新版本。不同版本应用共存，经常与A&#x2F;B测试一起使用，用于测试选择多种方案。灰度发布还应该可以动态调整不同的权重来进行新老版本的验证。</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230314203608925.png" alt="image-20230314203608925"> </p><h2 id="2-3-滚动发布"><a href="#2-3-滚动发布" class="headerlink" title="2.3 滚动发布"></a>2.3 滚动发布</h2><p>滚动发布（Rolling Update）：一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。</p><p><img src="/2023/03/12/CI%E3%81%AECD/JG/jg01/image-20230314203507713.png" alt="image-20230314203507713"> </p><h2 id="2-4-A-x2F-B测试"><a href="#2-4-A-x2F-B测试" class="headerlink" title="2.4 A&#x2F;B测试"></a>2.4 A&#x2F;B测试</h2><p>A&#x2F;B测试：A&#x2F;B 测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等等。</p><h2 id="2-5-代码部署方式对比"><a href="#2-5-代码部署方式对比" class="headerlink" title="2.5 代码部署方式对比"></a>2.5 代码部署方式对比</h2><table><thead><tr><th><strong>部署方式</strong></th><th><strong>简述</strong></th><th><strong>优势</strong></th><th><strong>劣势</strong></th></tr></thead><tbody><tr><td>蓝绿部署</td><td>停止老版本，额外搞一套新版本，等测试发现新版本OK后，将用户流量切到新版本。</td><td>1.同一时间对外服务的只有一个版本，容易定位问题；2.升级和回滚以集群为粒度，操作相对简单</td><td>需要维护两个集群，成本高</td></tr><tr><td>滚动发布</td><td>按批次停止老版本实例，启动新版本实例。</td><td>只需要维护一个集群，成本低。</td><td>1. 上线过程中，两个版本同时对外服务，不易定位问题，且容易造成数据错乱；2.升级和回滚以节点为粒度，操作相对复杂</td></tr><tr><td>金丝雀&#x2F;灰度发布</td><td>不停止老版本，额外搞一套新版本，按照用户设置路由权重，如90%的用户维持使用老版本，10%的用户尝鲜新版本</td><td>不同版本应用共存，常用于A&#x2F;B测试；新版本尝鲜体验反馈；用户体验影响小，灰度发布过程出现问题只影响少量用户</td><td>实现方案相对复杂，需要实现发布自动化</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Git常用命令</title>
    <link href="/2023/03/12/CI%E3%81%AECD/Git/git01/"/>
    <url>/2023/03/12/CI%E3%81%AECD/Git/git01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-git-config"><a href="#1-git-config" class="headerlink" title="1.git config"></a>1.git config</h1><h2 id="1-1-git-config"><a href="#1-1-git-config" class="headerlink" title="1.1 git config"></a>1.1 git config</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有的配置以及它们所在的文件</span><span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin<span class="token comment">#设置你的用户名和邮件地址</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"陈怀森"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"1285780460@qq.com"</span><span class="token comment">#查看你的用户名和邮件地址</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span></code></pre></div></figure><h2 id="1-2-获取Git仓库"><a href="#1-2-获取Git仓库" class="headerlink" title="1.2 获取Git仓库"></a>1.2 获取Git仓库</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#初始化的Git仓库</span><span class="token function">git</span> init<span class="token comment">#克隆现有的仓库</span><span class="token function">git</span> clone git@gitee.com:huaisen/test.git<span class="token comment">#检查当前文件状态</span><span class="token function">git</span> status</code></pre></div></figure><h2 id="1-3-git-add"><a href="#1-3-git-add" class="headerlink" title="1.3 git add"></a>1.3 git add</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-4-git-commit"><a href="#1-4-git-commit" class="headerlink" title="1.4 git commit"></a>1.4 git commit</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-5-git-push"><a href="#1-5-git-push" class="headerlink" title="1.5 git push"></a>1.5 git push</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#推送到远程仓库</span><span class="token function">git</span> push origin master</code></pre></div></figure><h2 id="1-6-git-pull"><a href="#1-6-git-pull" class="headerlink" title="1.6 git pull"></a>1.6 git pull</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#从远程仓库拉取</span><span class="token function">git</span> pull git@gitee.com:huaisen/test.git</code></pre></div></figure><h2 id="1-7-git-log"><a href="#1-7-git-log" class="headerlink" title="1.7 git log"></a>1.7 git log</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-8-git-reset"><a href="#1-8-git-reset" class="headerlink" title="1.8 git reset"></a>1.8 git reset</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span></code></pre></div></figure><h2 id="1-9-git-remote"><a href="#1-9-git-remote" class="headerlink" title="1.9 git remote"></a>1.9 git remote</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@gitee.com:huaisen/chs.git<span class="token comment">#移除远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> origin</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Memcached简介及安装</title>
    <link href="/2023/03/06/NoSQL/Memcached/memcached01/"/>
    <url>/2023/03/06/NoSQL/Memcached/memcached01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Memcached"><a href="#1-Memcached" class="headerlink" title="1.Memcached"></a>1.Memcached</h1><h2 id="1-1-Memcached简介"><a href="#1-1-Memcached简介" class="headerlink" title="1.1 Memcached简介"></a>1.1 Memcached简介</h2><p>Memcached 官网：<a href="http://memcached.org/">http://memcached.org/</a>  </p><p>Memcached 只支持能序列化的数据类型，不支持持久化，基于Key-Value的内存缓存系统。</p><p>Memcached 虽然没有像redis所具备的数据持久化功能，比如RDB和AOF都没有，但是可以通过做集群同步的方式，让各memcached服务器的数据进行同步，从而实现数据的一致性，即保证各memcached的数据是一样的，即使有任何一台 memcached 发生故障，只要集群中有一台 memcached 可用就不会出现数据丢失，当其他memcached 重新加入到集群的时候,可以自动从有数据的memcached 当中自动获取数据并提供服务。</p><p>Memcached 借助了操作系统的 libevent 工具做高效的读写。libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能封装成统一的接口。即使对服务器的连接数增加，也能发挥高性能。memcached使用这个libevent库，因此能在Linux、BSD、Solaris等操作系统上发挥其高性能。</p><p>Memcached 支持最大的内存存储对象为1M，超过1M的数据可以使用客户端压缩或拆分报包放到多个key中，比较大的数据在进行读取的时候需要消耗的时间比较长，memcached 最适合保存用户的session实现session共享。</p><p>Memcached存储数据时, Memcached会去申请1MB的内存, 把该块内存称为一个slab, 也称为一个page。</p><p><strong>Memcached和Redis比较：</strong></p><table><thead><tr><th>比较类别</th><th>Redis</th><th>memcached</th></tr></thead><tbody><tr><td>支持的数 据结构</td><td>哈希、列表、集合、有序集合</td><td>纯kev-value</td></tr><tr><td>持久化支持</td><td>有</td><td>无</td></tr><tr><td>高可用支持</td><td>redis支持集群功能，可以实现主动复制，读写分离。 官方也提供了sentinel集群管理工具，能够实现主从 服务监控，故障自动转移，这一切，对于客户端都是 透明的，无需程序改动，也无需人工介入</td><td>需要二次开发</td></tr><tr><td>存储value 容量</td><td>最大512M</td><td>最大1M</td></tr><tr><td>内存分配</td><td>临时申请空间，可能导致碎片</td><td>预分配内存池的方式管理内 存，能够省去内存分配时间</td></tr><tr><td>虚拟内存使用</td><td>有自己的VM机制，理论上能够存储比物理内存更多 的数据，当数据超量时，会引发swap，把冷数据刷 到磁盘上</td><td>所有的数据存储在物理内存里</td></tr><tr><td>网络模型</td><td>非阻塞IO复用模型,提供一些非KV存储之外的排序， 聚合功能，在执行这些功能时，复杂的CPU计算，会 阻塞整个IO调度</td><td>非阻塞IO复用模型</td></tr><tr><td>水平扩展的支持</td><td>redis cluster 可以横向扩展</td><td>暂无</td></tr><tr><td>多线程</td><td>Redis6.0之前是只支持单线程</td><td>Memcached支持多线程,CPU 利用方面Memcache优于 Redis</td></tr><tr><td>过期策略</td><td>有专门线程，清除缓存数据</td><td>懒淘汰机制：每次往缓存放入 数据的时候，都会存一个时 间，在读取的时候要和设置的 时间做TTL比较来判断是否过 期</td></tr><tr><td>单机QPS</td><td>约10W</td><td>约60W</td></tr><tr><td>源代码可 读性</td><td>代码清爽简洁</td><td>可能是考虑了太多的扩展性， 多系统的兼容性，代码不清爽</td></tr><tr><td>适用场景</td><td>复杂数据结构、有持久化、高可用需求、value存储 内容较大</td><td>纯KV，数据量非常大，并发量 非常大的业务</td></tr></tbody></table><h2 id="1-2-Memcached工作机制"><a href="#1-2-Memcached工作机制" class="headerlink" title="1.2 Memcached工作机制"></a>1.2 Memcached工作机制</h2><ul><li>内存分配机制</li></ul><p>应用程序运行需要使用内存存储数据，但对于一个缓存系统来说，申请内存、释放内存将十分频繁，非常容易导致大量内存碎片，最后导致无连续可用内存可用。</p><p>Page：分配给Slab的内存空间，默认为1MB，分配后就得到一个Slab。Slab分配之后内存按照固定字节大小等分成chunk。 </p><p>Chunk：用于缓存记录k&#x2F;v值的内存空间。Memcached会根据数据大小选择存到哪一个chunk中，假设chunk有128bytes、64bytes等多种，数据只有100bytes存储在128bytes中，存在少许浪费。Chunk最大就是Page的大小，即一个Page中就一个Chunk。</p><p>Slab Class：Slab按照Chunk的大小分组，就组成不同的Slab Class, 第一个Chunk大小为 96B的Slab为Class1,Chunk 120B为Class 2,如果有100bytes要存，那么Memcached会选择下图中SlabClass 2 存储，因为它是120bytes的Chunk。Slab之间的差异可以使用Growth Factor 控制，默认1.25。</p><ul><li>懒过期 Lazy Expiration</li></ul><p>memcached不会监视数据是否过期，而是在取数据时才看是否过期，如果过期,把数据有效期限标识为0，并不清除该数据。以后可以覆盖该位置存储其它数据。</p><ul><li>LRU</li></ul><p>当内存不足时，memcached会使用LRU（Least Recently Used）机制来查找可用空间，分配给新记录使用。</p><ul><li>集群</li></ul><p>Memcached集群，称为基于客户端的分布式集群，即由客户端实现集群功能，即Memcached本身不支持集群。Memcached集群内部并不互相通信，一切都需要客户端连接到Memcached服务器后自行组织这些节点，并决定数据存储的节点。</p><h2 id="1-3-Memcached安装"><a href="#1-3-Memcached安装" class="headerlink" title="1.3 Memcached安装"></a>1.3 Memcached安装</h2><h3 id="1-3-1-yum安装"><a href="#1-3-1-yum安装" class="headerlink" title="1.3.1 yum安装"></a>1.3.1 yum安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install memcached</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now memcached</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/memcached</span><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"11211"</span> <span class="token comment">#监听端口</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"memcached"</span> <span class="token comment">#启用用户</span><span class="token assign-left variable">MAXCONN</span><span class="token operator">=</span><span class="token string">"1024"</span> <span class="token comment">#最大连接数</span><span class="token assign-left variable">CACHESIZE</span><span class="token operator">=</span><span class="token string">"64"</span> <span class="token comment">#最大使用内存</span><span class="token assign-left variable">OPTIONS</span><span class="token operator">=</span><span class="token string">""</span> <span class="token comment">#其他选项</span></code></pre></div></figure><h3 id="1-3-2-编译安装"><a href="#1-3-2-编译安装" class="headerlink" title="1.3.2 编译安装"></a>1.3.2 编译安装</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc libevent-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://memcached.org/files/memcached-1.6.6.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf memcached-1.6.6.tar.gz </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd memcached-1.6.6</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/apps/memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/memcached/bin:$PATH' > /etc/profile.d/memcached.sh</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/memcached.sh</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># vim cat /etc/sysconfig/memcached</span><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"11211"</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"memcached"</span><span class="token assign-left variable">MAXCONN</span><span class="token operator">=</span><span class="token string">"1024"</span><span class="token assign-left variable">CACHESIZE</span><span class="token operator">=</span><span class="token string">"64"</span><span class="token assign-left variable">OPTIONS</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/memcached.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>memcached daemon<span class="token assign-left variable">Before</span><span class="token operator">=</span>httpd.service<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/etc/sysconfig/memcached<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/memcached/bin/memcached <span class="token parameter variable">-p</span> <span class="token variable">$&#123;PORT&#125;</span> <span class="token parameter variable">-u</span> <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> <span class="token parameter variable">-m</span> <span class="token variable">$&#123;CACHESIZE&#125;</span> <span class="token parameter variable">-c</span> <span class="token variable">$&#123;MAXCONN&#125;</span> <span class="token variable">$OPTIONS</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># systemctl start memcached</span><span class="token punctuation">[</span>root@node10 memcached-1.6.6<span class="token punctuation">]</span><span class="token comment"># memcached --version</span>memcached <span class="token number">1.6</span>.6</code></pre></div></figure><p><strong>Memcached启动程序说明：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改memcached运行参数，可以使用下面的选项修改/etc/sysconfig/memcached文件memcached常见选项</span><span class="token parameter variable">-u</span> username memcached运行的用户身份，必须普通用户<span class="token parameter variable">-p</span> 绑定的端口，默认11211<span class="token parameter variable">-m</span> num 最大内存，单位MB，默认64MB<span class="token parameter variable">-c</span> num 最大连接数，缺省1024<span class="token parameter variable">-d</span> 守护进程方式运行<span class="token parameter variable">-f</span> 增长因子Growth Factor，默认1.25<span class="token parameter variable">-v</span> 详细信息，-vv能看到详细信息<span class="token parameter variable">-M</span> 使用内存直到耗尽，不许LRU<span class="token parameter variable">-U</span> 设置UDP监听端口，0表示禁用UDP</code></pre></div></figure><h2 id="1-4-Memcached使用"><a href="#1-4-Memcached使用" class="headerlink" title="1.4 Memcached使用"></a>1.4 Memcached使用</h2><ul><li>memcached开发库和工具</li></ul><p>与memcached通信的不同语言的连接器。libmemcached提供了C库和命令行工具。</p><ul><li>memcached操作命令</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#五种基本memcached命令执行最简单的操作：</span><span class="token builtin class-name">set</span><span class="token function">add</span>replacegetdelete</code></pre></div></figure><h2 id="1-5-Memcached集群部署"><a href="#1-5-Memcached集群部署" class="headerlink" title="1.5 Memcached集群部署"></a>1.5 Memcached集群部署</h2><h3 id="1-5-1-Repcached实现"><a href="#1-5-1-Repcached实现" class="headerlink" title="1.5.1 Repcached实现"></a>1.5.1 Repcached实现</h3><p>项目站点：<a href="http://repcached.sourceforge.net/">http://repcached.sourceforge.net/</a></p><p>在master上可以通过 -X 选项指定 replication port(默认为11212&#x2F;tcp)，在 slave上通过 -x 指定复制的master并连接，事实上，如果同时指定了 -x&#x2F;-X， repcached先会尝试连接对端的master，但如果连接失败，它就会用 -X参数来自己 listen（成为master）；如果 master坏掉， slave侦测到连接断了，它会自动 listen而成为 master；而如果 slave坏掉，master也会侦测到连接断开，它就会重新 listen等待新的 slave加入。从这方案的技术实现来看，其实它是一个单 master单 slave的方案，但它的 master&#x2F;slave都是可读写的，而且可以相互同步，所以从功能上看，也可以认为它是双机 master-master方案。</p><h3 id="1-5-2-Memcached集群部署"><a href="#1-5-2-Memcached集群部署" class="headerlink" title="1.5.2 Memcached集群部署"></a>1.5.2 Memcached集群部署</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Haproxy+Keepalived</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Haproxy+Keepalived</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Memcached</td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Memcached</td></tr></tbody></table><p><img src="/2023/03/06/NoSQL/Memcached/memcached01/image-20230313004405401.png" alt="image-20230313004405401">   </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装配置Haproxy+Keepalived</span>参考链接：https://chsblogs.com/2022/09/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/<span class="token comment">#%E2%97%8E-Keepalived</span><span class="token comment">#2.部署repcached</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc libevent libevent-devel</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># wget https://jaist.dl.sourceforge.net/project/repcached/repcached/2.2.1-1.2.8/memcached-1.2.8-repcached-2.2.1.tar.gz</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf memcached-1.2.8-repcached-2.2.1.tar.gz </span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># cd memcached-1.2.8-repcached-2.2.1</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/apps/repcached --enable-replication</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># vim memcached.c</span>  <span class="token number">56</span> <span class="token comment">#ifndef IOV_MAX</span>  <span class="token number">57</span> <span class="token comment">#if defined(__FreeBSD__) || defined(__APPLE__)</span>  <span class="token number">58</span> <span class="token comment"># define IOV_MAX 1024</span>  <span class="token number">59</span> <span class="token comment">#endif</span>  <span class="token number">60</span> <span class="token comment">#endif</span>    <span class="token comment">#改为如下内容，即删除原有的原第57，59行</span>  <span class="token number">56</span> <span class="token comment">#ifndef IOV_MAX</span>  <span class="token number">57</span> <span class="token comment"># define IOV_MAX 1024</span>  <span class="token number">58</span> <span class="token comment">#endif</span><span class="token punctuation">[</span>root@node12 memcached-1.2.8-repcached-2.2.1<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/repcached/bin:$PATH' > /etc/profile.d/repcached.sh</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/repcached.sh</span><span class="token comment">#3.安装启动memcached A，-x 192.168.1.13为对端memcached的地址</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># memcached -d -m 2048 -p 11211 -u memcached -c 2048 -x 192.168.1.13</span><span class="token comment">#4.安装启动memcached B</span>memcached <span class="token parameter variable">-d</span> <span class="token parameter variable">-m</span> <span class="token number">2048</span> <span class="token parameter variable">-p</span> <span class="token number">11211</span> <span class="token parameter variable">-u</span> memcached <span class="token parameter variable">-c</span> <span class="token number">2048</span> <span class="token parameter variable">-x</span> <span class="token number">192.168</span>.1.12<span class="token comment">#5.测试</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Memcached</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Memcached</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).Tomcat性能优化</title>
    <link href="/2023/03/02/Web/Tomcat/tomcat04/"/>
    <url>/2023/03/02/Web/Tomcat/tomcat04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat性能优化"><a href="#1-Tomcat性能优化" class="headerlink" title="1.Tomcat性能优化"></a>1.Tomcat性能优化</h1><h2 id="1-1-JMX"><a href="#1-1-JMX" class="headerlink" title="1.1 JMX"></a>1.1 JMX</h2><p>JMX（Java Management Extensions，即Java管理扩展）是一个为JAVA应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。  </p><p>JMX最常见的场景是监控Java程序的基本信息和运行情况，任何Java程序都可以开启JMX，然后使用JConsole或Visual VM进行预览。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#为Java程序开启JMX很简单，只要在运行Java程序的命令后面指定如下命令即可</span><span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">10.0</span>.0.100 <span class="token comment">#指定自已监听的IP</span><span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token comment">#指定监听的PORT</span><span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false<span class="token comment">#在tomcat开启远程JMX支持Zabbix监控，如下配置</span><span class="token function">vim</span> /usr/local/tomcat/bin/catalina.sh<span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CATALINA__OPTS</span>-Dcom.sun.management.jmxremote #启用远程监控JMX-Dcom.sun.management.jmxremote.port=XXXXX #默认启动的JMX端口号，要和zabbix添加主机时候的端口一致即可-Dcom.sun.management.jmxremote.authenticate=false #不使用用户名密码-Dcom.sun.management.jmxremote.ss1=false #不使用ssl认证-Djava.rmi.server.hostname=&lt;JAVA主机IP>"</span> <span class="token comment">#tomcat主机自己的IP地址,不要写zabbix服务器的地址</span></code></pre></div></figure><h2 id="1-2-Tomcat性能优化"><a href="#1-2-Tomcat性能优化" class="headerlink" title="1.2 Tomcat性能优化"></a>1.2 Tomcat性能优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#内存空间优化</span><span class="token assign-left variable">AVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms4g -Xmx4g -XX:NewSize= -XX:MaxNewSize= "</span>-server：服务器模式-Xms：堆内存初始化大小-Xmx：堆内存空间上限<span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span>：新生代空间初始化大小<span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span>：新生代空间最大值<span class="token comment">#示例，一台tomcat服务器并发连接数不高,生产建议分配物理内存通常4G到8G较多,如果需要更多连接,一般会利用虚拟化技术实现多台tomcat。</span><span class="token function">vim</span> /usr/local/tomcat/bin/catalina.sh<span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms4g -Xmx4g -Xss512k -Xmn1g -XX:CMSInitiatingOccupancyFraction=65 -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=10 -XX:NewRatio=2 -XX:PermSize=128m -XX:MaxPermSize=512m -XX:CMSFullGCsBeforeCompaction=5 -XX:+ExplicitGCInvokesConcurrent -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods"</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#线程池调整</span><span class="token function">vim</span> /usr/local/tomcat/conf/server.xml<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span> <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>  <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#常用属性</span>connectionTimeout  <span class="token comment">#连接超时时长,单位ms</span>maxThreads  <span class="token comment">#最大线程数，默认200</span>minSpareThreads  <span class="token comment">#最小空闲线程数</span>maxSpareThreads  <span class="token comment">#最大空闲线程数</span>acceptCount  <span class="token comment">#当启动线程满了之后，等待队列的最大长度，默认100</span>URIEncoding  <span class="token comment">#URI 地址编码格式，建议使用 UTF-8</span>enableLookups  <span class="token comment">#是否启用客户端主机名的DNS反向解析，缺省禁用，建议禁用，就使用客户端IP就行</span>compression  <span class="token comment">#是否启用传输压缩机制，建议 "on"，CPU和流量的平衡</span>  compressionMinSize  <span class="token comment">#启用压缩传输的数据流最小值，单位是字节</span>  compressableMimeType  <span class="token comment">#定义启用压缩功能的MIME类型text/html, text/xml, text/css,text/javascript</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Tomcat集群部署</title>
    <link href="/2023/03/02/Web/Tomcat/tomcat03/"/>
    <url>/2023/03/02/Web/Tomcat/tomcat03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat集群部署"><a href="#1-Tomcat集群部署" class="headerlink" title="1.Tomcat集群部署"></a>1.Tomcat集群部署</h1><h2 id="1-1-基于Nginx反向代理至Tomcat"><a href="#1-1-基于Nginx反向代理至Tomcat" class="headerlink" title="1.1 基于Nginx反向代理至Tomcat"></a>1.1 基于Nginx反向代理至Tomcat</h2><p>基于Nginx反向代理功能，将用户请求全部转发至指定的同一个tomcat主机。</p><h3 id="1-1-1-配置清单"><a href="#1-1-1-配置清单" class="headerlink" title="1.1.1 配置清单"></a>1.1.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Nginx</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Tomcat</td></tr></tbody></table><h3 id="1-1-2-安装配置Nginx"><a href="#1-1-2-安装配置Nginx" class="headerlink" title="1.1.2 安装配置Nginx"></a>1.1.2 安装配置Nginx</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装nginx服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  nginx-1.22.0-1.el7.ngx.x86_64.rpm  pcre2-10.23-2.el7.x86_64.rpm<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install pcre2-10.23-2.el7.x86_64.rpm nginx-1.22.0-1.el7.ngx.x86_64.rpm </span><span class="token comment">#2.配置nginx</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/nginx/nginx.conf </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/nginx/conf.d/tomcat.conf</span>server <span class="token punctuation">&#123;</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  server_name <span class="token number">192.168</span>.1.10<span class="token punctuation">;</span>  location / <span class="token punctuation">&#123;</span>    proxy_pass http://web1.chsblogs.com:8080<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#3.配置hosts域名解析</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.11 web1.chsblogs.com web2.chsblogs.com<span class="token comment">#4.启动nginx服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now nginx</span></code></pre></div></figure><h3 id="1-1-3-安装配置Tomcat"><a href="#1-1-3-安装配置Tomcat" class="headerlink" title="1.1.3 安装配置Tomcat"></a>1.1.3 安装配置Tomcat</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装tomcat</span>参考前文：https://chsblogs.com/2023/03/01/Tomcat/【2】Tomcat安装及配置/<span class="token comment">#1-1-Tomcat安装</span><span class="token comment">#2.配置tomcat</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web1.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/web1/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web2.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/web2/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/&#123;web1,web2&#125;/ROOT -p</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /data/</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/web1/ROOT/index.jsp</span><span class="token operator">&lt;</span>%@ page <span class="token assign-left variable">language</span><span class="token operator">=</span><span class="token string">"java"</span> <span class="token assign-left variable">contentType</span><span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    <span class="token assign-left variable">pageEncoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>jsp<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>%out.println<span class="token punctuation">(</span><span class="token string">"web1.chsblogs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>%<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>%<span class="token operator">=</span>request.getRequestURL<span class="token punctuation">(</span><span class="token punctuation">)</span>%<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/web2/ROOT/index.jsp</span><span class="token operator">&lt;</span>%@ page <span class="token assign-left variable">language</span><span class="token operator">=</span><span class="token string">"java"</span> <span class="token assign-left variable">contentType</span><span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    <span class="token assign-left variable">pageEncoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>jsp<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>%out.println<span class="token punctuation">(</span><span class="token string">"web2.chsblogs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>%<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>%<span class="token operator">=</span>request.getRequestURL<span class="token punctuation">(</span><span class="token punctuation">)</span>%<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#4.启动tomcat</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now tomcat</span><span class="token comment">#5.访问测试</span>http://192.168.1.10/</code></pre></div></figure><h2 id="1-2-Tomcat负载均衡部署"><a href="#1-2-Tomcat负载均衡部署" class="headerlink" title="1.2 Tomcat负载均衡部署"></a>1.2 Tomcat负载均衡部署</h2><h2 id="1-3-Tomcat-Session-Replication-Cluster"><a href="#1-3-Tomcat-Session-Replication-Cluster" class="headerlink" title="1.3 Tomcat Session Replication Cluster"></a>1.3 Tomcat Session Replication Cluster</h2><h2 id="1-4-Session共享服务器"><a href="#1-4-Session共享服务器" class="headerlink" title="1.4 Session共享服务器"></a>1.4 Session共享服务器</h2><h3 id="1-4-1-msm简介"><a href="#1-4-1-msm简介" class="headerlink" title="1.4.1 msm简介"></a>1.4.1 msm简介</h3><p>msm（memcached session manager）提供将Tomcat的session保持到memcached或redis的程序，可以实现高可用。项目早期托管在google code,目前在Github。</p><p>github网站链接: <a href="https://github.com/magro/memcached-session-manager">https://github.com/magro/memcached-session-manager</a></p><p>支持Tomcat的 6.x、7.x、8.x、9.x</p><p><strong>安装：</strong></p><p>参考链接: <a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><p>将spymemcached.jar、memcached-session-manage、kyro相关的jar文件都放到Tomcat的lib目录中去，这个目录是 $CATALINA_HOME&#x2F;lib&#x2F; ，对应本次安装就是&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">kryo-3.0.3.jarasm-5.2.jarobjenesis-2.6.jarreflectasm-1.11.9.jarminlog-1.3.1.jarkryo-serializers-0.45.jarmsm-kryo-serializer-2.3.2.jarmemcached-session-manager-tc8-2.3.2.jarspymemcached-2.12.3.jarmemcached-session-manager-2.3.2.jar</code></pre></div></figure><h3 id="1-4-2-sticky模式"><a href="#1-4-2-sticky模式" class="headerlink" title="1.4.2 sticky模式"></a>1.4.2 sticky模式</h3><p>sticky 模式即前端tomcat和后端memcached有关联(粘性)关系。</p><p>参考文档:<a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><h3 id="1-4-3-non-sticky模式"><a href="#1-4-3-non-sticky模式" class="headerlink" title="1.4.3 non-sticky模式"></a>1.4.3 non-sticky模式</h3><p>non-sticky 模式即前端tomcat和后端memcached无关联(无粘性)关系。从msm 1.4.0之后版本开始支持non-sticky模式。Tomcat session为中转Session，对每一个SessionID随机选中后端的memcached节点n1(或者n2)为主session，而另一个memcached节点n2(或者是n1)为备session。产生的新的Session会发送给主、备memcached，并清除本地Session。后端两个memcached服务器对一个session来说是一个是主,一个是备,但对所有session信息来说每个memcached即是主同时也是备。如果n1下线，n2则转正。n1再次上线，n2依然是主Session存储节点。  </p><p><strong>Memcached配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#$CATALINA_HOME/conf/context.xml 中</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>Manager <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token assign-left variable">memcachedNodes</span><span class="token operator">=</span><span class="token string">"n1:10.0.0.101:11211,n2:10.0.0.102:11211"</span><span class="token assign-left variable">sticky</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">sessionBackupAsync</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">lockingMode</span><span class="token operator">=</span><span class="token string">"uriPattern:/path1|/path2"</span><span class="token assign-left variable">requestUriIgnorePattern</span><span class="token operator">=</span><span class="token string">".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token assign-left variable">transcoderFactoryClass</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/Context<span class="token operator">></span></code></pre></div></figure><p><strong>Redis配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载jedis.jar，放到 $CATALINA_HOME/lib/ ，对应本次安装就是/usr/local/tomcat/lib</span><span class="token comment">#$CATALINA_HOME/conf/context.xml中</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>Manager <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token assign-left variable">memcachedNodes</span><span class="token operator">=</span><span class="token string">"redis://:password@redis.example.com:portnumber"</span><span class="token assign-left variable">sticky</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">sessionBackupAsync</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token assign-left variable">lockingMode</span><span class="token operator">=</span><span class="token string">"uriPattern:/path1|/path2"</span><span class="token assign-left variable">requestUriIgnorePattern</span><span class="token operator">=</span><span class="token string">".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token assign-left variable">transcoderFactoryClass</span><span class="token operator">=</span><span class="token string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/Context<span class="token operator">></span></code></pre></div></figure><h3 id="1-4-4-Session问题方案总结"><a href="#1-4-4-Session问题方案总结" class="headerlink" title="1.4.4 Session问题方案总结"></a>1.4.4 Session问题方案总结</h3><ul><li>session绑定，基于IP或session cookie的。其部署简单，尤其基于session黏性的方式，粒度小，对负载均衡影响小。但一旦后端服务器有故障，其上的session丢失。</li><li>session复制集群，基于tomcat实现多个服务器内共享同步所有session。此方法可以保证任意一台后端服务器故障，其余各服务器上还都存有全部session，对业务无影响。但是它基于多播实现心跳，TCP单播实现复制，当设备节点过多，这种复制机制不是很好的解决方案。且并发连接多的时候，单机上的所有session占据的内存空间非常巨大，甚至耗尽内存。</li><li>session服务器，将所有的session存储到一个共享的内存空间中，使用多个冗余节点保存，session，这样做到session存储服务器的高可用，且占据业务服务器内存较小。是一种比较好的解决session持久的解决方案。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Tomcat安装及配置</title>
    <link href="/2023/03/01/Web/Tomcat/tomcat02/"/>
    <url>/2023/03/01/Web/Tomcat/tomcat02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Tomcat安装及配置"><a href="#1-Tomcat安装及配置" class="headerlink" title="1.Tomcat安装及配置"></a>1.Tomcat安装及配置</h1><h2 id="1-1-Tomcat安装"><a href="#1-1-Tomcat安装" class="headerlink" title="1.1 Tomcat安装"></a>1.1 Tomcat安装</h2><p>官网：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.72/bin/apache-tomcat-9.0.72.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf apache-tomcat-9.0.72.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># ln -s apache-tomcat-9.0.72/ tomcat</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/tomcat.sh</span><span class="token comment">#启动tomcat</span><span class="token comment">#或者使用：[root@node10 local]# catalina.sh start</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># startup.sh </span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/local/jdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span class="token comment">#关闭tomcat</span><span class="token comment">#或者使用：[root@node10 local]# catalina.sh stop</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># shutdown.sh </span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/local/jdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarUsing CATALINA_OPTS: <span class="token comment">#配置tomcat自启动的service文件</span></code></pre></div></figure><p><strong>配置tomcat自启动的service文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建tomcat用户</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin tomcat</span><span class="token comment">#准备service文件中相关环境文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/tomcat.conf</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span><span class="token comment">#创建tomcat.service文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/tomcat.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Tomcat<span class="token comment">#After=syslog.target network.target remote-fs.target nss-lookup.target</span><span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking<span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/usr/local/tomcat/conf/tomcat.conf<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/tomcat/bin/startup.sh<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/usr/local/tomcat/bin/shutdown.sh<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true<span class="token assign-left variable">User</span><span class="token operator">=</span>tomcat<span class="token assign-left variable">Group</span><span class="token operator">=</span>tomcat<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now tomcat</span></code></pre></div></figure><p><strong>一键安装 tomcat脚本：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_tomcat.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">TOMCAT_FILE</span><span class="token operator">=</span><span class="token string">"apache-tomcat-9.0.72.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token assign-left variable">TOMCAT_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span><span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span><span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span><span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span><span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span><span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">" OK "</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span><span class="token keyword">else</span>  <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span><span class="token keyword">fi</span>  <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>  <span class="token builtin class-name">echo</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"JDK 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"JDK 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$TOMCAT_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$TOMCAT_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$TOMCAT_DIR</span>/tomcat <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"TOMCAT 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$TOMCAT_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$TOMCAT_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xf <span class="token variable">$DIR</span>/<span class="token variable">$TOMCAT_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$TOMCAT_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$TOMCAT_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> apache-tomcat-*/ tomcat<span class="token builtin class-name">echo</span> <span class="token string">"PATH=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin:"</span><span class="token string">'$PATH'</span> <span class="token operator">></span> /etc/profile.d/tomcat.sh<span class="token function">id</span> tomcat <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin tomcat<span class="token function">cat</span> <span class="token operator">></span> <span class="token variable">$TOMCAT_DIR</span>/tomcat/conf/tomcat.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFJAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkEOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> tomcat.tomcat <span class="token variable">$TOMCAT_DIR</span>/tomcat/<span class="token function">cat</span> <span class="token operator">></span> /lib/systemd/system/tomcat.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Tomcat#After=syslog.target network.target remote-fs.target nss-lookup.targetAfter=syslog.target network.target[Service]Type=forkingEnvironmentFile=<span class="token variable">$TOMCAT_DIR</span>/tomcat/conf/tomcat.confExecStart=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin/startup.shExecStop=<span class="token variable">$TOMCAT_DIR</span>/tomcat/bin/shutdown.shRestartSec=3PrivateTmp=trueUser=tomcatGroup=tomcat[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> tomcat.service <span class="token operator">&amp;></span> /dev/nullsystemctl is-active tomcat.service <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"TOMCAT 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"TOMCAT 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>install_jdkinstall_tomcat<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  apache-tomcat-9.0.72.tar.gz  install_tomcat.sh  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_tomcat.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_tomcat.sh</span></code></pre></div></figure><h2 id="1-2-Tomcat配置"><a href="#1-2-Tomcat配置" class="headerlink" title="1.2 Tomcat配置"></a>1.2 Tomcat配置</h2><h3 id="1-2-1-Tomcat目录结构"><a href="#1-2-1-Tomcat目录结构" class="headerlink" title="1.2.1 Tomcat目录结构"></a>1.2.1 Tomcat目录结构</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── bin <span class="token comment">#服务启动、停止等相关程序和文件</span>├── BUILDING.txt├── conf <span class="token comment">#配置文件</span>├── CONTRIBUTING.md├── lib <span class="token comment">#库目录</span>├── LICENSE├── logs <span class="token comment">#日志目录</span>├── NOTICE├── README.md├── RELEASE-NOTES├── RUNNING.txt├── temp├── webapps <span class="token comment">#应用程序，应用部署目录</span>└── work <span class="token comment">#jsp编译后的结果文件，建议提前预热访问</span><span class="token number">7</span> directories, <span class="token number">7</span> files<span class="token comment">#当访问后，work目录中生成新文件，tomcat会自动的将jsp文件生成java源文件，再编译成class文件</span><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree work/Catalina/localhost/</span>work/Catalina/localhost/├── docs├── examples├── host-manager├── manager└── ROOT    └── org        └── apache            └── jsp                ├── index_jsp.class <span class="token comment">#字节码文件</span>                └── index_jsp.java  <span class="token comment">#servlet文件</span><span class="token number">8</span> directories, <span class="token number">2</span> files</code></pre></div></figure><h3 id="1-2-2-Tomcat配置文件"><a href="#1-2-2-Tomcat配置文件" class="headerlink" title="1.2.2 Tomcat配置文件"></a>1.2.2 Tomcat配置文件</h3><p>官方帮助文档：<a href="https://tomcat.apache.org/tomcat-9.0-doc/index.html">https://tomcat.apache.org/tomcat-9.0-doc/index.html</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 tomcat<span class="token punctuation">]</span><span class="token comment"># tree conf/</span>conf/├── Catalina│   └── localhost├── catalina.policy <span class="token comment">#当使用security选项启动tomcat时，用于为tomcat设置安全策略</span>├── catalina.properties <span class="token comment">#Tomcat 环境变量的配置，用于设定类加载器路径，以及一些与JVM调优相关参数。</span>├── context.xml <span class="token comment">#用于定义所有web应用均需加载的Context配置，此文件为所有的webapps提供默认配置，每个web应用也可以使用自已专用的配置，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中,覆盖全局的文件。</span>├── jaspic-providers.xml├── jaspic-providers.xsd├── logging.properties <span class="token comment">#Tomcat 日志系统相关的配置，可以修改日志级别和日志路径等。</span>├── server.xml <span class="token comment">#主配置文件。</span>├── tomcat.conf├── tomcat-users.xml <span class="token comment">#用户认证的账号和密码文件。</span>├── tomcat-users.xsd└── web.xml <span class="token comment">#每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置,每个web应用也可以使用专用配置文件,来覆盖全局文件。</span><span class="token number">2</span> directories, <span class="token number">11</span> files</code></pre></div></figure><p><strong>日志文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考文档：https://cwiki.apache.org/confluence/display/TOMCAT/Logging</span><span class="token comment">#日志格式：https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging</span>%a - Remote IP address%A - Local IP address%b - Bytes sent, excluding HTTP headers, or <span class="token string">'-'</span> <span class="token keyword">if</span> zero%B - Bytes sent, excluding HTTP headers%h - Remote <span class="token function">host</span> name <span class="token punctuation">(</span>or IP address <span class="token keyword">if</span> enableLookups <span class="token keyword">for</span> the connector is<span class="token boolean">false</span><span class="token punctuation">)</span>%H - Request protocol%l - Remote logical username from identd <span class="token punctuation">(</span>always returns <span class="token string">'-'</span><span class="token punctuation">)</span>%m - Request method <span class="token punctuation">(</span>GET, POST, etc.<span class="token punctuation">)</span>%p - Local port on <span class="token function">which</span> this request was received. See also %<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>p below.%q - Query string <span class="token punctuation">(</span>prepended with a <span class="token string">'?'</span> <span class="token keyword">if</span> it exists<span class="token punctuation">)</span>%r - First line of the request <span class="token punctuation">(</span>method and request URI<span class="token punctuation">)</span>%s - HTTP status code of the response%S - User session ID%t - Date and time, <span class="token keyword">in</span> Common Log Format%u - Remote user that was authenticated <span class="token punctuation">(</span>if any<span class="token punctuation">)</span>, <span class="token keyword">else</span> <span class="token string">'-'</span>%U - Requested URL path%v - Local server name%D - Time taken to process the request <span class="token keyword">in</span> millis. Note: In httpd %D ismicroseconds. Behaviour will be aligned to httpd <span class="token keyword">in</span> Tomcat <span class="token number">10</span> onwards.%T - Time taken to process the request, <span class="token keyword">in</span> seconds. Note: This value hasmillisecond resolution whereas <span class="token keyword">in</span> httpd it has second resolution. Behaviour willbe align to httpd <span class="token keyword">in</span> Tomcat <span class="token number">10</span> onwards.%F - Time taken to commit the response, <span class="token keyword">in</span> millis%I - Current request thread name <span class="token punctuation">(</span>can compare later with stacktraces<span class="token punctuation">)</span>%X - Connection status when response is completed:X <span class="token operator">=</span> Connection aborted before the response completed.+ <span class="token operator">=</span> Connection may be kept alive after the response is sent.- <span class="token operator">=</span> Connection will be closed after the response is sent.There is also support to <span class="token function">write</span> information incoming or outgoing headers, cookies,session or request attributes and special timestamp formats. It is modeled afterthe Apache HTTP Server log configuration syntax. Each of them can be usedmultiple <span class="token builtin class-name">times</span> with different xxx keys:%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>i <span class="token function">write</span> value of incoming header with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>o <span class="token function">write</span> value of outgoing header with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>c <span class="token function">write</span> value of cookie with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>r <span class="token function">write</span> value of ServletRequest attribute with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>s <span class="token function">write</span> value of HttpSession attribute with name xxx%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>p <span class="token function">write</span> <span class="token builtin class-name">local</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> port <span class="token punctuation">(</span>xxx<span class="token operator">==</span>local<span class="token punctuation">)</span> or remote <span class="token punctuation">(</span>client<span class="token punctuation">)</span> port<span class="token punctuation">(</span>xxx<span class="token operator">=</span>remote<span class="token punctuation">)</span>%<span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span>t <span class="token function">write</span> timestamp at the end of the request formatted using the enhancedSimpleDateFormat pattern xxx<span class="token comment">#tomcat中的日志文件</span><span class="token punctuation">[</span>root@node10 conf<span class="token punctuation">]</span><span class="token comment"># cat /usr/local/tomcat/conf/logging.properties</span><span class="token comment">#tomcat的访问日志格式</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Access log processes all example.             Documentation at: /docs/config/valve.html             Note: The pattern used is equivalent to using <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"common"</span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>               <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>               <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span><span class="token comment">#查看访问日志</span><span class="token punctuation">[</span>root@node10 conf<span class="token punctuation">]</span><span class="token comment"># cat /usr/local/tomcat/logs/localhost_access_log.2023-03-01.txt </span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">11230</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /tomcat.svg HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">67795</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /tomcat.css HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5542</span><span class="token number">192.168</span>.1.200 - - <span class="token punctuation">[</span>01/Mar/2023:14:32:07 +0800<span class="token punctuation">]</span> <span class="token string">"GET /bg-nav.png HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">1401</span></code></pre></div></figure><h3 id="1-2-3-Tomcat组件"><a href="#1-2-3-Tomcat组件" class="headerlink" title="1.2.3 Tomcat组件"></a>1.2.3 Tomcat组件</h3><p><img src="/2023/03/01/Web/Tomcat/tomcat02/image-20230301193155195.png" alt="image-20230301193155195">  </p><ul><li>顶级组件：Server，代表整个Tomcat容器，一台主机可以启动多个tomcat实例，确保端口不冲突。</li><li>服务类组件：Service，实现组织Engine和Connector，建立两者之间的联系，Service里面只能包含一个Engine</li><li>连接器组件：Connector，有HTTP（默认端口8080&#x2F;tcp）、HTTPS（默认端口8443&#x2F;tcp）  、AJP（默认端口8009&#x2F;tcp）协议的连接器，AJP（Apache Jserv protocol）是一种基于TCP的二进制通讯协议。  </li><li>容器类：Engine、Host（虚拟主机）、Context(上下文件,解决路径映射)都是容器类组件，可以嵌入其它组件，内部配置如何运行应用程序。  <ul><li>Engine：引擎，用来响应并处理用户请求。一个Engine上可以绑定多个Connector</li><li>Host：虚拟主机，可以实现多虚拟主机，例如使用不同的主机头区分。</li><li>Context：应用的上下文，配置特定url路径映射和目录的映射关系：url &#x3D;&gt; directory</li></ul></li><li>内嵌类： 可以内嵌到其他组件内，valve、logger、realm、loader、manager等。以logger举例，在不同容器组件内分别定义。</li><li>集群类组件：listener、cluster。</li></ul><p><strong>Tomcat核心组件：</strong></p><ol><li>Tomcat启动一个Server进程。可以启动多个Server，即Tomcat多实例。</li><li>创建一个Service提供服务。可以创建多个Service。每个Service中，是Engine和其连接器Connector的关联配置。</li><li>可以为这个Service提供多个连接器Connector，这些Connector使用了不同的协议，绑定了不同的端口。其作用就是处理来自客户端的不同的连接请求或响应。</li><li>Service内部还定义了Engine，引擎才是真正的处理请求的入口，其内部定义多个虚拟主机Host。Engine对请求头做了分析，将请求发送给相应的虚拟主机，如果没有匹配，数据就发往Engine上的defaultHost缺省虚拟主机，Engine上的缺省虚拟主机可以修改。</li><li>Host 定义虚拟主机，虚拟主机有name名称，通过名称匹配。</li><li>Context 定义应用程序单独的路径映射和配置。</li></ol><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">executor</span><span class="token operator">=</span><span class="token string">"tomcatThreadPool"</span>               <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span>               <span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">SSLEnabled</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/Connector<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"org.apache.coyote.http11.Http11AprProtocol"</span>               <span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">SSLEnabled</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">></span>     <span class="token operator">&lt;</span>/Connector<span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"AJP/1.3"</span>               <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">"::1"</span>               <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8009"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">jvmRoute</span><span class="token operator">=</span><span class="token string">"jvm1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span></code></pre></div></figure><p><strong>Tomcat处理请求过程：</strong></p><p>请求地址：<a href="http://localhost:8080/test/index.jsp">http://localhost:8080/test/index.jsp</a> 过程：</p><ol><li>浏览器端的请求被发送到服务器的端口为8080，Tomcat进程监听在此端口上。通过侦听的HTTP&#x2F;1.1 Connector获得此请求。</li><li>Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的响应。</li><li>Engine获得请求localhost:8080&#x2F;test&#x2F;index.jsp，遍历它所有虚拟主机Host。</li><li>Engine匹配到名为localhost的Host。如果匹配不到,就把请求交给该Engine中的defaultHost处理。</li><li>localhost Host获得请求&#x2F;test&#x2F;index.jsp，匹配它所拥有的所有Context。</li><li>Host匹配到路径为&#x2F;test的Context。</li><li>path&#x3D;&#x2F;test的Context获得请求index.jsp，在它的mapping table中寻找对应的servlet。</li><li>Context匹配到URL PATTERN为 *.jsp 的servlet，对应于JspServlet类构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法。</li><li>Context把执行完了之后的HttpServletResponse对象返回给Host。</li><li>Host把HttpServletResponse对象返回给Engine。</li><li>Engine把HttpServletResponse对象返回给Connector。</li><li>Connector把HttpServletResponse对象返回给浏览器端。</li></ol><h3 id="1-2-4-Tomcat常见配置"><a href="#1-2-4-Tomcat常见配置" class="headerlink" title="1.2.4 Tomcat常见配置"></a>1.2.4 Tomcat常见配置</h3><ul><li>8005端口安全配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#8005是Tomcat的管理端口，默认监听在127.0.0.1上。无需验证就可发送SHUTDOWN (大小写敏感)这个字符串，tomcat接收到后就会关闭此Server。</span><span class="token comment">#此管理功能建议禁用，可将SHUTDOWN改为一串猜不出的字符串实现。或者port修改成 0, 会使用随机端口,如:40357。</span><span class="token comment">#port设为-1等无效端口,将关闭此功能。</span><span class="token comment">#此行不能被注释,否则无法启动tomcat服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span></code></pre></div></figure><ul><li>显示指定的http服务器版本信息</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#默认不显示tomcat的http的Server头信息, 可以指定tomcat的http的Server头信息为相应的值。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token comment">#修改配置,指定想显示的tomcat版本,添加Server="chsblogs"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> <span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token string">"chsblogs"</span>/<span class="token operator">></span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -I 192.168.1.10:8080</span>HTTP/1.1 <span class="token number">200</span> Content-Type: text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Transfer-Encoding: chunkedDate: Wed, 01 Mar <span class="token number">2023</span> <span class="token number">12</span>:02:46 GMTServer: chsblogs</code></pre></div></figure><ul><li>多虚拟主机配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多虚拟主机配置说明:</span><span class="token comment">#name:必须是主机名，用主机名来匹配。</span><span class="token comment">#appBase:当前主机的网页根目录，是相对于 $CATALINA_HOME ，也可以使用绝对路径。</span><span class="token comment">#unpackWARs:是否自动解压war格式。</span><span class="token comment">#autoDeploy:热部署，自动加载并运行应用。</span><span class="token comment">#再添加和配置一个新的虚拟主机，并将myapp部署到/data/chsblogs目录下</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span>      <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"web1.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/chsblogs/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>            <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"web1_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span> <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s%b"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token comment">#准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/chsblogs/ROOT -pv</span>mkdir: created directory ‘/data’mkdir: created directory ‘/data/chsblogs’mkdir: created directory ‘/data/chsblogs/ROOT’<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /data/chsblogs/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># echo "web1.chsblogs.com" > /data/chsblogs/ROOT/index.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token comment">#测试</span>http://web1.chsblogs.com:8080/</code></pre></div></figure><ul><li>修改tomcat端口为80</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意: 因为以tomcat用户运行,不能直接使用1024以下的端口,需要修改tomcat的运行身份,否则会出现下面错误。</span><span class="token comment">#/usr/local/tomcat/logs/catalina.out文件：Caused by: java.net.SocketException: Permission denied</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>Server <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8005"</span> <span class="token assign-left variable">shutdown</span><span class="token operator">=</span><span class="token string">"SHUTDOWN"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">jvmRoute</span><span class="token operator">=</span><span class="token string">"jvm1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span>    <span class="token operator">&lt;</span>/Engine<span class="token operator">></span>  <span class="token operator">&lt;</span>/Service<span class="token operator">></span><span class="token operator">&lt;</span>/Server<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/tomcat.service</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token comment">#User=tomcat</span><span class="token comment">#Group=tomcat</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span></code></pre></div></figure><ul><li>Context配置</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Context作用:路径映射：将url映射至指定路径，而非使用appBase下的物理目录，实现虚拟目录功能。应用独立配置，例如单独配置应用日志、单独配置应用访问控制。</span><span class="token comment">#path：指的是访问的URL路径，如果path与appBase下面的子目录同名，context的docBase路径优先更高。</span><span class="token comment">#docBase：可以是磁盘文件的绝对路径，也可以是相对路径（相对于Host的appBase）。</span><span class="token comment">#reloadable：true表示如果WEB-INF/classes或META-INF/lib目录下.class文件有改动，就会将WEB应用重新加载。生产环境中，建议使用false来禁用。</span><span class="token comment">#映射指定路径</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/test"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/test"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span><span class="token comment">#映射站点的根目录</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/website"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span><span class="token comment">#还可以添加日志等独立的配置</span>  <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/test"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/test"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>    <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_test_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>    <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/Context<span class="token operator">></span>  <span class="token comment">#Valve组件:可以定义日志</span><span class="token comment">#定义访问日志：org.apache.catalina.valves.AccessLogValve</span><span class="token comment">#定义访问控制：org.apache.catalina.valves.RemoteAddrValve</span><span class="token comment">#例如：</span><span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.RemoteAddrValve"</span><span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token string">"10\.0\.0\.\d+"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>  <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"localhost_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span>  <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /<span class="token operator">></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.虚拟主机上利用context实现虚拟目录：准备虚拟主机的数据目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/myapp-v1</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /data/myapp-v1/index.jsp</span>myapp-v1<span class="token comment">#使用了软链接，原因方便后期版升级或回滚，如是是版本升级，需要将软链接指向myapp-v2，重新启动。如果新版上线后，出现问题，重新修改软链接到上一个版本的目录，并重启，就可以实现回滚。</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -sv myapp-v1 myapp</span>‘myapp’ -<span class="token operator">></span> ‘myapp-v1’<span class="token comment">#2.配置server.xml</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/tomcat/conf/server.xml</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"myapp.chsblogs.com"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/chsblogs/"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Context <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/myapp"</span> <span class="token assign-left variable">docBase</span><span class="token operator">=</span><span class="token string">"/data/myapp"</span> <span class="token assign-left variable">reloadable</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"logs"</span>            <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"web1_access_log"</span> <span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">".txt"</span> <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">"%h %l %u %t &amp;quot;%r&amp;quot; %s%b"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/Host<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#3.访问测试</span>http://myapp.chsblogs.com:8080/myapp/<span class="token comment">#4.myapp版本升级</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /data/myapp-v2</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># echo "myapp-v2" > /data/myapp-v2/index.jsp</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /data/</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># rm -rf myapp #删除软链接，仍然可以访问旧版本</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -s myapp-v2 myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ls</span>chsblogs  myapp  myapp-v1  myapp-v2<span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span><span class="token comment">#5.访问测试</span>http://myapp.chsblogs.com:8080/myapp/<span class="token comment">#6.myapp版本回退</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># rm -rf myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># ln -s myapp-v1 myapp</span><span class="token punctuation">[</span>root@node10 data<span class="token punctuation">]</span><span class="token comment"># systemctl restart tomcat</span></code></pre></div></figure><ul><li><p>基于Web方式的Host Manager虚拟主机管理</p></li><li><p>基于Web的管理Server status和Manager App实现应用部署  </p></li><li><p>其它配置</p></li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.Service配置：一般情况下，一个Server实例配置一个Service，name属性相当于该Service的ID</span><span class="token operator">&lt;</span>Service <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span><span class="token operator">></span><span class="token comment">#2.连接器配置：redirectPort，如果访问HTTPS协议，自动转向这个连接器。但大多数时候，Tomcat并不会开启HTTPS，因为Tomcat往往部署在内部，HTTPS性能较差</span><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>  <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>  <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span class="token comment">#3.引擎配置</span><span class="token operator">&lt;</span>Engine <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Catalina"</span> <span class="token assign-left variable">defaultHost</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token operator">></span><span class="token comment">#4.defaultHost配置：defaultHost指向内部定义某虚拟主机。缺省虚拟主机可以改动，默认localhost</span><span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span> <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></code></pre></div></figure><h2 id="1-3-基于Tomcat应用部署"><a href="#1-3-基于Tomcat应用部署" class="headerlink" title="1.3 基于Tomcat应用部署"></a>1.3 基于Tomcat应用部署</h2><h3 id="1-3-1-应用归档格式"><a href="#1-3-1-应用归档格式" class="headerlink" title="1.3.1 应用归档格式"></a>1.3.1 应用归档格式</h3><ul><li>.war：Webapp打包，类似zip格式文件。通常包括一个应用的所有资源，比如jsp，html，配置文件等。</li><li>.jar：EJB类文件的打包压缩类zip格式文件，,包括很多的class文件。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#传统应用开发测试后，通常打包为war格式，这种文件部署到Tomcat的webapps目录下，并默认会自动解包展开和部署上线。</span> <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"webapps"</span>            <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></code></pre></div></figure><h3 id="1-3-2-部署方式"><a href="#1-3-2-部署方式" class="headerlink" title="1.3.2 部署方式"></a>1.3.2 部署方式</h3><ul><li><p>部署：将webapp的源文件放置到目标目录，通过web.xml和context.xml文件中配置的路径就可以访问该webapp，通过类加载器加载其特有的类和依赖的类到JVM上，即：最终用户可以通过浏览器访问该应用。</p><ul><li>自动部署：Tomcat一旦发现多了一个web应用APP.war包，默认会自动把它解压缩，加载并启动起来。</li><li>手动部署：<ul><li>冷部署：将webapp放到指定目录，才去启动Tomcat服务  </li><li>热部署：Tomcat服务不停止，需要依赖manager、ant脚本、tcd（tomcat client  deployer）等工具。</li></ul></li></ul></li><li><p>反部署：停止webapp运行，并从JVM上清除已经加载的类，从Tomcat应用目录中移除部署的文件。</p></li><li><p>启动：webapp能够访问  </p></li><li><p>停止：webapp不能访问，不能提供服务，但是JVM并不清除它。</p></li></ul><h3 id="1-3-3-部署Webapp目录结构"><a href="#1-3-3-部署Webapp目录结构" class="headerlink" title="1.3.3 部署Webapp目录结构"></a>1.3.3 部署Webapp目录结构</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#目录结构一般由开发用工具自动生成，以下模拟生成相关目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir projects/myapp/&#123;WEB-INF,META-INF,classes,lib&#125; -pv</span>mkdir: created directory ‘projects’mkdir: created directory ‘projects/myapp’mkdir: created directory ‘projects/myapp/WEB-INF’mkdir: created directory ‘projects/myapp/META-INF’mkdir: created directory ‘projects/myapp/classes’mkdir: created directory ‘projects/myapp/lib’<span class="token comment">#创建应用首页</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim projects/myapp/index.jsp</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>%      out.println<span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    %<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#手动复制项目目录到webapps目录下去</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp -r projects/myapp/ /usr/local/tomcat/webapps/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chown -R tomcat.tomcat /usr/local/tomcat/webapps/myapp/</span><span class="token comment">#访问测试s</span>http://192.168.1.10:8080/myapp/</code></pre></div></figure><h3 id="1-3-4-自动部署war包"><a href="#1-3-4-自动部署war包" class="headerlink" title="1.3.4 自动部署war包"></a>1.3.4 自动部署war包</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#制作应用的war包文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir app1</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># touch app1/test.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># touch app1/test.jsp</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim app1/test.jsp </span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>%      out.println<span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    %<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim app1/test.html</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span>  <span class="token operator">&lt;</span>/head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#生成war包文件app1.war,此文件的名称决定了tomcat子目录的名称</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># jar cvf app1.war *</span>added manifestadding: test.html<span class="token punctuation">(</span>in <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out<span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deflated <span class="token number">39</span>%<span class="token punctuation">)</span>adding: test.jsp<span class="token punctuation">(</span>in <span class="token operator">=</span> <span class="token number">132</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out<span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deflated <span class="token number">32</span>%<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># ls</span>app1.war  test.html  test.jsp<span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># chown tomcat.tomcat app1.war</span><span class="token comment">#自动应用部署上面的war包</span><span class="token punctuation">[</span>root@node10 app1<span class="token punctuation">]</span><span class="token comment"># cp -p app1.war /usr/local/tomcat/webapps/</span><span class="token comment">#tomcat将app1.war自动解压缩</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>app1  app1.war  docs  examples  host-manager  manager  myapp  ROOT<span class="token comment">#访问测试，访问jsp文件后，tomcat会自动将jsp转换和编译生成work目录下对应的java和class文件</span>http://192.168.1.10:8080/app1/test.jsp<span class="token comment">#自动删除（反部署），过几秒再查看，发现app1目录也随之删除</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/tomcat/webapps/</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>app1  app1.war  docs  examples  host-manager  manager  myapp  ROOT<span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># rm -rf app1.war</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>docs  examples  host-manager  manager  myapp  ROOT</code></pre></div></figure><h3 id="1-3-5-部署基于JAVA的博客系统-JPress"><a href="#1-3-5-部署基于JAVA的博客系统-JPress" class="headerlink" title="1.3.5 部署基于JAVA的博客系统 JPress"></a>1.3.5 部署基于JAVA的博客系统 JPress</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ll jpress-v5.0.8.war </span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">127888242</span> Mar  <span class="token number">1</span> <span class="token number">17</span>:04 jpress-v5.0.8.war<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp jpress-v5.0.8.war /usr/local/tomcat/webapps/</span><span class="token comment">#自动解压缩生成jpress-v5.0.8目录</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ls</span>docs  examples  host-manager  jpress-v5.0.8  jpress-v5.0.8.war  manager  myapp  ROOT<span class="token comment">#生成软链接</span><span class="token punctuation">[</span>root@node10 webapps<span class="token punctuation">]</span><span class="token comment"># ln -s jpress-v5.0.8 jpress</span><span class="token comment">#访问链接配置</span>http://192.168.1.10:8080/jpress</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Tomcat之JDK安装</title>
    <link href="/2023/02/28/Web/Tomcat/tomcat01/"/>
    <url>/2023/02/28/Web/Tomcat/tomcat01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1.JDK安装"></a>1.JDK安装</h1><h2 id="1-1-安装OpenJDK"><a href="#1-1-安装OpenJDK" class="headerlink" title="1.1 安装OpenJDK"></a>1.1 安装OpenJDK</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># java -version</span>openjdk version <span class="token string">"1.8.0_362"</span>OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_362-b08<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.362</span>-b08, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="1-2-二进制安装JDK"><a href="#1-2-二进制安装JDK" class="headerlink" title="1.2 二进制安装JDK"></a>1.2 二进制安装JDK</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载安装包：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf jdk-8u341-linux-x64.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># ln -s jdk1.8.0_341/ jdk</span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># vim /etc/profile.d/jdk.sh</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/<span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/jdk.sh </span><span class="token punctuation">[</span>root@node10 local<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="1-3-一键安装二进制JDK脚本"><a href="#1-3-一键安装二进制JDK脚本" class="headerlink" title="1.3 一键安装二进制JDK脚本"></a>1.3 一键安装二进制JDK脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_jdk.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">JDK_FILE</span><span class="token operator">=</span><span class="token string">"jdk-8u341-linux-x64.tar.gz"</span><span class="token assign-left variable">JDK_DIR</span><span class="token operator">=</span><span class="token string">"/usr/local"</span><span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>  <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>  <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>  <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>  <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>  <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">" OK "</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>  <span class="token keyword">else</span>    <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>  <span class="token keyword">fi</span>  <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>  <span class="token builtin class-name">echo</span><span class="token punctuation">&#125;</span><span class="token function-name function">install_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"<span class="token variable">$JDK_FILE</span> 文件不存在"</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$JDK_DIR</span>/jdk <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  color <span class="token number">1</span> <span class="token string">"JDK 已经安装"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">else</span>  <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$JDK_DIR</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token variable">$JDK_DIR</span><span class="token keyword">fi</span><span class="token function">tar</span> xvf <span class="token variable">$DIR</span>/<span class="token variable">$JDK_FILE</span> <span class="token parameter variable">-C</span> <span class="token variable">$JDK_DIR</span><span class="token builtin class-name">cd</span> <span class="token variable">$JDK_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> jdk1.8.* jdk<span class="token function">cat</span> <span class="token operator">></span> /etc/profile.d/jdk.sh <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport JAVA_HOME=<span class="token variable">$JDK_DIR</span>/jdkexport JRE_HOME=\<span class="token variable">$JAVA_HOME</span>/jreexport CLASSPATH=\<span class="token variable">$JAVA_HOME</span>/lib/:\<span class="token variable">$JRE_HOME</span>/lib/export PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$JAVA_HOME</span>/binEOF</span><span class="token builtin class-name">.</span> /etc/profile.d/jdk.sh<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token operator">&amp;&amp;</span> color <span class="token number">0</span> <span class="token string">"JDK 安装完成"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token number">1</span> <span class="token string">"JDK 安装失败"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>install_jdk<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_jdk.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  install_jdk.sh  jdk-8u341-linux-x64.tar.gz<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_jdk.sh</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/jdk.sh </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).Redis之Cluster集群</title>
    <link href="/2023/02/19/NoSQL/Redis/redis06/"/>
    <url>/2023/02/19/NoSQL/Redis/redis06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis之Cluster集群"><a href="#1-Redis之Cluster集群" class="headerlink" title="1.Redis之Cluster集群"></a>1.Redis之Cluster集群</h1><h2 id="1-1-Redis-Cluster工作原理"><a href="#1-1-Redis-Cluster工作原理" class="headerlink" title="1.1 Redis Cluster工作原理"></a>1.1 Redis Cluster工作原理</h2><p>在哨兵sentinel机制中，可以解决Redis高可用问题，即当MASTER故障后可以自动将SLAVE提升为MASTER，从而可以保证Redis服务的正常使用，但是无法解决Redis单机写入的瓶颈问题，即单机Redis写入性能受限于单机的内存大小、并发数量、网卡速率等因素。</p><p>为了解决单机性能的瓶颈，提高Redis 性能，可以使用分布式集群的解决方案。Redis 3.0版本之后推出了无中心架构的Redis Cluster机制，在无中心的Redis集群当中，其每个节点保存当前节点数据和整个集群状态,每个节点都和其他所有节点连接。</p><p><strong>Redis Cluster特点：</strong></p><ul><li>所有Redis节点使用(PING机制)互联。</li><li>集群中某个节点是否失效，是由整个集群中超过半数的节点监测都失效，才能算真正的失效。</li><li>客户端不需要Proxy即可直接连接Redis，应用程序中需要配置全部的Redis服务器IP。</li><li>Redis Cluster把所有的Redis Node平均映射到0-166383个槽位(Slot)上，读写需要到指定的Redis Node上进行操作，因此有多个Redis Node相当于Redis并发扩展了多倍，每个Redis Node承担16384&#x2F;N个槽位。</li><li>Redis Cluster预先分配16384个(Slot)槽位，当需要在Redis集群中写入一个Key-Value的时候，会使用CRC16(Key)Mode 16384之后的值，决定将Key写入哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。</li></ul><p><strong>Redis Cluster 架构：</strong></p><p><img src="/2023/02/19/NoSQL/Redis/redis06/image-20230219170743768.png" alt="image-20230219170743768">  </p><h1 id="2-手动部署"><a href="#2-手动部署" class="headerlink" title="2 手动部署"></a>2 手动部署</h1><p>基于原生命令手动部署Redis Cluster集群：</p><h2 id="2-1-部署清单"><a href="#2-1-部署清单" class="headerlink" title="2.1 部署清单"></a>2.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>node20</td><td>192.168.1.20</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node21</td><td>192.168.1.21</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node22</td><td>192.168.1.22</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node23</td><td>192.168.1.23</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node24</td><td>192.168.1.24</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr><tr><td>node25</td><td>192.168.1.25</td><td>CentOS8.5</td><td>Redis5.0.3</td></tr></tbody></table><h2 id="2-2-安装配置Redis-5-0-3"><a href="#2-2-安装配置Redis-5-0-3" class="headerlink" title="2.2 安装配置Redis 5.0.3"></a>2.2 安装配置Redis 5.0.3</h2><p><strong>6个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#node20节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node21节点</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node22节点</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node23节点</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node24节点</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#node25节点</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span></code></pre></div></figure><p><strong>6个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis.conf</span><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0masterauth <span class="token number">123456</span>requirepass <span class="token number">123456</span>cluster-enabled <span class="token function">yes</span> <span class="token comment">#取消此行注释,必须开启集群，开启后redis 进程会有cluster标识。</span>cluster-config-file nodes-6379.conf <span class="token comment">#取消此行注释,此为集群状态文件,记录主从关系及slot范围信息,由redis cluster 集群自动创建和维护。</span>cluster-require-full-coverage no <span class="token comment">#默认值为yes,设为no可以防止一个节点不可用导致整个cluster不可用。</span><span class="token comment">#批量修改配置文件</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node21 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node22 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node23 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node24 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token punctuation">[</span>root@node25 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span></code></pre></div></figure><p><strong>执行meet操作实现相互通信：</strong></p> <figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在任一节点上和其它所有节点进行meet通信</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.21 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.22 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.23 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.24 6379</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster meet 192.168.1.25 6379</span>OK<span class="token comment">#所有节点之间可以相互连接通信</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779617172</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676779618000</span> <span class="token number">2</span> connected292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779616164</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779616000</span> <span class="token number">0</span> connectedfb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779617000</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676779618186</span> <span class="token number">1</span> connected<span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:failcluster_slots_assigned:0 <span class="token comment">#无槽位分配</span>cluster_slots_ok:0cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:0 <span class="token comment">#无集群成员</span>cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:452cluster_stats_messages_pong_sent:509cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:966cluster_stats_messages_ping_received:509cluster_stats_messages_pong_received:457cluster_stats_messages_received:966</code></pre></div></figure><p><strong>为各个master 节点指派槽位范围：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># vim addslot.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">start</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token variable">$4</span><span class="token assign-left variable">pass</span><span class="token operator">=</span><span class="token number">123456</span><span class="token keyword">for</span> <span class="token for-or-select variable">slot</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $<span class="token punctuation">&#123;</span>start<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> slot:<span class="token variable">$slot</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$&#123;host&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$port</span> <span class="token parameter variable">-a</span> <span class="token variable">$&#123;pass&#125;</span> --no-auth-warning cluster addslots <span class="token variable">$&#123;slot&#125;</span><span class="token keyword">done</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x addslot.sh</span><span class="token comment">#为三个master分配槽位,共16364/3=5,461.333333333333,平均每个master分配5,461个槽位。</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.20 6379 0 5461</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.21 6379 5462 10922</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># bash addslot.sh 192.168.1.22 6379 10922 16383</span><span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780325000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327710</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:776cluster_stats_messages_pong_sent:873cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:1654cluster_stats_messages_ping_received:873cluster_stats_messages_pong_received:781cluster_stats_messages_received:1654</code></pre></div></figure><p><strong>指定各个节点的主从关系：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过cluster nodes查看master的ID信息,将对应的slave指定相应的master节点,实现三对主从节点。</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780325000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780327710</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780326000</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token comment">#将192.168.1.23指定192.168.1.20的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.23 -a 123456 --no-auth-warning cluster replicate d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83</span>OK<span class="token comment">#将192.168.1.24指定192.168.1.21的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.24 -a 123456 --no-auth-warning cluster replicate 03a760a1a1041517103d306813a22f93a52c88e5</span>OK<span class="token comment">#将192.168.1.25指定192.168.1.22的ID作为其从节点</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.25 -a 123456 --no-auth-warning cluster replicate fc5349739b52484c613a48e621da3e1363439c6b</span>OK<span class="token comment">#查看状态</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.20 -a 123456 --no-auth-warning cluster nodes</span>4c709246f80b88b0b051deb2e04b56f3e0f4590c <span class="token number">192.168</span>.1.24:6379@16379 slave 03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">4</span> connectedd8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">192.168</span>.1.20:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">2</span> connected <span class="token number">0</span>-5461292b2d637d7a2c8db6a169ed29f1fa37ca8695fb <span class="token number">192.168</span>.1.25:6379@16379 slave fc5349739b52484c613a48e621da3e1363439c6b <span class="token number">0</span> <span class="token number">1676780744000</span> <span class="token number">5</span> connectedfc5349739b52484c613a48e621da3e1363439c6b <span class="token number">192.168</span>.1.22:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780745141</span> <span class="token number">0</span> connected <span class="token number">10923</span>-16383fb4f1757251753caa2142bbd4bd22e5b204acf46 <span class="token number">192.168</span>.1.23:6379@16379 slave d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83 <span class="token number">0</span> <span class="token number">1676780744129</span> <span class="token number">3</span> connected03a760a1a1041517103d306813a22f93a52c88e5 <span class="token number">192.168</span>.1.21:6379@16379 master - <span class="token number">0</span> <span class="token number">1676780746149</span> <span class="token number">1</span> connected <span class="token number">5462</span>-10922<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3cluster_current_epoch:5cluster_my_epoch:2cluster_stats_messages_ping_sent:1259cluster_stats_messages_pong_sent:1424cluster_stats_messages_meet_sent:5cluster_stats_messages_sent:2688cluster_stats_messages_ping_received:1424cluster_stats_messages_pong_received:1264cluster_stats_messages_received:2688<span class="token comment">#查看主从节关系及槽位信息</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster slots</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5461</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.20"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"d8dbe0eeeb7b03e78bd896af0c1b59d2acf89f83"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.23"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"fb4f1757251753caa2142bbd4bd22e5b204acf46"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10923</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">16383</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.22"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"fc5349739b52484c613a48e621da3e1363439c6b"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.25"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"292b2d637d7a2c8db6a169ed29f1fa37ca8695fb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5462</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10922</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.21"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"03a760a1a1041517103d306813a22f93a52c88e5"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"192.168.1.24"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6379</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"4c709246f80b88b0b051deb2e04b56f3e0f4590c"</span></code></pre></div></figure><p><strong>验证 Redis Cluster访问：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定选项-c表示以集群方式连接</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.20 -a 123456 --no-auth-warning set chs www.chsblogs.com</span>OK<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.20 -a 123456 --no-auth-warning get chs</span><span class="token string">"www.chsblogs.com"</span></code></pre></div></figure><h1 id="3-Redis-4部署"><a href="#3-Redis-4部署" class="headerlink" title="3 Redis 4部署"></a>3 Redis 4部署</h1><p>基于Redis 4部署Redis Cluster集群：</p><h2 id="3-1-部署清单"><a href="#3-1-部署清单" class="headerlink" title="3.1 部署清单"></a>3.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node14</td><td>192.168.1.14</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node15</td><td>192.168.1.15</td><td>CentOS7.9</td><td>Redis4.0.9</td><td></td></tr><tr><td>node16</td><td>192.168.1.16</td><td>CentOS7.9</td><td>Redis4.0.9</td><td>集群动态扩容</td></tr><tr><td>node17</td><td>192.168.1.17</td><td>CentOS7.9</td><td>Redis4.0.9</td><td>集群动态扩容</td></tr></tbody></table><h2 id="3-2-安装配置Redis-4-0-9"><a href="#3-2-安装配置Redis-4-0-9" class="headerlink" title="3.2 安装配置Redis 4.0.9"></a>3.2 安装配置Redis 4.0.9</h2><p><strong>8个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#shell脚本一键安装Redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-4.0.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span></code></pre></div></figure><p><strong>8个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /apps/redis/etc/redis.conf</span><span class="token comment">#重启redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart redis</span></code></pre></div></figure><p><strong>安装redis-trib.rb工具：</strong></p><p>Redis 3和4版本需要使用到集群管理工具redis-trib.rb，这个工具是redis官方推出的管理redis集群的工具，集成在redis的源码src目录下，是基于redis提供的集群命令封装成简单、便捷、实用的操作工具，redis-trib.rb是redis作者用ruby开发完成的，需要安装ruby的redis模块,但是centos 7 系统yum安装的ruby存在版本较低问题，如下：  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># find / -name "redis-trib.rb"</span>/root/redis-4.0.9/src/redis-trib.rb<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp /root/redis-4.0.9/src/redis-trib.rb /usr/bin/</span><span class="token comment">#缺少ruby环境无法运行rb脚本</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb </span>/usr/bin/env: ruby: No such <span class="token function">file</span> or directory<span class="token comment">#CentOS 7带的ruby版本过低,无法运行上面ruby脚本,需要安装2.3以上版本,安装rubygems依赖ruby自动安装</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install rubygems</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install redis</span>Fetching: connection_pool-2.3.0.gem <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>ERROR:  Error installing redis:connection_pool requires Ruby version <span class="token operator">>=</span> <span class="token number">2.5</span>.0.<span class="token comment">#编译安装高版本的ruby</span><span class="token comment">#ruby 官网: http://www.ruby-lang.org/zh_cn</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc openssl-devel zlib-devel</span><span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># ls</span>ruby-2.5.9.tar.gz<span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># tar -xvf ruby-2.5.9.tar.gz </span><span class="token punctuation">[</span>root@node10 src<span class="token punctuation">]</span><span class="token comment"># cd ruby-2.5.9</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># ./configure</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># make -j 2 &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 ruby-2.5.9<span class="token punctuation">]</span><span class="token comment"># ruby -v</span>ruby <span class="token number">2.5</span>.9p229 <span class="token punctuation">(</span><span class="token number">2021</span>-04-05 revision <span class="token number">67939</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux<span class="token punctuation">]</span><span class="token comment">#安装ruby中redis模块</span><span class="token comment">#无法在线安装，可以下载redis模块安装包离线安装：https://rubygems.org/gems/redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># gem install -l redis-4.1.3.gem </span>Successfully installed redis-4.1.3Parsing documentation <span class="token keyword">for</span> redis-4.1.3Installing ri documentation <span class="token keyword">for</span> redis-4.1.3Done installing documentation <span class="token keyword">for</span> redis after <span class="token number">1</span> seconds<span class="token number">1</span> gem installed</code></pre></div></figure><p><strong>redis-trib.rb 命令用法：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb</span>Usage: redis-trib <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>arguments <span class="token punctuation">..</span>.<span class="token operator">></span>  create          host1:port1 <span class="token punctuation">..</span>. hostN:portN                  <span class="token parameter variable">--replicas</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span> <span class="token comment">#指定每个master的副本数量,即对应slave数量,一般为1</span>  check           host:port <span class="token comment">#检查集群信息</span>  info            host:port <span class="token comment">#查看集群主机信息</span>  fix             host:port <span class="token comment">#修复集群</span>                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  reshard         host:port <span class="token comment">#在线热迁移集群指定主机的slots数据</span>                  <span class="token parameter variable">--from</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--to</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--slots</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--yes</span>                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--pipeline</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  rebalance       host:port <span class="token comment">#平衡集群中各主机的slot数量</span>                  <span class="token parameter variable">--weight</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  --auto-weights                  --use-empty-masters                  <span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--simulate</span>                  <span class="token parameter variable">--pipeline</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--threshold</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>  add-node        new_host:new_port existing_host:existing_port <span class="token comment">#添加主机到集群</span>                  <span class="token parameter variable">--slave</span>                  --master-id <span class="token operator">&lt;</span>arg<span class="token operator">></span>  del-node        host:port node_id <span class="token comment">#删除主机</span>  set-timeout     host:port milliseconds <span class="token comment">#设置节点的超时时间</span>  call            host:port <span class="token builtin class-name">command</span> arg arg <span class="token punctuation">..</span> arg <span class="token comment">#在集群上的所有节点上执行命令</span>  <span class="token function">import</span>          host:port <span class="token comment">#导入外部redis服务器的数据到当前集群</span>                  <span class="token parameter variable">--from</span> <span class="token operator">&lt;</span>arg<span class="token operator">></span>                  <span class="token parameter variable">--copy</span>                  <span class="token parameter variable">--replace</span>  <span class="token builtin class-name">help</span>            <span class="token punctuation">(</span>show this <span class="token builtin class-name">help</span><span class="token punctuation">)</span></code></pre></div></figure><p><strong>创建Redis Cluster集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改redis-trib.rb连接redis的密码</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/local/lib/ruby/gems/2.5.0/gems/redis-4.1.3/lib/redis/client.rb</span>class Redis  class Client    DEFAULTS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      :url <span class="token operator">=</span><span class="token operator">></span> lambda <span class="token punctuation">&#123;</span> ENV<span class="token punctuation">[</span><span class="token string">"REDIS_URL"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>,      :scheme <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"redis"</span>,      :host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"127.0.0.1"</span>,      :port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">6379</span>,      :path <span class="token operator">=</span><span class="token operator">></span> nil,      :timeout <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5.0</span>,      :password <span class="token operator">=</span><span class="token operator">></span> <span class="token number">123456</span>, <span class="token comment">#此处修改密码</span>      :db <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :driver <span class="token operator">=</span><span class="token operator">></span> nil,      :id <span class="token operator">=</span><span class="token operator">></span> nil,      :tcp_keepalive <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :reconnect_attempts <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>,      :reconnect_delay <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>,      :reconnect_delay_max <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.5</span>,      :inherit_socket <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token comment">#创建集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb create --replicas 1 192.168.1.10:6379 192.168.1.11:6379 192.168.1.12:6379 192.168.1.13:6379 192.168.1.14:6379 192.168.1.15:6379</span><span class="token operator">>></span><span class="token operator">></span> Creating cluster<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Using <span class="token number">3</span> masters:<span class="token number">192.168</span>.1.10:6379<span class="token number">192.168</span>.1.11:6379<span class="token number">192.168</span>.1.12:6379Adding replica <span class="token number">192.168</span>.1.14:6379 to <span class="token number">192.168</span>.1.10:6379Adding replica <span class="token number">192.168</span>.1.15:6379 to <span class="token number">192.168</span>.1.11:6379Adding replica <span class="token number">192.168</span>.1.13:6379 to <span class="token number">192.168</span>.1.12:6379M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:0-5460 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:5461-10922 <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:10923-16383 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dCan I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to join<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:0-5460 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:10923-16383 <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:5461-10922 <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#如果有之前的操作导致Redis集群创建报错，则执行清空数据和集群命令：</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALLOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> cluster resetOK</code></pre></div></figure><p><strong>查看Redis Cluster集群状态：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">[root@node10 ~]# redis-trib.rb info 192.168.1.10:6379192.168.1.10:6379 (dca4320a...) -&gt; 0 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (4a3e180a...) -&gt; 0 keys | 5461 slots | 1 slaves.192.168.1.11:6379 (c287bfc8...) -&gt; 0 keys | 5462 slots | 1 slaves.[OK] 0 keys in 3 masters.0.00 keys per slot on average.[root@node10 ~]# redis-trib.rb check 192.168.1.10:6379&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 192.168.1.10:6379   slots:0-5460 (5461 slots) master   1 additional replica(s)S: 555035ef69008b2932e6c0b182f503ed621d1cfd 192.168.1.13:6379   slots: (0 slots) slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 192.168.1.15:6379   slots: (0 slots) slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 192.168.1.14:6379   slots: (0 slots) slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 192.168.1.12:6379   slots:10923-16383 (5461 slots) master   1 additional replica(s)M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d 192.168.1.11:6379   slots:5461-10922 (5462 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.</code></pre></div></figure><h2 id="3-3-Redis-Cluster集群节点维护"><a href="#3-3-Redis-Cluster集群节点维护" class="headerlink" title="3.3 Redis Cluster集群节点维护"></a>3.3 Redis Cluster集群节点维护</h2><h3 id="3-3-1-集群维护之动态扩容"><a href="#3-3-1-集群维护之动态扩容" class="headerlink" title="3.3.1 集群维护之动态扩容"></a>3.3.1 集群维护之动态扩容</h3><p><strong>添加新的master节点到集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将一台新的主机192.168.1.16加入集群,以下示例中192.168.1.10可以是任意存在的集群节点。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb add-node 192.168.1.16:6379 192.168.1.10:6379</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb info 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>dca4320a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>4a3e180a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.11:6379 <span class="token punctuation">(</span>c287bfc8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5462</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>c0ffe8c6<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">0</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">0</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.00</span> keys per slot on average.</code></pre></div></figure><p><strong>在新的master上重新分配槽位：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb reshard 192.168.1.10:6379</span><span class="token comment">#如果迁移失败使用此命令修复集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb fix 192.168.1.10:6379</span></code></pre></div></figure><p><strong>为新的master添加新的slave节点：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向当前的Redis集群中添加一个Redis单机服务器192.168.1.17，用于解决当前192.168.1.16单机的潜在宕机问题</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb add-node --slave --master-id c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4 192.168.1.17:6379 192.168.1.10:6379</span></code></pre></div></figure><h3 id="3-3-2-集群维护之动态缩容"><a href="#3-3-2-集群维护之动态缩容" class="headerlink" title="3.3.2 集群维护之动态缩容"></a>3.3.2 集群维护之动态缩容</h3><p><strong>迁移master 的槽位之其他master ：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下线主节点192.168.1.12及其从节点192.168.1.13</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb check 192.168.1.10:6379</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: dca4320ad3082c06d3ecef0376eb17dc44f2f667 <span class="token number">192.168</span>.1.10:6379   slots:1365-5460 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 555035ef69008b2932e6c0b182f503ed621d1cfd <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 4a3e180a9805afa1a325523b2b9da68f4b2958b2S: 06116e2e5a2ec9b57a0b122329d69ecfd91eb5b0 <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c287bfc868cc17ad246d4cbb4377dd2f10260b9dS: 75a67b1cadfc75a6acfa10f32ccc6a58a5bec974 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates dca4320ad3082c06d3ecef0376eb17dc44f2f667M: 4a3e180a9805afa1a325523b2b9da68f4b2958b2 <span class="token number">192.168</span>.1.12:6379   slots:12288-16383 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: c287bfc868cc17ad246d4cbb4377dd2f10260b9d <span class="token number">192.168</span>.1.11:6379   slots:6827-10922 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 59fd0573637bca6de96209ae345afbaf81db73a6 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4M: c0ffe8c67fd7c5267ffed0415ee9cefaf76215d4 <span class="token number">192.168</span>.1.16:6379   slots:0-1364,5461-6826,10923-12287 <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb reshard 192.168.1.10:6379</span><span class="token comment">#如果迁移失败使用此命令修复集群</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb fix 192.168.1.10:6379</span></code></pre></div></figure><p><strong>从集群删除服务器：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis-trib.rb del-node &lt;任意cluster节点的IP:port> &lt;删除节点的ID></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb del-node 192.168.1.10:6379 4a3e180a9805afa1a325523b2b9da68f4b2958b2</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 4a3e180a9805afa1a325523b2b9da68f4b2958b2 from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> SHUTDOWN the node.<span class="token comment">#删除多余的slave从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb del-node 192.168.1.10:6379 555035ef69008b2932e6c0b182f503ed621d1cfd</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 555035ef69008b2932e6c0b182f503ed621d1cfd from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> SHUTDOWN the node.<span class="token comment">#查看集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-trib.rb info 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>dca4320a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.11:6379 <span class="token punctuation">(</span>c287bfc8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>c0ffe8c6<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">5480</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">0</span> keys <span class="token keyword">in</span> <span class="token number">3</span> masters.<span class="token number">0.00</span> keys per slot on average.</code></pre></div></figure><h1 id="4-Redis-6部署"><a href="#4-Redis-6部署" class="headerlink" title="4 Redis 6部署"></a>4 Redis 6部署</h1><p>基于Redis 6部署Redis Cluster集群：</p><p>官方文档：<a href="https://redis.io/topics/cluster-tutorial">https://redis.io/topics/cluster-tutorial</a></p><h2 id="4-1-部署清单"><a href="#4-1-部署清单" class="headerlink" title="4.1 部署清单"></a>4.1 部署清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node13</td><td>192.168.1.13</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node14</td><td>192.168.1.14</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node15</td><td>192.168.1.15</td><td>CentOS7.9</td><td>Redis6.2.9</td><td></td></tr><tr><td>node16</td><td>192.168.1.16</td><td>CentOS7.9</td><td>Redis6.2.9</td><td>集群动态扩容</td></tr><tr><td>node17</td><td>192.168.1.17</td><td>CentOS7.9</td><td>Redis6.2.9</td><td>集群动态扩容</td></tr></tbody></table><h2 id="4-2-安装配置Redis6-2-9"><a href="#4-2-安装配置Redis6-2-9" class="headerlink" title="4.2 安装配置Redis6.2.9"></a>4.2 安装配置Redis6.2.9</h2><p><strong>8个节点分别安装Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#shell脚本一键安装Redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-6.2.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span></code></pre></div></figure><p><strong>8个节点分别配置Redis：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i.bak -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e '/masterauth/a masterauth 123456' -e '/# requirepass/a requirepass 123456' -e '/# cluster-enabled yes/a cluster-enabled yes' -e '/# cluster-config-file nodes-6379.conf/a cluster-config-file nodes-6379.conf' -e '/cluster-require-full-coverage yes/c cluster-require-full-coverage no' /apps/redis/etc/redis.conf</span><span class="token comment">#重启redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart redis</span></code></pre></div></figure><p><strong>创建集群：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令redis-cli的选项 --cluster-replicas 1 表示每个master对应一个slave节点。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster create 192.168.1.10:6379 192.168.1.11:6379 192.168.1.12:6379 192.168.1.13:6379 192.168.1.14:6379 192.168.1.15:6379 --cluster-replicas 1</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">0</span> - <span class="token number">5460</span>Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>Adding replica <span class="token number">192.168</span>.1.14:6379 to <span class="token number">192.168</span>.1.10:6379Adding replica <span class="token number">192.168</span>.1.15:6379 to <span class="token number">192.168</span>.1.11:6379Adding replica <span class="token number">192.168</span>.1.13:6379 to <span class="token number">192.168</span>.1.12:6379M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   replicates d42907fa14783afc68bbb4a751499a9e0bf032aeCan I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span> <span class="token comment">#输入yes自动创建集群</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token builtin class-name">.</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master <span class="token comment">#已经分配的槽位</span>   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">#分配了一个slave</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates d42907fa14783afc68bbb4a751499a9e0bf032aeS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaM: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration. <span class="token comment">#所有节点槽位分配完成</span><span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>. <span class="token comment">#检查打开的槽位</span><span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>. <span class="token comment">#检查插槽覆盖范围</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered. <span class="token comment">#所有槽位(16384个)分配完成</span><span class="token comment">#查看当前集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --no-auth-warning cluster nodes</span>b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379@16379 master - <span class="token number">0</span> <span class="token number">1676790118531</span> <span class="token number">3</span> connected <span class="token number">10923</span>-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379@16379 myself,master - <span class="token number">0</span> <span class="token number">1676790117000</span> <span class="token number">1</span> connected <span class="token number">0</span>-5460e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379@16379 slave d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">0</span> <span class="token number">1676790118000</span> <span class="token number">2</span> connected4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">0</span> <span class="token number">1676790118000</span> <span class="token number">3</span> connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">0</span> <span class="token number">1676790117000</span> <span class="token number">1</span> connectedd42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379@16379 master - <span class="token number">0</span> <span class="token number">1676790119549</span> <span class="token number">2</span> connected <span class="token number">5461</span>-10922</code></pre></div></figure><p><strong>Python脚本实现Redis Cluster集群写入：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install python3</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># pip3 install redis-py-cluster</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim redis_cluster_test.py</span><span class="token comment">#!/usr/bin/env python3</span>from rediscluster <span class="token function">import</span> RedisClusterstartup_nodes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.10"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.11"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.12"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.13"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.14"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"192.168.1.15"</span>, <span class="token string">"port"</span>:6379<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token assign-left variable">redis_conn</span><span class="token operator">=</span> RedisCluster<span class="token punctuation">(</span>startup_nodes<span class="token operator">=</span>startup_nodes,password<span class="token operator">=</span><span class="token string">'123456'</span>,<span class="token assign-left variable">decode_responses</span><span class="token operator">=</span>True<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">10000</span><span class="token punctuation">)</span>:  redis_conn.set<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>,<span class="token string">'value'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">))</span>  print<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>+<span class="token string">':'</span>,redis_conn.get<span class="token punctuation">(</span><span class="token string">'key'</span>+str<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x redis_cluster_test.py </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ./redis_cluster_test.py</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>key9998: value9998key9999: value9999</code></pre></div></figure><p><strong>模拟MASTER故障，对应的SLAVE节点自动提升为新MASTER：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">#查看集群状态，模拟192.168.1.11故障。[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791104491 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791102000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 slave d42907fa14783afc68bbb4a751499a9e0bf032ae 0 1676791103000 2 connected4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791102000 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791102000 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 master - 0 1676791103480 2 connected 5461-10922[root@node11 ~]# systemctl stop redis[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791428000 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791427000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676791425556 7 connected 5461-10922 #192.168.1.15为新的MASTER4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791427594 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791428608 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 master,fail - 1676791204544 1676791201000 2 disconnected#恢复192.168.1.11故障。自动成为SLAVE节点。[root@node11 ~]# systemctl start redis[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676791577584 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676791576000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676791575568 7 connected 5461-109224a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676791576576 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676791578595 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 slave e94943e4670476e4c39bf0d7acc7a8ad114314da 0 1676791578000 7 connected #从节点</code></pre></div></figure><h2 id="4-3-Redis-Cluster集群节点维护"><a href="#4-3-Redis-Cluster集群节点维护" class="headerlink" title="4.3 Redis Cluster集群节点维护"></a>4.3 Redis Cluster集群节点维护</h2><h3 id="4-3-1-集群维护之动态扩容"><a href="#4-3-1-集群维护之动态扩容" class="headerlink" title="4.3.1 集群维护之动态扩容"></a>4.3.1 集群维护之动态扩容</h3><p>场景：三主三从的Redis Cluster架构可能无法满足现有业务的并发写入需求，因此将192.168.1.16，  192.168.1.17动态添加到集群中，但不能影响业务使用和数据丢失。</p><p><strong>注意: 生产环境一般建议master节点为奇数个,比如:3,5,7,以防止脑裂现象。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用以下命令添加新节点，要添加的新Redis节点IP和端口添加到的已有的集群中任意节点的IP:端口</span>add-node new_host:new_port existing_host:existing_port <span class="token punctuation">[</span>--slave --master-id<span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">]</span>new_host:new_port <span class="token comment">#为新添加的主机的IP和端口</span>existing_host:existing_port <span class="token comment">#为已有的集群中任意节点的IP和端口</span></code></pre></div></figure><p><strong>添加新的master节点到集群：</strong></p><figure><div class="code-wrapper"><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">#将一台新的主机192.168.1.16加入集群,以下示例中192.168.1.10可以是任意存在的集群节点。[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster add-node 192.168.1.16:6379 192.168.1.10:6379&gt;&gt;&gt; Adding node 192.168.1.16:6379 to cluster 192.168.1.10:6379&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: b666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379   slots: (0 slots) slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379   slots: (0 slots) slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379   slots: (0 slots) slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.16:6379 to make it join the cluster.[OK] New node added correctly.#观察到该节点已经加入成功，但此节点上没有slot位,也无从节点，而且新的节点是master[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster info 192.168.1.10:6379192.168.1.10:6379 (30825a8a...) -&gt; 3331 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (b666f51a...) -&gt; 3329 keys | 5461 slots | 1 slaves.192.168.1.15:6379 (e94943e4...) -&gt; 3340 keys | 5462 slots | 1 slaves.192.168.1.16:6379 (3773d6d8...) -&gt; 0 keys | 0 slots | 0 slaves.[OK] 10000 keys in 4 masters.0.61 keys per slot on average.[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379192.168.1.10:6379 (30825a8a...) -&gt; 3331 keys | 5461 slots | 1 slaves.192.168.1.12:6379 (b666f51a...) -&gt; 3329 keys | 5461 slots | 1 slaves.192.168.1.15:6379 (e94943e4...) -&gt; 3340 keys | 5462 slots | 1 slaves.192.168.1.16:6379 (3773d6d8...) -&gt; 0 keys | 0 slots | 0 slaves.[OK] 10000 keys in 4 masters.0.61 keys per slot on average.&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.10:6379)M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: b666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 192.168.1.16:6379   slots: (0 slots) masterS: 4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379   slots: (0 slots) slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379   slots: (0 slots) slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379   slots: (0 slots) slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster nodesb666f51a7819dffa33669f5f8a809122e5ce92d6 192.168.1.12:6379@16379 master - 0 1676792333261 3 connected 10923-1638330825a8ad0835ae99dbf85239551f65a1f20bfaa 192.168.1.10:6379@16379 myself,master - 0 1676792329000 1 connected 0-5460e94943e4670476e4c39bf0d7acc7a8ad114314da 192.168.1.15:6379@16379 master - 0 1676792331000 7 connected 5461-109223773d6d8b7f679b9d36545af0df3ed2f189aedc3 192.168.1.16:6379@16379 master - 0 1676792334266 0 connected4a7175160eb05b564006690320e15837e4f2698f 192.168.1.13:6379@16379 slave b666f51a7819dffa33669f5f8a809122e5ce92d6 0 1676792331000 3 connectedd96ec7cfb7cc36df811fba636a27fce5ed378a17 192.168.1.14:6379@16379 slave 30825a8ad0835ae99dbf85239551f65a1f20bfaa 0 1676792332249 1 connectedd42907fa14783afc68bbb4a751499a9e0bf032ae 192.168.1.11:6379@16379 slave e94943e4670476e4c39bf0d7acc7a8ad114314da 0 1676792333000 7 connected[root@node10 ~]# redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster infocluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:7cluster_size:3cluster_current_epoch:7cluster_my_epoch:1cluster_stats_messages_ping_sent:2482cluster_stats_messages_pong_sent:2486cluster_stats_messages_fail_sent:4cluster_stats_messages_auth-ack_sent:1cluster_stats_messages_sent:4973cluster_stats_messages_ping_received:2480cluster_stats_messages_pong_received:2482cluster_stats_messages_meet_received:6cluster_stats_messages_fail_received:1cluster_stats_messages_auth-req_received:1cluster_stats_messages_received:4970</code></pre></div></figure><p><strong>在新的master上重新分配槽位：</strong></p><p>新的node节点加到集群之后,默认是master节点，但是没有slots，需要重新分配，添加主机之后需要对添加至集群中的新主机重新分片,否则其没有分片也就无法写入数据。 </p><p><strong>注意: 重新分配槽位需要清空数据,所以需要先备份数据,扩展后再恢复数据。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster reshard 192.168.1.10:6379</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.How many slots <span class="token keyword">do</span> you want to move <span class="token punctuation">(</span>from <span class="token number">1</span> to <span class="token number">16384</span><span class="token punctuation">)</span>?4096 <span class="token comment">#新分配多少个槽位=16384/master个数</span>What is the receiving <span class="token function">node</span> ID? d6e2eca6b338b717923f64866bd31d42e52edc98 <span class="token comment">#新的master的ID</span>Please enter all the <span class="token builtin class-name">source</span> <span class="token function">node</span> IDs.Type <span class="token string">'all'</span> to use all the nodes as <span class="token builtin class-name">source</span> nodes <span class="token keyword">for</span> the <span class="token builtin class-name">hash</span> slots.Type <span class="token string">'done'</span> once you entered all the <span class="token builtin class-name">source</span> nodes IDs.Source <span class="token function">node</span> <span class="token comment">#1: all #输入all,将哪些源主机的槽位分配给新的节点，all是自动在所有的redisnode选择划分，如果是从redis cluster删除某个主机可以使用此方式将指定主机上的槽位全部移动到别的redis主机。</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Do you want to proceed with the proposed reshard plan <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span> <span class="token comment">#确认分配</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Moving slot <span class="token number">12282</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12283</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: <span class="token builtin class-name">.</span>Moving slot <span class="token number">12284</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12285</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: <span class="token builtin class-name">.</span>Moving slot <span class="token number">12286</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379: Moving slot <span class="token number">12287</span> from <span class="token number">192.168</span>.1.12:6379 to <span class="token number">192.168</span>.1.16:6379:<span class="token comment">#确定slot分配成功</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure><p><strong>为新的master添加新的slave节点：</strong></p><p>需要再向当前的Redis集群中添加一个Redis单机服务器192.168.1.17，用于解决当前192.168.1.16单机的潜在宕机问题，即实现相应的高可用功能，有两种方式：  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式一：在新加节点到集群时，直接将之设置为slave</span>redis-cli <span class="token parameter variable">-a</span> <span class="token number">123456</span> <span class="token parameter variable">--cluster</span> add-node <span class="token number">10.0</span>.0.78:6379 <span class="token operator">&lt;</span>任意集群节点<span class="token operator">></span>:6379 --cluster-slave --cluster-master-id <span class="token operator">&lt;</span>master ID<span class="token operator">></span><span class="token comment">#直接加为slave节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster add-node 192.168.1.17:6379 192.168.1.10:6379 --cluster-slave --cluster-master-id 3773d6d8b7f679b9d36545af0df3ed2f189aedc3</span>Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.<span class="token operator">>></span><span class="token operator">></span> Adding <span class="token function">node</span> <span class="token number">192.168</span>.1.17:6379 to cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> masterS: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token operator">>></span><span class="token operator">></span> Send CLUSTER MEET to <span class="token function">node</span> <span class="token number">192.168</span>.1.17:6379 to <span class="token function">make</span> it <span class="token function">join</span> the cluster.Waiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token operator">>></span><span class="token operator">></span> Configure <span class="token function">node</span> as replica of <span class="token number">192.168</span>.1.16:6379.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> New <span class="token function">node</span> added correctly.<span class="token comment">#验证是否添加成功</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning cluster info</span>cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:8cluster_size:4cluster_current_epoch:8cluster_my_epoch:1cluster_stats_messages_ping_sent:3337cluster_stats_messages_pong_sent:3323cluster_stats_messages_fail_sent:4cluster_stats_messages_auth-ack_sent:1cluster_stats_messages_update_sent:9cluster_stats_messages_sent:6674cluster_stats_messages_ping_received:3316cluster_stats_messages_pong_received:7433cluster_stats_messages_meet_received:7cluster_stats_messages_fail_received:1cluster_stats_messages_auth-req_received:1cluster_stats_messages_received:10758</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式二：先将新节点加入集群，再修改为slave</span><span class="token comment">#将192.168.1.17添加到集群中。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster add-node 192.168.1.17:6379 192.168.1.10:6379</span><span class="token comment">#更改新节点更改状态为slave</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.17 -p 6379 -a 123456 --no-auth-warning</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODES <span class="token comment">##查看当前集群节点，找到目标master的ID</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER REPLICATE 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token comment">#将其设置slave，命令格式为CLUSTER REPLICATE MASTER_ID</span><span class="token number">192.168</span>.1.17:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CLUSTER NODES <span class="token comment">#再次查看集群节点状态，验证节点是否已经更改为指定master的slave</span></code></pre></div></figure><h3 id="4-3-2-集群维护之动态缩容"><a href="#4-3-2-集群维护之动态缩容" class="headerlink" title="4.3.2 集群维护之动态缩容"></a>4.3.2 集群维护之动态缩容</h3><p>场景：由于192.168.1.12服务器故障，需将现有Redis集群的8台主服务器中的master 192.168.1.12和对应的slave 192.168.1.13下线。</p><p><strong>删除节点过程：</strong>添加节点的时候是先添加node节点到集群，然后分配槽位，删除节点的操作与添加节点的操作正好相反，是先将被要删除的Redis node上的槽位迁移到集群中的其他Redis node节点上，然后再将其删除，如果一个Redis node节点上的槽位没有被完全迁移，删除该node的时候会提示有数据且无法删除。  </p><p><strong>注意: 被迁移Redis master源服务器必须保证没有数据，否则迁移报错并会被强制中断。</strong></p><p><strong>迁移master 的槽位之其他master ：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment">#  redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2511</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2500</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2515</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">2474</span> keys <span class="token operator">|</span> <span class="token number">4096</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#连接到任意集群节点，#最后1365个slot从192.168.1.12移动到第一个master节点192.168.1.10上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster reshard 192.168.1.10:6379</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots:<span class="token punctuation">[</span><span class="token number">12288</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">4096</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates b666f51a7819dffa33669f5f8a809122e5ce92d6S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.How many slots <span class="token keyword">do</span> you want to move <span class="token punctuation">(</span>from <span class="token number">1</span> to <span class="token number">16384</span><span class="token punctuation">)</span>? <span class="token number">1356</span> <span class="token comment">#共4096/3分别给其它三个master节点</span>What is the receiving <span class="token function">node</span> ID? 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token comment">#要迁移哪个master的ID(192.168.1.10的ID)</span>Please enter all the <span class="token builtin class-name">source</span> <span class="token function">node</span> IDs.  Type <span class="token string">'all'</span> to use all the nodes as <span class="token builtin class-name">source</span> nodes <span class="token keyword">for</span> the <span class="token builtin class-name">hash</span> slots.  Type <span class="token string">'done'</span> once you entered all the <span class="token builtin class-name">source</span> nodes IDs.Source <span class="token function">node</span> <span class="token comment">#1: b666f51a7819dffa33669f5f8a809122e5ce92d6 #输入要删除节点192.168.1.12的ID</span>Source <span class="token function">node</span> <span class="token comment">#2: done</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    Moving slot <span class="token number">13636</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13637</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13638</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13639</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13640</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13641</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13642</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6    Moving slot <span class="token number">13643</span> from b666f51a7819dffa33669f5f8a809122e5ce92d6Do you want to proceed with the proposed reshard plan <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span><span class="token comment">#非交互式方式:再将1365个slot从192.168.1.12移动到第二个master节点192.168.1.15上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster reshard 192.168.1.10:6379 --cluster-slots 1365 --cluster-from b666f51a7819dffa33669f5f8a809122e5ce92d6 --cluster-to e94943e4670476e4c39bf0d7acc7a8ad114314da --cluster-yes</span><span class="token comment">#最后的slot从192.168.1.12移动到第三个master节点192.168.1.16上</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 --cluster reshard 192.168.1.10:6379 --cluster-slots 1375 --cluster-from b666f51a7819dffa33669f5f8a809122e5ce92d6 --cluster-to 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 --cluster-yes</span><span class="token comment">#确认192.168.1.12的所有slot都移走了，上面的slave也自动删除，成为其它master的slave</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3351</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.12:6379 <span class="token punctuation">(</span>b666f51a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">0</span> keys <span class="token operator">|</span> <span class="token number">0</span> slots <span class="token operator">|</span> <span class="token number">0</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3335</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3314</span> keys <span class="token operator">|</span> <span class="token number">5471</span> slots <span class="token operator">|</span> <span class="token number">2</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">4</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">12288</span>-13643<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5452</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: b666f51a7819dffa33669f5f8a809122e5ce92d6 <span class="token number">192.168</span>.1.12:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> masterM: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13644</span>-15008<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15009</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5471</span> slots<span class="token punctuation">)</span> master   <span class="token number">2</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 4a7175160eb05b564006690320e15837e4f2698f <span class="token number">192.168</span>.1.13:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure><p><strong>从集群删除服务器：</strong></p><p>虽然槽位已经迁移完成，但是服务器IP信息还在集群当中，因此还需要将IP信息从集群删除。</p><p><strong>注意: 删除服务器前,必须清除主机上面的槽位,否则会删除主机失败。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-a</span> <span class="token number">123456</span> <span class="token parameter variable">--cluster</span> del-node <span class="token operator">&lt;</span>任意cluster节点的IP:port<span class="token operator">></span> <span class="token operator">&lt;</span>删除节点的ID<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster del-node 192.168.1.10:6379 b666f51a7819dffa33669f5f8a809122e5ce92d6</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> b666f51a7819dffa33669f5f8a809122e5ce92d6 from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER RESET SOFT to the deleted node.<span class="token comment">#删除多余的slave从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster del-node 192.168.1.10:6379 4a7175160eb05b564006690320e15837e4f2698f</span><span class="token operator">>></span><span class="token operator">></span> Removing <span class="token function">node</span> 4a7175160eb05b564006690320e15837e4f2698f from cluster <span class="token number">192.168</span>.1.10:6379<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER FORGET messages to the cluster<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER RESET SOFT to the deleted node.<span class="token comment">#查看集群状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -c -h 192.168.1.10 -a 123456 --no-auth-warning --cluster check 192.168.1.10:6379</span><span class="token number">192.168</span>.1.10:6379 <span class="token punctuation">(</span>30825a8a<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3351</span> keys <span class="token operator">|</span> <span class="token number">5452</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.15:6379 <span class="token punctuation">(</span>e94943e4<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3335</span> keys <span class="token operator">|</span> <span class="token number">5461</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token number">192.168</span>.1.16:6379 <span class="token punctuation">(</span>3773d6d8<span class="token punctuation">..</span>.<span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">3314</span> keys <span class="token operator">|</span> <span class="token number">5471</span> slots <span class="token operator">|</span> <span class="token number">1</span> slaves.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span class="token number">10000</span> keys <span class="token keyword">in</span> <span class="token number">3</span> masters.<span class="token number">0.61</span> keys per slot on average.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">192.168</span>.1.10:6379<span class="token punctuation">)</span>M: 30825a8ad0835ae99dbf85239551f65a1f20bfaa <span class="token number">192.168</span>.1.10:6379   slots:<span class="token punctuation">[</span><span class="token number">1365</span>-5460<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">12288</span>-13643<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5452</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: e94943e4670476e4c39bf0d7acc7a8ad114314da <span class="token number">192.168</span>.1.15:6379   slots:<span class="token punctuation">[</span><span class="token number">6827</span>-10922<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13644</span>-15008<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: b729c6b6f3551bba304fffbba947d67d65e264a8 <span class="token number">192.168</span>.1.17:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 3773d6d8b7f679b9d36545af0df3ed2f189aedc3M: 3773d6d8b7f679b9d36545af0df3ed2f189aedc3 <span class="token number">192.168</span>.1.16:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-1364<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5461</span>-6826<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10923</span>-12287<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15009</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5471</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: d96ec7cfb7cc36df811fba636a27fce5ed378a17 <span class="token number">192.168</span>.1.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 30825a8ad0835ae99dbf85239551f65a1f20bfaaS: d42907fa14783afc68bbb4a751499a9e0bf032ae <span class="token number">192.168</span>.1.11:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates e94943e4670476e4c39bf0d7acc7a8ad114314da<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).Redis哨兵机制</title>
    <link href="/2023/02/18/NoSQL/Redis/redis05/"/>
    <url>/2023/02/18/NoSQL/Redis/redis05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis哨兵-Sentinel-机制"><a href="#1-Redis哨兵-Sentinel-机制" class="headerlink" title="1.Redis哨兵(Sentinel)机制"></a>1.Redis哨兵(Sentinel)机制</h1><p>主从架构无法实现master和slave角色的自动切换，即当master出现redis服务异常，主机断电，磁盘损坏等问题导致master无法使用，而redis主从复制无法实现自动的故障转移(将slave自动提升为新master)，需要手动修改配置，才能切换到slave redis服务器，另外当单台Redis服务器性能无法满足业务写入需求的时候，也无法横向扩展redis服务的并行写入性能。</p><h2 id="1-1-Sentinel工作原理"><a href="#1-1-Sentinel工作原理" class="headerlink" title="1.1 Sentinel工作原理"></a>1.1 Sentinel工作原理</h2><ol><li>Sentinel进程是用于监控redis集群中master主服务器工作的状态，在master主服务器发生故障的时候，可以实现master和slave服务器的切换，保证系统的高可用。</li><li>Sentinel是一个分布式系统，可以在一个架构中运行多个Sentinel进程，这些进程使用gossip protocols来接收关于master主服务器是否下线的信息，并使用投票协议(Agreement Protocols)来决定是否执行自动故障迁移，以及选择哪个slave作为新的master。</li><li>每个Sentinel进程会向其它Sentinel、master、slave定时发送消息，以确定对方是否”存活”，如果发现对方在指定配置时间内未得到回应，则暂时认为对方已离线，即宕机。</li><li>当Sentinel集群中多数的Sentinel进程在对master主服务器做出down的判断，并且通过SENTINEL is-master-down-by-addr命令互相交流之后，得出的master服务器下线的判断。</li><li>通过一定的vote算法，从剩下的slave从服务器节点中，选一台提升为master服务器节点，然后自动修改相关配置，并开启故障转移(failover)。</li></ol><ul><li>Sentinel机制可以解决master和slave角色的自动切换问题，但单个 Master 的性能瓶颈问题无法解决,类似于MySQL中的MHA功能。</li><li>Redis Sentinel中的Sentinel节点个数应该为大于等于3且最好为奇数。</li><li>客户端初始化时连接的是Sentinel节点集合，不再是具体的Redis节点，但Sentinel只是配置中心不是代理。</li><li>Redis Sentinel 节点与普通redis 没有区别,要实现读写分离依赖于客户端程序。</li><li>redis 3.0 之前版本中,生产环境一般使用哨兵模式,3.0后推出redis cluster功能,可以支持更大规模的生产环境。</li></ul><p><strong>Sentinel中的三个定时任务：</strong></p><ul><li>每10s每个Sentinel对master和slave执行info<ul><li>发现slave节点</li><li>确认主从关系</li></ul></li><li>每2s每个Sentinel通过master节点的channel交换信息（pub&#x2F;sub）<ul><li>通过sentinel__:hello频道交互。</li><li>交互对节点的“看法”和自身信息。</li></ul></li><li>每1s每个Sentinel对其它Sentinel和redis执行ping</li></ul><p><img src="/2023/02/18/NoSQL/Redis/redis05/image-20230226102632664.png" alt="image-20230226102632664">  </p><h2 id="1-2-配置Sentinel机制"><a href="#1-2-配置Sentinel机制" class="headerlink" title="1.2 配置Sentinel机制"></a>1.2 配置Sentinel机制</h2><h3 id="1-2-1-配置清单"><a href="#1-2-1-配置清单" class="headerlink" title="1.2.1 配置清单"></a>1.2.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>master</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr></tbody></table><h3 id="1-2-2-安装redis配置主从"><a href="#1-2-2-安装redis配置主从" class="headerlink" title="1.2.2 安装redis配置主从"></a>1.2.2 安装redis配置主从</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台主机安装redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span><span class="token comment">#三台主机配置redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e 's/^# masterauth .*/masterauth 123456/' -e 's/^# requirepass .*/requirepass 123456/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/protected-mode yes/protected-mode no/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@daemonize no@daemonize yes@' /etc/redis.conf</span><span class="token comment">#两台从节点配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span><span class="token comment">#查看master服务器状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:2slave0:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">15</span>,lag<span class="token operator">=</span><span class="token number">1</span>slave1:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">15</span>,lag<span class="token operator">=</span><span class="token number">0</span>master_repl_offset:15repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:14</code></pre></div></figure><h3 id="1-2-3-配置哨兵文件"><a href="#1-2-3-配置哨兵文件" class="headerlink" title="1.2.3 配置哨兵文件"></a>1.2.3 配置哨兵文件</h3><p>Sentinel实际上是一个特殊的redis服务器,有些redis指令支持,但很多指令并不支持，默认监听在26379&#x2F;tcp端口。哨兵可以不和Redis服务器部署在一起，但一般部署在一起以节约成本。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三个哨兵服务器的配置都如下</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># grep -vE "^#|^$" /etc/redis-sentinel.conf</span>port <span class="token number">26379</span><span class="token function">dir</span> /tmpsentinel monitor mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span> <span class="token number">2</span>sentinel auth-pass mymaster <span class="token number">123456</span>sentinel down-after-milliseconds mymaster <span class="token number">3000</span>sentinel parallel-syncs mymaster <span class="token number">1</span>sentinel failover-timeout mymaster <span class="token number">180000</span>logfile /var/log/redis/sentinel.logprotected-mode no<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/redis-sentinel.conf 192.168.1.11:/etc/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/redis-sentinel.conf 192.168.1.12:/etc/</span></code></pre></div></figure><h3 id="1-2-4-启动哨兵"><a href="#1-2-4-启动哨兵" class="headerlink" title="1.2.4 启动哨兵"></a>1.2.4 启动哨兵</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动哨兵服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis-sentinel.service</span><span class="token comment">#验证哨兵端口</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ss -tnl | grep 26379</span>LISTEN     <span class="token number">0</span>      <span class="token number">128</span>          *:26379                    *:*                  LISTEN     <span class="token number">0</span>      <span class="token number">128</span>       <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:26379                 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*<span class="token comment">#当前sentinel状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 26379</span><span class="token number">127.0</span>.0.1:2637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info sentinel<span class="token comment"># Sentinel</span>sentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>ok,address<span class="token operator">=</span><span class="token number">192.168</span>.1.10:6379,slaves<span class="token operator">=</span><span class="token number">2</span>,sentinels<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#两个slave,三个sentinel服务器</span></code></pre></div></figure><h3 id="1-2-5-模拟故障"><a href="#1-2-5-模拟故障" class="headerlink" title="1.2.5 模拟故障"></a>1.2.5 模拟故障</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止Redis Master 节点测试故障转移。</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop redis</span><span class="token comment">#查看故障后的master信息</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456 -p 26379</span><span class="token number">127.0</span>.0.1:2637<span class="token operator"><span class="token file-descriptor important">9</span>></span> INFO sentinel<span class="token comment"># Sentinel</span>sentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>ok,address<span class="token operator">=</span><span class="token number">192.168</span>.1.11:6379,slaves<span class="token operator">=</span><span class="token number">2</span>,sentinels<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#192.168.1.11成为master</span><span class="token comment">#查看故障转移日志</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.489 <span class="token comment"># +sdown master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +odown master mymaster 192.168.1.10 6379 #quorum 2/2</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +new-epoch 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.547 <span class="token comment"># +try-failover master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.549 <span class="token comment"># +vote-for-leader 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.556 <span class="token comment"># e4d8eb124ef9f7f4da200e1df4120c718ef80cf8 voted for 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.559 <span class="token comment"># 4a808bd8597172995513ffeb6acdca019ce66d77 voted for 5e7cfbf246c8e14a00ee92bae97fe5da22b390eb 1</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.606 <span class="token comment"># +elected-leader master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.606 <span class="token comment"># +failover-state-select-slave master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.666 <span class="token comment"># +selected-slave slave 192.168.1.11:6379 192.168.1.11 6379 @ mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.667 * +failover-state-send-slaveof-noone slave <span class="token number">192.168</span>.1.11:6379 <span class="token number">192.168</span>.1.11 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:47.734 * +failover-state-wait-promotion slave <span class="token number">192.168</span>.1.11:6379 <span class="token number">192.168</span>.1.11 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.579 <span class="token comment"># +promoted-slave slave 192.168.1.11:6379 192.168.1.11 6379 @ mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.579 <span class="token comment"># +failover-state-reconf-slaves master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:48.632 * +slave-reconf-sent slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.603 * +slave-reconf-inprog slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.603 * +slave-reconf-done slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.10 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># -odown master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># +failover-end master mymaster 192.168.1.10 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.672 <span class="token comment"># +switch-master mymaster 192.168.1.10 6379 192.168.1.11 6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.673 * +slave slave <span class="token number">192.168</span>.1.12:6379 <span class="token number">192.168</span>.1.12 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:49.673 * +slave slave <span class="token number">192.168</span>.1.10:6379 <span class="token number">192.168</span>.1.10 <span class="token number">6379</span> @ mymaster <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token number">1520</span>:X <span class="token number">27</span> Feb <span class="token number">20</span>:54:52.676 <span class="token comment"># +sdown slave 192.168.1.10:6379 192.168.1.10 6379 @ mymaster 192.168.1.11 6379</span><span class="token comment">#故障转移后的redis配置文件会被自动修改，故障转移后redis.conf中的slaveof行的master IP会被修改</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># grep ^slaveof /etc/redis.conf</span>slaveof <span class="token number">192.168</span>.1.11 <span class="token number">6379</span><span class="token comment">#当故障节点恢复后，会自动为从节点</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># grep ^slaveof /etc/redis.conf</span>slaveof <span class="token number">192.168</span>.1.11 <span class="token number">6379</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).Redis主从复制</title>
    <link href="/2023/02/18/NoSQL/Redis/redis04/"/>
    <url>/2023/02/18/NoSQL/Redis/redis04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis主从复制"><a href="#1-Redis主从复制" class="headerlink" title="1.Redis主从复制"></a>1.Redis主从复制</h1><p>虽然Redis可以实现单机的数据持久化，但无论是RDB也好或者AOF也好，都解决不了单点宕机问题。此外,单机的性能也是有极限的,因此需要使用另外的技术来解决单点故障和性能扩展的问题。</p><h2 id="1-1-Redis主从复制架构"><a href="#1-1-Redis主从复制架构" class="headerlink" title="1.1 Redis主从复制架构"></a>1.1 Redis主从复制架构</h2><p>主从模式（master&#x2F;slave），可以实现Redis数据的跨主机备份。  程序端连接到高可用负载的VIP，然后连接到负载服务器设置的Redis后端real server，此模式不需要在程序里面配 置Redis服务器的真实IP地址，当后期Redis服务器IP地址发生变更只需要更改redis 相应的后端real server即可， 可避免更改程序中的IP地址设置。</p><p><img src="/2023/02/18/NoSQL/Redis/redis04/image-20230227210731764.png" alt="image-20230227210731764">  </p><h2 id="1-2-配置Redis主从"><a href="#1-2-配置Redis主从" class="headerlink" title="1.2 配置Redis主从"></a>1.2 配置Redis主从</h2><h3 id="1-2-1-配置清单"><a href="#1-2-1-配置清单" class="headerlink" title="1.2.1 配置清单"></a>1.2.1 配置清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>master</td></tr><tr><td>node11</td><td>192.168.1.11</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>CentOS7.9</td><td>Redis 3.2.12</td><td>slave</td></tr></tbody></table><h3 id="1-2-2-安装redis"><a href="#1-2-2-安装redis" class="headerlink" title="1.2.2 安装redis"></a>1.2.2 安装redis</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台主机安装redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span><span class="token comment">#三台主机配置redis</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/bind 127.0.0.1/bind 0.0.0.0/' -e 's/^# masterauth .*/masterauth 123456/' -e 's/^# requirepass .*/requirepass 123456/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/protected-mode yes/protected-mode no/' /etc/redis.conf</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@daemonize no@daemonize yes@' /etc/redis.conf</span></code></pre></div></figure><h3 id="1-2-3-配置Redis主从"><a href="#1-2-3-配置Redis主从" class="headerlink" title="1.2.3 配置Redis主从"></a>1.2.3 配置Redis主从</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#两台从节点配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># echo "slaveof 192.168.1.10 6379" >> /etc/redis.conf</span><span class="token comment">#启动redis服务</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now redis</span></code></pre></div></figure><h3 id="1-2-4-查看主从状态"><a href="#1-2-4-查看主从状态" class="headerlink" title="1.2.4 查看主从状态"></a>1.2.4 查看主从状态</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看master状态</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:2slave0:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">43</span>,lag<span class="token operator">=</span><span class="token number">1</span>slave1:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">43</span>,lag<span class="token operator">=</span><span class="token number">1</span>master_repl_offset:57repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:56<span class="token comment">#查看slave状态</span><span class="token comment">#在从节点执行 REPLIATOF NO ONE 指令可以取消主从复制</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:slavemaster_host:192.168.1.10master_port:6379master_link_status:upmaster_last_io_seconds_ago:0master_sync_in_progress:0slave_repl_offset:85slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0</code></pre></div></figure><h3 id="1-2-5-验证主从数据同步"><a href="#1-2-5-验证主从数据同步" class="headerlink" title="1.2.5 验证主从数据同步"></a>1.2.5 验证主从数据同步</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#master添加key</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> chs <span class="token number">1</span>OK<span class="token comment">#slave查看key</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get chs<span class="token string">"1"</span><span class="token comment">#slave状态只读无法写入数据</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -a 123456</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can't <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only slave.</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Redis持久化</title>
    <link href="/2023/02/16/NoSQL/Redis/redis03/"/>
    <url>/2023/02/16/NoSQL/Redis/redis03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis持久化"><a href="#1-Redis持久化" class="headerlink" title="1.Redis持久化"></a>1.Redis持久化</h1><p>Redis虽然是一个内存级别的缓存程序，也就是redis 是使用内存进行数据的缓存的，但是其可以将内存的数据按照一定的策略保存到硬盘上，从而实现数据持久保存的目的。目前Redis支持两种不同方式的数据持久化保存机制，分别是RDB和AOF。</p><h2 id="1-1-RDB模式"><a href="#1-1-RDB模式" class="headerlink" title="1.1 RDB模式"></a>1.1 RDB模式</h2><h3 id="1-1-1-RDB工作原理"><a href="#1-1-1-RDB工作原理" class="headerlink" title="1.1.1 RDB工作原理"></a>1.1.1 RDB工作原理</h3><p>RDB(Redis DataBase)：基于时间的快照，其默认只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前时间点之间未做快照的数据。</p><p>Redis从master主进程先fork出一个子进程，使用写时复制机制，子进程将内存的数据保存为一个临时文件，比如：tmp-.rdb，当数据保存完成之后再将上一次保存的RDB文件替换掉，然后关闭子进程，这样可以保证每一次做RDB快照保存的数据都是完整的。</p><p>因为直接替换RDB文件的时候，可能会出现突然断电等问题，而导致RDB文件还没有保存完整就因为突然关机停止保存，而导致数据丢失的情况，后续可以手动将每次生成的RDB文件进行备份，这样可以最大化保存历史数据。</p><p><img src="/2023/02/16/NoSQL/Redis/redis03/image-20230226094557677.png" alt="image-20230226094557677">  </p><h3 id="1-1-2-RDB相关配置"><a href="#1-1-2-RDB相关配置" class="headerlink" title="1.1.2 RDB相关配置"></a>1.1.2 RDB相关配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SNAPSHOTTING  ################################</span>save <span class="token number">3600</span> <span class="token number">1</span> <span class="token comment">#在900秒内有1个key内容发生更改,就执行快照机制</span>save <span class="token number">300</span> <span class="token number">100</span> <span class="token comment">#在300秒内有10个key内容发生更改,就执行快照机制</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment">#60秒内如果有10000个key以上的变化，就自动快照备份</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment">#默认为yes时,可能会因空间满等原因快照无法保存出错时，会禁止redis写入操作，生产建议为no</span>rdbcompression <span class="token function">yes</span> <span class="token comment">#持久化到RDB文件时，是否压缩，"yes"为压缩，"no"则反之</span>rdbchecksum <span class="token function">yes</span> <span class="token comment">#是否对备份文件开启RC64校验，默认是开启</span>dbfilename dump.rdb <span class="token comment">#快照文件名</span>rdb-del-sync-files no<span class="token function">dir</span> ./ <span class="token comment">#快照文件保存路径</span></code></pre></div></figure><h3 id="1-1-3-配置RDB模式"><a href="#1-1-3-配置RDB模式" class="headerlink" title="1.1.3 配置RDB模式"></a>1.1.3 配置RDB模式</h3><ul><li>save：同步，会阻塞其它命令，不推荐使用。</li><li>bgsave：异步后台执行，不影响其它命令的执行。</li><li>自动：制定规则，自动执行。</li></ul><h3 id="1-1-4-RDB模式优缺点"><a href="#1-1-4-RDB模式优缺点" class="headerlink" title="1.1.4 RDB模式优缺点"></a>1.1.4 RDB模式优缺点</h3><p>优点：</p><ul><li>RDB快照保存了某个时间点的数据，可以通过脚本执行redis指令bgsave(非阻塞，后台执行)或者save(会阻塞写操作,不推荐)命令自定义时间点备份，可以保留多个备份，当出现问题可以恢复到不同时间点的版本,很适合备份,并且此文件格式也支持有不少第三方工具可以进行后续的数据分析。比如: 可以在最近的24小时内，每小时备份一次RDB文件，并且在每个月的每一天，也备份一个RDB文件。这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li><li>RDB可以最大化Redis的性能，父进程在保存 RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I&#x2F;O 操作。</li><li>RDB在大量数据,比如几个G的数据，恢复的速度比AOF的快。</li></ul><p>缺点：</p><ul><li><p>不能实时保存数据，可能会丢失自上一次执行RDB备份到当前的内存数据。</p><p>如果你需要尽量避免在服务器故障时丢失数据，那么RDB并不适合。虽然Redis允许设置不同的保存点（save point）来控制保存RDB文件的频率，但是，因为RDB文件需要保存整个数据集的状态，所以它并不是一个轻松快速的操作。因此一般会超过5分钟以上才保存一次RDB文件。在这种情况下，一旦发生故障停机，你就可能会丢失好几分钟的数据。</p></li><li><p>当数据量非常大的时候，从父进程fork子进程进行保存至RDB文件时需要一点时间，可能是毫秒或者秒，取决于磁盘IO性能。 </p><p>在数据集比较庞大时，fork()可能会非常耗时，造成服务器在一定时间内停止处理客户端﹔如果数据集非常巨大，并且CPU时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒或更久。虽然 AOF重写也需要进行fork()，但无论AOF重写的执行间隔有多长，数据的持久性都不会有任何损失。</p></li></ul><h2 id="1-2-AOF模式"><a href="#1-2-AOF模式" class="headerlink" title="1.2 AOF模式"></a>1.2 AOF模式</h2><h3 id="1-2-1-AOF工作原理"><a href="#1-2-1-AOF工作原理" class="headerlink" title="1.2.1 AOF工作原理"></a>1.2.1 AOF工作原理</h3><p>AOF：AppendOnylFile，按照操作顺序依次将操作追加到指定的日志文件末尾。</p><p>AOF 和 RDB 一样使用了写时复制机制，AOF默认为每秒钟 fsync一次，即将执行的命令保存到AOF文件当中，这样即使redis服务器发生故障最多只丢失1秒钟之内的数据，也可以设置不同的fsync策略always，即设置每次执行命令的时候执行fsync，fsync会在后台执行线程，所以主线程可以继续处理用户的正常请求而不受到写入AOF文件的I&#x2F;O影响。</p><p>同时启用RDB和AOF,进行恢复时,默认AOF文件优先级高于RDB文件,即会使用AOF文件进行恢复。</p><p><img src="/2023/02/16/NoSQL/Redis/redis03/image-20230226100125771.png" alt="image-20230226100125771">  </p><h3 id="1-2-2-AOF相关配置"><a href="#1-2-2-AOF相关配置" class="headerlink" title="1.2.2 AOF相关配置"></a>1.2.2 AOF相关配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment">##是否开启AOF日志记录，默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了，但是redis如果中途宕机，会导致可能有几分钟的数据丢失(取决于dump数据的间隔时间)，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认不启用此功能。</span>appendonly noappendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#文本文件AOF的文件名，存放在dir指令指定的目录中</span><span class="token comment">#aof持久化策略的配置</span><span class="token comment">#no表示由操作系统保证数据同步到磁盘,Linux的默认fsync策略是30秒，最多会丢失30s的数据</span><span class="token comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘,安全性高,性能较差</span><span class="token comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据,此为默认值,也生产建议值</span>appendfsync everysec<span class="token comment">#同时在执行bgrewriteaof操作和主进程写aof文件的操作，两者都会操作磁盘，而bgrewriteaof往往会涉及大量磁盘操作，这样就会造成主进程在写aof文件的时候出现阻塞的情形,以下参数实现控制。</span><span class="token comment">##在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。</span><span class="token comment">#默认为no,表示"不暂缓",新的aof记录仍然会被立即同步到磁盘，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。</span><span class="token comment">#yes,相当于将appendfsync设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候redis挂掉，就会丢失数据。丢失多少数据呢？Linux的默认fsync策略是30秒，最多会丢失30s的数据,但由于yes性能较好而且会避免出现阻塞因此比较推荐。</span><span class="token comment">#rewrite 即对aof文件进行整理,将空闲空间回收,从而可以减少恢复数据时间。</span>no-appendfsync-on-rewrite noauto-aof-rewrite-percentage <span class="token number">100</span> <span class="token comment">#当Aof log增长超过指定百分比例时，重写AOF文件，设置为0表示不自动重写Aof日志，重写是为了使aof体积保持最小，但是还可以确保保存最完整的数据。</span>auto-aof-rewrite-min-size 64mb <span class="token comment">#触发aof rewrite的最小文件大小</span>aof-load-truncated <span class="token function">yes</span> <span class="token comment">#是否加载由于某些原因导致的末尾异常的AOF文件(主进程被kill/断电等)，建议yes。</span><span class="token comment">#redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内容则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</span>aof-use-rdb-preamble <span class="token function">yes</span></code></pre></div></figure><h3 id="1-2-3-配置AOF模式"><a href="#1-2-3-配置AOF模式" class="headerlink" title="1.2.3 配置AOF模式"></a>1.2.3 配置AOF模式</h3><h3 id="1-2-4-AOF模式优缺点"><a href="#1-2-4-AOF模式优缺点" class="headerlink" title="1.2.4 AOF模式优缺点"></a>1.2.4 AOF模式优缺点</h3><p>优点：</p><ul><li>数据安全性相对较高，根据所使用的fsync策略(fsync是同步内存中redis所有已经修改的文件到存储设备)，默认是appendfsync everysec，即每秒执行一次 fsync,在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据( fsync会在后台线程执行，所以主线程可以继续努力地处理命令请求)  。</li><li>由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中不需要seek, 即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，可以通过 redis-check-aof 工具来解决数据一致性的问题。</li><li>Redis可以在 AOF文件体积变得过大时，自动地在后台对AOF进行重写,重写后的新AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建新 AOF文件的过程中，append模式不断的将修改数据追加到现有的 AOF文件里面，即使重写过程中发生停机，现有的 AOF文件也不会丢失。而一旦新AOF文件创建完毕，Redis就会从旧AOF文件切换到新AOF文件，并开始对新AOF文件进行追加操作。</li><li>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，也可以通过该文件完成数据的重建。AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以Redis协议的格式保存，因此 AOF文件的内容非常容易被人读懂，对文件进行分析(parse)也很轻松。导出（export)AOF文件也非常简单:举个例子，如果不小心执行了FLUSHALL.命令，但只要AOF文件未被重写，那么只要停止服务器，移除 AOF文件末尾的FLUSHAL命令，并重启Redis ,就可以将数据集恢复到FLUSHALL执行之前的状态。</li></ul><p>缺点：</p><ul><li>即使有些操作是重复的也会全部记录，AOF 的文件大小要大于 RDB 格式的文件。</li><li>AOF 在恢复大数据集时的速度比 RDB 的恢复速度要慢。</li><li>根据fsync策略不同,AOF速度可能会慢于RDB。</li><li>bug 出现的可能性更多。</li></ul><h2 id="1-3-RDB和AOF的选择"><a href="#1-3-RDB和AOF的选择" class="headerlink" title="1.3 RDB和AOF的选择"></a>1.3 RDB和AOF的选择</h2><ul><li><p>如果主要充当缓存功能,或者可以承受数分钟数据的丢失, 通常生产环境一般只需启用RDB即可，此也是默认值。</p></li><li><p>如果数据需要持久保存,一点不能丢失,可以选择同时开启RDB和AOF。</p></li><li><p>一般不建议只开启AOF。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Redis配置详解</title>
    <link href="/2023/02/16/NoSQL/Redis/redis02/"/>
    <url>/2023/02/16/NoSQL/Redis/redis02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis配置详解"><a href="#1-Redis配置详解" class="headerlink" title="1.Redis配置详解"></a>1.Redis配置详解</h1><h2 id="1-1-Redis配置"><a href="#1-1-Redis配置" class="headerlink" title="1.1 Redis配置"></a>1.1 Redis配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## NETWORK #####################################</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1 <span class="token comment">#监听地址，可以用空格隔开后多个监听IP</span>protected-mode <span class="token function">yes</span> <span class="token comment">#redis3.2之后加入的新特性，在没有设置bind IP和密码的时候,redis只允许访问127.0.0.1:6379，可以远程连接，但当访问将提示警告信息并拒绝远程访问。</span>port <span class="token number">6379</span> <span class="token comment">#监听端口,默认6379/tcp</span>tcp-backlog <span class="token number">511</span> <span class="token comment">#三次握手的时候server端收到client ack确认号之后的队列值，即全连接队列长度</span>unixsocket /run/redis.sock unixsocketperm <span class="token number">700</span><span class="token function">timeout</span> <span class="token number">0</span> <span class="token comment">#客户端和Redis服务端的连接超时时间，默认是0，表示永不超时</span>tcp-keepalive <span class="token number">300</span> <span class="token comment">#tcp 会话保持时间300s</span><span class="token comment">################################# GENERAL #####################################</span>daemonize no <span class="token comment">#默认no,即直接运行redis-server程序时,不作为守护进程运行，而是以前台方式运行，如果想在后台运行需改成yes,当redis作为守护进程运行的时候，它会写一个pid到/var/run/redis.pid文件。</span>supervised auto <span class="token comment">#和OS相关参数，可设置通过upstart和systemd管理Redis守护进程，centos7后都使用systemd。</span>pidfile /var/run/redis_6379.pid <span class="token comment">#pid文件路径</span>loglevel notice <span class="token comment">#日志级别</span>logfile <span class="token string">""</span> <span class="token comment">#日志路径</span>syslog-enabled nosyslog-ident redissyslog-facility local0databases <span class="token number">16</span> <span class="token comment">#设置数据库数量，默认：0-15，共16个库</span>always-show-logo no<span class="token comment">#在启动redis 时是否显示或在日志中记录记录redis的logo</span><span class="token comment">################################ SNAPSHOTTING  ################################</span>save <span class="token number">3600</span> <span class="token number">1</span> <span class="token comment">#在900秒内有1个key内容发生更改,就执行快照机制</span>save <span class="token number">300</span> <span class="token number">100</span> <span class="token comment">#在300秒内有10个key内容发生更改,就执行快照机制</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment">#60秒内如果有10000个key以上的变化，就自动快照备份</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment">#默认为yes时,可能会因空间满等原因快照无法保存出错时，会禁止redis写入操作，生产建议为no</span>rdbcompression <span class="token function">yes</span> <span class="token comment">#持久化到RDB文件时，是否压缩，"yes"为压缩，"no"则反之</span>rdbchecksum <span class="token function">yes</span> <span class="token comment">#是否对备份文件开启RC64校验，默认是开启</span>dbfilename dump.rdb <span class="token comment">#快照文件名</span>rdb-del-sync-files no<span class="token function">dir</span> ./ <span class="token comment">#快照文件保存路径</span><span class="token comment">################################# REPLICATION #################################</span>replicaof <span class="token operator">&lt;</span>masterip<span class="token operator">></span> <span class="token operator">&lt;</span>masterport<span class="token operator">></span> <span class="token comment">#指定复制的master主机地址和端口，5.0版之前的指令为slaveof</span>masteruser <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token comment">#指定复制的master主机的密码</span><span class="token comment">#当从库同主库失去连接或者复制正在进行，从机库有两种运行方式：</span><span class="token comment">#1、设置为yes(默认设置)，从库会继续响应客户端的读请求，此为建议值</span><span class="token comment">#2、设置为no，除去特定命令外的任何请求都会返回一个错误"SYNC with master in progress"。</span>replica-serve-stale-data <span class="token function">yes</span>replica-read-only <span class="token function">yes</span> <span class="token comment">#是否设置从库只读，建议值为yes,否则主库同步从库时可能会覆盖数据，造成数据丢失。</span><span class="token comment">#是否使用socket方式复制数据(无盘同步)，新slave第一次连接master时需要做数据的全量同步，redis server就要从内存dump出新的RDB文件，然后从master传到slave，有两种方式把RDB文件传输给客户端：</span><span class="token comment">#1.基于硬盘（disk-backed）：为no时，master创建一个新进程dump生成RDB磁盘文件，RDB完成之后由父进程（即主进程）将RDB文件发送给slaves，此为默认值。</span><span class="token comment">#2.基于socket（diskless）：master创建一个新进程直接dump RDB至slave的网络socket，不经过主进程和硬盘。</span><span class="token comment">#推荐使用基于硬盘（为no），是因为RDB文件创建后，可以同时传输给更多的slave，但是基于socket(为yes)， 新slave连接到master之后得逐个同步数据。只有当磁盘I/O较慢且网络较快时，可用diskless(yes),否则一般建议使用磁盘(no)</span>repl-diskless-sync no<span class="token comment">#diskless时复制的服务器等待的延迟时间，设置0为关闭，在延迟时间内到达的客户端，会一起通过diskless方式同步数据，但是一旦复制开始，master节点不会再接收新slave的复制请求，直到下一次同步开始才再接收新请求。即无法为延迟时间后到达的新副本提供服务，新副本将排队等待下一次RDB传输，因此服务器会等待一段时间才能让更多副本到达。推荐值：30-60</span>repl-diskless-sync-delay <span class="token number">5</span>repl-diskless-load disabledrepl-ping-replica-period <span class="token number">10</span> <span class="token comment">#slave根据master指定的时间进行周期性的PING master,用于监测master状态,默认10s</span>repl-timeout <span class="token number">60</span> <span class="token comment">#复制连接的超时时间，需要大于repl-ping-slave-period，否则会经常报超时。</span><span class="token comment">#是否在slave套接字发送SYNC之后禁用 TCP_NODELAY，如果选择"yes"，Redis将合并多个报文为一个大的报文，从而使用更少数量的包向slaves发送数据，但是将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒，如果 "no" ，数据传输到slave的延迟将会减少，但要使用更多的带宽。</span>repl-disable-tcp-nodelay no<span class="token comment">#复制缓冲区内存大小，当slave断开连接一段时间后，该缓冲区会累积复制副本数据，因此当slave 重新连接时，通常不需要完全重新同步，只需传递在副本中的断开连接后没有同步的部分数据即可。只有在至少有一个slave连接之后才分配此内存空间,建议建立主从时此值要调大一些或在低峰期配置,否则会导致同步到slave失败。</span>repl-backlog-size 1mbrepl-backlog-ttl <span class="token number">3600</span> <span class="token comment">#多长时间内master没有slave连接，就清空backlog缓冲区</span>replica-priority <span class="token number">100</span> <span class="token comment">#当master不可用，哨兵Sentinel会根据slave的优先级选举一个master，此值最低的slave会优先当选master，而配置成0，永远不会被选举，一般多个slave都设为一样的值，让其自动选择。</span><span class="token comment">################################## SECURITY ###################################</span>acllog-max-len <span class="token number">128</span>requirepass foobared <span class="token comment">#设置redis连接密码，之后需要AUTH pass,如果有特殊符号，用" "引起来,生产建议设置。</span>rename-command CONFIG <span class="token string">""</span> <span class="token comment">#重命名一些高危命令</span><span class="token comment">################################### CLIENTS ####################################</span>maxclients <span class="token number">10000</span> <span class="token comment">#Redis最大连接客户端</span><span class="token comment">############################## MEMORY MANAGEMENT ################################</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span> <span class="token comment">#redis使用的最大内存，单位为bytes字节，0为不限制，建议设为物理内存一半，8G内存的计算方式8(G)*1024(MB)1024(KB)*1024(Kbyte)，需要注意的是缓冲区是不计算在maxmemory内,生产中如果不设置此项,可能会导致OOM。</span>maxmemory-samples <span class="token number">5</span><span class="token comment">############################# LAZY FREEING ####################################</span>lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush nolazyfree-lazy-user-del nolazyfree-lazy-user-flush no<span class="token comment">################################ THREADED I/O #################################</span>io-threads <span class="token number">4</span><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment">##是否开启AOF日志记录，默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了，但是redis如果中途宕机，会导致可能有几分钟的数据丢失(取决于dump数据的间隔时间)，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认不启用此功能。</span>appendonly noappendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#文本文件AOF的文件名，存放在dir指令指定的目录中</span><span class="token comment">#aof持久化策略的配置</span><span class="token comment">#no表示由操作系统保证数据同步到磁盘,Linux的默认fsync策略是30秒，最多会丢失30s的数据</span><span class="token comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘,安全性高,性能较差</span><span class="token comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据,此为默认值,也生产建议值</span>appendfsync everysec<span class="token comment">#同时在执行bgrewriteaof操作和主进程写aof文件的操作，两者都会操作磁盘，而bgrewriteaof往往会涉及大量磁盘操作，这样就会造成主进程在写aof文件的时候出现阻塞的情形,以下参数实现控制。</span><span class="token comment">##在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。</span><span class="token comment">#默认为no,表示"不暂缓",新的aof记录仍然会被立即同步到磁盘，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。</span><span class="token comment">#yes,相当于将appendfsync设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候redis挂掉，就会丢失数据。丢失多少数据呢？Linux的默认fsync策略是30秒，最多会丢失30s的数据,但由于yes性能较好而且会避免出现阻塞因此比较推荐。</span><span class="token comment">#rewrite 即对aof文件进行整理,将空闲空间回收,从而可以减少恢复数据时间。</span>no-appendfsync-on-rewrite noauto-aof-rewrite-percentage <span class="token number">100</span> <span class="token comment">#当Aof log增长超过指定百分比例时，重写AOF文件，设置为0表示不自动重写Aof日志，重写是为了使aof体积保持最小，但是还可以确保保存最完整的数据。</span>auto-aof-rewrite-min-size 64mb <span class="token comment">#触发aof rewrite的最小文件大小</span>aof-load-truncated <span class="token function">yes</span> <span class="token comment">#是否加载由于某些原因导致的末尾异常的AOF文件(主进程被kill/断电等)，建议yes。</span><span class="token comment">#redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内容则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</span>aof-use-rdb-preamble <span class="token function">yes</span><span class="token comment">################################ LUA SCRIPTING  ###############################</span>lua-time-limit <span class="token number">5000</span> <span class="token comment">#lua脚本的最大执行时间，单位为毫秒</span><span class="token comment">################################ REDIS CLUSTER  ###############################</span>cluster-enabled <span class="token function">yes</span> <span class="token comment">#是否开启集群模式，默认不开启,即单机模式。</span>cluster-config-file nodes-6379.conf <span class="token comment">#由node节点自动生成的集群配置文件名称。</span>cluster-node-timeout <span class="token number">15000</span> <span class="token comment">#集群中node节点连接超时时间，单位ms,超过此时间，会踢出集群。</span><span class="token comment">#单位为次,在执行故障转移的时候可能有些节点和master断开一段时间导致数据比较旧，这些节点就不适用于选举为master，超过这个时间的就不会被进行故障转移,不能当选master，计算公式：(node-timeout * replica-validity-factor) + repl-pingreplica-period。</span>cluster-replica-validity-factor <span class="token number">10</span>cluster-migration-barrier <span class="token number">1</span> <span class="token comment">#集群迁移屏障，一个主节点至少拥有1个正常工作的从节点，即如果主节点的slave节点故障后会将多余的从节点分配到当前主节点成为其新的从节点。</span>cluster-allow-replica-migration <span class="token function">yes</span><span class="token comment">#集群请求槽位全部覆盖，如果一个主库宕机且没有备库就会出现集群槽位不全，那么yes时redis集群槽位验证不全,就不再对外提供服务(对key赋值时,会出现CLUSTERDOWN The cluster is down的提示,cluster_state:fail,但ping 仍PONG)，而no则可以继续使用,但是会出现查询数据查不到的情况(因为有数据丢失)。生产建议为no</span>cluster-require-full-coverage <span class="token function">yes</span>cluster-replica-no-failover no <span class="token comment">#如果为yes,此选项阻止在主服务器发生故障时尝试对其主服务器进行故障转移。 但是，主服务器仍然可以执行手动强制故障转移，一般为no。</span>cluster-allow-reads-when-down no<span class="token comment">########################## CLUSTER DOCKER/NAT support  ########################</span>cluster-announce-ip <span class="token number">10.1</span>.1.5cluster-announce-tls-port <span class="token number">6379</span>cluster-announce-port <span class="token number">0</span>cluster-announce-bus-port <span class="token number">6380</span><span class="token comment">################################## SLOW LOG ###################################</span><span class="token comment">#Slow log 是 Redis 用来记录超过指定执行时间的日志系统，执行时间不包括与客户端交谈，发送回复等I/O操作，而是实际执行命令所需的时间（在该阶段线程被阻塞并且不能同时为其它请求提供服务）,由于slow log 保存在内存里面，读写速度非常快，因此可放心地使用，不必担心因为开启 slow log 而影响Redis的速度。</span>slowlog-log-slower-than <span class="token number">10000</span> <span class="token comment">#以微秒为单位的慢日志记录，为负数会禁用慢日志，为0会记录每个命令操作。默认值为10ms,一般一条命令执行都在微秒级,生产建议设为1ms-10ms之间。</span>slowlog-max-len <span class="token number">128</span> <span class="token comment">#最多记录多少条慢日志的保存队列长度，达到此长度后，记录新命令会将最旧的命令从命令队列中删除，以此滚动删除,即,先进先出,队列固定长度,默认128,值偏小,生产建议设为1000以上。</span></code></pre></div></figure><h2 id="1-2-CONFIG动态修改配置"><a href="#1-2-CONFIG动态修改配置" class="headerlink" title="1.2 CONFIG动态修改配置"></a>1.2 CONFIG动态修改配置</h2><p>config 命令用于查看当前redis配置、以及不重启redis服务实现动态更改redis配置等。不是所有配置都可以动态修改,且此方式无法持久保存。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置连接密码</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET requirepass <span class="token number">654321</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET requirepass<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"654321"</span><span class="token comment">#获取当前配置</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET *  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"rdbchecksum"</span>  <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"daemonize"</span>  <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"io-threads-do-reads"</span>  <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"no"</span>  <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"lua-replicate-commands"</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"yes"</span>  <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"always-show-logo"</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"protected-mode"</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"rdbcompression"</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"yes"</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token string">"rdb-del-sync-files"</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token string">"no"</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"activerehashing"</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token string">"yes"</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token string">"stop-writes-on-bgsave-error"</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token string">"yes"</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#更改最大内存</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET maxmemory <span class="token number">8589934592</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET maxmemory<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"maxmemory"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"8589934592"</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Redis简介及安装</title>
    <link href="/2023/02/16/NoSQL/Redis/redis01/"/>
    <url>/2023/02/16/NoSQL/Redis/redis01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis简介及安装"><a href="#1-Redis简介及安装" class="headerlink" title="1.Redis简介及安装"></a>1.Redis简介及安装</h1><h2 id="1-1-Redis简介"><a href="#1-1-Redis简介" class="headerlink" title="1.1 Redis简介"></a>1.1 Redis简介</h2><p>Redis是一个开源的、遵循BSD协议的、基于内存的而且目前比较流行的键值数据库(key-value database)，是一个非关系型数据库。</p><p>官方地址：<a href="https://redis.io/">https://redis.io/</a></p><p><strong>Redis特性：</strong></p><ul><li>速度快：10W QPS，基于内存，C语言实现。</li><li>单线程</li><li>持久化</li><li>支持多种数据结构</li><li>支持多种编程语言</li><li>功能丰富：支持Lua脚本，发布订阅，事务，Pipeline等功能</li><li>主从复制，支持高可用和分布式</li></ul><p><strong>Redis典型应用场景：</strong></p><ul><li>Session共享：常见于web集群中的Tomcat或者PHP中多web服务器session共享。</li><li>缓存：数据查询、电商网站商品信息、新闻内容。</li><li>计数器：访问排行榜、商品浏览数等和次数相关的数值统计场景。</li><li>微博&#x2F;微信社交场合：共同好友,粉丝数,关注,点赞评论等。</li><li>消息队列：ELK的日志缓存、部分业务的订阅发布系统。</li><li>地理位置：基于GEO(地理信息定位),实现摇一摇,附近的人,外卖等功能。</li></ul><h2 id="1-2-Redis安装"><a href="#1-2-Redis安装" class="headerlink" title="1.2 Redis安装"></a>1.2 Redis安装</h2><h3 id="1-2-1-yum安装Redis"><a href="#1-2-1-yum安装Redis" class="headerlink" title="1.2.1 yum安装Redis"></a>1.2.1 yum安装Redis</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS8由系统源提供</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf info redis | grep Version</span>Version      <span class="token builtin class-name">:</span> <span class="token number">5.0</span>.3<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># dnf -y install redis</span><span class="token comment">#CentOS7由Epel源提供</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install epel-release</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum info redis | grep Version</span>Version     <span class="token builtin class-name">:</span> <span class="token number">3.2</span>.12<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install redis</span></code></pre></div></figure><h3 id="1-2-2-编译安装Redis"><a href="#1-2-2-编译安装Redis" class="headerlink" title="1.2.2 编译安装Redis"></a>1.2.2 编译安装Redis</h3><p>下载Release版本Redis 源码包： <a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装依赖包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc gcc-c++ systemd-devel</span><span class="token comment">#下载源码包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install wget</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://download.redis.io/releases/redis-6.2.9.tar.gz</span><span class="token comment">#解压源码包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf redis-6.2.9.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/redis-6.2.9/</span><span class="token comment">#编译安装</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># make PREFIX=/apps/redis install</span><span class="token comment">#配置redis环境变量</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># echo 'PATH=/apps/redis/bin:$PATH' > /etc/profile.d/redis.sh</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># . /etc/profile.d/redis.sh</span><span class="token comment">#创建相关目录和配置文件</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># mkdir /apps/redis/&#123;etc,log,data,run&#125;</span><span class="token punctuation">[</span>root@node10 redis-6.2.9<span class="token punctuation">]</span><span class="token comment"># cp redis.conf /apps/redis/etc/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sed -i -e 's/^bind .*/bind 0.0.0.0/' -e "/^dir .*/c dir /apps/redis/data/"  -e "/logfile .*/c logfile /apps/redis/log/redis-6379.log"  -e  "/^pidfile .*/c  pidfile /apps/redis/run/redis-6379.pid" -e 's@protected-mode yes@protected-mode no@' /apps/redis/etc/redis.conf</span><span class="token comment">#解决启动时的三个警告提示</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token comment">#创建redis用户和组</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># chown -R redis.redis /apps/redis/</span><span class="token comment">#编辑redis服务启动文件</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/redis.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Redis persistent key-value database<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/apps/redis/bin/redis-server /apps/redis/etc/redis.conf <span class="token parameter variable">--supervised</span> systemd<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> QUIT <span class="token variable">$MAINPID</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>notify<span class="token assign-left variable">User</span><span class="token operator">=</span>redis<span class="token assign-left variable">Group</span><span class="token operator">=</span>redis<span class="token assign-left variable">RuntimeDirectory</span><span class="token operator">=</span>redis<span class="token assign-left variable">RuntimeDirectoryMode</span><span class="token operator">=</span>0755<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token comment">#验证启动redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl start redis</span><span class="token punctuation">[</span>root@node10 redis<span class="token punctuation">]</span><span class="token comment"># systemctl enable redis</span></code></pre></div></figure><p><strong>shell脚本一键安装：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim install_redis.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span>redis-6.2.9<span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">INSTALL_DIR</span><span class="token operator">=</span>/apps/redis<span class="token function-name function">color</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">RES_COL</span><span class="token operator">=</span><span class="token number">60</span>    <span class="token assign-left variable">MOVE_TO_COL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[<span class="token variable">$&#123;RES_COL&#125;</span>G"</span>    <span class="token assign-left variable">SETCOLOR_SUCCESS</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;32m"</span>    <span class="token assign-left variable">SETCOLOR_FAILURE</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;31m"</span>    <span class="token assign-left variable">SETCOLOR_WARNING</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\\">\\</span>033[1;33m"</span>    <span class="token assign-left variable">SETCOLOR_NORMAL</span><span class="token operator">=</span><span class="token string">"echo -en <span class="token entity" title="\E">\E</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$MOVE_TO_COL</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"["</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"success"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token variable">$&#123;SETCOLOR_SUCCESS&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"  OK  "</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"failure"</span> <span class="token parameter variable">-o</span> <span class="token variable">$2</span> <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token variable">$&#123;SETCOLOR_FAILURE&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"FAILED"</span>    <span class="token keyword">else</span>        <span class="token variable">$&#123;SETCOLOR_WARNING&#125;</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"WARNING"</span>    <span class="token keyword">fi</span>    <span class="token variable">$&#123;SETCOLOR_NORMAL&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"]"</span>    <span class="token builtin class-name">echo</span> <span class="token punctuation">&#125;</span><span class="token function-name function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ systemd-devel <span class="token function">wget</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"安装软件包失败，请检查网络配置"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">wget</span> http://download.redis.io/releases/<span class="token variable">$&#123;VERSION&#125;</span>.tar.gz <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 源码下载失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">tar</span> xf <span class="token variable">$&#123;VERSION&#125;</span>.tar.gz<span class="token builtin class-name">cd</span> <span class="token variable">$&#123;VERSION&#125;</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable">$&#123;INSTALL_DIR&#125;</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 编译安装完成"</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 编译安装失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-*  /usr/bin/<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/<span class="token punctuation">&#123;</span>etc,log,data,run<span class="token punctuation">&#125;</span><span class="token function">cp</span> redis.conf  <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span>  <span class="token parameter variable">-e</span> <span class="token string">"/# requirepass/a requirepass <span class="token variable">$PASSWORD</span>"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/log/redis-6379.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/run/redis-6379.pid"</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf<span class="token keyword">if</span> <span class="token function">id</span> redis <span class="token operator">&amp;></span> /dev/null <span class="token punctuation">;</span><span class="token keyword">then</span>     color <span class="token string">"Redis 用户已存在"</span> <span class="token number">1</span> <span class="token keyword">else</span>    <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin redis    color <span class="token string">"Redis 用户创建成功"</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> redis.redis <span class="token variable">$&#123;INSTALL_DIR&#125;</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">echo</span> <span class="token string">'echo never > /sys/kernel/mm/transparent_hugepage/enabled'</span> <span class="token operator">>></span> /etc/rc.d/rc.local<span class="token function">chmod</span> +x /etc/rc.d/rc.local/etc/rc.d/rc.local<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6379.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=<span class="token variable">$&#123;INSTALL_DIR&#125;</span>/bin/redis-server <span class="token variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis-6379.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reload systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6379 <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> color <span class="token string">"Redis 服务启动成功,Redis信息如下:"</span>  <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> color <span class="token string">"Redis 启动失败"</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">sleep</span> <span class="token number">2</span>redis-cli <span class="token parameter variable">-a</span> <span class="token variable">$PASSWORD</span> INFO Server <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token punctuation">&#125;</span><span class="token function">install</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x install_redis.sh </span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># sh install_redis.sh</span></code></pre></div></figure><h3 id="1-2-3-Redis多实例"><a href="#1-2-3-Redis多实例" class="headerlink" title="1.2.3 Redis多实例"></a>1.2.3 Redis多实例</h3><p>指定不同实例的相应的端口,配置文件,日志文件等相关配置。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis编译安装目录</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># ll /apps/redis/</span>total <span class="token number">0</span>drwxr-xr-x. <span class="token number">2</span> redis redis <span class="token number">134</span> Feb <span class="token number">17</span> 09:30 bindrwxr-xr-x. <span class="token number">2</span> redis redis   <span class="token number">6</span> Feb <span class="token number">17</span> 09:30 datadrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">24</span> Feb <span class="token number">17</span> 09:51 etcdrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">28</span> Feb <span class="token number">17</span> 09:30 logdrwxr-xr-x. <span class="token number">2</span> redis redis  <span class="token number">28</span> Feb <span class="token number">17</span> 09:30 run<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tree /apps/redis/</span>/apps/redis/├── bin│   ├── redis-benchmark│   ├── redis-check-aof -<span class="token operator">></span> redis-server│   ├── redis-check-rdb -<span class="token operator">></span> redis-server│   ├── redis-cli│   ├── redis-sentinel -<span class="token operator">></span> redis-server│   └── redis-server├── data├── etc│   └── redis-6379.conf├── log│   └── redis-6379.log└── run    └── redis-6379.pid<span class="token number">5</span> directories, <span class="token number">9</span> files<span class="token comment">#6380端口配置</span><span class="token builtin class-name">cd</span> redis-6.2.9<span class="token function">cp</span> redis.conf  /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span> <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir /apps/redis/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile /apps/redis/log/redis-6380.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile /apps/redis/run/redis-6380.pid"</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@port 6379@port 6380@'</span> /apps/redis/etc/redis-6380.conf<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6380.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis-6380.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6380<span class="token comment">#6381端口配置</span><span class="token builtin class-name">cd</span> redis-6.2.9<span class="token function">cp</span> redis.conf  /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'s/bind 127.0.0.1/bind 0.0.0.0/'</span> <span class="token parameter variable">-e</span> <span class="token string">"/^dir .*/c dir /apps/redis/data/"</span>  <span class="token parameter variable">-e</span> <span class="token string">"/logfile .*/c logfile /apps/redis/log/redis-6381.log"</span>  <span class="token parameter variable">-e</span>  <span class="token string">"/^pidfile .*/c  pidfile /apps/redis/run/redis-6381.pid"</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@protected-mode yes@protected-mode no@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@daemonize no@daemonize yes@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@port 6379@port 6381@'</span> /apps/redis/etc/redis-6381.conf<span class="token function">cat</span> <span class="token operator">></span> /usr/lib/systemd/system/redis-6381.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis-6381.conf --supervised systemdExecStop=/bin/kill -s QUIT \<span class="token variable">$MAINPID</span>Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span>  redis-6381<span class="token comment">#多实例目录结构</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tree /apps/redis/</span>/apps/redis/├── bin│   ├── redis-benchmark│   ├── redis-check-aof -<span class="token operator">></span> redis-server│   ├── redis-check-rdb -<span class="token operator">></span> redis-server│   ├── redis-cli│   ├── redis-sentinel -<span class="token operator">></span> redis-server│   └── redis-server├── data├── etc│   ├── redis-6379.conf│   ├── redis-6380.conf│   └── redis-6381.conf├── log│   ├── redis-6379.log│   ├── redis-6380.log│   └── redis-6381.log└── run    ├── redis-6379.pid    ├── redis-6380.pid    └── redis-6381.pid<span class="token number">5</span> directories, <span class="token number">15</span> files</code></pre></div></figure><h3 id="1-2-4-Redis基本命令"><a href="#1-2-4-Redis基本命令" class="headerlink" title="1.2.4 Redis基本命令"></a>1.2.4 Redis基本命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>Usage: redis-cli <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>cmd <span class="token punctuation">[</span>arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>hostname<span class="token operator">></span>      <span class="token comment">#主机名/IP</span>  <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>port<span class="token operator">></span>          <span class="token comment">#端口</span>  <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>socket<span class="token operator">></span>        <span class="token comment">#socket</span>  <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>password<span class="token operator">></span>      <span class="token comment">#密码</span><span class="token comment">#本机无密码连接</span>redis-cli<span class="token comment">#本机密码连接</span>redis-cli <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>PASSWORD<span class="token operator">></span><span class="token comment">#跨主机无密码连接</span>redis-cli <span class="token parameter variable">-h</span> <span class="token environment constant">HOSTNAME</span>/IP <span class="token parameter variable">-p</span> PORT<span class="token comment">#跨主机密码连接</span>redis-cli <span class="token parameter variable">-h</span> <span class="token environment constant">HOSTNAME</span>/IP <span class="token parameter variable">-p</span> PORT <span class="token parameter variable">-a</span> PASSWORD</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).HAProxy之ACL配置</title>
    <link href="/2023/02/15/LB/HAProxy/haproxy05/"/>
    <url>/2023/02/15/LB/HAProxy/haproxy05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy之ACL配置"><a href="#1-HAProxy之ACL配置" class="headerlink" title="1.HAProxy之ACL配置"></a>1.HAProxy之ACL配置</h1><p>访问控制列表（ACL，Access Control Lists）是一种基于包过滤的访问控制技术，它可以根据设定的条件对经过服务器传输的数据包进行过滤(条件匹配)，即对接收到的报文进行匹配和过滤，基于请求报文头部中的源地址、源端口、目标地址、目标端口、请求方法、URL、文件后缀等信息内容进行匹配并执行进一步操作，比如允许其通过或丢弃。</p><p><strong>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7</a></strong></p><h2 id="1-1-ACL-配置选项"><a href="#1-1-ACL-配置选项" class="headerlink" title="1.1 ACL-配置选项"></a>1.1 ACL-配置选项</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">acl <span class="token operator">&lt;</span>aclname<span class="token operator">></span> <span class="token operator">&lt;</span>criterion<span class="token operator">></span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span> <span class="token punctuation">[</span>operator<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token operator">&lt;</span>aclname<span class="token operator">></span>    <span class="token comment">#名称</span><span class="token operator">&lt;</span>criterion<span class="token operator">></span>  <span class="token comment">#匹配规范</span><span class="token punctuation">[</span>flags<span class="token punctuation">]</span>      <span class="token comment">#匹配模式</span><span class="token punctuation">[</span>operator<span class="token punctuation">]</span>   <span class="token comment">#具体操作符</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">]</span>    <span class="token comment">#操作对象类型</span></code></pre></div></figure><ul><li>aclname</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#aclname配置示例，acl名称必须由大小写字母，数字，"-"中横线，"_"下划线，"."点，":"冒号，区分大小写，这意味着"my_acl"和 "My_Acl"是两个不同的acl</span>acl image_service hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> img.chsblogs.com</code></pre></div></figure><ul><li>criterion</li></ul><p>定义ACL匹配规范，即判断条件。</p><p>官方文档：</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.3.3</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.3.6</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">base <span class="token builtin class-name">:</span> string <span class="token comment">#返回第一个主机头和请求的路径部分的连接，该请求从主机名开始，并在问号之前结束,对虚拟主机有用</span>ACL derivatives <span class="token builtin class-name">:</span>  base     <span class="token builtin class-name">:</span> exact string match   base_beg <span class="token builtin class-name">:</span> prefix match  base_dir <span class="token builtin class-name">:</span> subdir match  base_dom <span class="token builtin class-name">:</span> domain match  base_end <span class="token builtin class-name">:</span> suffix match  base_len <span class="token builtin class-name">:</span> length match  base_reg <span class="token builtin class-name">:</span> regex match  base_sub <span class="token builtin class-name">:</span> substring matchhdr <span class="token builtin class-name">:</span> string <span class="token comment">#提取在一个HTTP请求报文的首部</span>ACL derivatives <span class="token builtin class-name">:</span>  hdr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token builtin class-name">:</span> <span class="token comment">#完全匹配字符串,header的指定信息，&lt;occ> 表示在多值中使用的值的出现次数 </span>  hdr_beg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#前缀匹配，header中指定匹配内容的begin</span>  hdr_dir<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#后缀匹配，header中指定匹配内容end</span>  hdr_dom<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#域匹配，header中的domain name</span>  hdr_end<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#路径匹配，header的uri路径</span>  hdr_len<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#长度匹配，header的长度匹配</span>  hdr_reg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#正则表达式匹配，自定义表达式(regex)模糊匹配</span>  hdr_sub<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span>,<span class="token operator">&lt;</span>occ<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token comment">#子串匹配，header中的uri模糊匹配</span><span class="token comment">#hdr示例</span>hdr<span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> 用于测试请求头部首部指定内容hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host名称，如 www.chsblogs.comhdr_beg<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host开头，如 www. img. video. download. ftp.hdr_end<span class="token punctuation">(</span>host<span class="token punctuation">)</span> 请求的host结尾，如 .com .net .cnpath <span class="token builtin class-name">:</span> string <span class="token comment">#提取请求的URL路径，该路径从第一个斜杠开始，并在问号之前结束（无主机部分）</span>ACL derivatives <span class="token builtin class-name">:</span>  path     <span class="token builtin class-name">:</span> exact string match  path_beg <span class="token builtin class-name">:</span> prefix match  path_dir <span class="token builtin class-name">:</span> subdir match  path_dom <span class="token builtin class-name">:</span> domain match  path_end <span class="token builtin class-name">:</span> suffix match  path_len <span class="token builtin class-name">:</span> length match  path_reg <span class="token builtin class-name">:</span> regex match  path_sub <span class="token builtin class-name">:</span> substring match  url <span class="token builtin class-name">:</span> string <span class="token comment">#提取请求中的整个URL。一个典型的应用是具有预取能力的缓存，以及需要从数据库聚合多个信息并将它们保存在缓存中的网页门户入口，推荐使用path</span>ACL derivatives <span class="token builtin class-name">:</span>  url     <span class="token builtin class-name">:</span> exact string match  url_beg <span class="token builtin class-name">:</span> prefix match  url_dir <span class="token builtin class-name">:</span> subdir match  url_dom <span class="token builtin class-name">:</span> domain match  url_end <span class="token builtin class-name">:</span> suffix match  url_len <span class="token builtin class-name">:</span> length match  url_reg <span class="token builtin class-name">:</span> regex match  url_sub <span class="token builtin class-name">:</span> substring match  dst <span class="token builtin class-name">:</span> <span class="token function">ip</span>            <span class="token comment">#目标IP</span>dst_port <span class="token builtin class-name">:</span> integer  <span class="token comment">#目标PORT</span>src <span class="token builtin class-name">:</span> <span class="token function">ip</span>            <span class="token comment">#源IP</span>src_port <span class="token builtin class-name">:</span> integer  <span class="token comment">#源PORT</span><span class="token comment">#src示例</span>acl invalid_src src <span class="token number">192.168</span>.1.0/24acl invalid_src src <span class="token number">172.16</span>.0.0/24status <span class="token builtin class-name">:</span> integer    <span class="token comment">#响应报文状态码</span>method <span class="token builtin class-name">:</span> integer + string  <span class="token comment">#七层协议</span><span class="token comment">#method示例</span>acl valid_method method GET HEADhttp-request deny <span class="token keyword">if</span> <span class="token operator">!</span> valid_method</code></pre></div></figure><ul><li>flags</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#acl匹配模式</span>  <span class="token parameter variable">-i</span>  <span class="token comment">#不区分大小写</span>  <span class="token parameter variable">-f</span>  <span class="token comment">#从文件加载pattern</span>  <span class="token parameter variable">-m</span>  <span class="token comment">#使用指定的pattern匹配方法</span>  <span class="token parameter variable">-n</span>  <span class="token comment">#不做DNS解析</span>  <span class="token parameter variable">-u</span>  <span class="token comment">#强制ACL的唯一id </span></code></pre></div></figure><ul><li>operator</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#acl操作符</span><span class="token comment">#整数匹配</span>  eq  <span class="token comment">#等于，则为true</span>  ge  <span class="token comment">#大于等于，则为true</span>  gt  <span class="token comment">#大于，则为true</span>  le  <span class="token comment">#小于等于，则为true</span>  lt  <span class="token comment">#小于，则为true</span><span class="token comment">#字符串匹配</span>  exact match     <span class="token punctuation">(</span>-m str<span class="token punctuation">)</span>  <span class="token comment">#精确匹配</span>  substring match <span class="token punctuation">(</span>-m sub<span class="token punctuation">)</span>  <span class="token comment">#子字符串匹配</span>  prefix match    <span class="token punctuation">(</span>-m beg<span class="token punctuation">)</span>  <span class="token comment">#前缀匹配</span>  suffix match    <span class="token punctuation">(</span>-m end<span class="token punctuation">)</span>  <span class="token comment">#后缀匹配</span>  subdir match    <span class="token punctuation">(</span>-m <span class="token function">dir</span><span class="token punctuation">)</span>  <span class="token comment">#在提取的字符串，用斜线（“/”）分隔，如其中任一个匹配，则ACL进行匹配。</span>  domain match    <span class="token punctuation">(</span>-m dom<span class="token punctuation">)</span>  <span class="token comment">#查找提取的用点（“."）分隔字符串，如果其中任何一个匹配，则ACL进行匹配。</span></code></pre></div></figure><ul><li>value</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#value类型</span>  boolean  <span class="token comment">#布尔值</span>  integer or integer range <span class="token comment">#整数或整数范围，比如用于匹配端口范围</span>  IP address / network  <span class="token comment">#IP地址或IP范围, 192.168.0.1 ,192.168.0.1/24</span>  string       <span class="token comment">#例如：www.chsblogs.com</span>    exact      <span class="token comment">#精确比较</span>    substring  <span class="token comment">#子字符串比较</span>    suffix     <span class="token comment">#后缀比较</span>    prefix     <span class="token comment">#前缀比较</span>    subdir     <span class="token comment">#路径，/wp-includes/js/jquery/jquery.js</span>    domain     <span class="token comment">#域名，www.chsblogs.com</span>  regular expression  <span class="token comment">#正则表达式</span>  hex block  <span class="token comment">#16进制</span></code></pre></div></figure><p><strong>多个ACL的组合调用方式：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多个ACL的逻辑处理</span>  AND <span class="token comment">#与，默认使用</span>  OR  <span class="token comment">#或</span>  <span class="token operator">!</span>   <span class="token comment">#非，取反</span>  <span class="token comment">#多个ACL调用方式</span>  <span class="token keyword">if</span> valid_src valid_port        <span class="token comment">#与关系，ACL中A和B都要满足为true，默认为与</span>  <span class="token keyword">if</span> invalid_src <span class="token operator">||</span> invalid_port <span class="token comment">#或，ACL中A或者B满足一个为true</span>  <span class="token keyword">if</span> <span class="token operator">!</span> invalid_src               <span class="token comment">#非，取反，不满足ACL才为true</span></code></pre></div></figure><h2 id="1-2-ACL-基于域名匹配"><a href="#1-2-ACL-基于域名匹配" class="headerlink" title="1.2 ACL-基于域名匹配"></a>1.2 ACL-基于域名匹配</h2><p>​客户端访问pc.chsblogs.com域名调度至we1，访问mobile.chsblogs.com域名调度至we2</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl pc_domain hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> pc.chsblogs.com  acl mobile_domain hdr_dom<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> mobile.chsblogs.com  <span class="token comment">##################### acl hosts #####################</span>  use_backend pc_hosts <span class="token keyword">if</span> pc_domain  use_backend mobile_hosts <span class="token keyword">if</span> mobile_domain  default_backend pc_hosts  <span class="token comment">#所有ACL都不匹配,则使用的默认backend</span>  backend pc_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend mobile_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2  <span class="token comment">#客户端测试，配置域名解析</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.11 pc.chsblogs.com mobile.chsblogs.com test.chsblogs.com<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl pc.chsblogs.com</span><span class="token number">192.168</span>.1.13<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl mobile.chsblogs.com</span><span class="token number">192.168</span>.1.14<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl test.chsblogs.com</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-3-ACL-基于源IP或子网调度"><a href="#1-3-ACL-基于源IP或子网调度" class="headerlink" title="1.3 ACL-基于源IP或子网调度"></a>1.3 ACL-基于源IP或子网调度</h2><p>客户端IP地址为192.168.1.10或者10.0.0.0&#x2F;8网段调度至we1，IP地址为192.168.1.20或者192.168.1.30网段调度至we2</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl ip_range1 src <span class="token number">192.168</span>.1.10 <span class="token number">10.0</span>.0.0/8  acl ip_range2 src <span class="token number">192.168</span>.1.20 <span class="token number">192.168</span>.1.30  <span class="token comment">##################### acl hosts #####################</span>  use_backend range1_hosts <span class="token keyword">if</span> ip_range1  use_backend range2_hosts <span class="token keyword">if</span> ip_range2  backend range1_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend range2_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.10 <span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.13<span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.20 <span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.14root@node30:~<span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.30 root@node30:~<span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.14</code></pre></div></figure><p>拒绝192.168.1.10访问</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_deny_src src <span class="token number">192.168</span>.1.10 <span class="token number">172.16</span>.0.0/16  http-request deny <span class="token keyword">if</span> acl_deny_src  <span class="token comment">##################### acl hosts #####################</span>  default_backend chsblogs_hosts  backend chsblogs_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-4-ACL-基于浏览器类型匹配"><a href="#1-4-ACL-基于浏览器类型匹配" class="headerlink" title="1.4 ACL-基于浏览器类型匹配"></a>1.4 ACL-基于浏览器类型匹配</h2><p>拒绝curl和wget的访问</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_user_agent hdr_sub<span class="token punctuation">(</span>User-Agent<span class="token punctuation">)</span> <span class="token parameter variable">-i</span> <span class="token function">curl</span> <span class="token function">wget</span>  <span class="token comment">##################### acl hosts #####################</span>  http-request deny <span class="token keyword">if</span> acl_user_agent  default_backend chsblogs_hosts  backend chsblogs_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre></div></figure><h2 id="1-5-ACL-基于文件后缀名匹配"><a href="#1-5-ACL-基于文件后缀名匹配" class="headerlink" title="1.5 ACL-基于文件后缀名匹配"></a>1.5 ACL-基于文件后缀名匹配</h2><p>基于文件后缀名匹配实现动静分离</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_end <span class="token parameter variable">-i</span>  .jpg .jpeg .png .gif .css .js .html  acl acl_php path_end <span class="token parameter variable">-i</span> .php  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  use_backend php_hosts <span class="token keyword">if</span> acl_phpbackend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1backend php_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#we1准备静态文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/share/nginx/html/test.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>chsblogs<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>www.chsblogs.com<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># ll /usr/share/nginx/html/1.jpg </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">47647</span> Feb <span class="token number">16</span> <span class="token number">21</span>:35 /usr/share/nginx/html/1.jpg<span class="token comment">#we2准备php文件</span><span class="token punctuation">[</span>root@node14 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/share/nginx/html/test.php</span><span class="token operator">&lt;</span>?php<span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>http://192.168.1.14/test.php&lt;/h1><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/test.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>chsblogs<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>www.chsblogs.com<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/test.php</span><span class="token operator">&lt;</span>?php<span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>http://192.168.1.14/test.php&lt;/h1><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre></div></figure><h2 id="1-6-ACL-基于路径匹配"><a href="#1-6-ACL-基于路径匹配" class="headerlink" title="1.6 ACL-基于路径匹配"></a>1.6 ACL-基于路径匹配</h2><p>基于文件路径匹配实现动静分离</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_beg <span class="token parameter variable">-i</span>  /static /images /javascript  acl acl_static path_end <span class="token parameter variable">-i</span> .jpg .jpeg .png .gif .css .js .html .htm <span class="token comment">#ACL同名为或关系</span>  acl acl_app path_beg <span class="token parameter variable">-i</span> /api  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  use_backend app_hosts <span class="token keyword">if</span> acl_app  default_backend app_hosts  backend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  backend app_hosts  mode http  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#准备相关文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /usr/share/nginx/html/static</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># echo "192.168.1.13" > /usr/share/nginx/html/static/test.html</span><span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/static/test.html</span><span class="token number">192.168</span>.1.13</code></pre></div></figure><h2 id="1-7-ACL-基于预定义ACL匹配"><a href="#1-7-ACL-基于预定义ACL匹配" class="headerlink" title="1.7 ACL-基于预定义ACL匹配"></a>1.7 ACL-基于预定义ACL匹配</h2><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.4">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#7.4</a></p><p><strong>预定义ACL：</strong></p><table><thead><tr><th align="center">ACL name</th><th align="center">Equivalent to Usage</th><th align="center"></th></tr></thead><tbody><tr><td align="center">FALSE</td><td align="center">always_false</td><td align="center">never match</td></tr><tr><td align="center">HTTP</td><td align="center">req.proto_http</td><td align="center">match if request protocol is valid HTTP</td></tr><tr><td align="center">HTTP_1.0</td><td align="center">req.ver 1.0</td><td align="center">match if HTTP request version is 1.0</td></tr><tr><td align="center">HTTP_1.1</td><td align="center">req.ver 1.1</td><td align="center">match if HTTP request version is 1.1</td></tr><tr><td align="center">HTTP_2.0</td><td align="center">req.ver 2.0</td><td align="center">match if HTTP request version is 2.0</td></tr><tr><td align="center">HTTP_CONTENT</td><td align="center">req.hdr_val(content-length) gt 0</td><td align="center">match an existing content-length in the HTTP request</td></tr><tr><td align="center">HTTP_URL_ABS</td><td align="center">url_reg ^[^&#x2F;:]*:&#x2F;&#x2F;</td><td align="center">match absolute URL with scheme</td></tr><tr><td align="center">HTTP_URL_SLASH</td><td align="center">url_beg &#x2F;</td><td align="center">match URL beginning with “&#x2F;“</td></tr><tr><td align="center">HTTP_URL_STAR</td><td align="center">url *</td><td align="center">match URL equal to “*”</td></tr><tr><td align="center">LOCALHOST</td><td align="center">src 127.0.0.1&#x2F;8</td><td align="center">match connection from local host</td></tr><tr><td align="center">METH_CONNECT</td><td align="center">method CONNECT</td><td align="center">match HTTP CONNECT method</td></tr><tr><td align="center">METH_DELETE</td><td align="center">method DELETE</td><td align="center">match HTTP DELETE method</td></tr><tr><td align="center">METH_GET</td><td align="center">method GET HEAD</td><td align="center">match HTTP GET or HEAD method</td></tr><tr><td align="center">METH_HEAD</td><td align="center">method HEAD</td><td align="center">match HTTP HEAD method</td></tr><tr><td align="center">METH_OPTIONS</td><td align="center">method OPTIONS</td><td align="center">match HTTP OPTIONS method</td></tr><tr><td align="center">METH_POST</td><td align="center">method POST</td><td align="center">match HTTP POST method</td></tr><tr><td align="center">METH_PUT</td><td align="center">method PUT</td><td align="center">match HTTP PUT method</td></tr><tr><td align="center">METH_TRACE</td><td align="center">method TRACE</td><td align="center">match HTTP TRACE method</td></tr><tr><td align="center">RDP_COOKIE</td><td align="center">req.rdp_cookie_cnt gt 0</td><td align="center">match presence of an RDP cookie in the request buffer</td></tr><tr><td align="center">REQ_CONTENT</td><td align="center">req.len gt 0</td><td align="center">match data in the request buffer</td></tr><tr><td align="center">TRUE</td><td align="center">always_true</td><td align="center">always match</td></tr><tr><td align="center">WAIT_END</td><td align="center">wait_end</td><td align="center">wait for end of content analysis</td></tr></tbody></table><p>禁止TRACE方法和HTTP&#x2F;1.1协议</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置acl</span>frontend chsblogs_http_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  <span class="token comment">##################### acl #####################</span>  acl acl_static path_beg <span class="token parameter variable">-i</span>  /static /images /javascript  acl acl_static path_end <span class="token parameter variable">-i</span> .jpg .jpeg .png .gif .css .js .html .htm  acl ip_range src <span class="token number">192.168</span>.1.10  <span class="token comment">##################### acl hosts #####################</span>  use_backend static_hosts <span class="token keyword">if</span> acl_static  http-request deny <span class="token keyword">if</span> ip_range HTTP_1.1backend static_hosts  mode http  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2<span class="token comment">#客户端测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11/static/test.html</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Request forbidden by administrative rules.<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -0 192.168.1.11/static/test.html</span><span class="token number">192.168</span>.1.13</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(4).HAProxy高级功能及配置</title>
    <link href="/2023/02/14/LB/HAProxy/haproxy04/"/>
    <url>/2023/02/14/LB/HAProxy/haproxy04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy高级功能及配置"><a href="#1-HAProxy高级功能及配置" class="headerlink" title="1.HAProxy高级功能及配置"></a>1.HAProxy高级功能及配置</h1><h2 id="1-1-基于cookie的会话保持"><a href="#1-1-基于cookie的会话保持" class="headerlink" title="1.1 基于cookie的会话保持"></a>1.1 基于cookie的会话保持</h2><p>Cookie Value：为当前Server指定Cookie值，实现基于Cookie的会话黏性。</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-cookie">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-cookie</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>cookie <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span> rewrite <span class="token operator">|</span> insert <span class="token operator">|</span> prefix <span class="token punctuation">]</span> <span class="token punctuation">[</span> indirect <span class="token punctuation">]</span> <span class="token punctuation">[</span> nocache <span class="token punctuation">]</span>              <span class="token punctuation">[</span> postonly <span class="token punctuation">]</span> <span class="token punctuation">[</span> preserve <span class="token punctuation">]</span> <span class="token punctuation">[</span> httponly <span class="token punctuation">]</span> <span class="token punctuation">[</span> secure <span class="token punctuation">]</span>              <span class="token punctuation">[</span> domain <span class="token operator">&lt;</span>domain<span class="token operator">></span> <span class="token punctuation">]</span>* <span class="token punctuation">[</span> maxidle <span class="token operator">&lt;</span>idle<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> maxlife <span class="token operator">&lt;</span>life<span class="token operator">></span> <span class="token punctuation">]</span>              <span class="token punctuation">[</span> dynamic <span class="token punctuation">]</span> <span class="token punctuation">[</span> attr <span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">]</span>*<span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#Cookie的Key名称，用于实现持久连接。</span>insert     <span class="token comment">#插入新的Cookie，默认不插入Cookie</span>indirect   <span class="token comment">#如果客户端已经有Cookie,则不会再发送Cookie信息</span>nocache    <span class="token comment">#当Client和HAProxy之间有缓存服务器（如：CDN）时，不允许中间缓存器缓存cookie，因为这会导致很多经过同一个CDN的请求都发送到同一台后端服务器</span><span class="token comment">#配置示例</span>listen web_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  cookie WEBSRV insert nocache indirect  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web1  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> cookie web2</code></pre></div></figure><p><strong>注意：不支持TCP Mode，使用HTTP Mode</strong></p><h2 id="1-2-HAProxy状态页"><a href="#1-2-HAProxy状态页" class="headerlink" title="1.2 HAProxy状态页"></a>1.2 HAProxy状态页</h2><p>通过Web页面，显示当前HAProxy状态</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-stats">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-stats</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>stats <span class="token builtin class-name">enable</span>                       <span class="token comment">#基于默认的参数启用stats page</span>stats hide-version                 <span class="token comment">#将状态页中haproxy版本隐藏</span>stats refresh <span class="token operator">&lt;</span>delay<span class="token operator">></span>              <span class="token comment">#设定自动刷新时间间隔，默认不自动刷新,以秒为单位</span>stats uri <span class="token operator">&lt;</span>prefix<span class="token operator">></span>                 <span class="token comment">#自定义stats page uri，默认值：/haproxy?stats</span>stats realm <span class="token operator">&lt;</span>realm<span class="token operator">></span>                <span class="token comment">#账户认证时的提示信息，示例：stats realm HAProxy\</span>stats auth <span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>passwd<span class="token operator">></span>         <span class="token comment">#认证时的账号和密码，可定义多个用户,每行指定一个用户.默认：no</span>stats admin <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>cond<span class="token operator">></span> <span class="token comment">#启用stats page中的管理功能</span><span class="token comment">#启用状态页</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456  <span class="token comment">#登录状态页</span><span class="token comment">#pid为当前pid号，process为当前进程号，nbproc和nbthread为一共多少进程和每个进程多少个线程</span>pid <span class="token operator">=</span> <span class="token number">25462</span> <span class="token punctuation">(</span>process <span class="token comment">#1, nbproc = 1, nbthread = 4)</span><span class="token comment">#启动了多长时间</span><span class="token function">uptime</span> <span class="token operator">=</span> 0d 0h02m59s<span class="token comment">#系统资源限制：内存/最大打开文件数</span>system limits: memmax <span class="token operator">=</span> unlimited<span class="token punctuation">;</span> ulimit-n <span class="token operator">=</span> <span class="token number">200058</span><span class="token comment">#最大socket连接数/单进程最大连接数/最大管道数maxpipes</span>maxsock <span class="token operator">=</span> <span class="token number">200058</span><span class="token punctuation">;</span> maxconn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> maxpipes <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#当前连接数/当前管道数/当前连接速率</span>current conns <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> current pipes <span class="token operator">=</span> <span class="token number">0</span>/0<span class="token punctuation">;</span> conn rate <span class="token operator">=</span> <span class="token number">1</span>/sec<span class="token punctuation">;</span> bit rate <span class="token operator">=</span> <span class="token number">0.000</span> kbps<span class="token comment">#运行的任务/当前空闲率</span>Running tasks: <span class="token number">1</span>/18<span class="token punctuation">;</span> idle <span class="token operator">=</span> <span class="token number">100</span> %<span class="token comment">#在线服务器</span>active UP<span class="token comment">#标记为backup的服务器</span>backup UP<span class="token comment">#监测未通过正在进入down过程</span>active UP, going down<span class="token comment">#备份服务器正在进入down过程</span>backup UP, going down<span class="token comment">#down的服务器正在进入up过程</span>active DOWN, going up<span class="token comment">#备份服务器正在进入up过程</span>backup DOWN, going up<span class="token comment">#在线的服务器或者是backup的服务器已经转换成了down状态</span>active or backup DOWN<span class="token comment">#标记为不监测的服务器</span>not checked<span class="token comment">#active或者backup服务器人为下线的</span>active or backup DOWN <span class="token keyword">for</span> maintenance <span class="token punctuation">(</span>MAINT<span class="token punctuation">)</span><span class="token comment">#active或者backup被人为软下线(人为将weight改成0)</span>active or backup SOFT STOPPED <span class="token keyword">for</span> maintenance</code></pre></div></figure><p><strong>Backend Server信息</strong></p><table><thead><tr><th>session rate(每秒的连接会话信息)：</th><th>Errors(错误统计信息)：</th></tr></thead><tbody><tr><td>cur:每秒的当前会话数量</td><td>Req:错误请求量</td></tr><tr><td>max:每秒新的最大会话数量</td><td>conn:错误链接量</td></tr><tr><td>limit:每秒新的会话限制量</td><td>Resp:错误响应量</td></tr><tr><td>sessions(会话信息)：</td><td>Warnings(警告统计信息)：</td></tr><tr><td>cur:当前会话量</td><td>Retr:重新尝试次数</td></tr><tr><td>max:最大会话量</td><td>Redis:再次发送次数</td></tr><tr><td>limit: 限制会话量</td><td></td></tr><tr><td>Total:总共会话量</td><td>Server(real server信息)：</td></tr><tr><td>LBTot:选中一台服务器所用的总时间</td><td>Status:后端机的状态，包括UP和DOWN</td></tr><tr><td>Last：和服务器的持续连接时间</td><td>LastChk:持续检查后端服务器的时间</td></tr><tr><td>Wght:权重</td><td></td></tr><tr><td>Bytes(流量统计)：</td><td>Act:活动链接数量</td></tr><tr><td>In:网络的字节输入总量</td><td>Bck:备份的服务器数量</td></tr><tr><td>Out:网络的字节输出总量</td><td>Chk:心跳检测时间</td></tr><tr><td>Dwn:后端服务器连接后都是DOWN的数量</td><td></td></tr><tr><td>Denied(拒绝统计信息)：</td><td>Dwntme:总的downtime时间</td></tr><tr><td>Req:拒绝请求量</td><td>Thrtle:server 状态</td></tr><tr><td>Resp:拒绝回复量</td><td></td></tr></tbody></table><p>利用状态页实现HAProxy服务器的健康性检查：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># curl -I http://admin:123456@192.168.1.11:8888/haproxy-status</span>HTTP/1.1 <span class="token number">200</span> OKcache-control: no-cachecontent-type: text/html</code></pre></div></figure><h2 id="1-3-IP地址透传"><a href="#1-3-IP地址透传" class="headerlink" title="1.3 IP地址透传"></a>1.3 IP地址透传</h2><p>Web服务器中需要记录客户端的真实IP地址，用于做访问统计、安全防护、行为分析、区域排行等场景。</p><p><strong>四层负载：</strong>IP+PORT转发</p><p>​在四层负载设备中，把client发送的报文目标地址(原来是负载均衡设备的IP地址)，根据均衡设备设置的选择web服务器的规则选择对应的web服务器IP地址，这样client就可以直接跟此服务器建立TCP连接并发送数据，而四层负载自身不参与建立连接，而和LVS不同，haproxy是伪四层负载均衡，因为haproxy需要分别和前端客户端及后端服务器建立连接。</p><p><strong>七层负载：</strong>协议+内容交换</p><p>​七层负载均衡服务器起了一个反向代理服务器的作用，服务器建立一次TCP连接要三次握手，而client要访问Web Server要先与七层负载设备进行三次握手后建立TCP连接，把要访问的报文信息发送给七层负载均衡；然后七层负载均衡再根据设置的均衡规则选择特定的 Web Server，然后通过三次握手与此台Web Server建立TCP连接，然后Web Server把需要的数据发送给七层负载均衡设备，负载均衡设备再把数据发送给client；所以，七层负载均衡设备起到了代理服务器的作用，七层代理需要和Client和后端服务器分别建立连接。</p><h3 id="1-3-1-四层IP地址透传"><a href="#1-3-1-四层IP地址透传" class="headerlink" title="1.3.1 四层IP地址透传"></a>1.3.1 四层IP地址透传</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#haproxy配置</span>listen web_http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode tcp <span class="token comment">#不支持http协议</span>  log global  server web1 <span class="token number">192.168</span>.1.13:80 send-proxy check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> <span class="token comment">#添加send-proxy</span>  server web2 <span class="token number">192.168</span>.1.14:80 send-proxy check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span> <span class="token comment">#添加send-proxy</span><span class="token comment">#nginx配置</span>http <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token comment">#变量$proxy_protocol_addr记录透传过来的客户端IP</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" "$proxy_protocol_addr"'</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>                                                server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span> proxy_protocol<span class="token punctuation">;</span><span class="token comment">#启用此项，将无法直接访问此网站，只能通过四层代理访问。</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-3-2-七层IP地址透传"><a href="#1-3-2-七层IP地址透传" class="headerlink" title="1.3.2 七层IP地址透传"></a>1.3.2 七层IP地址透传</h3><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20forwardfor">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20forwardfor</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>option forwardfor <span class="token punctuation">[</span> except <span class="token operator">&lt;</span>network<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">]</span>except <span class="token operator">&lt;</span>network<span class="token operator">></span>  <span class="token comment">#请求报请来自此处指定的网络时不予添加此首部，如haproxy自身所在网络</span>header <span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#使用自定义的首部名称，而非“X-Forwarded-For"，示例：X-client</span>header <span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token comment">#如果没有首部才添加首部，如果有使用默认值</span><span class="token comment">#配置示例</span><span class="token comment">#haproxy 配置</span>defaults  <span class="token comment">#此为默认值,首部字段默认为：X-Forwarded-For</span>  option forwardfor  <span class="token comment">#或者自定义首部,如:X-client</span>  option forwardfor except <span class="token number">127.0</span>.0.0/8 header X-client<span class="token comment">#listen配置</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  mode http  log global  balance random  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#Web服务器日志格式配置</span><span class="token comment">#apache 配置：</span>LogFormat <span class="token string">"%&#123;X-Forwarded-For&#125;i %a %l %u %t <span class="token entity" title="\&quot;">\"</span>%r<span class="token entity" title="\&quot;">\"</span> %>s %b <span class="token entity" title="\&quot;">\"</span>%&#123;Referer&#125;i<span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span>%&#123;User-Agent&#125;i<span class="token entity" title="\&quot;">\"</span>"</span> combined<span class="token comment">#nginx配置</span>http <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    <span class="token comment">#$proxy_add_x_forwarded_for：包括客户端IP和中间经过的所有代理的IP</span>    <span class="token comment">#$http_x_forwarded_For：只有客户端IP</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" "$proxy_protocol_addr"'</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>                                                server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-4-报文修改"><a href="#1-4-报文修改" class="headerlink" title="1.4 报文修改"></a>1.4 报文修改</h2><h3 id="1-4-1-HAProxy2-1版本前"><a href="#1-4-1-HAProxy2-1版本前" class="headerlink" title="1.4.1 HAProxy2.1版本前"></a>1.4.1 HAProxy2.1版本前</h3><p>2.1版本以下通过rspadd与rspidel在响应报文中添加与删除字段。</p><p>官方文档：</p><p><a href="https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqadd">https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqadd</a></p><p><a href="https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqdel">https://cbonte.github.io/haproxy-dconv/2.0/snapshot/configuration.html#4-reqdel</a></p><h3 id="1-4-2-HAProxy2-1版本后"><a href="#1-4-2-HAProxy2-1版本后" class="headerlink" title="1.4.2 HAProxy2.1版本后"></a>1.4.2 HAProxy2.1版本后</h3><p>2.1版本以上用下面指令http-request和http-response代替</p><p>官方文档：</p><p><a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-request">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-request</a></p><p><a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-response">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-http-response</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>http-response add-header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>fmt<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>condition<span class="token operator">></span> <span class="token punctuation">]</span>http-response del-header <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>meth<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token operator">|</span> unless <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>condition<span class="token operator">></span> <span class="token punctuation">]</span><span class="token comment">#配置示例</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  http-request add-header X-Haproxy-Current-Date %T <span class="token comment">#添加首部</span>  http-response del-header server                   <span class="token comment">#删除首部</span>  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-5-自定义日志格式"><a href="#1-5-自定义日志格式" class="headerlink" title="1.5  自定义日志格式"></a>1.5  自定义日志格式</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-log%20global</span>log global                                  <span class="token comment">#开启记录日志，默认不开启</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-option%20httplog</span>option httplog                              <span class="token comment">#开启记录httplog日志格式选项</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-capture%20cookie</span>capture cookie <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span>          <span class="token comment">#捕获请求和响应报文中的 cookie及值的长度,将之记录到日志</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-capture%20request%20header</span>capture request header <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span>  <span class="token comment">#捕获请求报文中指定的首部内容和长度并记录日志</span><span class="token comment">#官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-capture%20response%20header</span>capture response header <span class="token operator">&lt;</span>name<span class="token operator">></span> len <span class="token operator">&lt;</span>length<span class="token operator">></span> <span class="token comment">#捕获响应报文中指定的内容和长度首部并记录日志</span><span class="token comment">#配置示例：</span>log globaloption httplogcapture request header Host len <span class="token number">256</span>capture request header User-Agent len <span class="token number">512</span>capture request header Referer len <span class="token number">15</span>capture request header X-Forwarded-For len <span class="token number">15</span></code></pre></div></figure><p><strong>HAProxy配置自定义日志格式：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>listen web_host  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  capture request header User-Agent len <span class="token number">512</span>  capture request header Host len <span class="token number">256</span>  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span><span class="token comment">#验证日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># tail -f /var/log/haproxy.log </span>Feb <span class="token number">15</span> <span class="token number">23</span>:37:06 localhost haproxy<span class="token punctuation">[</span><span class="token number">9677</span><span class="token punctuation">]</span>: <span class="token number">192.168</span>.1.200:60614 <span class="token punctuation">[</span><span class="token number">15</span>/Feb/2023:23:37:06.269<span class="token punctuation">]</span> web_host web_host/web1 <span class="token number">0</span>/0/1/0/1 <span class="token number">200</span> <span class="token number">211</span> - - ---- <span class="token number">3</span>/1/0/0/0 <span class="token number">0</span>/0 <span class="token punctuation">&#123;</span>Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/110.0.0.0 Safari/537.36<span class="token operator">|</span><span class="token number">192.168</span>.1.11<span class="token punctuation">&#125;</span> <span class="token string">"GET / HTTP/1.1"</span>Feb <span class="token number">15</span> <span class="token number">23</span>:37:34 localhost haproxy<span class="token punctuation">[</span><span class="token number">9677</span><span class="token punctuation">]</span>: <span class="token number">192.168</span>.1.200:60614 <span class="token punctuation">[</span><span class="token number">15</span>/Feb/2023:23:37:34.155<span class="token punctuation">]</span> web_host web_host/web1 <span class="token number">0</span>/0/0/2/2 <span class="token number">304</span> <span class="token number">153</span> - - ---- <span class="token number">3</span>/2/0/0/0 <span class="token number">0</span>/0 <span class="token punctuation">&#123;</span>Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/110.0.0.0 Safari/537.36<span class="token operator">|</span><span class="token number">192.168</span>.1.11<span class="token punctuation">&#125;</span> <span class="token string">"GET / HTTP/1.1"</span></code></pre></div></figure><h2 id="1-6-压缩功能"><a href="#1-6-压缩功能" class="headerlink" title="1.6 压缩功能"></a>1.6 压缩功能</h2><p>对响应给客户端的报文进行压缩</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-compression%20algo">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-compression%20algo</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>compression algo <span class="token operator">&lt;</span>algorithm<span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token operator">&lt;</span>algorithm<span class="token operator">></span>   <span class="token comment">#压缩算法&lt;algorithm>支持下面类型：</span>  identity    <span class="token comment">#debug调试使用的压缩方式。</span>  <span class="token function">gzip</span>        <span class="token comment">#常用的压缩方式，与各浏览器兼容较好。</span>  deflate     <span class="token comment">#有些浏览器不支持。</span>  raw-deflate <span class="token comment">#新式的压缩方式。</span>  compression   <span class="token comment">#要压缩的文件类型</span><span class="token comment">#配置示例</span>compression algo <span class="token function">gzip</span>compression <span class="token builtin class-name">type</span> text/html text/plain<span class="token comment">#haproxy配置压缩</span>listen web_http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#后端服务器准备文本文件</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># ll -h /usr/share/nginx/html/test.txt </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">94</span> Feb <span class="token number">15</span> <span class="token number">20</span>:52 /usr/share/nginx/html/test.txt<span class="token punctuation">[</span>root@node14 ~<span class="token punctuation">]</span><span class="token comment"># ll -h /usr/share/nginx/html/test.txt</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">94</span> Feb <span class="token number">15</span> <span class="token number">20</span>:52 /usr/share/nginx/html/test.txt<span class="token comment">#验证压缩功能</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -is --compressed 192.168.1.11/test.txt | grep "content-encoding"</span>content-encoding: <span class="token function">gzip</span></code></pre></div></figure><h2 id="1-7-Web服务器状态监测"><a href="#1-7-Web服务器状态监测" class="headerlink" title="1.7 Web服务器状态监测"></a>1.7 Web服务器状态监测</h2><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20httpchk">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-option%20httpchk</a></p><p><strong>三种状态监测方式：</strong></p><ul><li>基于四层的传输端口做状态监测，此为默认方式。</li><li>基于指定 URI 做状态监测,需要访问整个页面资源,占用更多带宽。</li><li>基于指定 URI 的request请求头部内容做状态监测，占用较少带宽,建议使用此方式。</li></ul><p><strong>基于应用层http协议进行健康性检测：</strong></p><p>​基于应用层http协议，采有不同的监测方式，对后端real server进行状态监测，此方式会导致在后端服务器生成很多的HAProxy发起的访问日志。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置选项</span>option httpchk                           <span class="token comment">#启用七层健康性检测，对TCP和HTTP模式都支持，默认为：OPTIONS HTTP/1.0</span>option httpchk <span class="token operator">&lt;</span>uri<span class="token operator">></span>                     option httpchk <span class="token operator">&lt;</span>method<span class="token operator">></span> <span class="token operator">&lt;</span>uri<span class="token operator">></span>            option httpchk <span class="token operator">&lt;</span>method<span class="token operator">></span> <span class="token operator">&lt;</span>uri<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment">#http-check expect官方文档：https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-http-check%20expect</span><span class="token comment">#期望以上检查得到的响应码</span>http-check <span class="token function">expect</span> <span class="token punctuation">[</span>min-recv <span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>comment <span class="token operator">&lt;</span>msg<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span>ok-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>error-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tout-status <span class="token operator">&lt;</span>st<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span>on-success <span class="token operator">&lt;</span>fmt<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>on-error <span class="token operator">&lt;</span>fmt<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>status-code <span class="token operator">&lt;</span>expr<span class="token operator">></span><span class="token punctuation">]</span>                  <span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>match<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>                  <span class="token comment">#http-check expect示例</span>http-check <span class="token function">expect</span> status <span class="token number">200,201</span>,300-310http-check <span class="token function">expect</span> header name <span class="token string">"set-cookie"</span> value <span class="token parameter variable">-m</span> beg <span class="token string">"sessid="</span>http-check <span class="token function">expect</span> <span class="token operator">!</span> string SQL<span class="token punctuation">\</span> Errorhttp-check <span class="token function">expect</span> <span class="token operator">!</span> rstatus ^5http-check <span class="token function">expect</span> rstring <span class="token operator">&lt;</span><span class="token operator">!</span>--tag:<span class="token punctuation">[</span><span class="token number">0</span>-9a-f<span class="token punctuation">]</span>*--<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre></div></figure><p><strong>HAProxy配置Web服务器状态监测：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>listen web_check  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  balance roundrobin  <span class="token comment">#option httpchk GET /monitor/check.html #默认HTTP/1.0</span>  <span class="token comment">#option httpchk GET /monitor/check.html HTTP/1.0</span>  <span class="token comment">#option httpchk GET /monitor/check.html HTTP/1.1 #注意：HTTP/1.1强制要求必须有Host字段</span>  option httpchk HEAD /monitor/check.html HTTP/1.1<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nHost:<span class="token punctuation">\</span> <span class="token number">192.168</span>.1.11 <span class="token comment">#使用HEAD减少网络流量</span>  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  <span class="token comment">#在所有后端服务建立检测页面</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /usr/share/nginx/html/monitor</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># echo "monitor" > /usr/share/nginx/html/monitor/check.html</span></code></pre></div></figure><h2 id="1-8-自定义HAProxy错误页面"><a href="#1-8-自定义HAProxy错误页面" class="headerlink" title="1.8 自定义HAProxy错误页面"></a>1.8 自定义HAProxy错误页面</h2><p>对指定的报错进行重定向。</p><p>官方文档：<a href="https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-errorfile">https://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4.2-errorfile</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">errorfile <span class="token operator">&lt;</span>code<span class="token operator">></span> <span class="token operator">&lt;</span>file<span class="token operator">></span>  <span class="token operator">&lt;</span>code<span class="token operator">></span> <span class="token comment">#HTTP status code.支持200, 400, 403, 405, 408, 425, 429, 500, 502，503,504</span>  <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment">#包含完整HTTP响应头的错误页文件的绝对路径。 建议后缀".http"，以和一般的html文件相区分。</span>  <span class="token comment">#配置示例</span>errorfile <span class="token number">400</span> /etc/haproxy/errorfiles/400badreq.httperrorfile <span class="token number">408</span> /dev/null  <span class="token comment"># work around Chrome pre-connect bug</span>errorfile <span class="token number">403</span> /etc/haproxy/errorfiles/403forbid.httperrorfile <span class="token number">503</span> /etc/haproxy/errorfiles/503sorry.http<span class="token comment">#haproxy配置错误页面</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>defaults  option http-keep-alive  option forwardfor  maxconn <span class="token number">100000</span>  mode http  <span class="token function">timeout</span> connect 300000ms  <span class="token function">timeout</span> client 300000ms  <span class="token function">timeout</span> server 300000ms  errorfile <span class="token number">500</span> /etc/haproxy/html/500.http  errorfile <span class="token number">502</span> /etc/haproxy/html/502.http  errorfile <span class="token number">503</span> /etc/haproxy/html/503.http<span class="token comment">#创建错误页面</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/html/503.http</span>HTTP/1.1 <span class="token number">503</span> Service UnavailableContent-Type:text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>报错页面<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>网站维护中<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>请稍候再试<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">2</span>></span>联系电话：400-666-888<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token number">503</span> Service Unavailable<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#测试</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.1.11</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>报错页面<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>网站维护中<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>请稍候再试<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">2</span>></span>联系电话：400-666-888<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token number">503</span> Service Unavailable<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span></code></pre></div></figure><h2 id="1-9-HAProxy四层负载"><a href="#1-9-HAProxy四层负载" class="headerlink" title="1.9 HAProxy四层负载"></a>1.9 HAProxy四层负载</h2><p>针对除HTTP以外的TCP协议应用服务访问的应用场景：</p><ul><li>MySQL</li><li>Redis</li><li>RabbitMQ</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span>listen redis_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:6379  mode tcp  balance leastconn  server server1 <span class="token number">192.168</span>.1.13:6379 check  server server2 <span class="token number">192.168</span>.1.14:6379 check backup  listen mysql_port  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:3306  mode tcp  balance leastconn  server server1 <span class="token number">192.168</span>.1.13:3306 check  server server2 <span class="token number">192.168</span>.1.14:3306 check backup  <span class="token comment">#安装mysql和redis服务</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install mariadb-server redis</span><span class="token comment">#配置数据库远程连接</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># mysql -e "grant all on *.* to root@'%' identified by '123456'"</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's@bind 127.0.0.1@bind 0.0.0.0@' /etc/redis.conf</span><span class="token punctuation">[</span>root@node13 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start redis</span><span class="token comment">#测试访问</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.1.11</span><span class="token number">192.168</span>.1.11:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p123456 -h 192.168.1.11</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MariaDB connection <span class="token function">id</span> is <span class="token number">3</span>Server version: <span class="token number">5.5</span>.68-MariaDB MariaDB ServerCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2018</span>, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> </code></pre></div></figure><h2 id="1-10-HAProxy配置HTTPS"><a href="#1-10-HAProxy配置HTTPS" class="headerlink" title="1.10 HAProxy配置HTTPS"></a>1.10 HAProxy配置HTTPS</h2><p>​HAProxy可以实现https的证书安全,从用户到HAProxy为HTTPS,从HAProxy到后端服务器用HTTP通信但基于性能考虑,生产中证书都是在后端服务器比如Nginx上实现。</p><p><strong>配置选项：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置HAProxy支持https协议，支持ssl会话；</span><span class="token builtin class-name">bind</span> *:443 ssl crt /<span class="token environment constant">PATH</span>/TO/SOME_PEM_FILE<span class="token comment">#指令 crt 后证书文件为PEM格式，需要同时包含证书和所有私钥</span><span class="token function">cat</span> demo.key demo.crt <span class="token operator">></span> demo.pem<span class="token comment">#把80端口的请求重向定443</span><span class="token builtin class-name">bind</span> *:80redirect scheme https <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span><span class="token comment">#向后端传递用户请求的协议和端口（frontend或backend）</span>http_request set-header X-Forwarded-Port %<span class="token punctuation">[</span>dst_port<span class="token punctuation">]</span>http_request add-header X-Forwared-Proto https <span class="token keyword">if</span> <span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>证书制作：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy/certs</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/haproxy/certs/</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl genrsa -out haproxy.key 2048</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl req -new -x509 -key haproxy.key -out haproxy.crt -subj "/CN=www.chsblogs.com"</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># cat haproxy.key haproxy.crt > haproxy.pem</span><span class="token comment">#查看证书</span><span class="token punctuation">[</span>root@node11 certs<span class="token punctuation">]</span><span class="token comment"># openssl x509 -in haproxy.pem -noout -text</span></code></pre></div></figure><p><strong>HAProxy配置HTTPS：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg </span>listen web_https  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:443 ssl crt /etc/haproxy/certs/haproxy.pem  redirect scheme https <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span>  http-request set-header X-forwarded-Port %<span class="token punctuation">[</span>dst_port<span class="token punctuation">]</span>  http-request add-header X-forwarded-Proto https <span class="token keyword">if</span> <span class="token punctuation">&#123;</span> ssl_fc <span class="token punctuation">&#125;</span>  balance roundrobin  mode http  log global  option httplog  compression algo <span class="token function">gzip</span>  compression <span class="token builtin class-name">type</span> text/html text/plain  server web1 <span class="token number">192.168</span>.1.13:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">2</span> rise <span class="token number">5</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).HAProxy调度算法</title>
    <link href="/2023/02/12/LB/HAProxy/haproxy03/"/>
    <url>/2023/02/12/LB/HAProxy/haproxy03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy调度算法"><a href="#1-HAProxy调度算法" class="headerlink" title="1.HAProxy调度算法"></a>1.HAProxy调度算法</h1><p>HAProxy的调度算法分为静态和动态调度算法，但是有些算法可以根据参数在静态和动态算法中相互转换。 通过固定参数balance指明对后端服务器的调度算法，该参数可以配置在listen或backend选项中。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官方文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#4-balance</span></span></code></pre></div></figure><h2 id="1-1-socat-工具"><a href="#1-1-socat-工具" class="headerlink" title="1.1 socat 工具"></a>1.1 socat 工具</h2><p>对服务器动态权重和其它状态可以利用 socat工具进行调整，Socat 是 Linux 下的一个多功能的网络工具，名字来由是Socket CAT，相当于netCAT的增强版.Socat 的主要特点就是在两个数据流之间建立双向通道，且支持众多协议和链接方式。如 IP、TCP、 UDP、IPv6、Socket文件等。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install socat</span><span class="token comment">#查看帮助</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "help" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#查看信息</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "show info" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#查看后端服务状态</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "show servers state" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span><span class="token comment"># be_id be_name srv_id srv_name srv_addr srv_op_state srv_admin_state srv_uweight srv_iweight srv_time_since_last_change srv_check_status srv_check_result srv_check_health srv_check_state srv_agent_state bk_f_forced_id srv_f_forced_id srv_fqdn srv_port srvrecord</span><span class="token number">4</span> web_prot_http_nodes <span class="token number">1</span> <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30 <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">20</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> - <span class="token number">80</span> -<span class="token number">4</span> web_prot_http_nodes <span class="token number">2</span> <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31 <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">20</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> - <span class="token number">80</span> -<span class="token comment">#查看后端指定服务状态</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#修改weight，注意只针对单进程有效</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_prot_http_nodes/192.168.1.31 3" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">3</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#将后端服务器禁用，注意只针对单进程有效</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#启用后端服务器</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "enable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#将后端服务器软下线，即weight设为0</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_prot_http_nodes/192.168.1.31 0" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token comment">#针对haproxy的多进程,将后端服务器禁用</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock1</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "disable server web_prot_http_nodes/192.168.1.31" | socat stdio /var/lib/haproxy/haproxy.sock2</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># for i in &#123;1..2&#125;;do echo "set weight web_prot_http_nodes/192.168.1.31 10" | socat stdio /var/lib/haproxy/haproxy.sock$i;done</span><span class="token comment">#上线和下线后端服务器脚本</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cat haproxy_host_up_down.sh </span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">.</span> /etc/init.d/functions<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>up<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"set weight web_prot_http_nodes/<span class="token variable">$2</span> 1"</span> <span class="token operator">|</span> socat stdio /var/lib/haproxy/haproxy.sock  <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> action <span class="token string">"<span class="token variable">$2</span> is up"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>down<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"set weight web_prot_http_nodes/<span class="token variable">$2</span> 0"</span> <span class="token operator">|</span> socat stdio /var/lib/haproxy/haproxy.sock  <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> action <span class="token string">"<span class="token variable">$2</span> is down"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $0<span class="token variable">`</span></span> up|down IP"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh down 192.168.1.30</span><span class="token number">192.168</span>.1.30 is down                                       <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh down 192.168.1.31</span><span class="token number">192.168</span>.1.31 is down                                       <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh up 192.168.1.30</span><span class="token number">192.168</span>.1.30 is up                                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ./haproxy_host_up_down.sh up 192.168.1.31</span><span class="token number">192.168</span>.1.31 is up                                         <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span></code></pre></div></figure><h2 id="1-2-静态算法"><a href="#1-2-静态算法" class="headerlink" title="1.2 静态算法"></a>1.2 静态算法</h2><p>静态算法：按照事先定义好的规则轮询进行调度，不关心后端服务器的当前负载、连接数和响应速度等，且无法实时动态修改权重(只能为0和1,不支持其它值)或者修改后不生效，如果需要修改只能靠重启HAProxy生效。  </p><h3 id="1-2-1-static-rr"><a href="#1-2-1-static-rr" class="headerlink" title="1.2.1 static-rr"></a>1.2.1 static-rr</h3><p>static-rr：基于权重的轮询调度，不支持运行时利用socat进行权重的动态调整(只支持0和1,不支持其它值)及后端服务器慢启动，其后端主机数量没有限制，相当于LVS中的 wrr</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance static-rr  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-2-2-first"><a href="#1-2-2-first" class="headerlink" title="1.2.2 first"></a>1.2.2 first</h3><p>first：根据服务器在列表中的位置，自上而下进行调度，但是其只会当第一台服务器的连接数达到上限，新请求才会分配给下一台服务，因此会忽略服务器的权重设置，此方式使用较少,不支持用socat进行动态修改权重,可以设置0和1,可以设置其它值但无效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance first  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-3-动态算法"><a href="#1-3-动态算法" class="headerlink" title="1.3 动态算法"></a>1.3 动态算法</h2><p>动态算法：基于后端服务器状态进行调度适当调整，新请求将优先调度至当前负载较低的服务器，且权重可以在haproxy运行时动态调整无需重启。</p><h3 id="1-3-1-roundrobin"><a href="#1-3-1-roundrobin" class="headerlink" title="1.3.1 roundrobin"></a>1.3.1 roundrobin</h3><p>roundrobin：基于权重的轮询动态调度算法，支持权重的运行时调整，不同于lvs中的rr轮训模式，HAProxy中的roundrobin支持慢启动(新加的服务器会逐渐增加转发数)，其每个后端backend中最多支持4095个real server，支持对real server权重动态调整，roundrobin为默认调度算法,此算法使用广泛.</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance roundrobin  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#支持动态调整权重</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">1</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 3" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">3</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="1-3-2-leastconn"><a href="#1-3-2-leastconn" class="headerlink" title="1.3.2 leastconn"></a>1.3.2 leastconn</h3><p>leastconn 加权的最少连接的动态，支持权重的运行时调整和慢启动，即:根据当前连接最少的后端服务器而非权重进行优先调度(新客户端连接)，比较适合长连接的场景使用，比如：MySQL等场景。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance leastconn  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-3-3-random"><a href="#1-3-3-random" class="headerlink" title="1.3.3 random"></a>1.3.3 random</h3><p>在1.9版本开始增加 random的负载平衡算法，其基于随机数作为一致性hash的key，随机负载平衡对于大型服务器场景或经常添加或删除服务器非常有用，支持weight的动态调整，weight较大的主机有更大概率获取新请求。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance random  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-4-其它算法"><a href="#1-4-其它算法" class="headerlink" title="1.4 其它算法"></a>1.4 其它算法</h2><p>其它算法即可作为静态算法，又可以通过选项成为动态算法</p><h3 id="1-4-1-source"><a href="#1-4-1-source" class="headerlink" title="1.4.1 source"></a>1.4.1 source</h3><p>​源地址hash，基于用户源地址hash并将请求转发到后端服务器，后续同一个源地址请求将被转发至同一个后端web服务器。此方式当后端服务器数据量发生变化时，会导致很多用户的请求转发至新的后端服务器，默认为静态方式，但是可以通过hash-type选项进行更改。</p><p>​这个算法一般是在不插入Cookie的TCP模式下使用，也可给不支持会话cookie的客户提供最好的会话粘性，适用于session会话保持但不支持cookie和缓存的场景。</p><p>​源地址有两种转发客户端请求到后端服务器的服务器选取计算方式，分别是取模法和一致性hash。</p><p><strong>map-base取模法：</strong></p><p>map-based：取模法，对source地址进行hash计算，再基于服务器总权重的取模，最终结果决定将此请求转发至对应的后端服务器。此方法是静态的，即不支持在线调整权重，不支持慢启动，可实现对后端服务器均衡调度。缺点是当服务器的总权重发生变化时，即有服务器上线或下线，都会因总权重发生变化而导致调度结果整体改变，hash-type 指定的默认值为此算法。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance <span class="token builtin class-name">source</span>  hash-type map-based  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#不支持动态调整权重值</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 3" | socat stdio /var/lib/haproxy/haproxy.sock</span>Backend is using a static LB algorithm and only accepts weights <span class="token string">'0%'</span> and <span class="token string">'100%'</span><span class="token builtin class-name">.</span><span class="token comment">#只能动态上线和下线</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "set weight web_host/192.168.1.30 0" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># echo "get weight web_host/192.168.1.30" | socat stdio /var/lib/haproxy/haproxy.sock</span><span class="token number">0</span> <span class="token punctuation">(</span>initial <span class="token number">1</span><span class="token punctuation">)</span></code></pre></div></figure><p><strong>一致性hash：</strong></p><p>一致性哈希，当服务器的总权重发生变化时，对调度结果影响是局部的，不会引起大的变动，hash（o）mod n ，该hash算法是动态的，支持使用 socat等工具进行在线权重调整，支持慢启动。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance <span class="token builtin class-name">source</span>  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-2-uri"><a href="#1-4-2-uri" class="headerlink" title="1.4.2 uri"></a>1.4.2 uri</h3><p>基于对用户请求的URI的左半部分或整个uri做hash，再将hash结果对总权重进行取模后，根据最终结果将请求转发到后端指定服务器，适用于后端是缓存服务器场景，默认是静态算法，也可以通过hash-type指定map-based和consistent，来定义使用取模法还是一致性hash。  </p><p><strong>注意：此算法基于应用层，所以只支持 mode http ，不支持 mode tcp</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance uri  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-3-url-param"><a href="#1-4-3-url-param" class="headerlink" title="1.4.3 url_param"></a>1.4.3 url_param</h3><p>url_param对用户请求的url中的 params 部分中的一个参数key对应的value值作hash计算，并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个real server，如果无没key，将按roundrobin算法。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#url_param取模法配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance url_param userid  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  <span class="token comment">#url_param一致性hash配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance url_param userid  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-4-hdr"><a href="#1-4-4-hdr" class="headerlink" title="1.4.4 hdr"></a>1.4.4 hdr</h3><p>针对用户每个http头部(header)请求中的指定信息做hash，此处由 name 指定的http首部将会被取出并做hash计算，然后由服务器总权重取模以后派发至某挑出的服务器，如果无有效值，则会使用默认的轮询调度。  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#hdr取模法配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  balance hdr<span class="token punctuation">(</span>User-Agent<span class="token punctuation">)</span>  <span class="token comment">#balance hdr(host)</span>  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#一致性hash配置</span>listen web_host  <span class="token builtin class-name">bind</span> :80,:8801-8810,:9001-9010  mode http  log global  <span class="token comment">#balance hdr(User-Agent)</span>  balance hdr<span class="token punctuation">(</span>host<span class="token punctuation">)</span>  hash-type consistent  server <span class="token number">192.168</span>.1.30 <span class="token number">192.168</span>.1.30:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server <span class="token number">192.168</span>.1.31 <span class="token number">192.168</span>.1.31:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h3 id="1-4-5-rdp-cookie"><a href="#1-4-5-rdp-cookie" class="headerlink" title="1.4.5 rdp-cookie"></a>1.4.5 rdp-cookie</h3><p>rdp-cookie对windows远程桌面的负载，使用cookie保持会话，默认是静态，也可以通过hash-type指定map-based和consistent，来定义使用取模法还是一致性hash。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#rdp-cookie 取模法配置</span>listen RDP  <span class="token builtin class-name">bind</span> :3389  balance rdp-cookie  mode tcp  server rdp0 <span class="token number">192.168</span>.1.30:3389 check fall <span class="token number">3</span> rise <span class="token number">5</span> inter <span class="token number">2000</span> weight <span class="token number">1</span><span class="token comment">#rdp-cookie 一致性hash配置</span>listen RDP  mode tcp  <span class="token builtin class-name">bind</span> :3389  balance rdp-cookie  hash-type consistent  server rdp0 <span class="token number">192.168</span>.1.30:3389 check fall <span class="token number">3</span> rise <span class="token number">5</span> inter <span class="token number">2000</span> weight <span class="token number">1</span>  <span class="token comment">#基于iptables实现RDP协议转发</span><span class="token comment">#必须开启ip转发功能： net.ipv4.ip_forward = 1</span><span class="token punctuation">[</span>root@node20 ~<span class="token punctuation">]</span><span class="token comment"># sysctl -w net.ipv4.ip_forward=1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h2 id="1-5-算法总结"><a href="#1-5-算法总结" class="headerlink" title="1.5 算法总结"></a>1.5 算法总结</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#静态</span>static-rr---------<span class="token operator">></span>tcp/httpfirst-------------<span class="token operator">></span>tcp/http<span class="token comment">#动态</span>roundrobin--------<span class="token operator">></span>tcp/httpleastconn---------<span class="token operator">></span>tcp/httprandom------------<span class="token operator">></span>tcp/http<span class="token comment">#以下静态和动态取决于hash_type是否consistent</span>source------------<span class="token operator">></span>tcp/httpUri---------------<span class="token operator">></span>httpurl_param---------<span class="token operator">></span>httphdr---------------<span class="token operator">></span>httprdp-cookie--------<span class="token operator">></span>tcp<span class="token comment">#各种算法使用场景</span>first              <span class="token comment">#使用较少</span>static-rr          <span class="token comment">#做了session共享的 web 集群</span>roundrobinrandomleastconn          <span class="token comment">#数据库</span><span class="token builtin class-name">source</span>             <span class="token comment">#基于客户端公网 IP 的会话保持</span>Uri---------------<span class="token operator">></span>http <span class="token comment">#缓存服务器，CDN服务商，蓝汛、百度、阿里云、腾讯</span>url_param---------<span class="token operator">></span>http <span class="token comment">#可以实现session保持</span>hdr                <span class="token comment">#基于客户端请求报文头部做下一步处理</span>rdp-cookie -       <span class="token comment">#基于Windows主机,很少使用</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).HAProxy基础配置详解</title>
    <link href="/2023/02/10/LB/HAProxy/haproxy02/"/>
    <url>/2023/02/10/LB/HAProxy/haproxy02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HAProxy基础配置详解"><a href="#1-HAProxy基础配置详解" class="headerlink" title="1.HAProxy基础配置详解"></a>1.HAProxy基础配置详解</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方文档</span>http://cbonte.github.io/haproxy-dconv/http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html</code></pre></div></figure><p>HAProxy的配置文件&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg，配置文件由五部分组成。</p><ul><li>global：全局配置。进程及安全配置、性能等相关参数。</li><li>defaults：默认参数的配置部分。为frontend、backend、listen提供默认配置。</li><li>frontend：用于设置接收用户请求的前端虚拟节点。frontend可以根据ACL规则直接指定要使用的后端backend。</li><li>backend：用于设置集群后端服务集群的配置，也就是用来添加一组真实服务器，以处理前端用户的请求。</li><li>listen：同时拥有前端和后端配置,配置简单。</li></ul><h2 id="1-1-global配置"><a href="#1-1-global配置" class="headerlink" title="1.1 global配置"></a>1.1 global配置</h2><p>官方文档：<a href="http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#3">http://cbonte.github.io/haproxy-dconv/2.4/snapshot/configuration.html#3</a></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#锁定运行目录</span><span class="token function">chroot</span><span class="token comment">#守护进程运行</span>daemon<span class="token comment">#socket文件</span>stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin<span class="token comment">#运行haproxy的用户身份</span>user haproxygroup haproxy<span class="token comment">#开启的haproxy worker进程数，默认进程数是一个</span>nbproc <span class="token number">4</span><span class="token comment">#和多进程 nbproc配置互斥（版本有关,CentOS8的haproxy1.8无此问题）,指定每个haproxy进程开启的线程数，默认为每个进程一个线程</span><span class="token comment">#如果同时启用nbproc和nbthread无法启动服务</span>nbthread <span class="token number">1</span><span class="token comment">#绑定haproxy worker 进程至指定CPU，将第1个work进程绑定至0号CPU</span>cpu-map <span class="token number">1</span> <span class="token number">0</span><span class="token comment">#绑定haproxy worker 进程至指定CPU，将第2个work进程绑定至1号CPU</span>cpu-map <span class="token number">2</span> <span class="token number">1</span><span class="token comment">#每个haproxy进程的最大并发连接数</span>maxconn <span class="token number">100000</span><span class="token comment">#每个haproxy进程ssl最大连接数,用于haproxy配置了证书的场景下</span>maxsslconn n<span class="token comment">#每个进程每秒创建的最大连接数量</span>maxconnrate n<span class="token comment">#后端server状态check随机提前或延迟百分比时间，建议2-5(20%-50%)之间，默认值0</span>spread-checks n<span class="token comment">#指定pid文件路径</span>pidfile<span class="token comment">#定义全局的syslog服务器；日志服务器需要开启UDP协议，最多可以定义两个</span>log <span class="token number">127.0</span>.0.1 local2 info</code></pre></div></figure><p><strong>多进程和线程：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#多进程和线程</span><span class="token comment">#多进程和socket文件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>  stats socket /var/lib/haproxy/haproxy.sock1 mode <span class="token number">600</span> level admin process <span class="token number">1</span>  stats socket /var/lib/haproxy/haproxy.sock2 mode <span class="token number">600</span> level admin process <span class="token number">2</span>  nbproc <span class="token number">2</span> <span class="token comment">#nbproc大于1</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># pstree -p | grep haproxy</span>           <span class="token operator">|</span>-haproxy<span class="token punctuation">(</span><span class="token number">10579</span><span class="token punctuation">)</span>-+-haproxy<span class="token punctuation">(</span><span class="token number">10582</span><span class="token punctuation">)</span>           <span class="token operator">|</span>                `-haproxy<span class="token punctuation">(</span><span class="token number">10583</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/haproxy/</span>total <span class="token number">4</span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">6</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.pidsrw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:20 haproxy.socksrw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.sock1srw-------. <span class="token number">1</span> root root <span class="token number">0</span> Feb <span class="token number">13</span> <span class="token number">14</span>:30 haproxy.sock2</code></pre></div></figure><p><strong>HAProxy日志配置：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy日志配置</span><span class="token comment">#在global配置项定义</span><span class="token comment">#基于syslog记录日志到指定设备，级别有(err、warning、info、debug)</span>log <span class="token number">127.0</span>.0.1 local<span class="token punctuation">&#123;</span><span class="token number">1</span>-7<span class="token punctuation">&#125;</span> info<span class="token comment">#Rsyslog配置</span><span class="token punctuation">[</span>root@node11 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rsyslog</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#启动本地和远程日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>  log <span class="token number">127.0</span>.0.1 local2 info  log <span class="token number">192.168</span>.1.21 local2 info<span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span><span class="token comment">#开启本地日志</span><span class="token punctuation">[</span>root@node11 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment">#开启远程主机日志</span><span class="token punctuation">[</span>root@node21 haproxy<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf </span><span class="token variable">$ModLoad</span> imudp<span class="token variable">$UDPServerRun</span> <span class="token number">514</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>local2.*                                                /var/log/haproxy.log<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></div></figure><p><strong>子配置文件：</strong></p><p>当业务众多时，将所有配置都放在一个配置文件中，会造成维护困难。可以考虑按业务分类，将配置信息拆分，放在不同的子配置文件中，从而达到方便维护的目的。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建子配置目录</span><span class="token comment">#注意: 子配置文件的文件后缀必须为.cfg</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy/conf.d</span><span class="token comment">#创建子配置文件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/conf.d/test.cfg</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:8888  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456<span class="token comment">#添加子配置目录到unit文件中</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/haproxy.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>HAProxy Load Balancer<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-f</span> /etc/haproxy/conf.d/ <span class="token parameter variable">-c</span> <span class="token parameter variable">-q</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-f</span> /etc/haproxy/conf.d/ <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR2</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart haproxy</span></code></pre></div></figure><h2 id="1-2-default配置"><a href="#1-2-default配置" class="headerlink" title="1.2 default配置"></a>1.2 default配置</h2><p><strong>注意：name字段只能使用大小写字母，数字，‘-’(dash)，’_‘(underscore)，’.’ (dot)和 ‘:’(colon)，并且严格区分大小写。</strong></p><p>defaults [<name>] [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当server Id对应的服务器挂掉后，强制定向到其他健康的服务器，重新派发</span>option redispatch<span class="token comment">#当服务器负载很高时，自动结束掉当前队列处理比较久的连接，针对业务情况选择开启</span>option abortonclose<span class="token comment">#开启与客户端的会话保持</span>option http-keep-alive<span class="token comment">#透传客户端真实IP至后端web服务器</span>option forwardfor<span class="token comment">#设置默认工作类型,使用TCP服务器性能更好，减少压力</span>mode http<span class="token operator">|</span>tcp<span class="token comment">#session 会话保持超时时间，此时间段内会转发到相同的后端服务器</span><span class="token function">timeout</span> http-keep-alive 120s<span class="token comment">#客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)，默认单位ms</span><span class="token function">timeout</span> connect 120s<span class="token comment">#客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，默认单位ms，如果超时，会出现502错误，此值建议设置较大些，访止502错误</span><span class="token function">timeout</span> server 600s<span class="token comment">#设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同</span><span class="token function">timeout</span> client 600s<span class="token comment">#对后端服务器的默认检测超时时间</span><span class="token function">timeout</span> check 5s<span class="token comment">#指定后端服务器的默认设置</span>default-server inter <span class="token number">1000</span> weight <span class="token number">3</span></code></pre></div></figure><h2 id="1-3-frontend配置"><a href="#1-3-frontend配置" class="headerlink" title="1.3 frontend配置"></a>1.3 frontend配置</h2><p>frontend <name>   [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定HAProxy的监听地址，可以是IPV4或IPV6，可以同时监听多个IP或端口，可同时用于listen字段中</span><span class="token comment">#格式：bind [&lt;address>]:&lt;port_range> [, ...] [param*]</span><span class="token comment">#注意：如果需要绑定在非本机的IP，需要开启内核参数：net.ipv4.ip_nonlocal_bind=1</span><span class="token builtin class-name">bind</span><span class="token comment">#针对所有server配置,当前端服务器的连接数达到上限后的后援队列长度，注意：不支持backend</span>backlog <span class="token operator">&lt;</span>backlog<span class="token operator">></span><span class="token comment">#监听http的多个IP的多个端口和sock文件</span>listen http_proxy  <span class="token builtin class-name">bind</span> :80,:443,:8801-8810  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.20:10010,192.168.1.20:10020  <span class="token builtin class-name">bind</span> /var/run/ssl-frontend.sock user root mode <span class="token number">600</span> accept-proxy  <span class="token comment">#https监听</span>listen http_https_proxy  <span class="token builtin class-name">bind</span> :80  <span class="token builtin class-name">bind</span> :443 ssl crt /etc/haproxy/site.pem  <span class="token comment">#监听ipv6、ipv4和unix sock文件</span>listen http_https_proxy_explicit  <span class="token builtin class-name">bind</span> ipv6@:80  <span class="token builtin class-name">bind</span> ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem  <span class="token builtin class-name">bind</span> unix@ssl-frontend.sock user root mode <span class="token number">600</span> accept-proxy  <span class="token comment">#监听file descriptor</span>listen external_bind_app1  <span class="token builtin class-name">bind</span> <span class="token string">"fd@<span class="token variable">$&#123;FD_APP1&#125;</span>"</span>  <span class="token comment">#可以采用后面形式命名：业务-服务-端口号</span>frontend chs_web_port  <span class="token builtin class-name">bind</span> :80,:8080  <span class="token builtin class-name">bind</span> <span class="token number">10.0</span>.0.7:10080,:8801-8810,10.0.0.17:9001-9010  <span class="token comment">#指定负载协议类型</span>  mode tcp  <span class="token comment">#调用的后端服务器组名称</span>  use_backend <span class="token operator">&lt;</span>backend_name<span class="token operator">></span></code></pre></div></figure><h2 id="1-4-backend配置"><a href="#1-4-backend配置" class="headerlink" title="1.4 backend配置"></a>1.4 backend配置</h2><p>backend  <name>   [ from <defaults_name> ]</defaults_name></name></p><p>定义一组后端服务器，backend服务器将被frontend进行调用。  </p><p>注意: backend 的名称必须唯一,并且必须在listen或frontend中事先定义才可以使用,否则服务无法启动</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#指定负载协议类型,和对应的frontend必须一致</span>mode http<span class="token operator">|</span>tcp<span class="token comment">#配置选项</span><span class="token comment">#注意：option后面加 httpchk，smtpchk,mysql-check,pgsql-check，ssl-hello-chk方法，可用于实现更多应用层检测功能。</span>option<span class="token comment">#定义后端real server,必须指定IP和端口</span>server<span class="token comment">#针对一个server配置</span><span class="token comment">#对指定real进行健康状态检查，如果不加此设置，默认不开启检查,只有check后面没有其它配置也可以启用检查功能</span>check<span class="token comment">#默认对相应的后端服务器IP和端口,利用TCP连接进行周期性健康性检查,注意必须指定端口才能实现健康性检查</span>addr <span class="token operator">&lt;</span>IP<span class="token operator">></span>        <span class="token comment">#可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量</span>port <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#指定的健康状态监测端口</span>inter <span class="token operator">&lt;</span>num<span class="token operator">></span>      <span class="token comment">#健康状态检查间隔时间，默认2000 ms</span>fall <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#后端服务器从线上转为线下的检查的连续失效次数，默认为3</span>rise <span class="token operator">&lt;</span>num<span class="token operator">></span>       <span class="token comment">#后端服务器从下线恢复上线的检查的连续有效次数，默认为2</span>weight <span class="token operator">&lt;</span>weight<span class="token operator">></span>  <span class="token comment">#默认为1，最大值为256，0(状态为蓝色)表示不参与负载均衡，但仍接受持久连接</span>backup           <span class="token comment">#将后端服务器标记为备份状态,只在所有非备份主机down机时提供服务，类似Sorry Server</span>disabled         <span class="token comment">#将后端服务器标记为不可用状态，即维护状态，除了持久模式，将不再接受连接,状态为深黄色,优雅下线,不再接受新用户的请求.</span><span class="token comment">#将请求临时(302)重定向至其它URL，只适用于http模式</span>redirect prefix http://www.baidu.com/<span class="token comment">#将请求临时(302)重定向至其它URL，只适用于http模式</span>redir http://www.baidu.com<span class="token comment">#当前后端server的最大并发连接数</span>maxconn <span class="token operator">&lt;</span>maxconn<span class="token operator">></span></code></pre></div></figure><p><strong>frontend+backend 配置实例：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官网业务访问入口</span>frontend WEB_PORT_80  <span class="token builtin class-name">bind</span> :80  mode http  use_backend web_prot_http_nodesbackend web_prot_http_nodes  mode http  option forwardfor  server web1 <span class="token number">192.168</span>.1.13:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure><h2 id="1-5-listen配置"><a href="#1-5-listen配置" class="headerlink" title="1.5 listen配置"></a>1.5 listen配置</h2><p>listen   <name>   [ from <defaults_name> ]</defaults_name></name></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#listen替代frontend+backend</span>listen WEB_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.11:80  mode http  option forwardfor    server web1 <span class="token number">192.168</span>.1.13:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server web2 <span class="token number">192.168</span>.1.14:8080 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).HAProxy简介及安装</title>
    <link href="/2023/02/09/LB/HAProxy/haproxy01/"/>
    <url>/2023/02/09/LB/HAProxy/haproxy01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-负载均衡简介"><a href="#1-负载均衡简介" class="headerlink" title="1.负载均衡简介"></a>1.负载均衡简介</h1><p>负载均衡：Load Balance，简称LB，是一种服务或基于硬件设备等实现的高可用反向代理技术，负载均衡将特定的业务(web服务、网络流量等)分担给指定的一个或多个后端特定的服务器或设备，从而提高了公司业务的并发处理能力、保证了业务的高可用性、方便了业务后期的水平动态扩展。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#阿里云SLB介绍<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//developer.aliyun.com/article/1803</span></span></code></pre></div></figure><p>负载均衡类型：</p><ul><li><p>四层</p><ul><li>LVS</li><li>Nginx(1.9版本后)</li><li>HAProxy</li></ul></li><li><p>七层</p><ul><li>HAProxy</li><li>Nginx</li></ul></li><li><p>硬件</p><ul><li><p>F5</p></li><li><p>Netscaler</p></li><li><p>Array</p></li><li><p>深信服</p></li><li><p>北京灵州</p></li></ul></li></ul><h1 id="2-HAPoxy简介"><a href="#2-HAPoxy简介" class="headerlink" title="2.HAPoxy简介"></a>2.HAPoxy简介</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#社区版网站<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.haproxy.org/</span></span>#Github<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/haproxy</span></span></code></pre></div></figure><h1 id="3-HAProxy安装"><a href="#3-HAProxy安装" class="headerlink" title="3.HAProxy安装"></a>3.HAProxy安装</h1><h2 id="3-1-Ubuntu20-04安装"><a href="#3-1-Ubuntu20-04安装" class="headerlink" title="3.1 Ubuntu20.04安装"></a>3.1 Ubuntu20.04安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#参考地址<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//haproxy.debian.net/</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node30:~<span class="token comment"># apt-get install --no-install-recommends software-properties-common</span>root@node30:~<span class="token comment"># add-apt-repository ppa:vbernat/haproxy-2.7</span>root@node30:~<span class="token comment"># apt update</span>root@node30:~<span class="token comment"># apt-get install haproxy=2.7.\*</span>root@node30:~<span class="token comment"># haproxy -v</span>HAProxy version <span class="token number">2.7</span>.2-1ppa1~focal <span class="token number">2023</span>/01/20 - https://haproxy.org/</code></pre></div></figure><h2 id="3-2-CentOS7-9安装"><a href="#3-2-CentOS7-9安装" class="headerlink" title="3.2 CentOS7.9安装"></a>3.2 CentOS7.9安装</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#第三方网站下载RPM包<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//pkgs.org/download/haproxy</span></span>#第三方YUM仓库安装<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//centos7.iuscommunity.org/ius-release.rpm</span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7.9默认的BASE仓库安装</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HA-Proxy version <span class="token number">1.5</span>.18 <span class="token number">2016</span>/05/10Copyright <span class="token number">2000</span>-2016 Willy Tarreau <span class="token operator">&lt;</span>willy@haproxy.org<span class="token operator">></span><span class="token comment">#第三方网站下载RPM包</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget http://www.nosuchhost.net/~cheese/fedora/packages/epel-7/x86_64/cheese-release-7-1.noarch.rpm</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># rpm -Uvh cheese-release*rpm</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HA-Proxy version <span class="token number">1.8</span>.14-52e4d43 <span class="token number">2018</span>/09/20Copyright <span class="token number">2000</span>-2018 Willy Tarreau <span class="token operator">&lt;</span>willy@haproxy.org<span class="token operator">></span></code></pre></div></figure><h2 id="3-3-编译安装HAProxy"><a href="#3-3-编译安装HAProxy" class="headerlink" title="3.3 编译安装HAProxy"></a>3.3 编译安装HAProxy</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy源码包下载地址</span>http://www.haproxy.org/download/</code></pre></div></figure><h3 id="3-3-1-安装lua环境"><a href="#3-3-1-安装lua环境" class="headerlink" title="3.3.1 安装lua环境"></a>3.3.1 安装lua环境</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考链接：http://www.lua.org/start.html</span><span class="token comment">#CentOS7安装</span><span class="token comment">#当前系统lua版本</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># lua -v</span>Lua <span class="token number">5.1</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2008 Lua.org, PUC-Rio<span class="token comment">#安装基础命令及编译依赖环境</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum install gcc readline-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar zxf lua-5.4.4.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/lua-5.4.4/</span><span class="token punctuation">[</span>root@node10 lua-5.4.4<span class="token punctuation">]</span><span class="token comment"># make all test</span><span class="token comment">#查看lua版本</span><span class="token punctuation">[</span>root@node10 lua-5.4.4<span class="token punctuation">]</span><span class="token comment"># src/lua -v</span>Lua <span class="token number">5.4</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2022 Lua.org, PUC-Rio</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04安装</span>root@node30:~<span class="token comment"># apt install gcc iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev openssh-server libreadline-dev libsystemd-dev make</span>root@node30:~<span class="token comment"># curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz</span>root@node30:~<span class="token comment"># tar zxf lua-5.4.4.tar.gz -C /usr/local/src/</span>root@node30:~<span class="token comment"># cd /usr/local/src/lua-5.4.4/</span>root@node30:/usr/local/src/lua-5.4.4<span class="token comment"># make all test</span><span class="token comment">#查看lua版本</span>root@node30:/usr/local/src/lua-5.4.4<span class="token comment"># src/lua -v</span>Lua <span class="token number">5.4</span>.4  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2022 Lua.org, PUC-Rio</code></pre></div></figure><h3 id="3-3-2-编译安装HAProxy"><a href="#3-3-2-编译安装HAProxy" class="headerlink" title="3.3.2 编译安装HAProxy"></a>3.3.2 编译安装HAProxy</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HAProxy1.8及1.9版本编译参数：</span><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86_64 <span class="token assign-left variable">TARGET</span><span class="token operator">=</span>linux2628 <span class="token assign-left variable">USE_PCRE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_OPENSSL</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_ZLIB</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_SYSTEMD</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_CPU_AFFINITY</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/haproxy<span class="token comment">#HAProxy2.0以上版本编译参数：</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc openssl-devel pcre-devel systemd-devel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf haproxy-2.7.2.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/haproxy-2.7.2/</span><span class="token punctuation">[</span>root@node10 haproxy-2.1.12<span class="token punctuation">]</span><span class="token comment"># make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_LUA=1 LUA_INC=/usr/local/src/lua-5.4.4/src/ LUA_LIB=/usr/local/src/lua-5.4.4/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy-2.7.2]# make install PREFIX=/apps/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># haproxy-2.7.2]# ln -s /apps/haproxy/sbin/haproxy /usr/sbin/</span><span class="token comment">#验证HAProxy版本</span><span class="token punctuation">[</span>root@node10 haproxy-2.7.2<span class="token punctuation">]</span><span class="token comment"># haproxy -v</span>HAProxy version <span class="token number">2.7</span>.2-7e295dd <span class="token number">2023</span>/01/20 - https://haproxy.org/Status: stable branch - will stop receiving fixes around Q1 <span class="token number">2024</span>.Known bugs: http://www.haproxy.org/bugs/bugs-2.7.2.htmlRunning on: Linux <span class="token number">3.10</span>.0-1160.el7.x86_64 <span class="token comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64</span><span class="token comment">#准备HAProxy启动文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/haproxy.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>HAProxy Load Balancer<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-c</span> <span class="token parameter variable">-q</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR2</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token comment">#创建自定义配置文件</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg</span>global  maxconn <span class="token number">100000</span>  <span class="token function">chroot</span> /apps/haproxy  stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin  <span class="token comment">#uid 99</span>  <span class="token comment">#gid 99</span>  user haproxy  group haproxy  daemon  <span class="token comment">#nbproc 4</span>  <span class="token comment">#cpu-map 1 0</span>  <span class="token comment">#cpu-map 2 1</span>  <span class="token comment">#cpu-map 3 2</span>  <span class="token comment">#cpu-map 4 3</span>  pidfile /var/lib/haproxy/haproxy.pid  log <span class="token number">127.0</span>.0.1 local2 info  defaults  option http-keep-alive  option forwardfor  maxconn <span class="token number">100000</span>  mode http  <span class="token function">timeout</span> connect 300000ms  <span class="token function">timeout</span> client 300000ms  <span class="token function">timeout</span> server 300000ms  listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456    <span class="token comment">#启动HAProxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /var/lib/haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start haproxy</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now haproxy</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>HAProxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAProxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Keepalived企业应用</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived03/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Keepalived单主配置"><a href="#1-Keepalived单主配置" class="headerlink" title="1.Keepalived单主配置"></a>1.Keepalived单主配置</h1><h2 id="1-1-MASTER配置"><a href="#1-1-MASTER配置" class="headerlink" title="1.1 MASTER配置"></a>1.1 MASTER配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-2-BACKUP配置"><a href="#1-2-BACKUP配置" class="headerlink" title="1.2 BACKUP配置"></a>1.2 BACKUP配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node12   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="2-抢占模式和非抢占模式"><a href="#2-抢占模式和非抢占模式" class="headerlink" title="2.抢占模式和非抢占模式"></a>2.抢占模式和非抢占模式</h1><h2 id="2-1-非抢占模式"><a href="#2-1-非抢占模式" class="headerlink" title="2.1 非抢占模式"></a>2.1 非抢占模式</h2><p>默认为抢占模式preempt，即当高优先级的主机恢复在线后，会抢占低先级的主机的MASTER角色，造成网络抖动，建议设置为非抢占模式nopreempt ，即高优先级主机恢复后，并不会抢占低优先级主机的MASTER角色。</p><p><strong>注意：要关闭 VIP抢占，必须将各 keepalived 服务器state配置为BACKUP</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    <span class="token comment">#添加此行，都为nopreempt</span>    nopreempt    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    <span class="token comment">#添加此行，都为nopreempt</span>    nopreempt    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="2-2-抢占延迟模式"><a href="#2-2-抢占延迟模式" class="headerlink" title="2.2 抢占延迟模式"></a>2.2 抢占延迟模式</h2><p>抢占延迟模式，即优先级高的主机恢复后，不会立即抢回VIP，而是延迟一段时间（默认300s）再抢回VIP</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">preempt_delay <span class="token operator">&lt;</span>INT<span class="token operator">></span> <span class="token comment">#指定抢占延迟时间为&lt;INT>s，默认延迟300s</span></code></pre></div></figure><p><strong>注意：需要将各 keepalived 服务器state配置为BACKUP，并且不启用vrrp_strict</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    <span class="token comment">#都为BACKUP</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="3-VIP单播配置"><a href="#3-VIP单播配置" class="headerlink" title="3.VIP单播配置"></a>3.VIP单播配置</h1><p>默认keepalived主机之间利用多播相互通告消息，会造成网络拥塞，可以替换成单播，减少网络流量。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在所有节点vrrp_instance语句块中设置对方主机的IP，建议设置为专用于对应心跳线网络的地址，而非使用业务网络。</span>unicast_src_ip <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token comment">#指定发送单播的源IP</span>unicast_peer <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token comment">#指定接收单播的对方目标主机IP</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><strong>注意：启用 vrrp_strict 时，不能启用单播。</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#MASTER主机配置</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    unicast_src_ip <span class="token number">192.168</span>.1.11    unicast_peer <span class="token punctuation">&#123;</span>      <span class="token number">192.168</span>.1.12    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#BACKUP主机配置</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node12   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18<span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    unicast_src_ip <span class="token number">192.168</span>.1.12    unicast_peer <span class="token punctuation">&#123;</span>      <span class="token number">192.168</span>.1.11    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#抓包</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># tcpdump -i ens33 -nn src host 192.168.1.11 and dst host 192.168.1.12</span>tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decodelistening on ens33, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes<span class="token number">14</span>:09:37.610480 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:38.613866 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:39.615474 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:40.618198 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:41.619297 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span><span class="token number">14</span>:09:42.620918 IP <span class="token number">192.168</span>.1.11 <span class="token operator">></span> <span class="token number">192.168</span>.1.12: VRRPv2, Advertisement, vrid <span class="token number">66</span>, prio <span class="token number">100</span>, authtype simple, intvl 1s, length <span class="token number">20</span></code></pre></div></figure><h1 id="4-Keepalived通知脚本配置"><a href="#4-Keepalived通知脚本配置" class="headerlink" title="4.Keepalived通知脚本配置"></a>4.Keepalived通知脚本配置</h1><p>当keepalived的状态变化时，可以自动触发脚本的执行，比如：发邮件通知用户。默认以用户keepalived_script身份执行脚本，如果此用户不存在，以root执行脚本。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以用下面指令指定脚本执行用户的身份</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>script_user <span class="token operator">&lt;</span><span class="token environment constant">USER</span><span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-1-通知脚本类型"><a href="#4-1-通知脚本类型" class="headerlink" title="4.1 通知脚本类型"></a>4.1 通知脚本类型</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当前节点成为主节点时触发的脚本</span>notify_master <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当前节点转为备节点时触发的脚本</span>notify_backup <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当前节点转为“失败”状态时触发的脚本</span>notify_fault <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#通用格式的通知触发机制，一个脚本可完成以上三种状态的转换时的通知</span>notify <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span><span class="token comment">#当停止VRRP时触发的脚本</span>notify_stop <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span></code></pre></div></figure><h2 id="4-2-脚本调用方式"><a href="#4-2-脚本调用方式" class="headerlink" title="4.2 脚本调用方式"></a>4.2 脚本调用方式</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    preempt_delay <span class="token number">10</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    <span class="token comment">#此处添加</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-3-创建通知脚本"><a href="#4-3-创建通知脚本" class="headerlink" title="4.3 创建通知脚本"></a>4.3 创建通知脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/notify.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">contact</span><span class="token operator">=</span><span class="token string">'1285780460@qq.com'</span><span class="token function-name function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">mailsubject</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> to be <span class="token variable">$1</span>, vip floating"</span>    <span class="token assign-left variable">mailbody</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%F %T'</span><span class="token variable">)</span></span>: vrrp transition, <span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> changed to be <span class="token variable">$1</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$mailbody</span>"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$mailsubject</span>"</span> <span class="token variable">$contact</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>master<span class="token punctuation">)</span>    notify master    <span class="token punctuation">;</span><span class="token punctuation">;</span>backup<span class="token punctuation">)</span>    notify backup    <span class="token punctuation">;</span><span class="token punctuation">;</span>fault<span class="token punctuation">)</span>    notify fault<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> &#123;master|backup|fault&#125;"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre></div></figure><h2 id="4-4-邮件配置"><a href="#4-4-邮件配置" class="headerlink" title="4.4 邮件配置"></a>4.4 邮件配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install mailx sendmail</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/mail.rc</span><span class="token comment">#在最后面添加下面行</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>chen_huai_sen@163.com<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp.163.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>chen_huai_sen@163.com<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>你的授权码<span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span class="token comment">#测试发送邮件</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># echo "Test Mail"| mail -s Warning chen_huai_sen@163.com</span></code></pre></div></figure><h2 id="4-5-实现Keepalived状态切换通知脚本"><a href="#4-5-实现Keepalived状态切换通知脚本" class="headerlink" title="4.5 实现Keepalived状态切换通知脚本"></a>4.5 实现Keepalived状态切换通知脚本</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在所有 keepalived节点配置如下</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/notify.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">contact</span><span class="token operator">=</span><span class="token string">'1285780460@qq.com'</span><span class="token function-name function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">mailsubject</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> to be <span class="token variable">$1</span>, vip floating"</span>    <span class="token assign-left variable">mailbody</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%F %T'</span><span class="token variable">)</span></span>: vrrp transition, <span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span> changed to be <span class="token variable">$1</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$mailbody</span>"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$mailsubject</span>"</span> <span class="token variable">$contact</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>master<span class="token punctuation">)</span>    notify master    <span class="token punctuation">;</span><span class="token punctuation">;</span>backup<span class="token punctuation">)</span>    notify backup    <span class="token punctuation">;</span><span class="token punctuation">;</span>fault<span class="token punctuation">)</span>    notify fault<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> &#123;master|backup|fault&#125;"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># chmod +x /etc/keepalived/notify.sh</span><span class="token comment">#模拟MASTER故障</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop keepalived</span></code></pre></div></figure><p><img src="/2023/02/06/HA/Keepalived/keepalived03/image-20230208162916282.png" alt="image-20230208162916282">  </p><h1 id="5-Keepalived双主配置"><a href="#5-Keepalived双主配置" class="headerlink" title="5.Keepalived双主配置"></a>5.Keepalived双主配置</h1><p>MASTER&#x2F;SLAVE的单主架构，同一时间只有一个Keepalived对外提供服务，此主机繁忙，而另一台主机却很空闲，利用率低下，可以使用MASTER&#x2F;MASTER的双主架构，解决此问题。  即将两个或以上VIP分别运行在不同的keepalived服务器，以实现服务器并行提供web访问的目的，提高服务器资源利用率。  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HA1主机配置</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_script check_down <span class="token punctuation">&#123;</span>   script <span class="token string">"/etc/keepalived/checkDown.sh"</span>   interval <span class="token number">1</span>   weight <span class="token parameter variable">-30</span>   fall <span class="token number">3</span>   rise <span class="token number">2</span>   <span class="token function">timeout</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vrrp_instance VI_2 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">77</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.77 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#HA2主机配置</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id node11   vrrp_skip_check_adv_addr   <span class="token comment">#vrrp_strict</span>   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_script check_down <span class="token punctuation">&#123;</span>   script <span class="token string">"/etc/keepalived/checkDown.sh"</span>   interval <span class="token number">1</span>   weight <span class="token parameter variable">-30</span>   fall <span class="token number">3</span>   rise <span class="token number">2</span>   <span class="token function">timeout</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface ens33    virtual_router_id <span class="token number">66</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vrrp_instance VI_2 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">77</span>    priority <span class="token number">80</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.77 dev ens33 label ens33:0    <span class="token punctuation">&#125;</span>    notify_master <span class="token string">"/etc/keepalived/notify.sh master"</span>    notify_backup <span class="token string">"/etc/keepalived/notify.sh backup"</span>    notify_fault <span class="token string">"/etc/keepalived/notify.sh fault"</span>    track_script <span class="token punctuation">&#123;</span>        check_down    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h1 id="6-基于VRRP-Script实现高可用"><a href="#6-基于VRRP-Script实现高可用" class="headerlink" title="6.基于VRRP Script实现高可用"></a>6.基于VRRP Script实现高可用</h1><p>keepalived利用 VRRP Script 技术，可以调用外部的辅助脚本进行资源监控，并根据监控的结果实现优先动态调整，从而实现其它应用的高可用性功能。</p><h2 id="6-1-VRRP-Script配置"><a href="#6-1-VRRP-Script配置" class="headerlink" title="6.1 VRRP Script配置"></a>6.1 VRRP Script配置</h2><ul><li>第一步：定义脚本</li></ul><p>vrrp_script：自定义资源监控脚本，vrrp实例根据脚本返回值，公共定义，可被多个实例调用，定义在vrrp实例之外的独立配置块，一般放在global_defs设置块之后,是和global_defs平级的语句块。通常此脚本用于监控指定应用的状态。一旦发现应用的状态异常，则触发对MASTER节点的权重减至低于BACKUP节点，从而实现VIP切换到BACKUP节点。</p><p><strong>注意: 此定义脚本的语句块一定要放在下面调用此语句vrrp_instance语句块的前面</strong>  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">vrrp_script <span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span> <span class="token punctuation">&#123;</span>script <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span> <span class="token comment">#此脚本返回值为非0时，会触发下面OPTIONS执行</span>OPTIONS<span class="token punctuation">&#125;</span><span class="token comment">#详细配置</span>vrrp_script <span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token comment">#定义一个检测脚本，在global_defs 之外配置</span>script <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>    <span class="token comment">#Shell命令或脚本路径(注意执行权限)</span>interval <span class="token operator">&lt;</span>INT<span class="token operator">></span>                     <span class="token comment">#间隔时间，单位为秒，默认1秒</span><span class="token function">timeout</span> <span class="token operator">&lt;</span>INT<span class="token operator">></span>                      <span class="token comment">#超时时间</span>weight <span class="token operator">&lt;</span>INT:-254<span class="token punctuation">..</span><span class="token number">25</span><span class="token operator"><span class="token file-descriptor important">4</span>></span>             <span class="token comment">#默认为0,如果设置此值为负数，当上面脚本返回值为非0时，会将此值与本节点权重相加可以                                         降低本节点权重，即表示fall. 如果是正数，当脚本返回值为0，会将此值与本节点权重相加                                         可以提高本节点权重，即表示 rise.通常使用负值</span>fall <span class="token operator">&lt;</span>INT<span class="token operator">></span>                         <span class="token comment">#执行脚本连续几次都失败,则转换为失败，建议设为2以上</span>rise <span class="token operator">&lt;</span>INT<span class="token operator">></span>                         <span class="token comment">#执行脚本连续几次都成功，把服务器从失败标记为成功</span>user USERNAME <span class="token punctuation">[</span>GROUPNAME<span class="token punctuation">]</span>          <span class="token comment">#执行监测脚本的用户或组</span>init_fail                          <span class="token comment">#设置默认标记为失败状态，监测成功之后再转换为成功状态</span><span class="token punctuation">&#125;</span></code></pre></div></figure><ul><li>第二步：调用脚本</li></ul><p>track_script：调用vrrp_script定义的脚本去监控资源，定义在VRRP实例之内，调用事先定义的vrrp_script  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">track_script <span class="token punctuation">&#123;</span>SCRIPT_NAME_1SCRIPT_NAME_2<span class="token punctuation">&#125;</span><span class="token comment">#调用VRRP Script</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>track_script <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>SCRIPT_NAME<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="6-2-基于脚本实现主从切换"><a href="#6-2-基于脚本实现主从切换" class="headerlink" title="6.2 基于脚本实现主从切换"></a>6.2 基于脚本实现主从切换</h2><h3 id="6-2-1-Keepalived1配置"><a href="#6-2-1-Keepalived1配置" class="headerlink" title="6.2.1 Keepalived1配置"></a>6.2.1 Keepalived1配置</h3><h3 id="6-2-2-Keepalived2配置"><a href="#6-2-2-Keepalived2配置" class="headerlink" title="6.2.2 Keepalived2配置"></a>6.2.2 Keepalived2配置</h3><h3 id="6-2-3-创建checkDown-sh"><a href="#6-2-3-创建checkDown-sh" class="headerlink" title="6.2.3 创建checkDown.sh"></a>6.2.3 创建checkDown.sh</h3><h3 id="6-2-4-验证主从切换"><a href="#6-2-4-验证主从切换" class="headerlink" title="6.2.4 验证主从切换"></a>6.2.4 验证主从切换</h3><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 <span class="token number">192.168</span>.1.66</code></pre></div></figure><p><strong>Keepalived1主机创建down文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># touch /etc/keepalived/down</span></code></pre></div></figure><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 </code></pre></div></figure><p><strong>删除down文件：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/keepalived/down</span></code></pre></div></figure><p><strong>查看Keepalived1主机状态：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">192.168</span>.1.11 <span class="token number">192.168</span>.1.66</code></pre></div></figure><p><strong>查看VIP切换日志：</strong></p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Keepalived1日志</span><span class="token punctuation">[</span>root@node11 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/log/keepalived.log</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:32 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:33 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Script<span class="token punctuation">(</span>check_down<span class="token punctuation">)</span> failedFeb  <span class="token number">8</span> <span class="token number">19</span>:55:34 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Changing effective priority from <span class="token number">100</span> to <span class="token number">70</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Received advert with higher priority <span class="token number">80</span>, ours <span class="token number">70</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> removing protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.sh<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:36 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: /etc/keepalived/checkDown.sh exited with status <span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:17 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Script<span class="token punctuation">(</span>check_down<span class="token punctuation">)</span> succeededFeb  <span class="token number">8</span> <span class="token number">19</span>:57:17 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Changing effective priority from <span class="token number">70</span> to <span class="token number">100</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> forcing a new MASTER electionFeb  <span class="token number">8</span> <span class="token number">19</span>:57:19 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Transition to MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> setting protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:20 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.shFeb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:25 node11 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">41136</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66<span class="token comment">#Keepalived2日志</span><span class="token punctuation">[</span>root@node12 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/log/keepalived.log</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:55:35 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> forcing a new MASTER electionFeb  <span class="token number">8</span> <span class="token number">19</span>:55:36 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Transition to MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering MASTER STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> setting protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:37 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.shFeb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Sending/queueing gratuitous ARPs on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:55:42 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Sending gratuitous ARP on ens33 <span class="token keyword">for</span> <span class="token number">192.168</span>.1.66Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Received advert with higher priority <span class="token number">100</span>, ours <span class="token number">80</span>Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATEFeb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: VRRP_Instance<span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> removing protocol VIPs.Feb  <span class="token number">8</span> <span class="token number">19</span>:57:18 node12 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">28266</span><span class="token punctuation">]</span>: Opening script <span class="token function">file</span> /etc/keepalived/notify.sh</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Keepalived配置说明</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived02/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Keepalived配置说明"><a href="#1-Keepalived配置说明" class="headerlink" title="1.Keepalived配置说明"></a>1.Keepalived配置说明</h1><h2 id="1-1-配置文件组成"><a href="#1-1-配置文件组成" class="headerlink" title="1.1 配置文件组成"></a>1.1 配置文件组成</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置文件</span>/etc/keepalived/keepalived.conf<span class="token comment">#配置文件组成</span>global_defs <span class="token punctuation">&#123;</span> <span class="token comment">#全局配置，定义邮件配置，route_id，vrrp配置，多播地址等。</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span> <span class="token comment">#定义每个vrrp虚拟路由器</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span>virtual_server <span class="token number">192.168</span>.200.100 <span class="token number">443</span> <span class="token punctuation">&#123;</span> <span class="token comment">#LVS集群配置</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="1-2-Keepalived详细配置"><a href="#1-2-Keepalived详细配置" class="headerlink" title="1.2 Keepalived详细配置"></a>1.2 Keepalived详细配置</h2><h3 id="1-2-1-全局配置"><a href="#1-2-1-全局配置" class="headerlink" title="1.2.1 全局配置"></a>1.2.1 全局配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     <span class="token comment">##keepalived 发生故障切换时邮件发送的目标邮箱，可以按行区分写多个</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   <span class="token comment">#发邮件地址</span>   notification_email_from Alexandre.Cassen@firewall.loc   <span class="token comment">#邮件服务器地址</span>   smtp_server <span class="token number">192.168</span>.200.1   <span class="token comment">#邮件服务器连接timeout</span>   smtp_connect_timeout <span class="token number">30</span>   <span class="token comment">#每个keepalived主机唯一标识，建议使用当前主机名，但多节点重名不影响</span>   router_id LVS_DEVEL   <span class="token comment">#对所有通告报文都检查，会比较消耗性能，启用此配置后，如果收到的通告报文和上一个报文是同一个路由器，则跳过检查，默认值为全检查</span>   vrrp_skip_check_adv_addr   <span class="token comment">#严格遵守VRRP协议,启用此项后以下状况将无法启动服务:1.无VIP地址 2.配置了单播邻居 3.在VRRP版本2中有IPv6地址，开启动此项并且没有配置vrrp_iptables时会自动开启iptables防火墙规则，默认导致VIP无法访问,建议不加此项配置</span>   vrrp_strict   <span class="token comment">#gratuitous ARP messages 报文发送延迟，0表示不延迟</span>   vrrp_garp_interval <span class="token number">0</span>   <span class="token comment">#unsolicited NA messages （不请自来）消息发送延迟</span>   vrrp_gna_interval <span class="token number">0</span>   <span class="token comment">#指定组播IP地址范围：224.0.0.0到239.255.255.255,默认值：224.0.0.18</span>   vrrp_mcast_group4 <span class="token number">224.0</span>.0.18   <span class="token comment">#此项和vrrp_strict同时开启时，则不会添加防火墙规则,如果无配置vrrp_strict项,则无需启用此项配置</span>   vrrp_iptables<span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-2-虚拟路由器配置"><a href="#1-2-2-虚拟路由器配置" class="headerlink" title="1.2.2 虚拟路由器配置"></a>1.2.2 虚拟路由器配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">vrrp_instance VI_1 <span class="token punctuation">&#123;</span> <span class="token comment">#VI_1为vrrp实例名，一般为业务名称</span>    <span class="token comment">#当前节点在此虚拟路由器的初始状态，状态为MASTER或者BACKUP</span>    state MASTER<span class="token operator">|</span>BACKUP    <span class="token comment">#绑定为当前虚拟路由器使用的物理接口。如：eth0,bond0,br0,可以和VIP不在一个网卡。</span>    interface ens33    <span class="token comment">#每个虚拟路由器惟一标识，范围：0-255，每个虚拟路由器此值必须唯一，否则服务无法启动，同属一个虚拟路由器的多个keepalived节点必须相同,务必要确认在同一网络中此值必须唯一。</span>    virtual_router_id <span class="token number">51</span>    <span class="token comment">#当前物理节点在此虚拟路由器的优先级，范围：1-254，值越大优先级越高,每个keepalived主机节点此值不同。</span>    priority <span class="token number">100</span>    <span class="token comment">#vrrp通告的时间间隔，默认1s</span>    advert_int <span class="token number">1</span>    <span class="token comment">#认证机制</span>    authentication <span class="token punctuation">&#123;</span>        <span class="token comment">#AH为IPSEC认证(不推荐),PASS为简单密码(建议使用)</span>        auth_type PASS        <span class="token comment">#预共享密钥，仅前8位有效，同一个虚拟路由器的多个keepalived节点必须一样。</span>        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">#虚拟IP,生产环境可能指定上百个IP地址</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span>/<span class="token operator">&lt;</span>MASK<span class="token operator">></span> brd <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> dev <span class="token operator">&lt;</span>STRING<span class="token operator">></span> scope <span class="token operator">&lt;</span>SCOPE<span class="token operator">></span> label <span class="token operator">&lt;</span>LABEL<span class="token operator">></span>        <span class="token comment">#指定VIP，不指定网卡，默认为eth0,注意：不指定/prefix,默认为/32</span>        <span class="token number">192.168</span>.200.16        <span class="token comment">#指定VIP的网卡</span>        <span class="token number">192.168</span>.200.17/24 dev ens33        <span class="token comment">#指定VIP的网卡label</span>        <span class="token number">192.168</span>.200.18/24 dev ens33 label ens33:1    <span class="token punctuation">&#125;</span>    <span class="token comment">#配置监控网络接口，一旦出现故障，则转为FAULT状态实现地址转移</span>    track_interface <span class="token punctuation">&#123;</span>        eth0        eth1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-3-IPVS配置"><a href="#1-2-3-IPVS配置" class="headerlink" title="1.2.3 IPVS配置"></a>1.2.3 IPVS配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意:括号必须分行写,两个括号写在同一行,如: &#125;&#125; 会出错</span><span class="token comment">#&lt;IP> &lt;PORT>定义虚拟主机IP地址和端口</span><span class="token comment">#fwmark &lt;INT>ipvs的防火墙打标，实现基于防火墙的负载均衡集群</span><span class="token comment">#group &lt;STRING>使用虚拟服务器组</span>virtual_server <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token operator">&lt;</span>PORT<span class="token operator">>|</span>fwmark <span class="token operator">&lt;</span>INT<span class="token operator">>|</span>group <span class="token operator">&lt;</span>STRING<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">#检查后端服务器的时间间隔</span>    delay_loop <span class="token operator">&lt;</span>INT<span class="token operator">></span>    <span class="token comment">#定义调度方法</span>    lb_algo rr<span class="token operator">|</span>wrr<span class="token operator">|</span>lc<span class="token operator">|</span>wlc<span class="token operator">|</span>lblc<span class="token operator">|</span><span class="token function">sh</span><span class="token operator">|</span>dh    <span class="token comment">#集群的类型,注意要大写</span>    lb_kind NAT<span class="token operator">|</span>DR<span class="token operator">|</span>TUN    <span class="token comment">#持久连接时长</span>    persistence_timeout <span class="token operator">&lt;</span>INT<span class="token operator">></span>    <span class="token comment">#指定服务协议,一般为TCP</span>    protocol TCP<span class="token operator">|</span>UDP<span class="token operator">|</span>SCTP    <span class="token comment">#RS的IP和PORT</span>    real_server <span class="token operator">&lt;</span>IPADDR<span class="token operator">></span> <span class="token operator">&lt;</span>PORT<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token comment">#RS权重</span>        weight <span class="token operator">&lt;</span>INT<span class="token operator">></span>        <span class="token comment">#RS上线通知脚本</span>        notify_up <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>        <span class="token comment">#RS下线通知脚本</span>        notify_down <span class="token operator">&lt;</span>STRING<span class="token operator">>|</span><span class="token operator">&lt;</span>QUOTED-STRING<span class="token operator">></span>        <span class="token comment">#定义当前主机健康状态检测方法</span>        HTTP_GET<span class="token operator">|</span>SSL_GET<span class="token operator">|</span>TCP_CHECK<span class="token operator">|</span>SMTP_CHECK<span class="token operator">|</span>MISC_CHECK <span class="token punctuation">&#123;</span>            <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#应用层监测：HTTP_GET|SSL_GET</span>HTTP_GET<span class="token operator">|</span>SSL_GET <span class="token punctuation">&#123;</span>            url <span class="token punctuation">&#123;</span>              <span class="token comment">#定义要监控的URL</span>              path /              <span class="token comment">#判断上述检测机制为健康状态的响应码，一般为 200</span>              status_code <span class="token operator">&lt;</span>INT<span class="token operator">></span>            <span class="token punctuation">&#125;</span>            connect_timeout <span class="token operator">&lt;</span>INT<span class="token operator">></span>     <span class="token comment">#客户端请求的超时时长.</span>            nb_get_retry <span class="token operator">&lt;</span>INT<span class="token operator">></span>        <span class="token comment">#重试次数</span>            delay_before_retry <span class="token operator">&lt;</span>INT<span class="token operator">></span>  <span class="token comment">#重试之前的延迟时长</span>            connect_ip <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>   <span class="token comment">#向当前RS哪个IP地址发起健康状态检测请求</span>            connect_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>       <span class="token comment">#向当前RS的哪个PORT发起健康状态检测请求</span>            bindto <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>       <span class="token comment">#向当前RS发出健康状态检测请求时使用的源地址</span>            bind_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>          <span class="token comment">#向当前RS发出健康状态检测请求时使用的源端口</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">#传输层检测：TCP监测</span>TCP_CHECK <span class="token punctuation">&#123;</span>connect_ip <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>   <span class="token comment">#向当前RS的哪个IP地址发起健康状态检测请求。</span>connect_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>       <span class="token comment">#向当前RS的哪个PORT发起健康状态检测请求。</span>bindto <span class="token operator">&lt;</span>IP ADDRESS<span class="token operator">></span>       <span class="token comment">#发出健康状态检测请求时使用的源地址。</span>bind_port <span class="token operator">&lt;</span>PORT<span class="token operator">></span>          <span class="token comment">#发出健康状态检测请求时使用的源端口。</span>connect_timeout <span class="token operator">&lt;</span>INTEGER<span class="token operator">></span> <span class="token comment">#客户端请求的超时时长。</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="1-2-4-独立日志配置"><a href="#1-2-4-独立日志配置" class="headerlink" title="1.2.4 独立日志配置"></a>1.2.4 独立日志配置</h3><p>默认keepalived的日志属于LOG_DAEMON,记录在系统日志messages文件,可以实现独立日志文件记录自身日志。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysconfig/keepalived</span><span class="token assign-left variable">KEEPALIVED_OPTIONS</span><span class="token operator">=</span><span class="token string">"-D -S 6"</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/rsyslog.conf</span><span class="token comment"># keepalived</span>local6.*                                                /var/log/keepalived.log<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart keepalived.service rsyslog.service</span></code></pre></div></figure><h3 id="1-2-5-子配置文件"><a href="#1-2-5-子配置文件" class="headerlink" title="1.2.5 子配置文件"></a>1.2.5 子配置文件</h3><p>当生产环境复杂时， &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 文件中内容过多，不易管理，可以将不同集群的配置，比如：不同集群的VIP配置放在独立的子配置文件中。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#利用include 指令可以实现包含子配置文件</span>include /path/file<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/keepalived/conf.d/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span>   notification_email <span class="token punctuation">&#123;</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">&#125;</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.200.1   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>include /etc/keepalived/conf.d/*.conf <span class="token comment">#将VRRP相关配置放在子配置文件中</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/conf.d/test.conf</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">51</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">&#123;</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">&#125;</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart keepalived</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Keepalived简介及安装</title>
    <link href="/2023/02/06/HA/Keepalived/keepalived01/"/>
    <url>/2023/02/06/HA/Keepalived/keepalived01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-高可用集群"><a href="#1-高可用集群" class="headerlink" title="1.高可用集群"></a>1.高可用集群</h1><h2 id="1-1-集群类型"><a href="#1-1-集群类型" class="headerlink" title="1.1 集群类型"></a>1.1 集群类型</h2><ul><li>LB：Load Balance负载均衡(LVS&#x2F;HAProxy&#x2F;Nginx)</li><li>HA：High Availability高可用集群(数据库、Zookeeper、Redis)</li><li>HPC：High Performance Computing 高性能集群</li></ul><h2 id="1-2-系统可用性"><a href="#1-2-系统可用性" class="headerlink" title="1.2 系统可用性"></a>1.2 系统可用性</h2><p>SLA：Service-Level Agreement 服务等级协议（提供服务的企业与客户之间就服务的品质、水准、性<br>能等方面所达成的双方共同认可的协议或契约）  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">A <span class="token operator">=</span> MTBF / <span class="token punctuation">(</span>MTBF+MTTR）<span class="token number">99.95</span>%:<span class="token punctuation">(</span><span class="token number">60</span>*24*30<span class="token punctuation">)</span>*<span class="token punctuation">(</span><span class="token number">1</span>-0.9995<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">21.6</span>分钟 <span class="token comment">#一般按一个月停机时间统计</span>指标 ：99.9%, <span class="token number">99.99</span>%, <span class="token number">99.999</span>%,99.9999%</code></pre></div></figure><h2 id="1-3-系统故障"><a href="#1-3-系统故障" class="headerlink" title="1.3 系统故障"></a>1.3 系统故障</h2><p>硬件故障：设计缺陷、wear out（损耗）、自然灾害……<br>软件故障：设计缺陷 bug  </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#实现高可用,提升系统高用性的解决方案：降低MTTR- Mean Time To Repair(平均故障时间),解决方案：建立冗余机制。</span>active/passive 主/备active/active  双主</code></pre></div></figure><h2 id="1-4-VRRP"><a href="#1-4-VRRP" class="headerlink" title="1.4 VRRP"></a>1.4 VRRP</h2><p>VRRP：Virtual Router Redundancy Protocol（虚拟路由冗余协议），解决静态网关单点故障。</p><ul><li>物理层：路由器、三层交换机。</li><li>软件层：Keepalived</li></ul><p>VRRP相关术语：</p><ul><li>虚拟路由器：Virtual Router</li><li>虚拟路由器标识：VRID(0-255)，唯一标识虚拟路由器。</li><li>VIP：Virtual IP</li><li>VMAC：Virutal MAC (00-00-5e-00-01-VRID)</li><li>物理路由器：  <ul><li>master：主设备</li><li>backup：备设备</li><li>priority：优先级</li></ul></li></ul><p>VRRP相关技术：</p><ul><li>通告：心跳，优先级；周期性</li><li>工作方式：抢占式，非抢占式</li><li>安全认证：<ul><li>无认证</li><li>简单字符认证：预共享密钥</li><li>MD5</li></ul></li><li>工作模式：<ul><li>主&#x2F;备：单虚拟路由器</li><li>主&#x2F;主：主&#x2F;备（虚拟路由器1）,备&#x2F;主（虚拟路由器2）</li></ul></li></ul><h1 id="2-Keeaplived简介"><a href="#2-Keeaplived简介" class="headerlink" title="2.Keeaplived简介"></a>2.Keeaplived简介</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官网：<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/</span></span>#官网文档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/doc/</span></span><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//keepalived.org/documentation.html</span></span></code></pre></div></figure><p><img src="/2023/02/06/HA/Keepalived/keepalived01/image-20230206151024839.png" alt="image-20230206151024839">  </p><ul><li>用户空间核心组件：<ul><li>VRRP Stack：VIP消息通告。</li><li>Checkrs：检测Real Server</li><li>System Call：实现VRRP协议状态转换时调用脚本的功能。</li><li>SMTP：邮件组件。</li><li>IPVS wrapper：生成IPVS规则。</li><li>Nettlink Reflector：网络接口</li><li>WatchDog：监控进程</li></ul></li><li>控制组件：提供Keepalived.conf的解析器，完成Keepalived配置。</li><li>IO复用器：针对网络目的而优化的自己的线程抽象。</li><li>内存管理组件：为某些通用的内存管理功能(例如分配，重新分配，发布等)提供访问权限。</li></ul><h2 id="2-1-Keepalived安装"><a href="#2-1-Keepalived安装" class="headerlink" title="2.1 Keepalived安装"></a>2.1 Keepalived安装</h2><h3 id="2-1-1-包安装"><a href="#2-1-1-包安装" class="headerlink" title="2.1.1 包安装"></a>2.1.1 包安装</h3><p>CentOS7.9安装Keepalived：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install keepalived</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum info keepalived</span>Loaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.nju.edu.cn * extras: mirrors.nju.edu.cn * updates: mirrors.nju.edu.cnInstalled PackagesName        <span class="token builtin class-name">:</span> keepalivedArch        <span class="token builtin class-name">:</span> x86_64Version     <span class="token builtin class-name">:</span> <span class="token number">1.3</span>.5Release     <span class="token builtin class-name">:</span> <span class="token number">19</span>.el7Size        <span class="token builtin class-name">:</span> <span class="token number">1.0</span> MRepo        <span class="token builtin class-name">:</span> installedFrom repo   <span class="token builtin class-name">:</span> baseSummary     <span class="token builtin class-name">:</span> Load balancer and high availability <span class="token function">service</span>URL         <span class="token builtin class-name">:</span> http://www.keepalived.org/License     <span class="token builtin class-name">:</span> GPLv2+Description <span class="token builtin class-name">:</span> Keepalived provides simple and robust facilities <span class="token keyword">for</span> load balancing            <span class="token builtin class-name">:</span> and high availability.  The load balancing framework relies on the            <span class="token builtin class-name">:</span> well-known and widely used Linux Virtual Server <span class="token punctuation">(</span>IPVS<span class="token punctuation">)</span> kernel module            <span class="token builtin class-name">:</span> providing layer-4 <span class="token punctuation">(</span>transport layer<span class="token punctuation">)</span> load balancing.  Keepalived            <span class="token builtin class-name">:</span> implements a <span class="token builtin class-name">set</span> of checkers to dynamically and adaptively maintain            <span class="token builtin class-name">:</span> and manage a load balanced server pool according their health.            <span class="token builtin class-name">:</span> Keepalived also implements the Virtual Router Redundancy Protocol            <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>VRRPv2<span class="token punctuation">)</span> to achieve high availability with director failover.</code></pre></div></figure><p>Ubuntu20.04安装Keepalived：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node30:~<span class="token comment"># apt -y install keepalived</span>root@node30:~<span class="token comment"># dpkg -s keepalived</span>Package: keepalivedStatus: <span class="token function">install</span> ok installedPriority: optionalSection: adminInstalled-Size: <span class="token number">1221</span>Maintainer: Ubuntu Developers <span class="token operator">&lt;</span>ubuntu-devel-discuss@lists.ubuntu.com<span class="token operator">></span>Architecture: amd64Version: <span class="token number">1</span>:2.0.19-2ubuntu0.2Depends: iproute2, libc6 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">2.28</span><span class="token punctuation">)</span>, libglib2.0-0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">2.26</span>.0<span class="token punctuation">)</span>, libmnl0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.0</span>.3-4~<span class="token punctuation">)</span>, libnftnl11 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.1</span>.2<span class="token punctuation">)</span>, libnl-3-200 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">3.2</span>.27<span class="token punctuation">)</span>, libnl-genl-3-200 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">3.2</span>.7<span class="token punctuation">)</span>, libpcre2-8-0 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">10.22</span><span class="token punctuation">)</span>, libsnmp35 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">5.8</span>+dfsg<span class="token punctuation">)</span>, libssl1.1 <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.1</span>.0<span class="token punctuation">)</span>Pre-Depends: init-system-helpers <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1.54</span>~<span class="token punctuation">)</span>Recommends: ipvsadmConffiles: /etc/dbus-1/system.d/org.keepalived.Vrrp1.conf eb86d4c61a0c69d1f98bcf8dcbbd8f60 /etc/default/keepalived 6b2e3432e4ae31b444058ba2b0d1f06a /etc/init.d/keepalived 0312972e0718331b4c90b3b98e623624Description: Failover and monitoring daemon <span class="token keyword">for</span> LVS clusters keepalived is used <span class="token keyword">for</span> monitoring real servers within a Linux Virtual Server <span class="token punctuation">(</span>LVS<span class="token punctuation">)</span> cluster.  keepalived can be configured to remove real servers from the cluster pool <span class="token keyword">if</span> it stops responding, as well as send a notification email to <span class="token function">make</span> the admin aware of the <span class="token function">service</span> failure. <span class="token builtin class-name">.</span> In addition, keepalived implements an independent Virtual Router Redundancy Protocol <span class="token punctuation">(</span>VRRPv2<span class="token punctuation">;</span> see rfc2338 <span class="token keyword">for</span> additional info<span class="token punctuation">)</span> framework <span class="token keyword">for</span> director failover. <span class="token builtin class-name">.</span> You need a kernel <span class="token operator">>=</span> <span class="token number">2.4</span>.28 or <span class="token operator">>=</span> <span class="token number">2.6</span>.11 <span class="token keyword">for</span> keepalived. See README.Debian <span class="token keyword">for</span> <span class="token function">more</span> information.Homepage: http://keepalived.orgOriginal-Maintainer: Alexander Wirt <span class="token operator">&lt;</span>formorer@debian.org<span class="token operator">></span>root@node30:~<span class="token comment"># dpkg -L keepalived</span>/./etc/etc/dbus-1/etc/dbus-1/system.d/etc/dbus-1/system.d/org.keepalived.Vrrp1.conf/etc/default/etc/default/keepalived/etc/init.d/etc/init.d/keepalived/etc/keepalived/lib/lib/systemd/lib/systemd/system/lib/systemd/system/keepalived.service/usr/usr/bin/usr/bin/genhash/usr/sbin/usr/sbin/keepalived/usr/share/usr/share/dbus-1/usr/share/dbus-1/interfaces/usr/share/dbus-1/interfaces/org.keepalived.Vrrp1.Instance.xml/usr/share/dbus-1/interfaces/org.keepalived.Vrrp1.Vrrp.xml/usr/share/doc/usr/share/doc/keepalived/usr/share/doc/keepalived/AUTHOR/usr/share/doc/keepalived/CONTRIBUTORS/usr/share/doc/keepalived/README/usr/share/doc/keepalived/TODO.gz/usr/share/doc/keepalived/changelog.Debian.gz/usr/share/doc/keepalived/copyright/usr/share/doc/keepalived/keepalived.conf.SYNOPSIS/usr/share/doc/keepalived/samples/usr/share/doc/keepalived/samples/client.pem/usr/share/doc/keepalived/samples/dh1024.pem/usr/share/doc/keepalived/samples/keepalived.conf.HTTP_GET.port/usr/share/doc/keepalived/samples/keepalived.conf.IPv6/usr/share/doc/keepalived/samples/keepalived.conf.SMTP_CHECK/usr/share/doc/keepalived/samples/keepalived.conf.SSL_GET/usr/share/doc/keepalived/samples/keepalived.conf.conditional_conf/usr/share/doc/keepalived/samples/keepalived.conf.fwmark/usr/share/doc/keepalived/samples/keepalived.conf.inhibit/usr/share/doc/keepalived/samples/keepalived.conf.misc_check/usr/share/doc/keepalived/samples/keepalived.conf.misc_check_arg/usr/share/doc/keepalived/samples/keepalived.conf.quorum/usr/share/doc/keepalived/samples/keepalived.conf.sample/usr/share/doc/keepalived/samples/keepalived.conf.status_code/usr/share/doc/keepalived/samples/keepalived.conf.track_interface/usr/share/doc/keepalived/samples/keepalived.conf.virtual_server_group/usr/share/doc/keepalived/samples/keepalived.conf.virtualhost/usr/share/doc/keepalived/samples/keepalived.conf.vrrp/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.localcheck/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.lvs_syncd/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.routes/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.rules/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.scripts/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.static_ipaddress/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.sync/usr/share/doc/keepalived/samples/root.pem/usr/share/doc/keepalived/samples/sample.misccheck.smbcheck.sh/usr/share/doc/keepalived/samples/sample_notify_fifo.sh/usr/share/man/usr/share/man/man1/usr/share/man/man1/genhash.1.gz/usr/share/man/man5/usr/share/man/man5/keepalived.conf.5.gz/usr/share/man/man8/usr/share/man/man8/keepalived.8.gz/usr/share/snmp/usr/share/snmp/mibs/usr/share/snmp/mibs/KEEPALIVED-MIB.txt/usr/share/snmp/mibs/VRRP-MIB.txt/usr/share/snmp/mibs/VRRPv3-MIB.txtroot@node30:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span>root@node30:~<span class="token comment"># systemctl start keepalived</span>root@node30:~<span class="token comment"># systemctl status keepalived</span>● keepalived.service - Keepalive Daemon <span class="token punctuation">(</span>LVS and VRRP<span class="token punctuation">)</span>     Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/keepalived.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2023</span>-02-06 <span class="token number">14</span>:59:42 UTC<span class="token punctuation">;</span> 1s ago   Main PID: <span class="token number">2266</span> <span class="token punctuation">(</span>keepalived<span class="token punctuation">)</span>      Tasks: <span class="token number">3</span> <span class="token punctuation">(</span>limit: <span class="token number">2236</span><span class="token punctuation">)</span>     Memory: <span class="token number">2</span>.2M     CGroup: /system.slice/keepalived.service             ├─2266 /usr/sbin/keepalived --dont-fork             ├─2282 /usr/sbin/keepalived --dont-fork             └─2283 /usr/sbin/keepalived --dont-forkFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering Kernel netlink reflectorFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering Kernel netlink <span class="token builtin class-name">command</span> channelFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Opening <span class="token function">file</span> <span class="token string">'/etc/keepalived/keepalived.conf'</span><span class="token builtin class-name">.</span>Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: Registering gratuitous ARP shared channelFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Opening <span class="token function">file</span> <span class="token string">'/etc/keepalived/keepalived.conf'</span><span class="token builtin class-name">.</span>Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Initializing ipvsFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Gained quorum <span class="token number">1</span>+0<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token keyword">for</span> VS <span class="token punctuation">[</span><span class="token number">10.10</span>.10.2<span class="token punctuation">]</span>:tcp:1358Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Activating healthchecker <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.200.2<span class="token punctuation">]</span>:tcp:1358 <span class="token keyword">for</span> VS <span class="token punctuation">[</span><span class="token number">10.10</span>.10.2<span class="token punctuation">]</span>:tcp:1358Feb 06 <span class="token number">14</span>:59:42 node30 Keepalived_healthcheckers<span class="token punctuation">[</span><span class="token number">2282</span><span class="token punctuation">]</span>: Activating BFD healthcheckerFeb 06 <span class="token number">14</span>:59:42 node30 Keepalived_vrrp<span class="token punctuation">[</span><span class="token number">2283</span><span class="token punctuation">]</span>: <span class="token punctuation">(</span>VI_1<span class="token punctuation">)</span> Entering BACKUP STATE <span class="token punctuation">(</span>init<span class="token punctuation">)</span>root@node30:~<span class="token comment"># ps auxf |grep keepalived</span>root        <span class="token number">2657</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">5296</span>   <span class="token number">720</span> pts/0    S+   <span class="token number">15</span>:00   <span class="token number">0</span>:00          <span class="token punctuation">\</span>_ <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto keepalivedroot        <span class="token number">2266</span>  <span class="token number">0.0</span>  <span class="token number">0.4</span>  <span class="token number">25264</span>  <span class="token number">8064</span> ?        Ss   <span class="token number">14</span>:59   <span class="token number">0</span>:00 /usr/sbin/keepalived --dont-forkroot        <span class="token number">2282</span>  <span class="token number">0.0</span>  <span class="token number">0.1</span>  <span class="token number">25264</span>  <span class="token number">2880</span> ?        S    <span class="token number">14</span>:59   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ /usr/sbin/keepalived --dont-forkroot        <span class="token number">2283</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">25264</span>   <span class="token number">936</span> ?        S    <span class="token number">14</span>:59   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ /usr/sbin/keepalived --dont-fork</code></pre></div></figure><h3 id="2-1-2-编译安装"><a href="#2-1-2-编译安装" class="headerlink" title="2.1.2 编译安装"></a>2.1.2 编译安装</h3><p>CentOS7.9编译安装Keepalived</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gcc curl openssl-devel libnl3-devel net-snmpdevel</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># wget https://keepalived.org/software/keepalived-2.0.20.tar.gz</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf keepalived-2.0.20.tar.gz -C /usr/local/src/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/src/keepalived-2.0.20/</span><span class="token comment">#默认生成iptables规则,无法访问VIP,编译时可以加--disable-fwmark禁用生成iptables规则</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/keepalived #--disable-fwmark</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># make &amp;&amp; make install</span><span class="token punctuation">[</span>root@node10 keepalived-2.0.20<span class="token punctuation">]</span><span class="token comment"># cd</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /etc/keepalived</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now keepalived.service</span>Created symlink from /etc/systemd/system/multi-user.target.wants/keepalived.service to /usr/lib/systemd/system/keepalived.service.<span class="token punctuation">[</span>root@node10 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status keepalived</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).LVS实战案例</title>
    <link href="/2023/02/02/LB/LVS/lvs03/"/>
    <url>/2023/02/02/LB/LVS/lvs03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-LVS相关软件"><a href="#1-LVS相关软件" class="headerlink" title="1.LVS相关软件"></a>1.LVS相关软件</h1><h2 id="1-1-ipvsadm"><a href="#1-1-ipvsadm" class="headerlink" title="1.1 ipvsadm"></a>1.1 ipvsadm</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装ipvsadm</span><span class="token punctuation">[</span>root@Server10 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token comment">#Unit File: </span>ipvsadm.service<span class="token comment">#主程序：</span>/usr/sbin/ipvsadm<span class="token comment">#规则保存工具：</span>/usr/sbin/ipvsadm-save<span class="token comment">#规则重载工具：</span>/usr/sbin/ipvsadm-restore<span class="token comment">#配置文件：</span>/etc/sysconfig/ipvsadm-config<span class="token comment">#ipvs调度规则文件：</span>/etc/sysconfig/ipvsadm</code></pre></div></figure><h2 id="1-2-ipvsadm命令"><a href="#1-2-ipvsadm命令" class="headerlink" title="1.2 ipvsadm命令"></a>1.2 ipvsadm命令</h2><h3 id="1-2-1-新增、修改规则"><a href="#1-2-1-新增、修改规则" class="headerlink" title="1.2.1 新增、修改规则"></a>1.2.1 新增、修改规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集群服务新增规则</span>ipvsadm -A<span class="token operator">|</span>E -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-M netmask<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pe persistence_engine<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b sched-flags<span class="token punctuation">]</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f  -t: TCP协议的端口，VIP:TCP_PORT 如: <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80  -u: UDP协议的端口，VIP:UDP_PORT  -f：firewall MARK，标记，一个数字server-address：  rip<span class="token punctuation">[</span>:port<span class="token punctuation">]</span> 如省略port，不作端口映射  <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span>:指定集群的调度算法，默认为wlc<span class="token comment">#例如</span>ipvsadm <span class="token parameter variable">-A</span> <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80 <span class="token parameter variable">-s</span> wrr</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集集群上RS新增规则</span>ipvsadm -a<span class="token operator">|</span>e -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token parameter variable">-r</span> server-address <span class="token punctuation">[</span>options<span class="token punctuation">]</span>lvs类型：  -g: gateway, dr类型，默认  -i: ipip, tun类型  -m: masquerade, nat类型  <span class="token parameter variable">-w</span> weight：权重<span class="token comment">#例如</span>ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token number">192.168</span>.1.11:80 <span class="token parameter variable">-r</span> <span class="token number">10.0</span>.0.11:8080 <span class="token parameter variable">-m</span> <span class="token parameter variable">-w</span> <span class="token number">3</span></code></pre></div></figure><h3 id="1-2-2-删除规则"><a href="#1-2-2-删除规则" class="headerlink" title="1.2.2 删除规则"></a>1.2.2 删除规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#管理集群服务删除规则</span>ipvsadm <span class="token parameter variable">-D</span> -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##管理集集群上RS删除规则</span>ipvsadm <span class="token parameter variable">-d</span> -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token parameter variable">-r</span> server-address</code></pre></div></figure><h3 id="1-2-3-清空规则"><a href="#1-2-3-清空规则" class="headerlink" title="1.2.3 清空规则"></a>1.2.3 清空规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清空规则</span>ipvsadm <span class="token parameter variable">-C</span><span class="token comment">#清空计数器</span>ipvsadm <span class="token parameter variable">-Z</span> <span class="token punctuation">[</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address<span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-4-查看规则"><a href="#1-2-4-查看规则" class="headerlink" title="1.2.4 查看规则"></a>1.2.4 查看规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm -L<span class="token operator">|</span>l <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  --numeric, -n：以数字形式输出地址和端口号  --exact：扩展信息，精确值  --connection，-c：当前IPVS连接输出  --stats：统计信息  <span class="token parameter variable">--rate</span> ：输出速率信息</code></pre></div></figure><h3 id="1-2-5-保存规则"><a href="#1-2-5-保存规则" class="headerlink" title="1.2.5 保存规则"></a>1.2.5 保存规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm-save <span class="token operator">></span> /<span class="token environment constant">PATH</span>/TO/IPVSADM_FILEipvsadm <span class="token parameter variable">-S</span> <span class="token operator">></span> /<span class="token environment constant">PATH</span>/TO/IPVSADM_FILEsystemctl stop ipvsadm.service <span class="token comment">#会自动保存规则至/etc/sysconfig/ipvsadm</span></code></pre></div></figure><h3 id="1-2-6-重载规则"><a href="#1-2-6-重载规则" class="headerlink" title="1.2.6 重载规则"></a>1.2.6 重载规则</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ipvsadm-restore <span class="token operator">&lt;</span> /<span class="token environment constant">PATH</span>/FROM/IPVSADM_FILEsystemctl start ipvsadm.service <span class="token comment">#会自动加载/etc/sysconfig/ipvsadm中规则</span></code></pre></div></figure><h1 id="2-LVS实战案例"><a href="#2-LVS实战案例" class="headerlink" title="2.LVS实战案例"></a>2.LVS实战案例</h1><h2 id="2-1-LVS-NAT模式"><a href="#2-1-LVS-NAT模式" class="headerlink" title="2.1 LVS-NAT模式"></a>2.1 LVS-NAT模式</h2><h3 id="2-1-1-部署清单"><a href="#2-1-1-部署清单" class="headerlink" title="2.1.1 部署清单"></a>2.1.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>lvs</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10</td><td>CentOS7.9</td><td>LVS服务</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr></tbody></table><h3 id="2-1-2-部署拓扑图"><a href="#2-1-2-部署拓扑图" class="headerlink" title="2.1.2 部署拓扑图"></a>2.1.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230205220506587.png" alt="image-20230205220506587"> </p><h3 id="2-1-3-部署步骤"><a href="#2-1-3-部署步骤" class="headerlink" title="2.1.3 部署步骤"></a>2.1.3 部署步骤</h3><h4 id="2-1-3-1-配置网络"><a href="#2-1-3-1-配置网络" class="headerlink" title="2.1.3.1 配置网络"></a>2.1.3.1 配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#client网络</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33 </span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>39d4e1a2-e050-41f6-8b49-2f1bcbf74b00<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#lvs网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>70be7838-69ed-4ed2-a1e8-ae64ad44ea30<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens36</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens36<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens36<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS1网络</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>7aa725ab-bd34-45f0-8d8a-d4ca8d502551<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS2网络</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>772d8876-deaa-4dca-b918-8eaeb7e69b4f<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.12<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no</code></pre></div></figure><h4 id="2-1-3-2-配置LVS"><a href="#2-1-3-2-配置LVS" class="headerlink" title="2.1.3.2 配置LVS"></a>2.1.3.2 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#配置lvs</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 192.168.1.11:80 -s wrr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.1.11:80 -r 10.0.0.11:80 -m</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.1.11:80 -r 10.0.0.12:80 -m</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">192.168</span>.1.11:80 wrr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>  <span class="token comment">#保存规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Sn > /etc/sysconfig/ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now ipvsadm.service</span>Created symlink from /etc/systemd/system/multi-user.target.wants/ipvsadm.service to /usr/lib/systemd/system/ipvsadm.service.</code></pre></div></figure><h4 id="2-1-3-3-客户端测试访问"><a href="#2-1-3-3-客户端测试访问" class="headerlink" title="2.1.3.3 客户端测试访问"></a>2.1.3.3 客户端测试访问</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 192.168.1.11;sleep 0.5;done</span>rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12</code></pre></div></figure><h4 id="2-1-3-3-配置Web服务"><a href="#2-1-3-3-配置Web服务" class="headerlink" title="2.1.3.3 配置Web服务"></a>2.1.3.3 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h2 id="2-2-LVS-DR模式单网段"><a href="#2-2-LVS-DR模式单网段" class="headerlink" title="2.2 LVS-DR模式单网段"></a>2.2 LVS-DR模式单网段</h2><p>DR模型中各主机上均需要配置VIP，解决地址冲突的方式有三种：  </p><ul><li>在前端网关做静态绑定。</li><li>在各RS使用arptables。</li><li>在各RS修改内核参数，来限制arp响应和通告的级别。</li></ul><p>限制响应级别：arp_ignore</p><ul><li>0：默认值，表示可使用本地任意接口上配置的任意地址进行响应。</li><li>1：仅在请求的目标IP配置在本地主机的接收到请求报文的接口上时，才给予响应。</li></ul><p>限制通告级别：arp_announce</p><ul><li>0：默认值，把本机所有接口的所有信息向每个接口的网络进行通告。</li><li>1：尽量避免将接口信息向非直接连接网络进行通告。</li><li>2：必须避免将接口信息向非本网络进行通告。</li></ul><h3 id="2-2-1-部署清单"><a href="#2-2-1-部署清单" class="headerlink" title="2.2.1 部署清单"></a>2.2.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>route</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10</td><td>CentOS7.9(模拟路由器)</td><td>路由器</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>lvs</td><td>10.0.0.13</td><td>CentOS7.9</td><td>LVS服务</td></tr></tbody></table><h3 id="2-2-2-部署拓扑图"><a href="#2-2-2-部署拓扑图" class="headerlink" title="2.2.2 部署拓扑图"></a>2.2.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230205233354208.png" alt="image-20230205233354208"> </p><h3 id="2-2-3-部署步骤"><a href="#2-2-3-部署步骤" class="headerlink" title="2.2.3 部署步骤"></a>2.2.3 部署步骤</h3><h4 id="2-2-3-1-配置网络"><a href="#2-2-3-1-配置网络" class="headerlink" title="2.2.3.1  配置网络"></a>2.2.3.1  配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#client网络</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>39d4e1a2-e050-41f6-8b49-2f1bcbf74b00<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#路由器网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>70be7838-69ed-4ed2-a1e8-ae64ad44ea30<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens36</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens36<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens36<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS1网络</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>7aa725ab-bd34-45f0-8d8a-d4ca8d502551<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.11<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#RS2网络</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>772d8876-deaa-4dca-b918-8eaeb7e69b4f<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.12<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no<span class="token comment">#lvs网络</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33 </span><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>3afb8741-2a4d-4f11-8132-d5a49baa7084<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.0</span>.0.13<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.0</span>.0.10<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span>no</code></pre></div></figure><h4 id="2-2-3-2-配置路由器"><a href="#2-2-3-2-配置路由器" class="headerlink" title="2.2.3.2 配置路由器"></a>2.2.3.2 配置路由器</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h4 id="2-2-3-3-后端RS的IPVS配置"><a href="#2-2-3-3-后端RS的IPVS配置" class="headerlink" title="2.2.3.3 后端RS的IPVS配置"></a>2.2.3.3 后端RS的IPVS配置</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1的IPVS配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:cd:a9:09 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.11/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::a4d:d03e:f0fc:dbd6/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever<span class="token comment">#RS2的IPVS配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:2e:97:97 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.12/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::fec0:5b18:972c:a77a/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever</code></pre></div></figure><h4 id="2-2-3-4-配置LVS"><a href="#2-2-3-4-配置LVS" class="headerlink" title="2.2.3.4 配置LVS"></a>2.2.3.4 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS上添加VIP</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 10.0.0.20/32</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet <span class="token number">10.0</span>.0.20/0 scope global lo:1       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:89:12:71 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">10.0</span>.0.13/24 brd <span class="token number">10.0</span>.0.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::8e92:ee80:bfe:898a/64 scope <span class="token function">link</span> noprefixroute        valid_lft forever preferred_lft forever       <span class="token comment">#配置lvs规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 10.0.0.20:80 -s rr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 10.0.0.20:80 -r 10.0.0.11:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 10.0.0.20:80 -r 10.0.0.12:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">10.0</span>.0.10:80 rr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span></code></pre></div></figure><h4 id="2-2-3-5-配置Web服务"><a href="#2-2-3-5-配置Web服务" class="headerlink" title="2.2.3.5 配置Web服务"></a>2.2.3.5 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h4 id="2-2-3-6-客户端访问测试"><a href="#2-2-3-6-客户端访问测试" class="headerlink" title="2.2.3.6 客户端访问测试"></a>2.2.3.6 客户端访问测试</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 10.0.0.20;sleep 0.5;done</span>rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11</code></pre></div></figure><h2 id="2-3-LVS-DR模式多网段"><a href="#2-3-LVS-DR模式多网段" class="headerlink" title="2.3 LVS-DR模式多网段"></a>2.3 LVS-DR模式多网段</h2><h3 id="2-3-1-部署清单"><a href="#2-3-1-部署清单" class="headerlink" title="2.3.1 部署清单"></a>2.3.1 部署清单</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>服务</th></tr></thead><tbody><tr><td>client</td><td>192.168.1.10</td><td>CentOS7.9</td><td>&#x2F;</td></tr><tr><td>route</td><td>ens33：192.168.1.11 &amp; ens36：10.0.0.10&amp;172.16.0.10</td><td>CentOS7.9(模拟路由器)</td><td>路由器</td></tr><tr><td>rs1</td><td>10.0.0.11</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>rs2</td><td>10.0.0.12</td><td>CentOS7.9</td><td>Web服务</td></tr><tr><td>lvs</td><td>10.0.0.13</td><td>CentOS7.9</td><td>LVS服务</td></tr></tbody></table><h3 id="2-3-2-部署拓扑图"><a href="#2-3-2-部署拓扑图" class="headerlink" title="2.3.2 部署拓扑图"></a>2.3.2 部署拓扑图</h3><p><img src="/2023/02/02/LB/LVS/lvs03/image-20230206222530142.png" alt="image-20230206222530142"> </p><h3 id="2-3-3-部署步骤"><a href="#2-3-3-部署步骤" class="headerlink" title="2.3.3 部署步骤"></a>2.3.3 部署步骤</h3><h4 id="2-3-3-1-配置网络"><a href="#2-3-3-1-配置网络" class="headerlink" title="2.3.3.1  配置网络"></a>2.3.3.1  配置网络</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#router的网络配置在2.2.3.1基础上添加172.16.0.10/24的地址</span><span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">172.16</span>.0.10/24 dev ens36</code></pre></div></figure><h4 id="2-3-3-2-配置路由器"><a href="#2-3-3-2-配置路由器" class="headerlink" title="2.3.3.2 配置路由器"></a>2.3.3.2 配置路由器</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启内核转发功能</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@route ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre></div></figure><h4 id="2-3-3-3-后端RS的IPVS配置"><a href="#2-3-3-3-后端RS的IPVS配置" class="headerlink" title="2.3.3.3 后端RS的IPVS配置"></a>2.3.3.3 后端RS的IPVS配置</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1的IPVS配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span><span class="token comment">#RS2的IPVS配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span></code></pre></div></figure><h4 id="2-3-3-4-配置LVS"><a href="#2-3-3-4-配置LVS" class="headerlink" title="2.3.3.4 配置LVS"></a>2.3.3.4 配置LVS</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS上添加VIP</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ifconfig lo:1 172.16.0.11/32</span> <span class="token comment">#配置lvs规则</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># yum -y install ipvsadm</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 172.16.0.11:80 -s rr</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 172.16.0.11:80 -r 10.0.0.11:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 172.16.0.11:80 -r 10.0.0.12:80 -g</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">172.16</span>.0.11:80 rr  -<span class="token operator">></span> <span class="token number">10.0</span>.0.11:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>           -<span class="token operator">></span> <span class="token number">10.0</span>.0.12:80                 Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span></code></pre></div></figure><h4 id="2-3-3-5-配置Web服务"><a href="#2-3-3-5-配置Web服务" class="headerlink" title="2.3.3.5 配置Web服务"></a>2.3.3.5 配置Web服务</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RS1配置</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs1 10.0.0.11" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span><span class="token comment">#RS2配置</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># echo "rs2 10.0.0.12" > /usr/share/nginx/html/index.html</span><span class="token punctuation">[</span>root@rs2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start nginx</span></code></pre></div></figure><h4 id="2-3-3-6-客户端访问测试"><a href="#2-3-3-6-客户端访问测试" class="headerlink" title="2.3.3.6 客户端访问测试"></a>2.3.3.6 客户端访问测试</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># while :;do curl 172.16.0.11;sleep 0.5;done</span>rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12rs1 <span class="token number">10.0</span>.0.11rs2 <span class="token number">10.0</span>.0.12</code></pre></div></figure><h4 id="附：LVS及RS配置脚本"><a href="#附：LVS及RS配置脚本" class="headerlink" title="附：LVS及RS配置脚本"></a>附：LVS及RS配置脚本</h4><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在LVS主机运行的脚本</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat lvs_dr_vs.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">vip</span><span class="token operator">=</span><span class="token string">'172.16.0.11'</span><span class="token assign-left variable">iface</span><span class="token operator">=</span><span class="token string">'lo:1'</span><span class="token assign-left variable">mask</span><span class="token operator">=</span><span class="token string">'255.255.255.255'</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">'80'</span><span class="token assign-left variable">rs1</span><span class="token operator">=</span><span class="token string">'10.0.0.11'</span><span class="token assign-left variable">rs2</span><span class="token operator">=</span><span class="token string">'10.0.0.12'</span><span class="token assign-left variable">scheduler</span><span class="token operator">=</span><span class="token string">'wrr'</span><span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">'-g'</span><span class="token function">rpm</span> <span class="token parameter variable">-q</span> ipvsadm <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ipvsadm <span class="token operator">&amp;></span> /dev/null<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>start<span class="token punctuation">)</span>    <span class="token function">ifconfig</span> <span class="token variable">$iface</span> <span class="token variable">$vip</span> netmask <span class="token variable">$mask</span> <span class="token comment">#broadcast $vip up</span>    iptables <span class="token parameter variable">-F</span>    ipvsadm <span class="token parameter variable">-A</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-s</span> <span class="token variable">$scheduler</span>    ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-r</span> <span class="token variable">$&#123;rs1&#125;</span> <span class="token variable">$type</span> <span class="token parameter variable">-w</span> <span class="token number">1</span>    ipvsadm <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> <span class="token variable">$&#123;vip&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-r</span> <span class="token variable">$&#123;rs2&#125;</span> <span class="token variable">$type</span> <span class="token parameter variable">-w</span> <span class="token number">1</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The VS Server is Ready!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span>    ipvsadm <span class="token parameter variable">-C</span>    <span class="token function">ifconfig</span> <span class="token variable">$iface</span> down    <span class="token builtin class-name">echo</span> <span class="token string">"The VS Server is Canceled!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> start|stop"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token comment">#在RS后端服务器运行的脚本</span><span class="token punctuation">[</span>root@lvs ~<span class="token punctuation">]</span><span class="token comment"># cat lvs_dr_vs.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">vip</span><span class="token operator">=</span><span class="token string">'172.16.0.11'</span><span class="token assign-left variable">mask</span><span class="token operator">=</span><span class="token string">'255.255.255.255'</span><span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">'lo:1'</span><span class="token function">rpm</span> <span class="token parameter variable">-q</span> httpd <span class="token operator">&amp;></span> /dev/null <span class="token operator">||</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd <span class="token operator">&amp;></span>/dev/null<span class="token function">service</span> httpd start <span class="token operator">&amp;></span> /dev/null <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"The httpd Server is Ready!"</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">hostname</span> <span class="token parameter variable">-I</span><span class="token variable">`</span></span>"</span> <span class="token operator">></span> /var/www/html/index.html<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>start<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_announce    <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_announce    <span class="token function">ifconfig</span> <span class="token variable">$dev</span> <span class="token variable">$vip</span> netmask <span class="token variable">$mask</span> <span class="token comment">#broadcast $vip up</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The RS Server is Ready!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span>    <span class="token function">ifconfig</span> <span class="token variable">$dev</span> down    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_ignore    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/all/arp_announce    <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/net/ipv4/conf/lo/arp_announce    <span class="token builtin class-name">echo</span> <span class="token string">"The RS Server is Canceled!"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span> start|stop"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).LVS调度算法</title>
    <link href="/2023/02/02/LB/LVS/lvs02/"/>
    <url>/2023/02/02/LB/LVS/lvs02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-LVS调度算法"><a href="#1-LVS调度算法" class="headerlink" title="1.LVS调度算法"></a>1.LVS调度算法</h1><p>ipvs scheduler： 根据其调度时是否考虑各RS当前的负载状态；静态方法和动态方法</p><h2 id="1-1-静态算法"><a href="#1-1-静态算法" class="headerlink" title="1.1 静态算法"></a>1.1 静态算法</h2><h3 id="1-1-1-RR"><a href="#1-1-1-RR" class="headerlink" title="1.1.1 RR"></a>1.1.1 RR</h3><p>轮询调度：均等的分发至每一台服务器。</p><h3 id="1-1-2-WRR"><a href="#1-1-2-WRR" class="headerlink" title="1.1.2 WRR"></a>1.1.2 WRR</h3><p>加权轮询调度：根据真实服务器的负载情况进行调整权值。</p><h3 id="1-1-3-SH"><a href="#1-1-3-SH" class="headerlink" title="1.1.3 SH"></a>1.1.3 SH</h3><p>源地址散列调度算法：源IP地址Hash；将来自于同一个IP地址的请求始终分配固定的服务器资源。</p><h3 id="1-1-4-DH"><a href="#1-1-4-DH" class="headerlink" title="1.1.4 DH"></a>1.1.4 DH</h3><p>目标地址散列调度算法：目标地址Hash；第一次轮询调度至RS，后续将发往同一个目标地址的请求始终发往第一次挑中的RS</p><h2 id="1-2-动态算法"><a href="#1-2-动态算法" class="headerlink" title="1.2 动态算法"></a>1.2 动态算法</h2><p>根据每个RS当前的负载状态及调度算法进行调度：Overhead&#x3D;value 较小的RS将被调度  </p><h3 id="1-2-1-LC"><a href="#1-2-1-LC" class="headerlink" title="1.2.1 LC"></a>1.2.1 LC</h3><p>least connections：动态地将网络请求调度到已建立的连接数最少的服务器上</p><h3 id="1-2-2-WLC"><a href="#1-2-2-WLC" class="headerlink" title="1.2.2 WLC"></a>1.2.2 WLC</h3><p>Weighted LC默认调度算法：调度器可以自动问询真实服务器的负载情况，并动态调整权值</p><h3 id="1-2-3-SED"><a href="#1-2-3-SED" class="headerlink" title="1.2.3 SED"></a>1.2.3 SED</h3><p>Shortest Expection Delay：不考虑非活动链接，谁的权重大，优先选择权重大的服务器来接收请求，但权重大的机器会比较忙</p><h3 id="1-2-4-NQ"><a href="#1-2-4-NQ" class="headerlink" title="1.2.4 NQ"></a>1.2.4 NQ</h3><p>Never Queue：无需队列，如果有realserver的连接数为0就直接分配过去</p><h3 id="1-2-5-LBLC"><a href="#1-2-5-LBLC" class="headerlink" title="1.2.5 LBLC"></a>1.2.5 LBLC</h3><p>Locality-Based LC：请求数据包的目标 IP 地址的一种调度算法，该算法先根据请求的目标 IP 地址寻找最近的该目标 IP 地址所有使用的服务器，如果这台服务器依然可用，并且有能力处理该请求，调度器会尽量选择相同的服务器，否则会继续选择其它可行的服务器</p><h3 id="1-2-6-LBLCR"><a href="#1-2-6-LBLCR" class="headerlink" title="1.2.6 LBLCR"></a>1.2.6 LBLCR</h3><p>LBLC with Replication：记录的不是要给目标 IP 与一台服务器之间的连接记录，它会维护一个目标 IP 到一组服务器之间的映射关系，防止单点服务器负载过高。</p><h2 id="1-3-新增调度算法：FO和OVF"><a href="#1-3-新增调度算法：FO和OVF" class="headerlink" title="1.3 新增调度算法：FO和OVF"></a>1.3 新增调度算法：FO和OVF</h2><p>内核版本 4.15 版本后新增</p><h3 id="1-3-1-FO"><a href="#1-3-1-FO" class="headerlink" title="1.3.1 FO"></a>1.3.1 FO</h3><p>Weighted Fail Over：在此FO算法中，遍历虚拟服务所关联的真实服务器链表，找到还未过载（未设置IP_VS_DEST_F_OVERLOAD标志）的且权重最高的真实服务器，进行调度,属于静态算法  </p><h3 id="1-3-2-OVF"><a href="#1-3-2-OVF" class="headerlink" title="1.3.2 OVF"></a>1.3.2 OVF</h3><p>Overflow-connection：基于真实服务器的活动连接数量和权重值实现。将新连接调度到权重值最高的真实服务器，直到其活动连接数量超过权重值，之后调度到下一个权重值最高的真实服务器,在此OVF算法中，遍历虚拟服务相关联的真实服务器链表，找到权重值最高的可用真实服务器。属于动态算法。</p><p>一个可用的真实服务器需要同时满足以下条件：  </p><ul><li>未过载（未设置IP_VS_DEST_F_OVERLOAD标志）  </li><li>真实服务器当前的活动连接数量小于其权重值。</li><li>其权重值不为零。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).LVS工作模式</title>
    <link href="/2023/02/02/LB/LVS/lvs01/"/>
    <url>/2023/02/02/LB/LVS/lvs01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Linux-Virtual-Server简介"><a href="#1-Linux-Virtual-Server简介" class="headerlink" title="1.Linux Virtual Server简介"></a>1.Linux Virtual Server简介</h1><h2 id="1-1-LVS介绍"><a href="#1-1-LVS介绍" class="headerlink" title="1.1 LVS介绍"></a>1.1 LVS介绍</h2><p>LVS：Linux Virtual Server，负载调度器。</p><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#LVS官网：<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.linuxvirtualserver.org/</span></span>#阿里SLB和LVS<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//yq.aliyun.com/articles/1803</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/alibaba/LVS</span></span></code></pre></div></figure><p>LVS根据请求报文的目标IP和目标协议及端口将其调度转发至其中的RS，根据调度算法调度至RS。</p><p>LVS是内核级功能，工作在INPUT链的位置，将发往INPUT的流量进行“处理”。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看CentOS7.9内核支持LVS</span><span class="token punctuation">[</span>root@Server10 ~<span class="token punctuation">]</span><span class="token comment"># grep -i -C 10 ipvs /boot/config-3.10.0-1160.el7.x86_64 </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_IPVS</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_LENGTH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_LIMIT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MAC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MARK</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_MULTIPORT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_NFACCT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_OSF</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_OWNER</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_POLICY</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_PHYSDEV</span><span class="token operator">=</span>m--<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETNET</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETPORT</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_HASH_NETIFACE</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_SET_LIST_SET</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_IPV6</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_IP_VS_DEBUG is not set</span><span class="token assign-left variable">CONFIG_IP_VS_TAB_BITS</span><span class="token operator">=</span><span class="token number">12</span><span class="token comment">#</span><span class="token comment"># IPVS transport protocol load balancing support</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_PROTO_TCP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_UDP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_SCTP</span><span class="token operator">=</span>y<span class="token comment">#</span><span class="token comment"># IPVS scheduler</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_RR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WRR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLCR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_DH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SED</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_NQ</span><span class="token operator">=</span>m<span class="token comment">#</span><span class="token comment"># IPVS SH scheduler</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_SH_TAB_BITS</span><span class="token operator">=</span><span class="token number">8</span><span class="token comment">#</span><span class="token comment"># IPVS application helper</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_FTP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_NFCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PE_SIP</span><span class="token operator">=</span>m<span class="token comment">#</span><span class="token comment"># IP: Netfilter Configuration</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_NF_DEFRAG_IPV4</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NF_CONNTRACK_IPV4</span><span class="token operator">=</span>m</code></pre></div></figure><h2 id="1-2-LVS相关术语"><a href="#1-2-LVS相关术语" class="headerlink" title="1.2 LVS相关术语"></a>1.2 LVS相关术语</h2><ul><li>DS:Director Server。前端负载均衡器节点</li><li>RS:Real Server。后端真实的工作服务器</li><li>VIP:Virtual Serve IP。用户请求的目标IP地址。</li><li>DIP:Director Server IP。内部主机通信的IP地址。</li><li>RIP:Real Server IP。后端服务器的IP地址。</li><li>CIP:Client IP。客户端的IP地址。</li></ul><h2 id="1-3-LVS工作模式"><a href="#1-3-LVS工作模式" class="headerlink" title="1.3 LVS工作模式"></a>1.3 LVS工作模式</h2><ul><li>LVS-NAT</li><li>LVS-DR</li><li>LVS-TUN</li><li>LVS-FULLNAT</li></ul><h3 id="1-3-1-NAT模式"><a href="#1-3-1-NAT模式" class="headerlink" title="1.3.1 NAT模式"></a>1.3.1 NAT模式</h3><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-nat-1.png" alt="lvs-nat-1"></p><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-nat-2.png" alt="lvs-nat-2"></p><p><strong>NAT模式工作原理：</strong></p><ol><li>用户发起请求<a href="http://www.chsblogs.com,到达lvs网卡,此时数据包源ip是cip,目标ip是vip./">www.chsblogs.com，到达LVS网卡，此时数据包源IP是CIP，目标IP是VIP。</a></li><li>经过网卡进入PREROUTING，根据目的IP查找路由，确认是本机，将数据转发至INPUT，此时数据包源IP是CIP，目标IP是VIP。</li><li>到达LVS后，通过目的IP和目的PORT查找是否为IPVS服务。若是IPVS服务，则会选择一个RS作为后端服务器，将数据包目的IP修改为RIP，并以RIP为目的查找路由信息，确定下一跳和出口信息，将数据包转发至POSTROUTING。</li><li>修改后的数据包经过POSTROUTING和链路层处理后，到达RS服务器，此时数据包源IP是CIP，目的IP是RIP。</li><li>到达RS服务器的数据包经过链路层和网络层检查后，送往用户空间Web服务。Web服务处理完成，发送响应数据包，到达LVS服务器后，此时源IP是RIP，目的IP是CIP。</li><li>LVS服务器收到RS响应数据包后，根据路由查找，发现目的IP不是本机IP，将数据包转发给FORWARD链，此时源IP是RIP，目的IP是CIP。</li><li>LVS服务器收到响应数据包后，根据目的IP和目的PORT查找服务和连接表，将源IP改为VIP，通过路由查找，确定下一跳和出口信息，将数据包发送至网关，经过复杂的网络到达用户客户端，最终完成一次请求和响应。</li></ol><p><strong>NAT模式特性：</strong></p><ul><li>本质是多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为其中的RS的RIP和PORT实现转发。</li><li>NAT的数据包进出都要经过LVS，所以LVS负载压力较高。</li><li>RIP和DIP应在同一个IP网络，且应使用私有地址；RS的网关要指向DIP。</li></ul><p><strong>NAT模式优点：</strong></p><ul><li>VS必须是Linux系统，RS支持Windows操作系统。</li><li>支持端口映射，可以修改请求报文的目标PORT。</li></ul><p><strong>NAT模式缺点：</strong></p><ul><li><p>后端RS需要配置网关。</p></li><li><p>NAT的数据包进出都要经过LVS，所以LVS负载压力较高。</p></li></ul><p><strong>NAT模式场景：</strong></p><ul><li>RS有Windows操作系统。</li></ul><h3 id="1-3-2-DR模式"><a href="#1-3-2-DR模式" class="headerlink" title="1.3.2 DR模式"></a>1.3.2 DR模式</h3><p>LVS-DR：Direct Routing，直接路由，LVS默认模式，应用最广泛，通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在接口的MAC，目标MAC是其中一台RS的RIP所在接口的MAC地址。源IP&#x2F;PORT，以及目标IP&#x2F;PORT保持不变。</p><p><img src="/2023/02/02/LB/LVS/lvs01/lvs-dr-1.png" alt="lvs-dr-1"></p><p><strong>DR模式工作原理：</strong></p><ol><li>用户发起请求<a href="http://www.chsblogs.com,请求数据包穿过网络到达lvs服务器连接的路由器,此时源ip是cip,目标ip是vip;源mac是cmac,目标mac地址是r1接口的mac地址,记为r1mac/">www.chsblogs.com，请求数据包穿过网络到达LVS服务器连接的路由器，此时源IP是CIP，目标IP是VIP；源MAC是CMAC，目标MAC地址是R1接口的MAC地址，记为R1MAC</a></li><li>请求报文经过R1路由器分发后，到达LVS服务器的网卡，此时源IP是CIP，目标IP是VIP，源MAC是R2接口的MAC地址，记为R2MAC，目标MAC地址VIP 对应的 MAC，记为 VMAC 。</li><li>数据包经过链路层到达 PREROUTING 位置，查找路由发现目的IP是LVS的VIP，就会传递到INPUT链上，此时数据包MAC，IP，PORT都没有修改。</li><li>数据包到达INPUT链。此时 LVS 会根据目的 IP 和 PORT来确认是否是 LVS 定义的服务，如果是定义过的 VIP 服务，就会根据配置信息，从真实服务器列表 中选择一个作为 RS1，然后以 RS1作为目标查找Out 方向的路由，确定一下跳信息以及数据包要通过哪个网卡发出。最后将数据包投递到POSTROUTING链上。</li><li>数据包通过POSTROUTING链后，从网络层转到链路层，将目的 MAC 地址修改为RealServer服务器MAC地址，记为 RMAC ；而源 MAC 地址修改为 LVS 与 RS 同网段的IP对应的MAC地址，记为DMAC 。此时，数据包通过交换机转发给了RealServer服务器。</li><li>请求数据包到达后端真实服务器后，链路层检查目的 MAC 是自己网卡地址。到了网络层，查找路由，目的 IP 是 VIP（lo 上配置了 VIP），判定是本地主机的数据包，经过协议栈拷贝至Web服务，Web服务响应请求后，产生响应数据包。</li><li>然后以CIP查找出方向的路由，确定下一跳信息和发送网卡设备信息。此时源IP是VIP，目标IP是CIP，而源MAC地址是RS的MAC地址，记为RMAC ，目的 MAC 是下一跳（路由器）的 MAC 地址，记为 R2MAC。然后数据包通过RS相连的路由器转发给真正客户端，完成了请求响应的全过程。</li></ol><p><strong>DR模式特性：</strong></p><ul><li>前端路由将目标地址为VIP报文发往Director Server</li><li>Director和RS都配置有VIP</li><li>RS的RIP可以使用私网地址，也可以是公网地址，RIP与DIP在同一IP网络。RIP的网关不能指向DIP，以确保响应报文不会经由Director</li><li>RS和Director要在同一个物理网络。</li><li>请求报文要经由Director，但响应报文不经由Director，而由RS直接发往Client。</li><li>不支持端口映射。</li><li>无需开启 ip_forward</li><li>RS可使用大多数OS系统</li></ul><p><strong>DR模式优点：</strong></p><ul><li>响应数据不经过 LVS，性能高。</li></ul><p><strong>DR模式缺点：</strong></p><ul><li>LVS 与 RS必须在同一个物理网络（不支持跨机房）</li><li>服务器上必须配置 lo 和其它内核参数</li><li>不支持端口映射</li></ul><p><strong>DR模式场景：</strong></p><p>对性能要求非常高，可以首选 DR 模式，而且可以透传客户端源 IP 地址。</p><h3 id="1-3-3-TUN模式"><a href="#1-3-3-TUN模式" class="headerlink" title="1.3.3 TUN模式"></a>1.3.3 TUN模式</h3><h3 id="1-3-4-FULLNAT模式"><a href="#1-3-4-FULLNAT模式" class="headerlink" title="1.3.4 FULLNAT模式"></a>1.3.4 FULLNAT模式</h3><h2 id="1-4-LVS工作模式比较"><a href="#1-4-LVS工作模式比较" class="headerlink" title="1.4 LVS工作模式比较"></a>1.4 LVS工作模式比较</h2><table><thead><tr><th></th><th>NAT</th><th>TUN</th><th>DR</th></tr></thead><tbody><tr><td>Real Server</td><td>any</td><td>Tunneling</td><td>Non-arp device</td></tr><tr><td>Real server network</td><td>Private</td><td>LAN&#x2F;WAN</td><td>LAN</td></tr><tr><td>Real server number</td><td>low (10~20)</td><td>High (100)</td><td>High (100)</td></tr><tr><td>Real server gateway</td><td>load balancer</td><td>own router</td><td>Own route</td></tr><tr><td>优点</td><td>端口转换</td><td>WAN</td><td>性能最好</td></tr><tr><td>缺点</td><td>性能瓶颈</td><td>要求支持隧道,不支持端口转换</td><td>不支持跨网段和端口转换</td></tr></tbody></table><p>LVS-NAT与LVS-FULLNAT：</p><ul><li>请求和响应报文都经过Director</li><li>LVS-NAT：RIP的网关要指向DIP</li><li>LVS-FULLNAT：RIP和DIP未必在同一IP网络，但要能通信。</li></ul><p>LVS-DR与LVS-TUN：</p><ul><li>请求报文要经过Director，但响应报文由RS直接发往Client</li><li>LVS-DR：通过封装新的MAC首部实现，通过MAC网络转发。</li><li>LVS-TUN：通过在原IP报文外封装新IP头实现转发，支持远距离通信。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>LVS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(8).Docker-Compose</title>
    <link href="/2022/09/07/Container/Docker/docker08/"/>
    <url>/2022/09/07/Container/Docker/docker08/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker-Compose简介"><a href="#1-Docker-Compose简介" class="headerlink" title="1.Docker Compose简介"></a>1.Docker Compose简介</h1><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。</p><h1 id="2-安装Docker-Compose"><a href="#2-安装Docker-Compose" class="headerlink" title="2.安装Docker-Compose"></a>2.安装Docker-Compose</h1><h2 id="2-1-方式一"><a href="#2-1-方式一" class="headerlink" title="2.1 方式一"></a>2.1 方式一</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:/usr/local/src<span class="token comment"># apt update</span>root@node10:/usr/local/src<span class="token comment"># apt install -y python3-pip</span>root@node10:/usr/local/src<span class="token comment"># pip install docker-compose</span><span class="token comment">#这里有个报错->/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (1.26.12) or chardet (3.0.4) doesn't match a supported version!</span><span class="token comment">#  warnings.warn("urllib3 (&#123;&#125;) or chardet (&#123;&#125;) doesn't match a supported "</span><span class="token comment">#解决：</span>root@node10:/usr/local/src<span class="token comment"># pip uninstall -y urllib3</span>root@node10:/usr/local/src<span class="token comment"># pip uninstall chardet</span>root@node10:/usr/local/src<span class="token comment"># pip install requests</span>root@node10:/usr/local/src<span class="token comment"># docker-compose -v</span><span class="token function">docker-compose</span> version <span class="token number">1.29</span>.2, build unknown</code></pre></div></figure><h2 id="2-2-方式二"><a href="#2-2-方式二" class="headerlink" title="2.2 方式二"></a>2.2 方式二</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#二进制文件安装</span><span class="token comment">#github网速较慢，可使用https://get.daocloud.io/</span><span class="token comment">#root@node10:~# curl -L https://github.com/docker/compose/releases/download/v2.10.0/docker-compose-linux-#x86_64 -o /usr/local/bin/docker-compose</span>root@node12:~<span class="token comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/v2.10.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</span>root@node12:~<span class="token comment"># chmod +x /usr/local/bin/docker-compose</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(7).Docker资源限制</title>
    <link href="/2022/09/07/Container/Docker/docker07/"/>
    <url>/2022/09/07/Container/Docker/docker07/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>默认情况下，docker没有对容器进行硬件资源限制。docker宿主机上运行的容器虽然相互隔离，但是共用宿主机的CPU、内存等硬件资源。如果不对容器使用的资源进行限制，那么很有可能会导致宿主机资源耗尽，服务不可用。</p><h1 id="2-CPU资源限制"><a href="#2-CPU资源限制" class="headerlink" title="2.CPU资源限制"></a>2.CPU资源限制</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#选项</span><span class="token parameter variable">--cpus</span> decimal                   <span class="token comment">#指定容器可以使用多少CPU资源。</span>--cpuset-cpus string             <span class="token comment">#指定容器运行的CPU编号。</span>--cpu-shares int                 <span class="token comment">#CPU份额</span></code></pre></div></figure><ul><li>–cpus</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#给容器分配1核CPU</span>root@node10:~<span class="token comment"># docker run -it -d -p 80:80 --cpus 1 nginx</span><span class="token comment">#宿主机cgroup验证，每个CPU会按照1000为单位转换成百分比进行资源划分。1核CPU就是100000/1000=100%</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/cpu/docker/3260b811d43e5e0da52a15170760248f773850fadcda5ed7a1fc56222339c639/cpu.cfs_quota_us </span><span class="token number">100000</span><span class="token comment">#动态调整，调整后，压测CPU百分比会超过100%</span>root@node10:~<span class="token comment"># echo "200000" > /sys/fs/cgroup/cpu/docker/3260b811d43e5e0da52a15170760248f773850fadcda5ed7a1fc56222339c639/cpu.cfs_quota_us</span><span class="token comment">#压测，查看容器CPU消耗</span>root@node11:~<span class="token comment"># ab -n 10000000 -c 1000 http://192.168.1.10/index.html</span>root@node10:~<span class="token comment"># docker stats</span>CONTAINER ID   NAME               CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O        PIDS05c9f5b39aad   nostalgic_beaver   <span class="token number">102.23</span>%   <span class="token number">15</span>.47MiB / <span class="token number">7</span>.741GiB   <span class="token number">0.20</span>%     118MB / 279MB   528kB / <span class="token number">15</span>.9kB   <span class="token number">9</span></code></pre></div></figure><ul><li>–cpuset-cpus</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将容器运行在指定CPU核上</span>root@node10:~<span class="token comment"># docker run -it -d -p 80:80 --cpus 1 --cpuset-cpus 1,3 nginx</span></code></pre></div></figure><h1 id="3-内存资源限制"><a href="#3-内存资源限制" class="headerlink" title="3.内存资源限制"></a>3.内存资源限制</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#选项</span><span class="token parameter variable">--memory</span> bytes                   <span class="token comment">#内存限制</span>--memory-swap bytes              <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>--oom-kill-disable               <span class="token comment">#禁用OOM杀手</span></code></pre></div></figure><ul><li>–memory</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#pull测试镜像</span>root@node10:~<span class="token comment"># docker pull lorel/docker-stress-ng</span><span class="token comment">#限制容器最大内存使用2G</span>root@node10:~<span class="token comment"># docker run -it -d -m 2G lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证，通过echo命令可以修改内存限制的值，但是可以在原基础上增大内存的限制，缩小内存限制会报错</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/d9d7c18f81ac07742e83e0a2d1ed7489da5d587bf44b3ac1517473411d5ce33a/memory.limit_in_bytes </span><span class="token number">2147483648</span></code></pre></div></figure><ul><li>–memory-swap</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#限制容器交换分区</span>root@node10:~<span class="token comment"># docker run -it -d -m 1024M --memory-swap 2048M lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/58fb6f9f2dc0f2f6e55e4bccd7388e958714c4218ec6dc3aa98687060bee7d03/memory.memsw.limit_in_bytes </span><span class="token number">2147483648</span></code></pre></div></figure><ul><li>–oom-kill-disable</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭OOM机制</span>root@node10:~<span class="token comment"># docker run -it -d -m 1024M --oom-kill-disable lorel/docker-stress-ng --vm 4 --vm-bytes 1024M</span><span class="token comment">#宿主机cgroup验证</span>root@node10:~<span class="token comment"># cat /sys/fs/cgroup/memory/docker/357f70865c63930a6ab8bb2e3bfd21f20d77717e1f51b17764799b7871db785d/memory.oom_control </span>oom_kill_disable <span class="token number">1</span>under_oom <span class="token number">1</span>oom_kill <span class="token number">0</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(6).Docker网络</title>
    <link href="/2022/09/06/Container/Docker/docker06/"/>
    <url>/2022/09/06/Container/Docker/docker06/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker网络模式"><a href="#1-Docker网络模式" class="headerlink" title="1.Docker网络模式"></a>1.Docker网络模式</h1><p>Docker安装完成之后，默认会在宿主机生成一个名称为docker0的网卡，IP地址为172.17.0.1&#x2F;16，并且会生成3种网络模式。创建容器时不指定网络模式下默认使用bridge(桥接)模式。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker0网卡</span>root@node10:~<span class="token comment"># ifconfig docker0</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        inet6 fe80::42:c5ff:fe2f:866d  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 02:42:c5:2f:86:6d  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">67331</span>  bytes <span class="token number">4453755</span> <span class="token punctuation">(</span><span class="token number">4.4</span> MB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">110001</span>  bytes <span class="token number">487083806</span> <span class="token punctuation">(</span><span class="token number">487.0</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>        <span class="token comment">#docker网络模式</span>root@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME      DRIVER    SCOPEf16709969dc6   bridge    bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none      null      <span class="token builtin class-name">local</span></code></pre></div></figure><h2 id="1-1-bridge模式"><a href="#1-1-bridge模式" class="headerlink" title="1.1 bridge模式"></a>1.1 bridge模式</h2><p>​bridge模式是docker的默认网络模式，当使用 <code>docker run -d -p 80:80 nginx</code> 时，docker会在iptables上做DNAT规则，实现端口转发。可以使用<code>iptables -vnL</code> 查看。</p><p>​在docker宿主机上启动的docker容器，都会连接到docker0的虚拟网桥上。虚拟网桥的工作方式根物理交换机类似，这样在宿主机上启动的所有容器就通过交换机连接在一个二层网络中。docker启动的容器IP地址会从docker0子网中分配一个IP给容器使用，当前容器的网关为docker0的IP地址。在主机上创建一对虚拟网卡设备，docker将一对虚拟网卡设备的一端放置在容器中，命名为eth0，另一端在宿主机中，以vethX的命名方式命名，并将这个网络设备加入到docker0网桥中。可以通过<code>brctl show</code> 查看。</p><p><img src="/2022/09/06/Container/Docker/docker06/image-20220907101804536.png" alt="bridge模式"> </p><p>宿主机和docker容器之间是可以进行网络连接的，docker容器和容器之间也可以进行网络连接。</p><h2 id="1-2-host模式"><a href="#1-2-host模式" class="headerlink" title="1.2 host模式"></a>1.2 host模式</h2><p>当启动的容器网络使用host模式时，那么此容器不会获得一个独立的 Net Namespace，而是和宿主机共用一个 Net Namespace，容器不会虚拟出自己的网卡，配置自己的IP，而是使用宿主机的IP和端口。容器网络使用host模式可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口占用宿主机的端口，如果宿主机的端口被占用了，那么容器内部服务器的端口就不能在使用了。host模式最大的优势就是性能比较好。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器，指定网络模式为host</span>root@node10:~<span class="token comment"># docker run -d --network host nginx</span><span class="token comment">#查看容器网络</span>root@node10:~<span class="token comment"># docker exec -it 1950c2ebe52f bash</span>root@node10:/<span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>        valid_lft forever preferred_lft forever<span class="token number">2</span>: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc fq_codel state UP group default qlen <span class="token number">1000</span>    link/ether 00:0c:29:a2:51:d5 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">192.168</span>.1.10/24 brd <span class="token number">192.168</span>.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fea2:51d5/64 scope <span class="token function">link</span>        valid_lft forever preferred_lft forever<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state DOWN group default     link/ether 02:42:c5:2f:86:6d brd ff:ff:ff:ff:ff:ff    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:c5ff:fe2f:866d/64 scope <span class="token function">link</span>        valid_lft forever preferred_lft forever</code></pre></div></figure><h2 id="1-3-none模式"><a href="#1-3-none模式" class="headerlink" title="1.3 none模式"></a>1.3 none模式</h2><p>当启动的容器网络使用none模式时，此容器会获得一个独立的 Net Namespace，但是并不会为容器进行任何网络配置。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器，指定网络模式为none</span>root@node10:~<span class="token comment"># docker run -d --network none nginx</span></code></pre></div></figure><h2 id="1-4-container模式"><a href="#1-4-container模式" class="headerlink" title="1.4 container模式"></a>1.4 container模式</h2><p>container模式指定新启动的容器和已经存在的一个容器共享 Net Namespace ，而不是和宿主机共享。</p><h1 id="2-容器互联"><a href="#2-容器互联" class="headerlink" title="2.容器互联"></a>2.容器互联</h1><p>在同一个宿主机上的容器之间可以通过自定义的容器名称相互访问。由于容器启动的时候内部IP地址是DHCP随机分配的，其IP地址可能会变动，所以需要使用容器名称来配置容器之间的网络连接。通过<code>--like</code> 指定容器名称。</p><ul><li>启动nginx01容器</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker run -d --name nginx01 -p 80:80 nginx</span></code></pre></div></figure><ul><li>启动nginx02容器，链接至nginx01</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker run -d --name nginx02 --link nginx01 -p 81:80 nginx</span></code></pre></div></figure><ul><li>测试网络访问</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#nginx01容器访问nginx02容器，无法通过容器名访问nginx02</span>root@node10:~<span class="token comment"># docker ps | grep nginx01</span>3a65d4e68d77   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">11</span> minutes ago   Up <span class="token number">11</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker exec -it 3a65d4e68d77 bash</span>root@3a65d4e68d77:/<span class="token comment"># ping nginx02</span>ping: nginx02: Name or <span class="token function">service</span> not known<span class="token comment">#nginx02容器访问nginx01容器,可以通过容器名访问nginx01</span>root@node10:~<span class="token comment"># docker ps | grep nginx02</span>ec9b4bf2bd83   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">13</span> minutes ago   Up <span class="token number">13</span> minutes   <span class="token number">0.0</span>.0.0:81-<span class="token operator">></span><span class="token number">80</span>/tcp, :::81-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx02root@node10:~<span class="token comment"># docker exec -it ec9b4bf2bd83 bash</span>root@ec9b4bf2bd83:/<span class="token comment"># ping nginx01</span>PING nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.130</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.048</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.057</span> ms<span class="token number">64</span> bytes from nginx01 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.084</span> ms</code></pre></div></figure><p><code>--link</code> 的工作原理就是在容器中添加相应的host解析，将容器名和IP地址映射。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看nginx01的hosts</span>root@3a65d4e68d77:/<span class="token comment"># cat /etc/hosts </span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">172.17</span>.0.23a65d4e68d77<span class="token comment">#查看nginx02的hosts</span>root@ec9b4bf2bd83:/<span class="token comment"># cat /etc/hosts </span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">172.17</span>.0.2nginx01 3a65d4e68d77<span class="token number">172.17</span>.0.3ec9b4bf2bd83</code></pre></div></figure><h1 id="3-自定义网络"><a href="#3-自定义网络" class="headerlink" title="3.自定义网络"></a>3.自定义网络</h1><h2 id="3-1-docker-network命令"><a href="#3-1-docker-network命令" class="headerlink" title="3.1 docker network命令"></a>3.1 docker network命令</h2><p>docker network：管理网络</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network COMMAND<span class="token comment">#选项</span>  connect     <span class="token comment">#将容器连接到网络</span>  create      <span class="token comment">#创建一个网络</span>  disconnect  <span class="token comment">#断开容器与网络的连接</span>  inspect     <span class="token comment">#在一个或多个网络上显示详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#列出网络</span>  prune       <span class="token comment">#删除所有未使用的网络</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个网络</span></code></pre></div></figure><ul><li>docker network connect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network connect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER<span class="token comment">#选项</span>      <span class="token parameter variable">--alias</span> strings           <span class="token comment">#为容器添加网络范围的别名</span>      --driver-opt strings      <span class="token comment">#网络的驱动程序选项</span>      <span class="token parameter variable">--ip</span> string               <span class="token comment">#IPv4地址</span>      <span class="token parameter variable">--ip6</span> string              <span class="token comment">#IPv6地址</span>      <span class="token parameter variable">--link</span> list               <span class="token comment">#将链接添加到另一个容器</span>      --link-local-ip strings   <span class="token comment">#为容器添加本地链接地址</span></code></pre></div></figure><ul><li>docker network create</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK<span class="token comment">#选项</span>      <span class="token parameter variable">--attachable</span>           <span class="token comment">#启用手动容器附件</span>      --aux-address map      <span class="token comment">#网络驱动程序使用的辅助IPv4或IPv6地址</span>      --config-from string   <span class="token comment">#从中复制配置的网络</span>      --config-only          <span class="token comment">#创建仅配置的网络</span>  -d, <span class="token parameter variable">--driver</span> string        <span class="token comment">#驱动程序来管理网络</span>      <span class="token parameter variable">--gateway</span> strings      <span class="token comment">#主子网的IPv4或IPv6网关</span>      <span class="token parameter variable">--ingress</span>              <span class="token comment">#创建群集路由网状网络</span>      <span class="token parameter variable">--internal</span>             <span class="token comment">#限制对网络的外部访问</span>      --ip-range strings     <span class="token comment">#从子范围分配容器ip</span>      --ipam-driver string   <span class="token comment">#IP地址管理驱动程序</span>      --ipam-opt map         <span class="token comment">#设置IPAM驱动程序特定选项</span>      <span class="token parameter variable">--ipv6</span>                 <span class="token comment">#启用IPv6网络</span>      <span class="token parameter variable">--label</span> list           <span class="token comment">#在网络上设置元数据</span>  -o, <span class="token parameter variable">--opt</span> map              <span class="token comment">#设置驱动程序特定选项</span>      <span class="token parameter variable">--scope</span> string         <span class="token comment">#控制网络范围</span>      <span class="token parameter variable">--subnet</span> strings       <span class="token comment">#代表网段的CIDR格式的子网</span></code></pre></div></figure><ul><li>docker network disconnect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network disconnect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER<span class="token comment">#选项</span>  -f, <span class="token parameter variable">--force</span>   <span class="token comment">#强制容器断开与网络的连接</span></code></pre></div></figure><ul><li>docker network inspect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK <span class="token punctuation">[</span>NETWORK<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>  -v, <span class="token parameter variable">--verbose</span>         <span class="token comment">#详细输出以进行诊断</span></code></pre></div></figure><ul><li>docker network ls</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network <span class="token function">ls</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如“ driver = bridge”）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示网络ID</span></code></pre></div></figure><ul><li>docker network prune</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network prune <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>      <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'until = &lt;timestamp>'）</span>  -f, <span class="token parameter variable">--force</span>           <span class="token comment">#不提示确认</span></code></pre></div></figure><ul><li>docker network rm</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network <span class="token function">rm</span> NETWORK <span class="token punctuation">[</span>NETWORK<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre></div></figure><h2 id="3-2-创建自定义网络"><a href="#3-2-创建自定义网络" class="headerlink" title="3.2 创建自定义网络"></a>3.2 创建自定义网络</h2><ul><li>创建自定义docker网络</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker network create -d bridge --subnet 10.0.0.0/8 --gateway 10.0.0.1 chsblogs-net</span>01c420b8d9b533d7597eeb3759a85458d0bb4814d4da0627a46f319ec186f35aroot@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME           DRIVER    SCOPE7bc11f045261   bridge         bridge    <span class="token builtin class-name">local</span>01c420b8d9b5   chsblogs-net   bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>           <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none           null      <span class="token builtin class-name">local</span></code></pre></div></figure><ul><li>使用自定义网络创建容器</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用自定义网络创建3个nginx容器</span>root@node10:~<span class="token comment"># docker run -d -p 80:80 --name nginx01 --net chsblogs-net nginx</span>588ee5c7e6ecbbaed82891d3b24e4f580e97e78bed5e9324a7ec2261a91a0e76root@node10:~<span class="token comment"># docker run -d -p 81:80 --name nginx02 --net chsblogs-net nginx</span>d92d07b3e6578c8c2ad49ea243b2e22f8e05464aa4aa4e1a908a47332847c787root@node10:~<span class="token comment"># docker run -d -p 82:80 --name nginx03 --net chsblogs-net nginx</span>d6efc960528a66cf997597f65fbf6a219a7368ac619f6649fbba2bd7ec266352<span class="token comment">#验证自定义网络容器之网络连接，通过容器IP和容器名称，都可以进行网络通信。</span>root@node10:~<span class="token comment"># docker exec -it 588ee5c7e6ec bash</span>root@588ee5c7e6ec:/<span class="token comment"># ping nginx02</span>PING nginx02 <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.093</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.126</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.150</span> ms<span class="token number">64</span> bytes from nginx02.chsblogs-net <span class="token punctuation">(</span><span class="token number">10.0</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.104</span> ms</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(5).Docker镜像仓库之Harbor</title>
    <link href="/2022/09/03/Container/Docker/docker05/"/>
    <url>/2022/09/03/Container/Docker/docker05/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Harbor简介"><a href="#1-Harbor简介" class="headerlink" title="1.Harbor简介"></a>1.Harbor简介</h1><p>​Harbor是VMware公司开源的企业级Docker Registry项目。Harbor提供了更好的性能和安全。它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能，具有Web管理功能，有了它之后能够很方便的管理容器镜像，搭配Jenkins使用很是方便。</p><p>VMware官方开源服务列表地址：<a href="https://github.com/vmware/">https://github.com/vmware/</a></p><p>Harbor官方Github地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><p>Harbor官方网址：<a href="https://goharbor.io/">https://goharbor.io/</a></p><h1 id="2-Harbor安装配置"><a href="#2-Harbor安装配置" class="headerlink" title="2.Harbor安装配置"></a>2.Harbor安装配置</h1><p>Harbor下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p>安装文档：<a href="https://goharbor.io/docs/2.5.0/">https://goharbor.io/docs/2.5.0/</a></p><h2 id="2-1-主机清单"><a href="#2-1-主机清单" class="headerlink" title="2.1 主机清单"></a>2.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>Docker版本</th><th>Docker-Compose版本</th><th>Harbor版本</th></tr></thead><tbody><tr><td>node14</td><td>192.168.1.14</td><td>Ubuntu20.04</td><td>20.10.17</td><td>1.29.2</td><td>v2.5.0</td></tr><tr><td>node15</td><td>192.168.1.15</td><td>Ubuntu20.04</td><td>20.10.17</td><td>1.29.2</td><td>v2.5.0</td></tr></tbody></table><h2 id="2-2-安装Docker"><a href="#2-2-安装Docker" class="headerlink" title="2.2 安装Docker"></a>2.2 安装Docker</h2><p>详见Docker安装文档：<a href="https://chsblogs.com/2022/08/30/Container/Docker/docker02/">https://chsblogs.com/2022/08/30/Container/Docker/docker02/</a></p><h2 id="2-3-下载Harbor安装包"><a href="#2-3-下载Harbor安装包" class="headerlink" title="2.3 下载Harbor安装包"></a>2.3 下载Harbor安装包</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:~<span class="token comment"># cd /usr/local/src/</span>root@node14:/usr/local/src<span class="token comment"># wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz</span>root@node14:/usr/local/src<span class="token comment"># ls</span>harbor-offline-installer-v2.5.0.tgz</code></pre></div></figure><h2 id="2-4-安装Docker-Compose"><a href="#2-4-安装Docker-Compose" class="headerlink" title="2.4 安装Docker-Compose"></a>2.4 安装Docker-Compose</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:/usr/local/src<span class="token comment"># apt update</span>root@node14:/usr/local/src<span class="token comment"># apt install -y python3-pip</span>root@node14:/usr/local/src<span class="token comment"># pip install docker-compose</span><span class="token comment">#这里有个报错->/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (1.26.12) or chardet (3.0.4) doesn't match a supported version!</span><span class="token comment">#  warnings.warn("urllib3 (&#123;&#125;) or chardet (&#123;&#125;) doesn't match a supported "</span><span class="token comment">#解决：</span>root@node14:/usr/local/src<span class="token comment"># pip uninstall -y urllib3</span>root@node14:/usr/local/src<span class="token comment"># pip uninstall chardet</span>root@node14:/usr/local/src<span class="token comment"># pip install requests</span>root@node14:/usr/local/src<span class="token comment"># docker-compose -v</span><span class="token function">docker-compose</span> version <span class="token number">1.29</span>.2, build unknown</code></pre></div></figure><h2 id="2-5-安装Harbor"><a href="#2-5-安装Harbor" class="headerlink" title="2.5 安装Harbor"></a>2.5 安装Harbor</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node14:/usr/local/src<span class="token comment"># tar -xvf harbor-offline-installer-v2.5.0.tgz</span>root@node14:/usr/local/src<span class="token comment"># cd harbor/</span>root@node14:/usr/local/src/harbor<span class="token comment"># cp harbor.yml.tmpl harbor.yml</span><span class="token comment">#更改配置</span>root@node14:/usr/local/src/harbor<span class="token comment"># vim harbor.yml</span>hostname: harbor.chsblogs.com<span class="token comment">#https:</span>  <span class="token comment"># https port for harbor, default is 443</span>  <span class="token comment">#port: 443</span>  <span class="token comment"># The path of cert and key files for nginx</span>  <span class="token comment">#certificate: /your/certificate/path</span>  <span class="token comment">#private_key: /your/private/key/path</span>harbor_admin_password: <span class="token number">123456</span><span class="token comment">#安装harbor</span>root@node14:/usr/local/src/harbor<span class="token comment"># ./install.sh</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Step <span class="token number">5</span><span class="token punctuation">]</span>: starting Harbor <span class="token punctuation">..</span>.Creating network <span class="token string">"harbor_harbor"</span> with the default driverCreating harbor-log <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-portal <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating redis         <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registryctl   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating registry      <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-db     <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-core   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating nginx             <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating harbor-jobservice <span class="token punctuation">..</span>. <span class="token keyword">done</span>✔ ----Harbor has been installed and started successfully.----</code></pre></div></figure><h2 id="2-6-访问测试"><a href="#2-6-访问测试" class="headerlink" title="2.6 访问测试"></a>2.6 访问测试</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220904235329135.png" alt="Harbor">  </p><h1 id="3-使用Harbor仓库上传下载镜像"><a href="#3-使用Harbor仓库上传下载镜像" class="headerlink" title="3.使用Harbor仓库上传下载镜像"></a>3.使用Harbor仓库上传下载镜像</h1><h2 id="3-1-配置Docker文件"><a href="#3-1-配置Docker文件" class="headerlink" title="3.1 配置Docker文件"></a>3.1 配置Docker文件</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置docker</span>root@node10:~<span class="token comment"># vim /etc/docker/daemon.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://x76gajt3.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://harbor.chsblogs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">#重启docker</span>root@node10:~<span class="token comment"># systemctl daemon-reload</span>root@node10:~<span class="token comment"># systemctl restart docker</span><span class="token comment">#登录harbor</span>root@node10:~<span class="token comment"># docker login harbor.chsblogs.com</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded</code></pre></div></figure><h2 id="3-2-上传下载镜像"><a href="#3-2-上传下载镜像" class="headerlink" title="3.2 上传下载镜像"></a>3.2 上传下载镜像</h2><ul><li>新建项目</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220905103205291.png" alt="baseimages"> </p><ul><li>镜像打tag</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker images | grep ubuntu | grep 20.04</span>ubuntu         <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBroot@node10:~<span class="token comment"># docker tag ubuntu:20.04 harbor.chsblogs.com/baseimages/ubuntu:20.04</span>root@node10:~<span class="token comment"># docker images | grep harbor.chsblogs.com/baseimages/ubuntu</span>harbor.chsblogs.com/baseimages/ubuntu   <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MB</code></pre></div></figure><ul><li>上传镜像至harbor</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Layer already exists <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><p><img src="/2022/09/03/Container/Docker/docker05/image-20220905104557900.png" alt="baseimages"> </p><ul><li>从harbor下载镜像</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置本地域名解析</span>root@node11:~<span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1 localhost<span class="token number">127.0</span>.1.1 node11<span class="token number">192.168</span>.1.14 harbor.chsblogs.com<span class="token comment">#配置docker</span>root@node11:~<span class="token comment"># cat /etc/docker/daemon.json </span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://x76gajt3.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://harbor.chsblogs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>root@node11:~<span class="token comment"># sudo systemctl daemon-reload</span>root@node11:~<span class="token comment"># sudo systemctl restart docker</span><span class="token comment">#下载镜像</span>root@node11:~<span class="token comment"># docker pull harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17</span>harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17: Pulling from baseimages/ubuntu7b1a6ab2e44d: Pull complete Digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17Status: Downloaded newer image <span class="token keyword">for</span> harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17harbor.chsblogs.com/baseimages/ubuntu@sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17<span class="token comment">#验证下载镜像</span>root@node11:~<span class="token comment"># docker images | grep ubuntu</span>harbor.chsblogs.com/baseimages/ubuntu   <span class="token operator">&lt;</span>none<span class="token operator">></span>     ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MB</code></pre></div></figure><h1 id="4-Harbor-v2-5-0-高可用部署"><a href="#4-Harbor-v2-5-0-高可用部署" class="headerlink" title="4.Harbor(v2.5.0)高可用部署"></a>4.Harbor(v2.5.0)高可用部署</h1><p>Harbor高可用可以解决单点故障问题，使用Haproxy+Keepalived配置Harbor高可用。</p><h2 id="4-1-主机清单"><a href="#4-1-主机清单" class="headerlink" title="4.1 主机清单"></a>4.1 主机清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统版本</th><th>角色</th></tr></thead><tbody><tr><td>node10</td><td>192.168.1.10</td><td>Ubuntu20.04</td><td>Docker客户端(上传镜像)</td></tr><tr><td>node12</td><td>192.168.1.12</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td></tr><tr><td>node13</td><td>192.168.1.13</td><td>Ubuntu20.04</td><td>Haproxy+Keepalived</td></tr><tr><td>node14</td><td>192.168.1.14</td><td>Ubuntu20.04</td><td>Harbor1</td></tr><tr><td>node15</td><td>192.168.1.15</td><td>Ubuntu20.04</td><td>Harbor2</td></tr></tbody></table><ul><li>VIP地址：192.168.1.66</li><li>域名：harbor.chsblogs.com</li></ul><h2 id="4-2-部署拓扑图"><a href="#4-2-部署拓扑图" class="headerlink" title="4.2 部署拓扑图"></a>4.2 部署拓扑图</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906102853032.png" alt="Harbor高可用部署拓扑图"></p><h2 id="4-3-安装配置Haproxy-Keepalived"><a href="#4-3-安装配置Haproxy-Keepalived" class="headerlink" title="4.3 安装配置Haproxy+Keepalived"></a>4.3 安装配置Haproxy+Keepalived</h2><h3 id="4-3-1-主机-node12-配置"><a href="#4-3-1-主机-node12-配置" class="headerlink" title="4.3.1 主机[node12]配置"></a>4.3.1 主机[node12]配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装keepalived+haproxy</span>root@node12:~<span class="token comment"># apt update &amp;&amp; apt install -y haproxy keepalived</span>root@node12:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/</span>root@node12:~<span class="token comment"># cd /etc/keepalived/</span>root@node12:/etc/keepalived<span class="token comment"># cp keepalived.conf.sample keepalived.conf</span><span class="token comment">#配置内核参数</span>root@node12:~<span class="token comment"># cat /etc/sysctl.conf </span><span class="token assign-left variable">net.ipv4.ip_nonlocal_bind</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>root@node12:~<span class="token comment"># sysctl -p</span><span class="token comment">#配置haproxy</span>root@node12:~<span class="token comment"># cat /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen STATUS  mode http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456listen HARBOR_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode tcp  balance <span class="token builtin class-name">source</span>  server harbor1 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server harbor2 <span class="token number">192.168</span>.1.15:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#配置keepalived</span>root@node12:~<span class="token comment"># cat /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>vrrp_script chk_haproxy <span class="token punctuation">&#123;</span>      script <span class="token string">"killall -0 haproxy"</span>      interval <span class="token number">2</span>      weight <span class="token parameter variable">-2</span>      fail <span class="token number">3</span>      rise <span class="token number">1</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">101</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>    track_script<span class="token punctuation">&#123;</span>      chk_haproxy    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="4-3-2-主机-node13-配置"><a href="#4-3-2-主机-node13-配置" class="headerlink" title="4.3.2 主机[node13]配置"></a>4.3.2 主机[node13]配置</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装keepalived+haproxy</span>root@node13:~<span class="token comment"># apt update &amp;&amp; apt install -y haproxy keepalived</span>root@node13:~<span class="token comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/</span>root@node13:~<span class="token comment"># cd /etc/keepalived/</span>root@node13:/etc/keepalived<span class="token comment"># cp keepalived.conf.sample keepalived.conf</span><span class="token comment">#配置内核参数</span>root@node13:~<span class="token comment"># cat /etc/sysctl.conf </span><span class="token assign-left variable">net.ipv4.ip_nonlocal_bind</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>root@node12:~<span class="token comment"># sysctl -p</span><span class="token comment">#配置haproxy</span>root@node13:~<span class="token comment"># cat /etc/haproxy/haproxy.cfg</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>listen STATUS  mode http  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:123456listen HARBOR_PORT_80  <span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.66:80  mode tcp  balance <span class="token builtin class-name">source</span>  server harbor1 <span class="token number">192.168</span>.1.14:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span>  server harbor2 <span class="token number">192.168</span>.1.15:80 check inter <span class="token number">3000</span> fall <span class="token number">3</span> rise <span class="token number">5</span><span class="token comment">#配置keepalived</span>root@node13:~<span class="token comment"># cat /etc/keepalived/keepalived.conf</span>global_defs <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>vrrp_script chk_haproxy <span class="token punctuation">&#123;</span>      script <span class="token string">"killall -0 haproxy"</span>      interval <span class="token number">2</span>      weight <span class="token parameter variable">-2</span>      fail <span class="token number">3</span>      rise <span class="token number">1</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface ens33    virtual_router_id <span class="token number">50</span>    nopreempt    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.66    <span class="token punctuation">&#125;</span>    track_script<span class="token punctuation">&#123;</span>      chk_haproxy    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="4-4-安装Harbor"><a href="#4-4-安装Harbor" class="headerlink" title="4.4 安装Harbor"></a>4.4 安装Harbor</h2><p>参考2.Harbor安装配置</p><h2 id="4-5-配置Harbor双向复制"><a href="#4-5-配置Harbor双向复制" class="headerlink" title="4.5 配置Harbor双向复制"></a>4.5 配置Harbor双向复制</h2><h3 id="4-5-1-主机-node14-配置"><a href="#4-5-1-主机-node14-配置" class="headerlink" title="4.5.1 主机[node14]配置"></a>4.5.1 主机[node14]配置</h3><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906220516516.png" alt="复制管理-新建规则"> </p><ul><li>仓库管理-新建目标</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221105045.png" alt="仓库管理-新建目标"> </p><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221231351.png" alt="复制管理-新建规则"> </p><h3 id="4-5-2-主机-node15-配置"><a href="#4-5-2-主机-node15-配置" class="headerlink" title="4.5.2 主机[node15]配置"></a>4.5.2 主机[node15]配置</h3><ul><li>新建项目</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906220516516.png" alt="新建项目"> </p><ul><li>仓库管理-新建目标</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221414917.png" alt="仓库管理-新建目标"> </p><ul><li>复制管理-新建规则</li></ul><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221512412.png" alt="复制管理-新建规则"> </p><h2 id="4-6-上传镜像测试"><a href="#4-6-上传镜像测试" class="headerlink" title="4.6 上传镜像测试"></a>4.6 上传镜像测试</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加域名解析</span>root@node10:~<span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1 localhost<span class="token number">127.0</span>.1.1 node10<span class="token number">192.168</span>.1.66 harbor.chsblogs.com<span class="token comment">#查看镜像</span>root@node10:~<span class="token comment"># docker images | grep harbor.chsblogs.com</span>harbor.chsblogs.com/baseimages/ubuntu     <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBharbor.chsblogs.com/baseimages/ubuntu     <span class="token number">18.04</span>      5a214d77f5d7   <span class="token number">11</span> months ago   <span class="token number">63</span>.1MB<span class="token comment">#上传镜像</span>root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Pushed <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><h2 id="4-7-验证Harbor镜像复制"><a href="#4-7-验证Harbor镜像复制" class="headerlink" title="4.7 验证Harbor镜像复制"></a>4.7 验证Harbor镜像复制</h2><p><img src="/2022/09/03/Container/Docker/docker05/image-20220906221839209.png" alt="Harbor镜像复制"> </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Linuxの学习笔记(大纲)</title>
    <link href="/2022/09/03/StudyNotes/Linux/"/>
    <url>/2022/09/03/StudyNotes/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="●-容器化"><a href="#●-容器化" class="headerlink" title="● 容器化"></a>● 容器化</h1><h2 id="◎-Docker"><a href="#◎-Docker" class="headerlink" title="◎ Docker"></a>◎ Docker</h2><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker01/">(1).Docker简介</a></p><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker02/">(2).Docker安装</a></p><p><a href="https://chsblogs.com/2022/08/30/Container/Docker/docker03/">(3).Docker命令</a></p><p><a href="https://chsblogs.com/2022/08/31/Container/Docker/docker04/">(4).Docker构建镜像</a></p><p><a href="https://chsblogs.com/2022/09/03/Container/Docker/docker05/">(5).Docker镜像仓库之Harbor</a></p><p><a href="https://chsblogs.com/2022/09/06/Container/Docker/docker06/">(6).Docker网络</a></p><p><a href="https://chsblogs.com/2022/09/07/Container/Docker/docker07/">(7).Docker资源限制</a></p><p><a href="https://chsblogs.com/2022/09/07/Container/Docker/docker08/">(8).Docker-Compose</a></p><h2 id="◎-K8s"><a href="#◎-K8s" class="headerlink" title="◎ K8s"></a>◎ K8s</h2><h1 id="●-分布式文件系统"><a href="#●-分布式文件系统" class="headerlink" title="● 分布式文件系统"></a>● 分布式文件系统</h1><h2 id="◎-Ceph"><a href="#◎-Ceph" class="headerlink" title="◎ Ceph"></a>◎ Ceph</h2><h1 id="●-日志系统"><a href="#●-日志系统" class="headerlink" title="● 日志系统"></a>● 日志系统</h1><h2 id="◎-ELK"><a href="#◎-ELK" class="headerlink" title="◎ ELK"></a>◎ ELK</h2><p><a href="https://chsblogs.com/2023/03/26/Log/ELK/elk01/">(1).ELK-Elasticsearch简介及集群部署</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk02/">(2).ELK-Logstash部署及使用</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk03/">(3).ELK-Kibana部署及使用</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk04/">(4).ELK-基于Logstash收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk05/">(5).ELK-Logstash基于Redis收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk06/">(6).ELK-Logstash基于Kafka收集日志</a></p><p><a href="https://chsblogs.com/2023/04/05/Log/ELK/elk07/">(7).ELK-FileBeat部署及使用</a></p><h1 id="●-消息中间件"><a href="#●-消息中间件" class="headerlink" title="● 消息中间件"></a>● 消息中间件</h1><h2 id="◎-RabbitMQ"><a href="#◎-RabbitMQ" class="headerlink" title="◎ RabbitMQ"></a>◎ RabbitMQ</h2><p><a href="https://chsblogs.com/2023/03/23/MQ/RabbitMQ/rabbitmq01/">(1).RabbitMQ简介及安装</a></p><h2 id="◎-ActiveMQ"><a href="#◎-ActiveMQ" class="headerlink" title="◎ ActiveMQ"></a>◎ ActiveMQ</h2><h2 id="◎-Kafka"><a href="#◎-Kafka" class="headerlink" title="◎ Kafka"></a>◎ Kafka</h2><p><a href="https://chsblogs.com/2023/03/25/MQ/Kafka/kafka01/">(1).Kafka简介及安装</a></p><h1 id="●-微服务"><a href="#●-微服务" class="headerlink" title="● 微服务"></a>● 微服务</h1><h2 id="◎-Zookeeper"><a href="#◎-Zookeeper" class="headerlink" title="◎ Zookeeper"></a>◎ Zookeeper</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Zookeeper/zookeeper01/">(1).Zookeeper简介及安装</a></p><h2 id="◎-Dubbo"><a href="#◎-Dubbo" class="headerlink" title="◎ Dubbo"></a>◎ Dubbo</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Dubbo/dubbo01/">(1).Dubbo简介及安装</a></p><h2 id="◎-Nexus"><a href="#◎-Nexus" class="headerlink" title="◎ Nexus"></a>◎ Nexus</h2><p><a href="https://chsblogs.com/2023/03/25/Service/Nexus/nexus01/">(1).Nexus简介及安装</a></p><h1 id="●-持续集成-x2F-持续部署"><a href="#●-持续集成-x2F-持续部署" class="headerlink" title="● 持续集成&#x2F;持续部署"></a>● 持续集成&#x2F;持续部署</h1><h2 id="◎-Git"><a href="#◎-Git" class="headerlink" title="◎ Git"></a>◎ Git</h2><p><a href="https://chsblogs.com/2023/03/12/CI%E3%81%AECD/Git/git01/">(1).Git常用命令</a></p><h2 id="◎-Jenkins-x2F-Gitlab-x2F-SonarQube"><a href="#◎-Jenkins-x2F-Gitlab-x2F-SonarQube" class="headerlink" title="◎ Jenkins&#x2F;Gitlab&#x2F;SonarQube"></a>◎ Jenkins&#x2F;Gitlab&#x2F;SonarQube</h2><p><a href="https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg01/">(1).CI&#x2F;CD-GitLab简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/12/CI%E3%81%AECD/JG/jg02/">(2).CI&#x2F;CD-Jenkins简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/19/CI%E3%81%AECD/JG/jg03/">(3).CI&#x2F;CD-SonarQube简介及安装</a></p><p><a href="https://chsblogs.com/2023/03/19/CI%E3%81%AECD/JG/jg04/">(4).CI&#x2F;CD-代码部署案例</a></p><h1 id="●-监控系统"><a href="#●-监控系统" class="headerlink" title="● 监控系统"></a>● 监控系统</h1><h2 id="◎-Zabbix"><a href="#◎-Zabbix" class="headerlink" title="◎ Zabbix"></a>◎ Zabbix</h2><h2 id="◎-Prometheus"><a href="#◎-Prometheus" class="headerlink" title="◎ Prometheus"></a>◎ Prometheus</h2><h2 id="◎-Grafana"><a href="#◎-Grafana" class="headerlink" title="◎ Grafana"></a>◎ Grafana</h2><h1 id="●-关系型数据库"><a href="#●-关系型数据库" class="headerlink" title="● 关系型数据库"></a>● 关系型数据库</h1><h2 id="◎-MySQL"><a href="#◎-MySQL" class="headerlink" title="◎ MySQL"></a>◎ MySQL</h2><h2 id="◎-PostgreSQL"><a href="#◎-PostgreSQL" class="headerlink" title="◎ PostgreSQL"></a>◎ PostgreSQL</h2><h1 id="●-非关系型数据库"><a href="#●-非关系型数据库" class="headerlink" title="● 非关系型数据库"></a>● 非关系型数据库</h1><h2 id="◎-Memcached"><a href="#◎-Memcached" class="headerlink" title="◎ Memcached"></a>◎ Memcached</h2><p><a href="https://chsblogs.com/2023/03/06/NoSQL/Memcached/memcached01/">(1).Memcached简介及安装</a></p><h2 id="◎-Redis"><a href="#◎-Redis" class="headerlink" title="◎ Redis"></a>◎ Redis</h2><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis01/">(1).Redis简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis02/">(2).Redis配置详解</a></p><p><a href="https://chsblogs.com/2023/02/16/NoSQL/Redis/redis03/">(3).Redis持久化</a></p><p><a href="https://chsblogs.com/2023/02/18/NoSQL/Redis/redis04/">(4).Redis主从复制</a></p><p><a href="https://chsblogs.com/2023/02/18/NoSQL/Redis/redis05/">(5).Redis哨兵机制</a></p><p><a href="https://chsblogs.com/2023/02/19/NoSQL/Redis/redis06/">(6).Redis之Cluster集群</a></p><h1 id="●-负载均衡"><a href="#●-负载均衡" class="headerlink" title="● 负载均衡"></a>● 负载均衡</h1><h2 id="◎-LVS"><a href="#◎-LVS" class="headerlink" title="◎ LVS"></a>◎ LVS</h2><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs01/">(1).LVS工作模式</a></p><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs02/">(2).LVS调度算法</a></p><p><a href="https://chsblogs.com/2023/02/02/LB/LVS/lvs03/">(3).LVS实战案例</a></p><h2 id="◎-HAproxy"><a href="#◎-HAproxy" class="headerlink" title="◎ HAproxy"></a>◎ HAproxy</h2><p><a href="https://chsblogs.com/2023/02/09/LB/HAProxy/haproxy01/">(1).HAProxy简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/10/LB/HAProxy/haproxy02/">(2).HAProxy基础配置详解</a></p><p><a href="https://chsblogs.com/2023/02/12/LB/HAProxy/haproxy03/">(3).HAProxy调度算法</a></p><p><a href="https://chsblogs.com/2023/02/14/LB/HAProxy/haproxy04/">(4).HAProxy高级功能及配置</a></p><p><a href="https://chsblogs.com/2023/02/15/LB/HAProxy/haproxy05/">(5).HAProxy之ACL配置</a></p><h2 id="◎-Nginx"><a href="#◎-Nginx" class="headerlink" title="◎ Nginx"></a>◎ Nginx</h2><h1 id="●-高可用"><a href="#●-高可用" class="headerlink" title="● 高可用"></a>● 高可用</h1><h2 id="◎-Keepalived"><a href="#◎-Keepalived" class="headerlink" title="◎ Keepalived"></a>◎ Keepalived</h2><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived01/">(1).Keepalived简介及安装</a></p><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived02/">(2).Keepalived配置说明</a></p><p><a href="https://chsblogs.com/2023/02/06/HA/Keepalived/keepalived03/">(3).Keepalived企业应用</a></p><h1 id="●-Web服务"><a href="#●-Web服务" class="headerlink" title="● Web服务"></a>● Web服务</h1><h2 id="◎-Tomcat"><a href="#◎-Tomcat" class="headerlink" title="◎ Tomcat"></a>◎ Tomcat</h2><p><a href="https://chsblogs.com/2023/02/28/Web/Tomcat/tomcat01/">(1).Tomcat之JDK安装</a></p><p><a href="https://chsblogs.com/2023/03/01/Web/Tomcat/tomcat02/">(2).Tomcat安装及配置</a></p><p><a href="https://chsblogs.com/2023/03/02/Web/Tomcat/tomcat03/">(3).Tomcat集群部署</a></p><p><a href="https://chsblogs.com/2023/03/02/Web/Tomcat/tomcat04/">(4).Tomcat性能优化</a></p><h2 id="◎-Apache"><a href="#◎-Apache" class="headerlink" title="◎ Apache"></a>◎ Apache</h2><h1 id="●-虚拟化"><a href="#●-虚拟化" class="headerlink" title="● 虚拟化"></a>● 虚拟化</h1><h2 id="◎-KVM"><a href="#◎-KVM" class="headerlink" title="◎ KVM"></a>◎ KVM</h2><h1 id="●-VPN服务"><a href="#●-VPN服务" class="headerlink" title="● VPN服务"></a>● VPN服务</h1><h2 id="◎-OpenVPN"><a href="#◎-OpenVPN" class="headerlink" title="◎ OpenVPN"></a>◎ OpenVPN</h2><h1 id="●-网络服务"><a href="#●-网络服务" class="headerlink" title="● 网络服务"></a>● 网络服务</h1><h2 id="◎-NFS"><a href="#◎-NFS" class="headerlink" title="◎ NFS"></a>◎ NFS</h2><h2 id="◎-Samba"><a href="#◎-Samba" class="headerlink" title="◎ Samba"></a>◎ Samba</h2><h2 id="◎-FTP"><a href="#◎-FTP" class="headerlink" title="◎ FTP"></a>◎ FTP</h2><h1 id="●-集中管理工具"><a href="#●-集中管理工具" class="headerlink" title="● 集中管理工具"></a>● 集中管理工具</h1><h2 id="◎-Ansible"><a href="#◎-Ansible" class="headerlink" title="◎ Ansible"></a>◎ Ansible</h2><h1 id="●-Linux防火墙"><a href="#●-Linux防火墙" class="headerlink" title="● Linux防火墙"></a>● Linux防火墙</h1><h2 id="◎-Iptables"><a href="#◎-Iptables" class="headerlink" title="◎ Iptables"></a>◎ Iptables</h2><h1 id="●-Linux操作系统"><a href="#●-Linux操作系统" class="headerlink" title="● Linux操作系统"></a>● Linux操作系统</h1><h2 id="◎-CentOS"><a href="#◎-CentOS" class="headerlink" title="◎ CentOS"></a>◎ CentOS</h2><p><a href="https://chsblogs.com/2022/08/28/Linux/CentOS/CentosInstall/">(1).CentOS系统安装</a></p><p><a href="https://chsblogs.com/2022/08/28/Linux/CentOS/CentosBase/">(2).CentOS基础配置</a></p><h2 id="◎-Ubuntu"><a href="#◎-Ubuntu" class="headerlink" title="◎ Ubuntu"></a>◎ Ubuntu</h2><p><a href="https://chsblogs.com/2022/08/28/Linux/Ubuntu/UbuntuInstall/">(1).Ubuntu系统安装</a></p><p><a href="https://chsblogs.com/2022/08/28/Linux/Ubuntu/UbuntuBase/">(2).Ubuntu基础配置</a></p><h2 id="◎-Linux基本命令"><a href="#◎-Linux基本命令" class="headerlink" title="◎ Linux基本命令"></a>◎ Linux基本命令</h2><h2 id="◎-文本处理三剑客"><a href="#◎-文本处理三剑客" class="headerlink" title="◎ 文本处理三剑客"></a>◎ 文本处理三剑客</h2><h2 id="◎-软件管理"><a href="#◎-软件管理" class="headerlink" title="◎ 软件管理"></a>◎ 软件管理</h2><h2 id="◎-文件系统"><a href="#◎-文件系统" class="headerlink" title="◎ 文件系统"></a>◎ 文件系统</h2><h2 id="◎-Linux进程"><a href="#◎-Linux进程" class="headerlink" title="◎ Linux进程"></a>◎ Linux进程</h2><h2 id="◎-内核管理"><a href="#◎-内核管理" class="headerlink" title="◎ 内核管理"></a>◎ 内核管理</h2><h2 id="◎-加密安全"><a href="#◎-加密安全" class="headerlink" title="◎ 加密安全"></a>◎ 加密安全</h2><h2 id="◎-时间服务"><a href="#◎-时间服务" class="headerlink" title="◎ 时间服务"></a>◎ 时间服务</h2><h2 id="◎-自动化部署"><a href="#◎-自动化部署" class="headerlink" title="◎ 自动化部署"></a>◎ 自动化部署</h2><h2 id="◎-DNS服务"><a href="#◎-DNS服务" class="headerlink" title="◎ DNS服务"></a>◎ DNS服务</h2><h2 id="◎-Shell"><a href="#◎-Shell" class="headerlink" title="◎ Shell"></a>◎ Shell</h2>]]></content>
    
    
    <categories>
      
      <category>StudyNotes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(4).Docker构建镜像</title>
    <link href="/2022/08/31/Container/Docker/docker04/"/>
    <url>/2022/08/31/Container/Docker/docker04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="1.Dockerfile"></a>1.Dockerfile</h1><h2 id="1-1-Dockerfile简介"><a href="#1-1-Dockerfile简介" class="headerlink" title="1.1 Dockerfile简介"></a>1.1 Dockerfile简介</h2><p>​Dockerfile是一个用来构建镜像的文本文件，由一行行命令语句组成，并且支持以 # 开头的注释行。一般的。Dockerfile分为四部分：基础镜像信息、维护者信息、镜像操作指令、容器启动时执行指令。</p><h2 id="1-2-Dockerfile指令"><a href="#1-2-Dockerfile指令" class="headerlink" title="1.2 Dockerfile指令"></a>1.2 Dockerfile指令</h2><h3 id="1-2-1-FROM"><a href="#1-2-1-FROM" class="headerlink" title="1.2.1 FROM"></a>1.2.1 FROM</h3><p>FROM：指定构建新镜像时使用的基础镜像，通常必须是Dockerfile除了注释之外的第一行，但其前面也可以出现ARG指令。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>FROM <span class="token punctuation">[</span>--platform<span class="token operator">=</span><span class="token operator">&lt;</span>platform<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>image<span class="token operator">></span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>digest<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>AS <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>示例：FROM centos:7.8.2003</code></pre></div></figure><h3 id="1-2-2-RUN"><a href="#1-2-2-RUN" class="headerlink" title="1.2.2 RUN"></a>1.2.2 RUN</h3><p>RUN：基于FROM中定义的镜像为基础环境运行指定命令，并提交结果，生成的镜像将用于Dockerfile中的下一步。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：有2种形式<span class="token comment">#shell形式,非交互形式</span>RUN <span class="token operator">&lt;</span>command<span class="token operator">></span><span class="token comment">#exec执行</span>RUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span>示例：RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /etc/nginxRUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-3-CMD"><a href="#1-2-3-CMD" class="headerlink" title="1.2.3 CMD"></a>1.2.3 CMD</h3><p>CMD：为正在执行的容器提供默认值，默认值可以包括可执行文件，也可以省略可执行文件。Dockerfile中只能有一条CMD指令。如果列出多个CMD，则只有最后一个CMD生效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：Dockerfile中只能有一条CMD指令。如果列出多个CMD，则只有最后一个CMD生效。CMD <span class="token punctuation">[</span><span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>作为ENTRYPOINT 的默认参数<span class="token punctuation">)</span>CMD <span class="token builtin class-name">command</span> param1 param2<span class="token punctuation">(</span>执行shell<span class="token punctuation">)</span>示例：CMD <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">]</span></code></pre></div></figure><h3 id="1-2-4-LABEL"><a href="#1-2-4-LABEL" class="headerlink" title="1.2.4 LABEL"></a>1.2.4 LABEL</h3><p>LABEL：将元数据添加到镜像。标签是键值对。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：LABEL <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.示例：LABEL <span class="token string">"blogs"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>LABEL <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.2.0"</span></code></pre></div></figure><h3 id="1-2-5-EXPOSE"><a href="#1-2-5-EXPOSE" class="headerlink" title="1.2.5 EXPOSE"></a>1.2.5 EXPOSE</h3><p>EXPOSE：指定容器暴露的端口，支持TCP、UDP协议</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：EXPOSE <span class="token operator">&lt;</span>port<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>port<span class="token operator">></span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>示例：EXPOSE <span class="token number">80</span> <span class="token number">443</span>EXPOSE <span class="token number">8080</span></code></pre></div></figure><h3 id="1-2-6-ENV"><a href="#1-2-6-ENV" class="headerlink" title="1.2.6 ENV"></a>1.2.6 ENV</h3><p>ENV：设置容器环境变量</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ENV <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.示例：ENV JAVA_HOME /usr/local/srcENV JRE_HOME <span class="token variable">$JAVA_HOME</span>/jreENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin</code></pre></div></figure><h3 id="1-2-7-ADD"><a href="#1-2-7-ADD" class="headerlink" title="1.2.7 ADD"></a>1.2.7 ADD</h3><p>ADD：ADD指令从＜src＞复制新文件、目录或远程文件URL，并将它们添加到路径＜dest＞的映像文件系统中。会自动解压tar.gz格式的压缩包，不会自动解压zip。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ADD <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>src<span class="token operator">></span><span class="token punctuation">..</span>. <span class="token operator">&lt;</span>dest<span class="token operator">></span>ADD <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">"&lt;src>"</span>,<span class="token punctuation">..</span>. <span class="token string">"&lt;dest>"</span><span class="token punctuation">]</span>示例：ADD jdk-8u341-linux-x64.tar.gz /usr/local/src</code></pre></div></figure><h3 id="1-2-8-COPY"><a href="#1-2-8-COPY" class="headerlink" title="1.2.8 COPY"></a>1.2.8 COPY</h3><p>COPY：从＜src＞复制新文件或目录，并将它们添加到路径＜dest＞的容器文件系统中。不会解压任何压缩。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：COPY <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>src<span class="token operator">></span><span class="token punctuation">..</span>. <span class="token operator">&lt;</span>dest<span class="token operator">></span>COPY <span class="token punctuation">[</span>--chown<span class="token operator">=</span><span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">"&lt;src>"</span>,<span class="token punctuation">..</span>. <span class="token string">"&lt;dest>"</span><span class="token punctuation">]</span>示例：COPY jdk-8u341-linux-x64.tar.gz /usr/local/src</code></pre></div></figure><h3 id="1-2-9-ENTRYPOINT"><a href="#1-2-9-ENTRYPOINT" class="headerlink" title="1.2.9 ENTRYPOINT"></a>1.2.9 ENTRYPOINT</h3><p>ENTRYPOINT：用于定义容器在启动时候默认执行的命令或者脚本，如果是和CMD命令混合使用的时候，会将CMD的命令当做参数传递给ENTRYPOINT后面的脚本，可以在脚本中对参数做判断并相应的容器初始化操作。Dockerfile中只能有一条ENTRYPOINT指令。如果列出多个ENTRYPOINT，则只有最后一个ENTRYPOINT生效。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>exec格式，首选<span class="token punctuation">)</span>ENTRYPOINT <span class="token builtin class-name">command</span> param1 param2<span class="token punctuation">(</span>shell形式<span class="token punctuation">)</span>示例：FROM ubuntuENTRYPOINT <span class="token punctuation">[</span><span class="token string">"top"</span>, <span class="token string">"-b"</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"top"</span>, <span class="token string">"-b"</span>, <span class="token string">"-c"</span><span class="token punctuation">]</span>CMD <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">]</span>注意：<span class="token function">docker</span> run命令中指定的参数将附加在ENTRYPOINT中的所有元素之后，并将覆盖使用CMD指定的所有元素。</code></pre></div></figure><h3 id="1-2-10-VOLUME"><a href="#1-2-10-VOLUME" class="headerlink" title="1.2.10 VOLUME"></a>1.2.10 VOLUME</h3><p>VOLUME：创建一个具有指定名称的挂载点，并将其标记为保存来自本机主机或其他容器的外部挂载卷。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：VOLUME <span class="token punctuation">[</span><span class="token string">"/data"</span><span class="token punctuation">]</span>示例：FROM ubuntuRUN <span class="token function">mkdir</span> /myvolRUN <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">></span> /myvol/greetingVOLUME /myvol</code></pre></div></figure><h3 id="1-2-11-USER"><a href="#1-2-11-USER" class="headerlink" title="1.2.11 USER"></a>1.2.11 USER</h3><p>USER：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：<span class="token environment constant">USER</span> <span class="token operator">&lt;</span>user<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>group<span class="token operator">></span><span class="token punctuation">]</span><span class="token environment constant">USER</span> <span class="token operator">&lt;</span><span class="token environment constant">UID</span><span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>GID<span class="token operator">></span><span class="token punctuation">]</span>示例：<span class="token environment constant">USER</span> nginx注意：使用<span class="token environment constant">USER</span>指定用户后，Dockerfile中其后命令都是用该用户和组。</code></pre></div></figure><h3 id="1-2-12-WORKDIR"><a href="#1-2-12-WORKDIR" class="headerlink" title="1.2.12 WORKDIR"></a>1.2.12 WORKDIR</h3><p>WORKDIR：为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：WORKDIR /path/to/workdir示例：WORKDIR /a    <span class="token comment">#工作目录/a</span>WORKDIR b     <span class="token comment">#工作目录/a/b</span>WORKDIR c     <span class="token comment">#工作目录/a/b/c</span></code></pre></div></figure><h3 id="1-2-13-ARG"><a href="#1-2-13-ARG" class="headerlink" title="1.2.13 ARG"></a>1.2.13 ARG</h3><p>ARG：定义一个变量。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ARG <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>default value<span class="token operator">></span><span class="token punctuation">]</span>示例1：ARG <span class="token assign-left variable">user</span><span class="token operator">=</span>www示例2：FROM centos:7.8.2003ARG parameterRUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release <span class="token operator">&amp;&amp;</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token variable">$parameter</span>EXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"nginx"</span>,<span class="token string">"-g"</span>,<span class="token string">"daemon off;"</span><span class="token punctuation">]</span><span class="token comment">#灵活传参</span><span class="token function">docker</span> build --build-arg <span class="token assign-left variable">parameter</span><span class="token operator">=</span>nginx <span class="token builtin class-name">.</span></code></pre></div></figure><h3 id="1-2-14-ONBUILD"><a href="#1-2-14-ONBUILD" class="headerlink" title="1.2.14 ONBUILD"></a>1.2.14 ONBUILD</h3><p>ONBUILD：特殊的指令，它后面跟的是其它指令，比如<code>RUN``COPY</code>等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">用法：ONBUILD <span class="token operator">&lt;</span>INSTRUCTION<span class="token operator">></span>示例：ONBUILD ADD <span class="token builtin class-name">.</span> /app/srcONBUILD RUN /usr/local/bin/python-build <span class="token parameter variable">--dir</span> /app/src</code></pre></div></figure><h1 id="2-构建Tomcat业务镜像"><a href="#2-构建Tomcat业务镜像" class="headerlink" title="2.构建Tomcat业务镜像"></a>2.构建Tomcat业务镜像</h1><p>​基于官方提供的centos、debian、ubuntu、alpine等基础镜像构建JDK，然后在基于构建的JDK镜像构建Tomcat业务镜像。</p><h2 id="2-1-构建centos基础镜像"><a href="#2-1-构建centos基础镜像" class="headerlink" title="2.1 构建centos基础镜像"></a>2.1 构建centos基础镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:/opt<span class="token comment"># mkdir -pv /opt/dockerfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,/system/&#123;centos,ubuntu,debian,alpine&#125;&#125;</span>root@node10:~<span class="token comment"># cd /opt/dockerfile/system/centos/</span>root@node10:/opt/dockerfile/system/centos<span class="token comment"># vim Dockerfile</span><span class="token comment"># CentOS:7.9.2009 Base Image</span>FROM centos:7.9.2009LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> ntpdate telnetRUN <span class="token function">groupadd</span> www <span class="token parameter variable">-g</span> <span class="token number">2022</span> <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> www <span class="token parameter variable">-u</span> <span class="token number">2022</span> <span class="token parameter variable">-g</span> www<span class="token comment">#构建centos基础镜像</span>root@node10:/opt/dockerfile/system/centos<span class="token comment"># docker build -t centos-base:v1 .</span></code></pre></div></figure><h2 id="2-2-基于centos-base-v1镜像构建JDK镜像"><a href="#2-2-基于centos-base-v1镜像构建JDK镜像" class="headerlink" title="2.2 基于centos-base:v1镜像构建JDK镜像"></a>2.2 基于centos-base:v1镜像构建JDK镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:~<span class="token comment"># cd /opt/dockerfile/web/jdk/</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># vim Dockerfile</span>FROM centos-base:v1LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD jdk-8u341-linux-x64.tar.gz /usr/local/src/RUN <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /usr/local/src/jdk1.8.0_341 /usr/local/jdkADD profile /etc/profileENV JAVA_HOME /usr/local/jdkENV JRE_HOME <span class="token variable">$JAVA_HOME</span>/jreENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/:<span class="token variable">$JRE_HOME</span>/lib/ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/binRUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/localtime <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token comment">#准备JDK包和profile文件</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── jdk-8u341-linux-x64.tar.gz└── profile<span class="token number">0</span> directories, <span class="token number">3</span> files<span class="token comment">#构建JDK镜像</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker build -t jdk-base:v8.341 .</span><span class="token comment">#验证JDK</span>root@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker images | grep jdk</span>jdk-base      v8.341     8d86f86bef92   <span class="token number">7</span> hours ago     930MBroot@node10:/opt/dockerfile/web/jdk<span class="token comment"># docker run -it 8d86f86bef92 bash</span><span class="token punctuation">[</span>root@c487eda328ef /<span class="token punctuation">]</span><span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h2 id="2-3-基于JDK镜像构建Tomcat-9-Base镜像"><a href="#2-3-基于JDK镜像构建Tomcat-9-Base镜像" class="headerlink" title="2.3 基于JDK镜像构建Tomcat 9 Base镜像"></a>2.3 基于JDK镜像构建Tomcat 9 Base镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment">#</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># vim Dockerfile</span><span class="token comment">#Tomcat Base Image</span>FROM jdk-base:v8.341LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ENV TZ <span class="token string">"Asia/Shanghai"</span>ENV <span class="token environment constant">LANG</span> en_US.UTF-8ENV <span class="token environment constant">TERM</span> termENV TOMCAT_MAJOR_VERSION <span class="token number">9</span>ENV TOMCAT_MINOR_VERSION <span class="token number">9.0</span>.65ENV CATALINA_HOME /apps/tomcatENV APP_DIR <span class="token variable">$&#123;CATALINA_HOME&#125;</span>/webappsRUN <span class="token function">mkdir</span> /appsADD apache-tomcat-9.0.65.tar.gz /appsRUN <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/apache-tomcat-9.0.65 /apps/tomcat<span class="token comment">#准备Tomcat包</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── apache-tomcat-9.0.65.tar.gz└── Dockerfile<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建Tomcat镜像</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># docker build -t tomcat-base:v9.0.65 .</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-9.0.65<span class="token comment"># docker images | grep tomcat</span>tomcat-base   v9.0.65    93c3e152f847   <span class="token number">5</span> minutes ago   946MB</code></pre></div></figure><h2 id="2-4-基于tomcat-base-v9-0-65构建业务镜像"><a href="#2-4-基于tomcat-base-v9-0-65构建业务镜像" class="headerlink" title="2.4 基于tomcat-base:v9.0.65构建业务镜像"></a>2.4 基于tomcat-base:v9.0.65构建业务镜像</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建tomcat-app1目录，编写Dockerfile文件</span>root@node10:/opt/dockerfile/web/tomcat<span class="token comment"># mkdir tomcat-app1</span>root@node10:/opt/dockerfile/web/tomcat<span class="token comment"># cd tomcat-app1/</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># vim Dockerfile</span><span class="token comment">#tomcat app1</span>FROM tomcat-base:v9.0.65LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD run_tomcat.sh /apps/tomcat/bin/run_start.shADD server.xml /apps/tomcat/conf/server.xmlADD myapp.tar.gz /data/tomcat/webappsRUN <span class="token function">chown</span> www.www /data/ /apps/ <span class="token parameter variable">-R</span>EXPOSE <span class="token number">8080</span> <span class="token number">8443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/tomcat/bin/run_start.sh"</span><span class="token punctuation">]</span><span class="token comment">#自定义myapp页面</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># mkdir myapp</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># echo "&lt;h1>tomcat web app1&lt;/h1>" > myapp/index.html</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># cat myapp/index.html </span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>tomcat web app<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># tar -czvf myapp.tar.gz myapp/</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker cp 68af9479e007:/apps/tomcat/conf/server.xml ./</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># vim server.xml #更改tomcat路径</span>     <span class="token operator">&lt;</span>Host <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"localhost"</span>  <span class="token assign-left variable">appBase</span><span class="token operator">=</span><span class="token string">"/data/tomcat/webapps"</span> <span class="token assign-left variable">unpackWARs</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">autoDeploy</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token comment">#容器启动脚本</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># cat run_tomcat.sh </span><span class="token comment">#!/bin/bash</span><span class="token function">su</span> - www <span class="token parameter variable">-c</span> <span class="token string">"/apps/tomcat/bin/catalina.sh start"</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /etc/hostsroot@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># chmod +x run_tomcat.sh</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── myapp├── myapp.tar.gz├── run_tomcat.sh└── server.xml<span class="token number">1</span> directory, <span class="token number">4</span> files<span class="token comment">#构建tomcat-app1镜像</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker build -t tomcat-app1:v1 .</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker images | grep tomcat-app1</span>tomcat-app1   v1         19c9361f2568   <span class="token number">21</span> seconds ago      962MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># docker run -d -p 8080:8080 tomcat-app1:v1</span>086bd62738a1131c8538a21b4786df739aba058c0a65f16d639322102aff9e47<span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/web/tomcat/tomcat-app1<span class="token comment"># curl http://192.168.1.10:8080/myapp/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>tomcat web app<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h1 id="3-构建Haproxy镜像"><a href="#3-构建Haproxy镜像" class="headerlink" title="3.构建Haproxy镜像"></a>3.构建Haproxy镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile<span class="token comment"># mkdir haproxy</span>root@node10:/opt/dockerfile<span class="token comment"># cd haproxy/</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># vim Dockerfile</span><span class="token comment">#Haproxy Base Image</span>FROM centos-base:v1LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>ADD lua-5.4.4.tar.gz /usr/local/src/ADD haproxy-2.1.12.tar.gz /usr/local/src/RUN <span class="token builtin class-name">cd</span> /usr/local/src/lua-5.4.4/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> all <span class="token builtin class-name">test</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc openssl-devel pcre-devel systemd-devel <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /usr/local/src/haproxy-2.1.12/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86_64 <span class="token assign-left variable">TARGET</span><span class="token operator">=</span>linux-glibc <span class="token assign-left variable">USE_PCRE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_OPENSSL</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_ZLIB</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_SYSTEMD</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_LUA</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">LUA_INC</span><span class="token operator">=</span>/usr/local/src/lua-5.4.4/src/ <span class="token assign-left variable">LUA_LIB</span><span class="token operator">=</span>/usr/local/src/lua-5.4.4/src/ <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/apps/haproxy <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /apps/haproxy/sbin/haproxy /usr/sbin/RUN <span class="token function">mkdir</span> /var/lib/haproxy <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-d</span> /var/lib/haproxy haproxyADD haproxy.cfg /etc/haproxy/ADD run_haproxy.sh /usr/binRUN <span class="token function">chmod</span> +x /usr/bin/run_haproxy.shEXPOSE <span class="token number">80</span> <span class="token number">9999</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/bin/run_haproxy.sh"</span><span class="token punctuation">]</span><span class="token comment">#haproxy.cfg配置文件</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># cat haproxy.cfg </span>global    log         <span class="token number">127.0</span>.0.1 local2    <span class="token function">chroot</span>      /apps/haproxy    stats socket /var/lib/haproxy/haproxy.sock mode <span class="token number">600</span> level admin    pidfile     /var/run/haproxy.pid    maxconn     <span class="token number">4000</span>    user        haproxy    group       haproxy    daemon    stats socket /var/lib/haproxy/statsdefaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except <span class="token number">127.0</span>.0.0/8    option                  redispatch    retries                 <span class="token number">3</span>    <span class="token function">timeout</span> http-request    10s    <span class="token function">timeout</span> queue           1m    <span class="token function">timeout</span> connect         10s    <span class="token function">timeout</span> client          1m    <span class="token function">timeout</span> server          1m    <span class="token function">timeout</span> http-keep-alive 10s    <span class="token function">timeout</span> check           10s    maxconn                 <span class="token number">3000</span>listen stats  mode http  <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:9999  stats <span class="token builtin class-name">enable</span>  log global  stats uri /haproxy-status  stats auth admin:admin<span class="token comment">#容器启动脚本</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># cat run_haproxy.sh </span><span class="token comment">#!/bin/bash</span>/usr/sbin/haproxy <span class="token parameter variable">-Ws</span> <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg <span class="token parameter variable">-p</span> /var/lib/haproxy/haproxy.pid<span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile├── haproxy-2.1.12.tar.gz├── haproxy.cfg├── lua-5.4.4.tar.gz└── run_haproxy.sh<span class="token number">0</span> directories, <span class="token number">5</span> files<span class="token comment">#构建haproxy:v2.1.12镜像</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker build -t haproxy:v2.1.12 .</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker images | grep haproxy</span>haproxy       v2.1.12    9c7138da5b0d   <span class="token number">4</span> minutes ago    854MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker run -d -it -p 9999:9999 haproxy:v2.1.12</span><span class="token comment">#验证容器</span>root@node10:/opt/dockerfile/haproxy<span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                                               NAMES083eac675842   haproxy:v2.1.12   <span class="token string">"/usr/bin/run_haprox…"</span>   <span class="token number">4</span> minutes ago   Up <span class="token number">4</span> minutes   <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:9999-<span class="token operator">></span><span class="token number">9999</span>/tcp, :::9999-<span class="token operator">></span><span class="token number">9999</span>/tcp   eloquent_ptolemyroot@node10:/opt/dockerfile/haproxy<span class="token comment"># docker exec -it 083eac675842 bash</span><span class="token punctuation">[</span>root@083eac675842 /<span class="token punctuation">]</span><span class="token comment"># ss -tnl</span>State      Recv-Q Send-Q                                    Local Address:Port                                                   Peer Address:Port              LISTEN     <span class="token number">0</span>      <span class="token number">3000</span>                                                  *:9999                                                              *:* </code></pre></div></figure><h1 id="4-基于alpine基础镜像构建nginx镜像"><a href="#4-基于alpine基础镜像构建nginx镜像" class="headerlink" title="4.基于alpine基础镜像构建nginx镜像"></a>4.基于alpine基础镜像构建nginx镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># vim Dockerfiles</span>FROM alpineLABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositoriesRUN apk update <span class="token operator">&amp;&amp;</span> apk <span class="token function">add</span> iotop gcc libgcc libc-dev libcurl libc-utils pcre-dev zlib-dev libnfs <span class="token function">make</span> pcre pcre2 <span class="token function">zip</span> <span class="token function">unzip</span> net-tools pstree <span class="token function">wget</span> libevent libevent-dev iproute2ADD nginx-1.22.0.tar.gz /optRUN <span class="token builtin class-name">cd</span> /opt/nginx-1.22.0 <span class="token operator">&amp;&amp;</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/apps/nginx <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/nginx/sbin/nginx /usr/binRUN addgroup <span class="token parameter variable">-g</span> <span class="token number">2022</span> <span class="token parameter variable">-S</span> nginx <span class="token operator">&amp;&amp;</span> adduser <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-u</span> <span class="token number">2022</span> <span class="token parameter variable">-G</span> nginx nginxRUN <span class="token function">chown</span> nginx.nginx /apps/nginx <span class="token parameter variable">-R</span>RUN <span class="token builtin class-name">echo</span> <span class="token string">"daemon off;"</span> <span class="token operator">>></span> /apps/nginx/conf/nginx.confRUN <span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>nginx page test&lt;/h1>"</span> <span class="token operator">></span> /apps/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/nginx/sbin/nginx"</span><span class="token punctuation">]</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile└── nginx-1.22.0.tar.gz<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建nginx:v1.22.0镜像</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># docker build -t nginx:v1.22.0 .</span><span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># docker run -d -p 80:80 nginx:v1.22.0</span><span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/system/alpine<span class="token comment"># curl http://192.168.1.10/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>nginx page test<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure><h1 id="5-基于ubuntu基础镜像构建nginx镜像"><a href="#5-基于ubuntu基础镜像构建nginx镜像" class="headerlink" title="5.基于ubuntu基础镜像构建nginx镜像"></a>5.基于ubuntu基础镜像构建nginx镜像</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写Dockerfile文件</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># vim Dockerfile</span>FROM ubuntu:20.04LABEL <span class="token string">"name"</span><span class="token operator">=</span><span class="token string">"www.chsblogs.com"</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*archive.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.listRUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s@http://.*security.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.list<span class="token comment">#COPY sources.list /etc/apt/sources.list</span><span class="token comment">#RUN apt update</span>RUN <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> iproute2 ntpdate tcpdump telnet <span class="token function">traceroute</span> nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet <span class="token function">traceroute</span> iotop <span class="token function">unzip</span> <span class="token function">zip</span> gcc <span class="token function">make</span>ADD nginx-1.22.0.tar.gz /optRUN <span class="token builtin class-name">cd</span> /opt/nginx-1.22.0 <span class="token operator">&amp;&amp;</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/apps/nginx <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> <span class="token parameter variable">-sv</span> /apps/nginx/sbin/nginx /usr/binRUN <span class="token function">groupadd</span> <span class="token parameter variable">-g</span> <span class="token number">2022</span> nginx <span class="token operator">&amp;&amp;</span> <span class="token function">useradd</span> <span class="token parameter variable">-g</span> nginx <span class="token parameter variable">-s</span> /sbin/nologin <span class="token parameter variable">-u</span> <span class="token number">2022</span> nginxRUN <span class="token function">chown</span> nginx.nginx /apps/nginx <span class="token parameter variable">-R</span>RUN <span class="token builtin class-name">echo</span> <span class="token string">"daemon off;"</span> <span class="token operator">>></span> /apps/nginx/conf/nginx.confRUN <span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>nginx page test&lt;/h1>"</span> <span class="token operator">></span> /apps/nginx/html/index.htmlEXPOSE <span class="token number">80</span> <span class="token number">443</span>CMD <span class="token punctuation">[</span><span class="token string">"/apps/nginx/sbin/nginx"</span><span class="token punctuation">]</span><span class="token comment">#目录结构</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># tree -L 1</span><span class="token builtin class-name">.</span>├── Dockerfile└── nginx-1.22.0.tar.gz<span class="token number">0</span> directories, <span class="token number">2</span> files<span class="token comment">#构建ubuntu-nginx:v1.22.0镜像</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker build -t ubuntu-nginx:v1.22.0 .</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker images | grep ubuntu-nginx</span>ubuntu-nginx   v1.22.0    4056f3a49504   <span class="token number">3</span> minutes ago    451MB<span class="token comment">#启动容器</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># docker run -d -p 80:80 ubuntu-nginx:v1.22.0</span><span class="token comment">#访问测试</span>root@node10:/opt/dockerfile/system/ubuntu<span class="token comment"># curl http://192.168.1.10/</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>nginx page test<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(3).Docker命令</title>
    <link href="/2022/08/30/Container/Docker/docker03/"/>
    <url>/2022/08/30/Container/Docker/docker03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker命令"><a href="#1-Docker命令" class="headerlink" title="1.Docker命令"></a>1.Docker命令</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参考官方文档</span><span class="token comment">#中文</span>https://dockerdocs.cn/reference<span class="token comment">#英文</span>https://docs.docker.com/reference/</code></pre></div></figure><h2 id="1-1-docker-search"><a href="#1-1-docker-search" class="headerlink" title="1.1 docker search"></a>1.1 docker search</h2><p>docker search：在Docker Hub中搜索镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> search <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">TERM</span><span class="token comment">#选项</span>Options:  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板进行漂亮的打印搜索</span>      <span class="token parameter variable">--limit</span> int       <span class="token comment">#最多搜索结果数</span>      --no-trunc        <span class="token comment">#不要截断输出</span>      <span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker search  --limit 2 nginx</span>NAME            DESCRIPTION                  STARS     OFFICIAL   AUTOMATEDnginx           Official build of Nginx.     <span class="token number">17312</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       bitnami/nginx   Bitnami nginx Docker Image   <span class="token number">140</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span></code></pre></div></figure><h2 id="1-2-docker-pull-x2F-push"><a href="#1-2-docker-pull-x2F-push" class="headerlink" title="1.2 docker pull&#x2F;push"></a>1.2 docker pull&#x2F;push</h2><p>docker pull：拉取镜像</p><p>docker push：上传镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker pull用法</span><span class="token function">docker</span> pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span><span class="token comment">#docker pull选项</span>  -a, --all-tags                <span class="token comment">#下载存储库中所有标记的图像</span>      --disable-content-trust   <span class="token comment">#跳过镜像验证</span>      <span class="token parameter variable">--platform</span> string         <span class="token comment">#API 12+ 设置平台（如果服务器具有多平台功能）</span>  -q, <span class="token parameter variable">--quiet</span>                   <span class="token comment">#禁止详细输出</span><span class="token comment">#docker pull示例</span>root@node10:~<span class="token comment"># docker pull centos:7.8.2003</span><span class="token number">7.8</span>.2003: Pulling from library/centos9b4ebb48de8d: Pull complete Digest: sha256:8540a199ad51c6b7b51492fa9fee27549fd11b3bb913e888ab2ccf77cbb72cc1Status: Downloaded newer image <span class="token keyword">for</span> centos:7.8.2003docker.io/library/centos:7.8.2003<span class="token comment">#docker push上传镜像</span>root@node10:~<span class="token comment"># docker push harbor.chsblogs.com/baseimages/ubuntu:20.04</span>The push refers to repository <span class="token punctuation">[</span>harbor.chsblogs.com/baseimages/ubuntu<span class="token punctuation">]</span>9f54eef41275: Layer already exists <span class="token number">20.04</span>: digest: sha256:7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="token number">529</span></code></pre></div></figure><h2 id="1-3-docker-images"><a href="#1-3-docker-images" class="headerlink" title="1.3 docker images"></a>1.3 docker images</h2><p>docker images：列出镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有镜像（默认隐藏中间镜像）</span>      <span class="token parameter variable">--digests</span>         <span class="token comment">#显示摘要</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的图像</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示镜像ID</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker images -q</span>ba6acccedd29afb6fca791e0</code></pre></div></figure><h2 id="1-4-docker-save-x2F-load"><a href="#1-4-docker-save-x2F-load" class="headerlink" title="1.4 docker save&#x2F;load"></a>1.4 docker save&#x2F;load</h2><p>docker save：将一个或多个镜像保存到tar存档(默认情况下流式传输到STDOUT)</p><p>docker load：从tar存档或STDIN加载镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker save用法</span><span class="token function">docker</span> save <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker save选项</span>  -o, <span class="token parameter variable">--output</span> string   <span class="token comment">#写入文件，而不是STDOUT</span><span class="token comment">#docker load用法</span><span class="token function">docker</span> load <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#docker load选项</span>  -i, <span class="token parameter variable">--input</span> string   <span class="token comment">#从tar存档文件中读取，而不是从STDIN中读取</span>  -q, <span class="token parameter variable">--quiet</span>          <span class="token comment">#抑制负载输出</span><span class="token comment">#示例</span><span class="token comment">#导出镜像</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker save centos -o /opt/centos.tar.gz</span>root@node10:~<span class="token comment"># ll /opt/centos.tar.gz </span>-rw------- <span class="token number">1</span> root root <span class="token number">211077120</span> Aug <span class="token number">30</span> 03:27 /opt/centos.tar.gz<span class="token comment">#导入镜像</span>root@node11:~<span class="token comment"># docker load -i /opt/centos.tar.gz</span>fb82b029bea0: Loading layer <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span>  <span class="token number">211</span>.1MB/211.1MBLoaded image: centos:7.8.2003root@node11:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED       SIZEcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago   203MB</code></pre></div></figure><h2 id="1-5-docker-ps"><a href="#1-5-docker-ps" class="headerlink" title="1.5 docker ps"></a>1.5 docker ps</h2><p>docker ps：列出容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有容器（默认显示为正在运行）</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#根据提供的条件过滤输出</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的容器</span>  -n, <span class="token parameter variable">--last</span> int        <span class="token comment">#显示n个最后创建的容器（包括所有状态）</span>  -l, <span class="token parameter variable">--latest</span>          <span class="token comment">#显示最新创建的容器（包括所有状态）</span>      --no-trunc        <span class="token comment">#不要截断输出</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示容器ID</span>  -s, <span class="token parameter variable">--size</span>            <span class="token comment">#显示文件总大小</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">3</span> seconds ago   Up <span class="token number">2</span> seconds   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker ps -q</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-6-docker-run"><a href="#1-6-docker-run" class="headerlink" title="1.6 docker run"></a>1.6 docker run</h2><p>docker run：在新容器中运行命令</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>      --add-host list                  <span class="token comment">#添加自定义主机到IP的映射（host：ip）</span>  -a, <span class="token parameter variable">--attach</span> list                    <span class="token comment">#附加到STDIN，STDOUT或STDERR</span>      --blkio-weight uint16            <span class="token comment">#块IO（相对权重），介于10到1000之间，或者为0禁用（默认为0）</span>      --blkio-weight-device list       <span class="token comment">#块IO重量（相对设备重量）</span>      --cap-add list                   <span class="token comment">#添加Linux功能</span>      --cap-drop list                  <span class="token comment">#放弃Linux功能</span>      --cgroup-parent string           <span class="token comment">#容器的可选父cgroup</span>      <span class="token parameter variable">--cgroupns</span> string                <span class="token comment">#要使用（host | private）'host'的API 1.41+ Cgroup命名空间：在Docker主机的cgroup命名空间'private'中运行容器：在其自己的私有cgroup命名空间中运行容器''：使用默认配置的cgroup命名空间守护程序上的-cgroupns-mode选项（默认）</span>      <span class="token parameter variable">--cidfile</span> string                 <span class="token comment">#将容器ID写入文件</span>      --cpu-period int                 <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int                  <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>      --cpu-rt-period int              <span class="token comment">#限制CPU实时时间（以微秒为单位）</span>      --cpu-rt-runtime int             <span class="token comment">#限制CPU实时运行时间（以微秒为单位）</span>  -c, --cpu-shares int                 <span class="token comment">#CPU份额（相对重量）</span>      <span class="token parameter variable">--cpus</span> decimal                   <span class="token comment">#CPU数量</span>      --cpuset-cpus string             <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string             <span class="token comment">#允许执行的MEM（0-3，0,1）</span>  -d, <span class="token parameter variable">--detach</span>                         <span class="token comment">#在后台运行容器并打印容器ID</span>      --detach-keys string             <span class="token comment">#覆盖分离容器的键序列</span>      <span class="token parameter variable">--device</span> list                    <span class="token comment">#将主机设备添加到容器</span>      --device-cgroup-rule list        <span class="token comment">#将规则添加到“允许cgroup的设备”列表中</span>      --device-read-bps list           <span class="token comment">#限制从设备读取的速率（每秒字节数）</span>      --device-read-iops list          <span class="token comment">#限制从设备读取的速率（每秒IO）</span>      --device-write-bps list          <span class="token comment">#限制对设备的写入速率（每秒字节数）</span>      --device-write-iops list         <span class="token comment">#限制对设备的写入速率（每秒IO）</span>      --disable-content-trust          <span class="token comment">#跳过镜像验证</span>      <span class="token parameter variable">--dns</span> list                       <span class="token comment">#设置自定义DNS服务器</span>      --dns-option list                <span class="token comment">#设定DNS选项</span>      --dns-search list                <span class="token comment">#设置自定义DNS搜索域</span>      <span class="token parameter variable">--domainname</span> string              <span class="token comment">#容器NIS域名</span>      <span class="token parameter variable">--entrypoint</span> string              <span class="token comment">#覆盖镜像的默认ENTRYPOINT</span>  -e, <span class="token parameter variable">--env</span> list                       <span class="token comment">#设置环境变量</span>      --env-file list                  <span class="token comment">#读入环境变量文件</span>      <span class="token parameter variable">--expose</span> list                    <span class="token comment">#公开一个或多个端口</span>      <span class="token parameter variable">--gpus</span> gpu-request               <span class="token comment">#GPU设备添加到容器中（“全部”传递所有GPU）</span>      --group-add list                 <span class="token comment">#添加其他群组即可加入</span>      --health-cmd string              <span class="token comment">#运行命令以检查运行状况</span>      --health-interval duration       <span class="token comment">#运行检查之间的时间（ms | s | m | h）（默认为0s）</span>      --health-retries int             <span class="token comment">#连续出现故障需要报告不健康</span>      --health-start-period duration   <span class="token comment">#容器在开始运行状况重试倒计时（ms | s | m | h）之前初始化的起始时间（默认为0s）</span>      --health-timeout duration        <span class="token comment">#允许执行一次检查的最长时间（ms | s | m | h）（默认为0s）</span>      <span class="token parameter variable">--help</span>                           <span class="token comment">#打印用量</span>  -h, <span class="token parameter variable">--hostname</span> string                <span class="token comment">#容器主机名</span>      <span class="token parameter variable">--init</span>                           <span class="token comment">#在容器内运行一个初始化程序，以转发信号并获取进程</span>  -i, <span class="token parameter variable">--interactive</span>                    <span class="token comment">#即使未连接STDIN，也应使其保持打开状态</span>      <span class="token parameter variable">--ip</span> string                      <span class="token comment">#IPv4地址</span>      <span class="token parameter variable">--ip6</span> string                     <span class="token comment">#IPv6地址</span>      <span class="token parameter variable">--ipc</span> string                     <span class="token comment">#使用的IPC模式</span>      <span class="token parameter variable">--isolation</span> string               <span class="token comment">#集装箱隔离技术</span>      --kernel-memory bytes            <span class="token comment">#内核内存限制</span>  -l, <span class="token parameter variable">--label</span> list                     <span class="token comment">#在容器上设置元数据</span>      --label-file list                <span class="token comment">#读入行分隔的标签文件</span>      <span class="token parameter variable">--link</span> list                      <span class="token comment">#将链接添加到另一个容器</span>      --link-local-ip list             <span class="token comment">#容器IPv4 / IPv6链接本地地址</span>      --log-driver string              <span class="token comment">#容器的日志记录驱动程序</span>      --log-opt list                   <span class="token comment">#日志驱动程序选项</span>      --mac-address string             <span class="token comment">#容器MAC地址（例如92：d0：c6：0a：29：33）</span>  -m, <span class="token parameter variable">--memory</span> bytes                   <span class="token comment">#内存限制</span>      --memory-reservation bytes       <span class="token comment">#内存软限制</span>      --memory-swap bytes              <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      --memory-swappiness int          <span class="token comment">#调整容器内存交换（0到100）</span>      <span class="token parameter variable">--mount</span> <span class="token function">mount</span>                    <span class="token comment">#将文件系统挂载附加到容器</span>      <span class="token parameter variable">--name</span> string                    <span class="token comment">#为容器分配一个名称</span>      <span class="token parameter variable">--network</span> network                <span class="token comment">#将容器连接到网络</span>      --network-alias list             <span class="token comment">#为容器添加网络范围的别名</span>      --no-healthcheck                 <span class="token comment">#禁用任何容器指定的健康检查</span>      --oom-kill-disable               <span class="token comment">#禁用OOM杀手</span>      --oom-score-adj int              <span class="token comment">#调整OOM首选项（-1000到1000）</span>      <span class="token parameter variable">--pid</span> string                     <span class="token comment">#使用的PID名称空间</span>      --pids-limit int                 <span class="token comment">#调整容器pids限制（将-1设置为无限制）</span>      <span class="token parameter variable">--platform</span> string                <span class="token comment">#设置平台（如果服务器具有多平台功能）</span>      <span class="token parameter variable">--privileged</span>                     <span class="token comment">#赋予此容器扩展的特权</span>  -p, <span class="token parameter variable">--publish</span> list                   <span class="token comment">#将容器的端口发布到主机</span>  -P, --publish-all                    <span class="token comment">#将所有公开的端口发布到随机端口</span>      <span class="token parameter variable">--pull</span> string                    <span class="token comment">#在运行之前拉镜像（“总是” |“缺少” |“从不”）</span>      --read-only                      <span class="token comment">#将容器的根文件系统挂载为只读</span>      <span class="token parameter variable">--restart</span> string                 <span class="token comment">#容器退出时重新启动策略以应用</span>      <span class="token parameter variable">--rm</span>                             <span class="token comment">#退出时自动删除容器</span>      <span class="token parameter variable">--runtime</span> string                 <span class="token comment">#用于此容器的运行时</span>      --security-opt list              <span class="token comment">#安全选项</span>      --shm-size bytes                 <span class="token comment">#/ dev / shm的大小</span>      --sig-proxy                      <span class="token comment">#代理接收到该过程的信号</span>      --stop-signal string             <span class="token comment">#停止容器的信号</span>      --stop-timeout int               <span class="token comment">#超时（以秒为单位）以停止容器</span>      --storage-opt list               <span class="token comment">#容器的存储驱动程序选项</span>      <span class="token parameter variable">--sysctl</span> map                     <span class="token comment">#Sysctl选项</span>      <span class="token parameter variable">--tmpfs</span> list                     <span class="token comment">#挂载tmpfs目录</span>  -t, <span class="token parameter variable">--tty</span>                            <span class="token comment">#分配伪TTY</span>      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>                  <span class="token comment">#Ulimit选项</span>  -u, <span class="token parameter variable">--user</span> string                    <span class="token comment">#用户名或UID（格式：&lt;名称| uid> [：&lt;组| gid>]）</span>      <span class="token parameter variable">--userns</span> string                  <span class="token comment">#要使用的用户名称空间</span>      <span class="token parameter variable">--uts</span> string                     <span class="token comment">#要使用的UTS命名空间</span>  -v, <span class="token parameter variable">--volume</span> list                    <span class="token comment">#绑定挂载卷</span>      --volume-driver string           <span class="token comment">#容器的可选音量驱动器</span>      --volumes-from list              <span class="token comment">#从指定的容器挂载卷</span>  -w, <span class="token parameter variable">--workdir</span> string                 <span class="token comment">#容器内的工作目录</span><span class="token comment">#示例</span><span class="token comment">#分配名称，分配伪TTY，将宿主机端口映射至容器，后台运行</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 nginx</span>7143ecc38299cf848fabf94ad0c50f0004d05b3aa8f4bd6b7cc316e6de274e05root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES7143ecc38299   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">5</span> seconds ago   Up <span class="token number">3</span> seconds   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx<span class="token comment">#分配名称，分配伪TTY，将宿主机端口映射至容器，后台运行，并将/data目录映射至容器/usr/share/nginx/html</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 -v /data:/usr/share/nginx/html nginx</span></code></pre></div></figure><h2 id="1-7-docker-commit"><a href="#1-7-docker-commit" class="headerlink" title="1.7 docker commit"></a>1.7 docker commit</h2><p>docker commit：根据容器的更改创建新镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--author</span> string    <span class="token comment">#作者</span>  -c, <span class="token parameter variable">--change</span> list      <span class="token comment">#将Dockerfile指令应用于创建的映像</span>  -m, <span class="token parameter variable">--message</span> string   <span class="token comment">#提交讯息</span>  -p, <span class="token parameter variable">--pause</span>            <span class="token comment">#提交期间暂停容器</span><span class="token comment">#示例</span><span class="token comment">#基于centos:7.8.2003镜像制作nginx镜像</span>root@node10:~<span class="token comment"># docker pull centos:7.8.2003</span>root@node10:~<span class="token comment"># docker run -it centos:7.8.2003 /bin/bash</span><span class="token comment">#安装基础命令</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># yum -y install wget vim lrzsz psmisc net-tools tree unzip zip gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop lsof ntpdate telnet</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm</span><span class="token punctuation">[</span>root@485e09841a07 /<span class="token punctuation">]</span><span class="token comment"># yum -y install nginx-1.22.0-1.el7.ngx.x86_64.rpm</span><span class="token punctuation">[</span>root@89fad2393882 /<span class="token punctuation">]</span><span class="token comment"># echo "Nginx Test" > /usr/share/nginx/html/index.html</span><span class="token comment">#提交镜像</span>root@node10:~<span class="token comment"># docker commit -a "chsblogs.com" -m "centos7-nginx" -c "EXPOSE 80 443" -c 'CMD ["/usr/sbin/nginx"]' -c 'CMD ["nginx","-g","daemon off;"]' 89fad2393882 chsblogs/testimage:v1</span>sha256:24a733bfb90a78fd71f4cf616bad38b932960b3182a1fb5fe4bb0aef31195fbfroot@node10:~<span class="token comment"># docker images</span>REPOSITORY           TAG        IMAGE ID       CREATED         SIZEchsblogs/testimage   v1         24a733bfb90a   <span class="token number">8</span> seconds ago   394MB<span class="token comment">#启动镜像</span>root@node10:~<span class="token comment"># docker run -it -d --name centos-nginx -p 80:80 chsblogs/testimage:v1</span>b017b72d341446610f2c4f790ba6463f70b0c07cc7247e993ff770f8b0f54b0f<span class="token comment">#访问测试</span>root@node11:~<span class="token comment"># curl http://192.168.1.10</span>Nginx Test</code></pre></div></figure><h2 id="1-8-docker-cp"><a href="#1-8-docker-cp" class="headerlink" title="1.8 docker cp"></a>1.8 docker cp</h2><p>docker cp：在容器和本地文件系统之间复制文件&#x2F;文件夹</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER:SRC_PATH DEST_PATH<span class="token operator">|</span>-<span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> SRC_PATH<span class="token operator">|</span>- CONTAINER:DEST_PATH<span class="token comment">#选项</span>  -a, <span class="token parameter variable">--archive</span>       <span class="token comment">#存档模式（复制所有uid / gid信息）</span>  -L, --follow-link   <span class="token comment">#始终遵循SRC_PATH中的符号链接</span><span class="token comment">#示例</span><span class="token comment">#从容器中复制文件到本地</span>root@node10:~<span class="token comment"># docker ps -q</span>f4da963a4e5froot@node10:~<span class="token comment"># docker cp f4da963a4e5f:/etc/nginx/nginx.conf /opt/</span>root@node10:~<span class="token comment"># ls /opt/nginx.conf </span>/opt/nginx.conf<span class="token comment">#从本地复制文件到容器</span>root@node10:~<span class="token comment"># docker cp /opt/centos.tar.gz f4da963a4e5f:/opt</span>root@node10:~<span class="token comment"># docker exec -it f4da963a4e5f bash</span>root@f4da963a4e5f:/<span class="token comment"># ls -l /opt/</span>total <span class="token number">206132</span>-rw------- <span class="token number">1</span> root root <span class="token number">211077120</span> Aug <span class="token number">30</span> 03:27 centos.tar.gz</code></pre></div></figure><h2 id="1-9-docker-rm-x2F-rmi"><a href="#1-9-docker-rm-x2F-rmi" class="headerlink" title="1.9 docker rm&#x2F;rmi"></a>1.9 docker rm&#x2F;rmi</h2><p>docker rm：删除一个或多个容器</p><p>docker rmi：删除一个或多个镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker rm用法</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker rm选项</span>  -f, <span class="token parameter variable">--force</span>     <span class="token comment">#强制删除正在运行的容器（使用SIGKILL）</span>  -l, <span class="token parameter variable">--link</span>      <span class="token comment">#删除指定的链接</span>  -v, <span class="token parameter variable">--volumes</span>   <span class="token comment">#删除与容器关联的匿名卷</span><span class="token comment">#docker rm示例</span><span class="token comment">#强制删除正在运行的容器并删除卷</span>root@node10:~<span class="token comment"># docker rm -fv 9a70d7871f42</span>9a70d7871f42<span class="token comment">#批量删除退出的容器</span>root@node10:~<span class="token comment"># docker rm -fv $(docker ps --filter status=exited -q)</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker rmi用法</span><span class="token function">docker</span> rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#docker rmi选项</span>  -f, <span class="token parameter variable">--force</span>      <span class="token comment">#强制删除镜像</span>      --no-prune   <span class="token comment">#不要删除未标记的父镜像</span><span class="token comment">#docker rmi示例</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY   TAG        IMAGE ID       CREATED         SIZEnginx        latest     605c77e624dd   <span class="token number">8</span> months ago    141MBredis        latest     7614ae9453d1   <span class="token number">8</span> months ago    113MBubuntu       <span class="token number">20.04</span>      ba6acccedd29   <span class="token number">10</span> months ago   <span class="token number">72</span>.8MBcentos       <span class="token number">7.8</span>.2003   afb6fca791e0   <span class="token number">2</span> years ago     203MBroot@node10:~<span class="token comment"># docker rmi 7614ae9453d1</span>Untagged: redis:latestUntagged: redis@sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339Deleted: sha256:7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631Deleted: sha256:49c70179bc923a7d48583d58e2b6c21bde1787edf42ed1f8de9e9b96e2e88e65Deleted: sha256:396e06df5d1120368a7a8a4fd1e5467cdc2dd4083660890df078c654596ddc1cDeleted: sha256:434d118df2e9edb51238f6ba46e9efdfa21be68e88f54787531aa39a720a0740Deleted: sha256:2047f09c412ff06f4e2ee8a25d105055e714d99000711e27a55072e640796294Deleted: sha256:13d71c9ccb39b206211dd1900d06aa1984b0f5ab8abaa628c70b3eb733303a65<span class="token comment">#批量删除&lt;none>镜像</span>root@node10:~<span class="token comment"># docker rmi $(docker images -f "dangling=true" -q)</span></code></pre></div></figure><h2 id="1-10-docker-start-x2F-stop-x2F-restart"><a href="#1-10-docker-start-x2F-stop-x2F-restart" class="headerlink" title="1.10 docker start&#x2F;stop&#x2F;restart"></a>1.10 docker start&#x2F;stop&#x2F;restart</h2><p>docker start：启动一个或多个已停止的容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> start <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--attach</span>               <span class="token comment">#连接STDOUT / STDERR和转发信号</span>      --detach-keys string   <span class="token comment">#覆盖分离容器的键序列</span>  -i, <span class="token parameter variable">--interactive</span>          <span class="token comment">#附加容器的STDIN</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS                      PORTS     NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">13</span> seconds ago             nginx01root@node10:~<span class="token comment"># docker start f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><p>docker stop：停止一个或多个运行中的容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> stop <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -t, <span class="token parameter variable">--time</span> int   <span class="token comment">#等待杀死的秒数，然后将其杀死</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Up <span class="token number">2</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker stop f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><p>docker restart：重新启动一个或多个容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> restart <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -t, <span class="token parameter variable">--time</span> int   <span class="token comment">#等待杀死的秒数，然后将其杀死</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS        PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   About an hour ago   Up <span class="token number">1</span> second   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker restart f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-11-docker-exec"><a href="#1-11-docker-exec" class="headerlink" title="1.11 docker exec"></a>1.11 docker exec</h2><p>docker exec：在正在运行的容器中运行命令</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -d, <span class="token parameter variable">--detach</span>               <span class="token comment">#分离模式：在后台运行命令</span>      --detach-keys string   <span class="token comment">#覆盖分离容器的键序列</span>  -e, <span class="token parameter variable">--env</span> list             <span class="token comment">#设置环境变量</span>      --env-file list        <span class="token comment">#读取环境变量文件</span>  -i, <span class="token parameter variable">--interactive</span>          <span class="token comment">#即使未连接STDIN，也应使其保持打开状态</span>      <span class="token parameter variable">--privileged</span>           <span class="token comment">#赋予命令扩展权限</span>  -t, <span class="token parameter variable">--tty</span>                  <span class="token comment">#分配伪TTY</span>  -u, <span class="token parameter variable">--user</span> string          <span class="token comment">#用户名或UID（格式：&lt;名称| uid> [：&lt;组| gid>]）</span>  -w, <span class="token parameter variable">--workdir</span> string       <span class="token comment">#容器内的工作目录</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS         PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">8</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker exec -it f4da963a4e5f bash</span>root@f4da963a4e5f:/<span class="token comment"># </span></code></pre></div></figure><h2 id="1-12-docker-port"><a href="#1-12-docker-port" class="headerlink" title="1.12 docker port"></a>1.12 docker port</h2><p>docker port：列出端口映射或容器的特定映射</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">11</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker port f4da963a4e5f</span><span class="token number">80</span>/tcp -<span class="token operator">></span> <span class="token number">0.0</span>.0.0:80<span class="token number">80</span>/tcp -<span class="token operator">></span> :::80</code></pre></div></figure><h2 id="1-13-docker-rename"><a href="#1-13-docker-rename" class="headerlink" title="1.13 docker rename"></a>1.13 docker rename</h2><p>docker rename：重命名容器</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">12</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01root@node10:~<span class="token comment"># docker rename f4da963a4e5f nginx</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up <span class="token number">12</span> minutes   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx</code></pre></div></figure><h2 id="1-14-docker-update"><a href="#1-14-docker-update" class="headerlink" title="1.14 docker update"></a>1.14 docker update</h2><p>docker update：更新一个或多个容器的配置</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> update <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>      --blkio-weight uint16        <span class="token comment">#块IO（相对权重），介于10到1000之间，或者为0禁用（默认为0）</span>      --cpu-period int             <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int              <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>      --cpu-rt-period int          <span class="token comment">#将CPU实时时间限制为微秒</span>      --cpu-rt-runtime int         <span class="token comment">#限制CPU实时运行时间（以微秒为单位）</span>  -c, --cpu-shares int             <span class="token comment">#CPU份额（相对重量）</span>      <span class="token parameter variable">--cpus</span> decimal               <span class="token comment">#CPU数量</span>      --cpuset-cpus string         <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string         <span class="token comment">#允许执行的MEM（0-3，0,1）</span>      --kernel-memory bytes        <span class="token comment">#内核内存限制</span>  -m, <span class="token parameter variable">--memory</span> bytes               <span class="token comment">#内存限制</span>      --memory-reservation bytes   <span class="token comment">#内存软限制</span>      --memory-swap bytes          <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      --pids-limit int             <span class="token comment">#Tune容器pids限制（设置-1表示无限制）</span>      <span class="token parameter variable">--restart</span> string             <span class="token comment">#容器退出时重新启动策略以应用</span><span class="token comment">#示例</span><span class="token comment">#更新容器允许执行的CPU</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS              PORTS                               NAMESf4da963a4e5f   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> hours ago   Up About a minute   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginxroot@node10:~<span class="token comment"># docker update --cpuset-cpus 2 f4da963a4e5f</span>f4da963a4e5f</code></pre></div></figure><h2 id="1-15-docker-volume"><a href="#1-15-docker-volume" class="headerlink" title="1.15 docker volume"></a>1.15 docker volume</h2><p>docker volume：管理卷</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume COMMAND<span class="token comment">#选项</span>  create      <span class="token comment">#创建一个卷</span>  inspect     <span class="token comment">#显示一个或多个卷上的详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#显示卷</span>  prune       <span class="token comment">#删除所有未使用的本地卷</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个卷</span></code></pre></div></figure><ul><li>docker volume create</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>VOLUME<span class="token punctuation">]</span><span class="token comment">#选项</span>  -d, <span class="token parameter variable">--driver</span> string   <span class="token comment">#指定卷驱动程序名称</span>      <span class="token parameter variable">--label</span> list      <span class="token comment">#设置卷的元数据</span>  -o, <span class="token parameter variable">--opt</span> map         <span class="token comment">#设置驱动程序特定选项</span>  <span class="token comment">#示例</span><span class="token comment">#创建hello卷</span>root@node10:~<span class="token comment"># docker volume create hello</span><span class="token comment">#查看卷的位置</span>root@node10:~<span class="token comment"># find / -name "hello"</span>/var/lib/docker/volumes/hello<span class="token comment">#配置容器使用hello卷</span>root@node10:~<span class="token comment"># docker run -it -d --name nginx -p 80:80 -v hello:/usr/share/nginx/html nginx</span></code></pre></div></figure><ul><li>docker volume inspect</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> VOLUME <span class="token punctuation">[</span>VOLUME<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume inspect hello</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"CreatedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2022-09-12T18:16:08+08:00"</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Mountpoint"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/hello/_data"</span>,        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"hello"</span>,        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></div></figure><ul><li>docker volume ls</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'dangling = true'）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的卷</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#仅显示卷名</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello</code></pre></div></figure><ul><li>docker volume prune</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume prune <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment">#选项</span>      <span class="token parameter variable">--filter</span> filter   <span class="token comment">#提供过滤器值（例如'label = &lt;label>'）</span>  -f, <span class="token parameter variable">--force</span>           <span class="token comment">#不提示确认</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker volume create test</span>root@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello<span class="token builtin class-name">local</span>     <span class="token builtin class-name">test</span>root@node10:~<span class="token comment"># docker volume prune -f</span>Deleted Volumes:<span class="token builtin class-name">test</span>Total reclaimed space: 0Broot@node10:~<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     hello</code></pre></div></figure><ul><li>docker volume rm</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> VOLUME <span class="token punctuation">[</span>VOLUME<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--force</span>   <span class="token comment">#强制删除一个或多个卷</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker rm -f `docker ps -a -q`</span>a8af140c93baroot@node10:~<span class="token comment"># docker volume rm hello</span>hello</code></pre></div></figure><h2 id="1-16-docker-tag"><a href="#1-16-docker-tag" class="headerlink" title="1.16 docker tag"></a>1.16 docker tag</h2><p>docker tag：创建一个引用了SOURCE_IMAGE的标签TARGET_IMAGE</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将标识"605c77e624dd"的本地镜像标记为"v1"的"chsblogs"存储库</span>root@node10:~<span class="token comment"># docker tag 605c77e624dd chsblogs/nginx:v1</span>root@node10:~<span class="token comment"># docker images</span>REPOSITORY           TAG        IMAGE ID       CREATED          SIZEchsblogs/nginx       v1         605c77e624dd   <span class="token number">8</span> months ago     141MBnginx                latest     605c77e624dd   <span class="token number">8</span> months ago     141MB</code></pre></div></figure><h2 id="1-17-docker-inspect"><a href="#1-17-docker-inspect" class="headerlink" title="1.17 docker inspect"></a>1.17 docker inspect</h2><p>docker inspect：返回有关Docker对象的低级信息</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token operator">|</span>ID <span class="token punctuation">[</span>NAME<span class="token operator">|</span>ID<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -f, <span class="token parameter variable">--format</span> string   <span class="token comment">#使用给定的Go模板格式化输出</span>  -s, <span class="token parameter variable">--size</span>            <span class="token comment">#如果类型为容器，则显示文件总大小</span>      <span class="token parameter variable">--type</span> string     <span class="token comment">#返回指定类型的JSON</span><span class="token comment">#示例</span><span class="token comment">#获取容器的IP地址</span>root@node10:~<span class="token comment"># docker inspect --format='&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;' 54542ace04bb</span><span class="token number">172.17</span>.0</code></pre></div></figure><h2 id="1-18-docker-network"><a href="#1-18-docker-network" class="headerlink" title="1.18 docker network"></a>1.18 docker network</h2><p>docker network：管理网络</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> network COMMAND<span class="token comment">#选项</span>  connect     <span class="token comment">#将容器连接到网络</span>  create      <span class="token comment">#创建一个网络</span>  disconnect  <span class="token comment">#断开容器与网络的连接</span>  inspect     <span class="token comment">#在一个或多个网络上显示详细信息</span>  <span class="token function">ls</span>          <span class="token comment">#列出网络</span>  prune       <span class="token comment">#删除所有未使用的网络</span>  <span class="token function">rm</span>          <span class="token comment">#删除一个或多个网络</span>  <span class="token number">65</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker network ls</span>NETWORK ID     NAME      DRIVER    SCOPE309f6ef2db22   bridge    bridge    <span class="token builtin class-name">local</span>2615943f0369   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>ccb5b55b776e   none      null      <span class="token builtin class-name">local</span></code></pre></div></figure><h2 id="1-19-docker-logs"><a href="#1-19-docker-logs" class="headerlink" title="1.19 docker logs"></a>1.19 docker logs</h2><p>docker logs：获取容器的日志</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER<span class="token comment">#选项</span>      <span class="token parameter variable">--details</span>        <span class="token comment">#显示提供给日志的其他详细信息</span>  -f, <span class="token parameter variable">--follow</span>         <span class="token comment">#跟踪日志输出</span>      <span class="token parameter variable">--since</span> string   <span class="token comment">#显示自时间戳记以来的日志（例如2013-01-02T13：23：37Z）或相对记录（例如42m的42分钟）</span>  -n, <span class="token parameter variable">--tail</span> string    <span class="token comment">#从日志末尾开始显示的行数</span>  -t, <span class="token parameter variable">--timestamps</span>     <span class="token comment">#显示时间戳</span>      <span class="token parameter variable">--until</span> string   <span class="token comment">#在时间戳（例如2013-01-02T13：23：37Z）或相对时间戳（例如42m，持续42分钟）之前显示日志</span><span class="token comment">#示例</span><span class="token comment">#查看末尾3行日志</span>root@node10:~<span class="token comment"># docker logs -n 3 f4da963a4e5f</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span><span class="token number">192.168</span>.1.215 - - <span class="token punctuation">[</span><span class="token number">30</span>/Aug/2022:05:44:43 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">304</span> <span class="token number">0</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5376 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5376"</span> <span class="token string">"-"</span></code></pre></div></figure><h2 id="1-20-docker-build"><a href="#1-20-docker-build" class="headerlink" title="1.20 docker build"></a>1.20 docker build</h2><p>docker build：从Dockerfile构建镜像</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> build <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">PATH</span> <span class="token operator">|</span> URL <span class="token operator">|</span> -<span class="token comment">#选项</span>      --add-host list           <span class="token comment">#添加自定义主机到IP的映射（host：ip）</span>      --build-arg list          <span class="token comment">#设置构建时变量</span>      --cache-from strings      <span class="token comment">#视为缓存源的镜像</span>      --cgroup-parent string    <span class="token comment">#容器的可选父cgroup</span>      <span class="token parameter variable">--compress</span>                <span class="token comment">#使用gzip压缩构建上下文</span>      --cpu-period int          <span class="token comment">#限制CPU CFS（完全公平的调度程序）期限</span>      --cpu-quota int           <span class="token comment">#限制CPU CFS（完全公平的调度程序）配额</span>  -c, --cpu-shares int          <span class="token comment">#CPU份额（相对重量）</span>      --cpuset-cpus string      <span class="token comment">#允许执行的CPU（0-3，0,1）</span>      --cpuset-mems string      <span class="token comment">#允许执行的MEM（0-3，0,1）</span>      --disable-content-trust   <span class="token comment">#跳过镜像验证</span>  -f, <span class="token parameter variable">--file</span> string             <span class="token comment">#Dockerfile的名称（默认为“ PATH / Dockerfile”）</span>      --force-rm                <span class="token comment">#始终取出中间容器</span>      <span class="token parameter variable">--iidfile</span> string          <span class="token comment">#将镜像ID写入文件</span>      <span class="token parameter variable">--isolation</span> string        <span class="token comment">#集装箱隔离技术</span>      <span class="token parameter variable">--label</span> list              <span class="token comment">#设置镜像的元数据</span>  -m, <span class="token parameter variable">--memory</span> bytes            <span class="token comment">#内存限制</span>      --memory-swap bytes       <span class="token comment">#交换限制等于内存加交换：“-1”以启用无限交换</span>      <span class="token parameter variable">--network</span> string          <span class="token comment">#在构建期间为RUN指令设置联网模式</span>      --no-cache                <span class="token comment">#构建镜像时不要使用缓存</span>      <span class="token parameter variable">--pull</span>                    <span class="token comment">#始终尝试提取镜像的较新版本</span>  -q, <span class="token parameter variable">--quiet</span>                   <span class="token comment">#禁止生成输出并在成功时打印图像ID</span>      <span class="token parameter variable">--rm</span>                      <span class="token comment">#成功构建后删除中间容器</span>      --security-opt strings    <span class="token comment">#公开文件的秘密文件（仅在启用BuildKit的情况下）：id = mysecret，src = / local / secret</span>      --shm-size bytes          <span class="token comment">#/ dev / shm的大小</span>  -t, <span class="token parameter variable">--tag</span> list                <span class="token comment">#名称以及“ name：tag”格式的标签（可选）</span>      <span class="token parameter variable">--target</span> string           <span class="token comment">#设置要构建的目标构建阶段。</span>      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>           <span class="token comment">#Ulimit选项</span><span class="token comment">#示例</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> harbor.chsblogs.com/apache:2.0 <span class="token builtin class-name">.</span></code></pre></div></figure><h2 id="1-21-docker-login-x2F-logout"><a href="#1-21-docker-login-x2F-logout" class="headerlink" title="1.21 docker login&#x2F;logout"></a>1.21 docker login&#x2F;logout</h2><p>docker login：登录仓库</p><p>docker logout：登出仓库</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登录仓库</span>root@node10:~<span class="token comment"># docker login harbor.chsblogs.com:80</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded<span class="token comment">#退出登录</span>root@node10:~<span class="token comment"># docker logout harbor.chsblogs.com:80</span>Removing login credentials <span class="token keyword">for</span> harbor.chsblogs.com:80</code></pre></div></figure><h2 id="1-22-docker-stats"><a href="#1-22-docker-stats" class="headerlink" title="1.22 docker stats"></a>1.22 docker stats</h2><p>docker stats：显示容器资源使用情况统计信息的实时流</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法</span><span class="token function">docker</span> stats <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#显示所有容器（默认显示为正在运行）</span>      <span class="token parameter variable">--format</span> string   <span class="token comment">#使用Go模板打印漂亮的图像</span>      --no-stream       <span class="token comment">#停用流媒体统计信息，仅获取第一个结果</span>      --no-trunc        <span class="token comment">#不要截断输出</span><span class="token comment">#示例</span>root@node10:~<span class="token comment"># docker stats</span>CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDSc00764d80e29   nginx     <span class="token number">0.27</span>%     <span class="token number">43</span>.31MiB / <span class="token number">1</span>.907GiB   <span class="token number">2.22</span>%     <span class="token number">16</span>.9MB / 80kB   <span class="token number">31</span>.6MB / <span class="token number">1</span>.71MB   <span class="token number">4</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Docker安装</title>
    <link href="/2022/08/30/Container/Docker/docker02/"/>
    <url>/2022/08/30/Container/Docker/docker02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方rpm包下载地址</span>https://download.docker.com/linux/centos/7/x86_64/stable/Packages/<span class="token comment">#二进制下载地址</span>https://download.docker.com/https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/</code></pre></div></figure><h2 id="1-1-CentOS7-9安装Docker"><a href="#1-1-CentOS7-9安装Docker" class="headerlink" title="1.1 CentOS7.9安装Docker"></a>1.1 CentOS7.9安装Docker</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span class="token comment"># Step 2: 添加软件源信息</span><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># Step 3</span><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> yum makecache fast<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token comment"># Step 4: 开启Docker服务</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start<span class="token comment"># 注意：</span><span class="token comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span><span class="token comment"># vim /etc/yum.repos.d/docker-ce.repo</span><span class="token comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span><span class="token comment">#</span><span class="token comment"># 安装指定版本的Docker-CE:</span><span class="token comment"># Step 1: 查找Docker-CE的版本:</span><span class="token comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><span class="token comment">#   Loading mirror speeds from cached hostfile</span><span class="token comment">#   Loaded plugins: branch, fastestmirror, langpacks</span><span class="token comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><span class="token comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><span class="token comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><span class="token comment">#   Available Packages</span><span class="token comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span><span class="token comment"># sudo yum -y install docker-ce-[VERSION]</span></code></pre></div></figure><h2 id="1-2-Ubuntu20-04安装Docker"><a href="#1-2-Ubuntu20-04安装Docker" class="headerlink" title="1.2 Ubuntu20.04安装Docker"></a>1.2 Ubuntu20.04安装Docker</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token comment"># step 2: 安装GPG证书</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># Step 3: 写入软件源信息</span><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token comment"># 安装指定版本的Docker-CE:</span><span class="token comment"># Step 1: 查找Docker-CE的版本:</span><span class="token comment"># apt-cache madison docker-ce</span><span class="token comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><span class="token comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><span class="token comment"># Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span><span class="token comment"># </span><span class="token comment"># sudo apt-get -y install docker-ce=[VERSION]</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#验证docker0网卡</span>root@node10:~<span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        ether 02:42:8c:bc:64:dd  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>        <span class="token comment">#验证docker信息</span>root@node10:~<span class="token comment"># docker info</span>Client: Context:    default Debug Mode: <span class="token boolean">false</span> Plugins:  app: Docker App <span class="token punctuation">(</span>Docker Inc., v0.9.1-beta3<span class="token punctuation">)</span>  buildx: Docker Buildx <span class="token punctuation">(</span>Docker Inc., v0.8.2-docker<span class="token punctuation">)</span>  scan: Docker Scan <span class="token punctuation">(</span>Docker Inc., v0.17.0<span class="token punctuation">)</span>Server: Containers: <span class="token number">1</span> <span class="token comment">#当前主机运行的容器总数</span>  Running: <span class="token number">1</span> <span class="token comment">#运行中的容器</span>  Paused: <span class="token number">0</span> <span class="token comment">#暂停的容器</span>  Stopped: <span class="token number">0</span> <span class="token comment">#停止的容器</span> Images: <span class="token number">6</span> <span class="token comment">#当前服务器的镜像数</span> Server Version: <span class="token number">20.10</span>.17 <span class="token comment">#服务端版本</span> Storage Driver: overlay2 <span class="token comment">#正在使用的存储引擎</span>  Backing Filesystem: xfs <span class="token comment">#服务器的磁盘文件系统</span>  Supports d_type: <span class="token boolean">true</span> <span class="token comment">#是否支持d_type</span>  Native Overlay Diff: <span class="token boolean">true</span> <span class="token comment">#是否支持差异数据存储</span>  userxattr: <span class="token boolean">false</span>  Logging Driver: json-file <span class="token comment">#日志类型</span> Cgroup Driver: cgroupfs <span class="token comment">#cgroups类型</span> Cgroup Version: <span class="token number">1</span> Plugins: <span class="token comment">#插件</span>  Volume: <span class="token builtin class-name">local</span> <span class="token comment">#卷 </span>  Network: bridge <span class="token function">host</span> ipvlan macvlan null overlay <span class="token comment">#overlay跨主机通信</span>  Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> logentries splunk syslog <span class="token comment">#日志类型</span> Swarm: inactive <span class="token comment">#是否支持swarm</span> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc <span class="token comment">#已安装的容器运行时</span> Default Runtime: runc <span class="token comment">#默认使用的容器运行时</span> Init Binary: docker-init <span class="token comment">#初始化容器的守护进程，即pid为1的进程</span> containerd version: 9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6 <span class="token comment">#版本</span> runc version: v1.1.4-0-g5fd4c4d <span class="token comment">#runc版本</span> init version: de40ad0 <span class="token comment">#init版本</span> Security Options: <span class="token comment">#安全选项</span>  apparmor <span class="token comment">#安全模块</span>  seccomp <span class="token comment">#审计</span>   Profile: default <span class="token comment">#默认的配置文件</span> Kernel Version: <span class="token number">5.4</span>.0-125-generic <span class="token comment">#宿主机内核版本</span> Operating System: Ubuntu <span class="token number">20.04</span>.4 LTS <span class="token comment">#宿主机操作系统</span> OSType: linux <span class="token comment">#宿主机操作系统类型</span> Architecture: x86_64 <span class="token comment">#宿主机架构</span> CPUs: <span class="token number">2</span> <span class="token comment">#宿主机cpu数量</span> Total Memory: <span class="token number">1</span>.907GiB <span class="token comment">#宿主机总内存</span> Name: node10 <span class="token comment">#宿主机hostname</span> ID: CQU2:BUIE:VTFV:C2VH:BJFV:KHPN:LV24:3VRM:OHB6:MWDK:QVOQ:PNR6 <span class="token comment">#宿主机id</span> Docker Root Dir: /var/lib/docker <span class="token comment">#宿主机数据保存目录</span> Debug Mode: <span class="token boolean">false</span> <span class="token comment">#是否开启debug</span> Registry: https://index.docker.io/v1/ Labels: <span class="token comment">#其他标签</span> Experimental: <span class="token boolean">false</span> <span class="token comment">#是否测试版</span> Insecure Registries: <span class="token comment">#非安全的镜像仓库</span>  <span class="token number">127.0</span>.0.0/8 Registry Mirrors:  https://x76gajt3.mirror.aliyuncs.com/ Live Restore Enabled: <span class="token boolean">false</span> <span class="token comment">#是否开启活动重启(重启docker-daemon不关闭容器)</span>WARNING: No swap limit support <span class="token comment">#系统警告信息(没有开启swap资源限制)</span></code></pre></div></figure><h2 id="1-3-镜像加速器"><a href="#1-3-镜像加速器" class="headerlink" title="1.3 镜像加速器"></a>1.3 镜像加速器</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿里云加速器</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://x76gajt3.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span class="token comment">#中科大镜像加速器</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></code></pre></div></figure><h2 id="1-4-解决swap限制警告"><a href="#1-4-解决swap限制警告" class="headerlink" title="1.4 解决swap限制警告"></a>1.4 解决swap限制警告</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node10:~<span class="token comment"># vim /etc/default/grub</span><span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_TIMEOUT_STYLE</span><span class="token operator">=</span>hidden<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_DISTRIBUTOR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>lsb_release <span class="token parameter variable">-i</span> <span class="token parameter variable">-s</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token builtin class-name">echo</span> Debian<span class="token variable">`</span></span><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"maybe-ubiquity"</span><span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"cgroup_enable=memory swapaccount=1"</span>root@node10:~<span class="token comment"># update-grub</span>Sourcing <span class="token function">file</span> <span class="token variable"><span class="token variable">`</span>/etc/default/grub'Sourcing <span class="token function">file</span> <span class="token variable">`</span></span>/etc/default/grub.d/init-select.cfg'Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-5.4.0-125-genericFound initrd image: /boot/initrd.img-5.4.0-125-genericFound linux image: /boot/vmlinuz-5.4.0-124-genericFound initrd image: /boot/initrd.img-5.4.0-124-genericredoneroot@node10:~<span class="token comment"># reboot</span></code></pre></div></figure><h2 id="1-5-Docker存储引擎"><a href="#1-5-Docker存储引擎" class="headerlink" title="1.5 Docker存储引擎"></a>1.5 Docker存储引擎</h2><p>目前Docker的默认存储引擎overlay2，不同的存储引擎需要相应的系统支持，如需磁盘分区的时候传递d_type文件分层功能，需要传递内核参数开启格式化磁盘的时候指定的功能。</p><h2 id="1-6-Docker服务进程"><a href="#1-6-Docker服务进程" class="headerlink" title="1.6 Docker服务进程"></a>1.6 Docker服务进程</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#docker版本</span>root@node10:~<span class="token comment"># docker --version</span>Docker version <span class="token number">20.10</span>.17, build 100c701<span class="token comment">#查看docker进程，有4个进程</span><span class="token comment">#dockerd：被client直接访问，父进程为systemd守护进程</span><span class="token comment">#docker-proxy：实现容器通信，父进程为dockerd</span><span class="token comment">#containerd：被dockerd进程调用以实现与runc交互</span><span class="token comment">#containerd-shim：真正运行容器的载体，父进程systemd守护进程</span>root@node10:~<span class="token comment"># pstree -p 1</span>           ├─containerd<span class="token punctuation">(</span><span class="token number">814</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">866</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">867</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">868</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">869</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">930</span><span class="token punctuation">)</span>           │                 ├─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">932</span><span class="token punctuation">)</span>           │                 └─<span class="token punctuation">&#123;</span>containerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">952</span><span class="token punctuation">)</span>           ├─containerd-shim<span class="token punctuation">(</span><span class="token number">2459</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">2484</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">2550</span><span class="token punctuation">)</span>           │                       │             └─nginx<span class="token punctuation">(</span><span class="token number">2551</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2460</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2461</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2462</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2463</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2464</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2465</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2466</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2467</span><span class="token punctuation">)</span>           │                       ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2468</span><span class="token punctuation">)</span>           │                       └─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2566</span><span class="token punctuation">)</span>           ├─dockerd<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span>─┬─docker-proxy<span class="token punctuation">(</span><span class="token number">2437</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2438</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2439</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2440</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2441</span><span class="token punctuation">)</span>           │              │                    └─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2443</span><span class="token punctuation">)</span>           │              ├─docker-proxy<span class="token punctuation">(</span><span class="token number">2442</span><span class="token punctuation">)</span>─┬─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2444</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2445</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2446</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2447</span><span class="token punctuation">)</span>           │              │                    ├─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2448</span><span class="token punctuation">)</span>           │              │                    └─<span class="token punctuation">&#123;</span>docker-proxy<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2449</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">966</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">967</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">968</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">969</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">970</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">971</span><span class="token punctuation">)</span>           │              ├─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">975</span><span class="token punctuation">)</span>           │              └─<span class="token punctuation">&#123;</span>dockerd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2450</span><span class="token punctuation">)</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Docker简介</title>
    <link href="/2022/08/30/Container/Docker/docker01/"/>
    <url>/2022/08/30/Container/Docker/docker01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker是什么？"><a href="#1-Docker是什么？" class="headerlink" title="1.Docker是什么？"></a>1.Docker是什么？</h1><p>Docker是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。</p><p>Docker是基于Linux内核实现，最早采用LXC技术(LinuX Container)，LXC是Linux原生支持的容器技术，可以提供轻量级的虚拟化。Docker后改为自己研发并开源的runc技术运行容器。</p><p>Docker相比虚拟机的交付速度更快，资源消耗更低，Docker使用客户端-服务器(C&#x2F;S)架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker三个基本概念：</p><ul><li>镜像(Image)：Docker镜像，就相当于一个root文件系统。比如官方镜像ubuntu:20.04就包含了完整的一套Ubuntu20.04最小系统的root文件系统。</li><li>容器(Container)：镜像和容器的关系，就像面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行的实体。容器可以被创建，启动，停止，删除，暂停等。</li><li>仓库(Repository)：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p><img src="/2022/08/30/Container/Docker/docker01/image-20220829124549860.png" alt="image-20220829124549860"> </p><p>Docker的组成：</p><ul><li>Docker镜像(Image)：Docker镜像用于创建Docker容器的模板，比如Ubuntu系统。</li><li>Docker容器(Container)：容器是独立的一个或一组应用，是镜像运行时的实体。</li><li>Docker客户端(Client)：Docker客户端通过命令行或者其他工具使用Docker SDK与Docker的守护进程通信。</li><li>Docker服务端(Server)：Docker守护进程，运行Docker容器。</li><li>Docker主机(Host)：一个物理机或者虚拟机用于执行Docker守护进程和容器。</li><li>Docker仓库(Registry)：Docker仓库用来保存镜像，可以理解为代码控制中的代码仓库。</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方仓库</span>https://hub.docker.com/</code></pre></div></figure><h1 id="2-Docker底层技术"><a href="#2-Docker底层技术" class="headerlink" title="2.Docker底层技术"></a>2.Docker底层技术</h1><p>Docker底层的核心技术包括：</p><ul><li>Linux上的名字空间(Namespaces)</li><li>控制组(Control Group)</li><li>Union文件系统(Union File Systems)</li><li>容器格式(Container Format)</li></ul><h2 id="2-1-Linux-Namespace"><a href="#2-1-Linux-Namespace" class="headerlink" title="2.1 Linux Namespace"></a>2.1 Linux Namespace</h2><p>​Namespace是Linux系统的底层概念，在内核层实现，即有一些不同类型的命名空间被部署在内核，各个Docker容器运行在同一个Docker主进程并且共用同一个宿主机系统内核，各Docker容器运行在宿主机的用户控件，每个容器都要有类似于虚拟机一样的相互隔离的运行空间，但是容器技术是在一个进程内实现运行指定服务的运行环境，并且还可以保护宿主机内核不受其他进程的干扰和影响，如文件系统空间，网络空间，进程空间等，目前主要通过以下技术实现容器运行空间的相互隔离。</p><table><thead><tr><th align="left">隔离类型</th><th>功能</th><th>系统调用参数</th><th>内核版本</th></tr></thead><tbody><tr><td align="left">MNT Namespace</td><td>提供磁盘挂载点和文件系统的隔离能力</td><td>CLONE_NEWNS</td><td>Linux 2.4.19</td></tr><tr><td align="left">IPC Namespace</td><td>提供进程间通信的隔离能力</td><td>CLONE_NEWIPC</td><td>Linux 2.6.19</td></tr><tr><td align="left">UTS Namespace</td><td>提供主机名隔离能力</td><td>CLONE_NEWUTS</td><td>Linux 2.6.19</td></tr><tr><td align="left">PID Namespace</td><td>提供进程隔离能力</td><td>CLONE_NEWPID</td><td>Linux 2.6.24</td></tr><tr><td align="left">Net Namespace</td><td>提供网络隔离能力</td><td>CLONE_NEWNET</td><td>Linux 2.6.29</td></tr><tr><td align="left">User Namespace</td><td>提供用户隔离能力</td><td>CLONE_NEWUSER</td><td>Linux 3.8</td></tr></tbody></table><h3 id="2-1-1-MNT-Namespace"><a href="#2-1-1-MNT-Namespace" class="headerlink" title="2.1.1 MNT Namespace"></a>2.1.1 MNT Namespace</h3><p>​每个容器都要有独立的根文件系统和独立的用户空间，以实现在容器里面启动服务并且使用容器的运行环境，即一个宿主机是ubuntu的服务器，可以在里面启动一个CentOS运行环境的容器并且在容器里面启动一个Nginx服务，这个Nginx运行时使用的运行环境就是CentOS系统目录的运行环境，但是在容器里面是不能访问宿主机的资源，宿主机是使用了chroot技术把容器锁定到一个指定的运行目录里面。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动容器验证</span><span class="token comment">#docke版本</span>root@node10:~<span class="token comment"># docker --version</span>Docker version <span class="token number">20.10</span>.17, build 100c701<span class="token comment">#启动容器</span>root@node10:~<span class="token comment"># docker run -d --name nginx1 -p 80:80 nginx</span>327eccd06f3e6dcd94c455943ecfa91f0083a906d1a1bb657359bdaaecd49d5froot@node10:~<span class="token comment"># docker run -d --name nginx2 -p 81:80 nginx</span>c882dc8e3514e7c1c83104680ff219cda18a3d016829ef564c086a1bb31e4d05root@node10:~<span class="token comment"># docker run -d --name nginx3 -p 82:80 nginx</span>c5c8712cf3e63149f82427347382b8486502541fe76775a4589290c983d2615d<span class="token comment">#Debian系统安装基础命令</span>~<span class="token comment"># apt update</span>~<span class="token comment"># apt -y install procps iputils-ping net-tools</span><span class="token comment">#验证容器根文件系统</span>root@node10:~<span class="token comment"># docker exec -it c5c8712cf3e6 bash</span>root@c5c8712cf3e6:/<span class="token comment"># cat /etc/issue</span>Debian GNU/Linux <span class="token number">11</span> <span class="token punctuation">\</span>n <span class="token punctuation">\</span>lroot@c5c8712cf3e6:/<span class="token comment"># ls /</span>bin   dev   docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  varboot  docker-entrypoint.d  etc lib   media  opt  root  sbin  sys  usr</code></pre></div></figure><h3 id="2-1-2-IPC-Namespace"><a href="#2-1-2-IPC-Namespace" class="headerlink" title="2.1.2 IPC Namespace"></a>2.1.2 IPC Namespace</h3><p>​一个容器内的进程间通信，允许一个容器内的不同进程的内存，缓存等数据访问，但是不能跨容器访问其他容器的数据。</p><h3 id="2-1-3-UTS-Namespace"><a href="#2-1-3-UTS-Namespace" class="headerlink" title="2.1.3 UTS Namespace"></a>2.1.3 UTS Namespace</h3><p>​UTS(“UNIX Time-sharing System”) 包含了运行内核的名称，版本，底层体系结构4类型等信息用于系统标识，其中包含了hostname和domain name，它使得一个容器拥有属于自己的hostname标识，这个主机名标识独立于宿主机系统和其上的其他容器。</p><h3 id="2-1-4-PID-Namespace"><a href="#2-1-4-PID-Namespace" class="headerlink" title="2.1.4 PID Namespace"></a>2.1.4 PID Namespace</h3><p>不同用户的进程就是通过 pid 名字空间隔离开的，且不同名字空间中可以有相同 pid</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个nginx容器</span>root@node10:~<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS                               NAMES327eccd06f3e   nginx     <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">8</span> hours ago   Up <span class="token number">8</span> hours   <span class="token number">0.0</span>.0.0:80-<span class="token operator">></span><span class="token number">80</span>/tcp, :::80-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx1<span class="token comment">#nginx容器内的主进程与工作进程</span>root@327eccd06f3e:/<span class="token comment"># ps -ef | grep nginx</span>root           <span class="token number">1</span>       <span class="token number">0</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: master process nginx <span class="token parameter variable">-g</span> daemon off<span class="token punctuation">;</span>nginx         <span class="token number">30</span>       <span class="token number">1</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processnginx         <span class="token number">31</span>       <span class="token number">1</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processroot         <span class="token number">455</span>     <span class="token number">442</span>  <span class="token number">0</span> <span class="token number">13</span>:17 pts/1    00:00:00 <span class="token function">grep</span> nginx<span class="token comment">#宿主机的pid与容器的pid关系，查看宿主机nginx进程，可以看到nginx的主进程pid:9212，它的父进程pid:9190</span>root@node10:~<span class="token comment"># ps -ef | grep nginx</span>root        <span class="token number">9212</span>    <span class="token number">9190</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: master process nginx <span class="token parameter variable">-g</span> daemon off<span class="token punctuation">;</span>systemd+    <span class="token number">9294</span>    <span class="token number">9212</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processsystemd+    <span class="token number">9295</span>    <span class="token number">9212</span>  <span class="token number">0</span> 05:39 ?        00:00:00 nginx: worker processroot       <span class="token number">23593</span>   <span class="token number">20740</span>  <span class="token number">0</span> <span class="token number">13</span>:18 pts/0    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto nginx<span class="token comment">#查看宿主机pid:9190</span>root@node10:~<span class="token comment"># pstree -p 9190</span>containerd-shim<span class="token punctuation">(</span><span class="token number">9190</span><span class="token punctuation">)</span>─┬─bash<span class="token punctuation">(</span><span class="token number">12055</span><span class="token punctuation">)</span>                      ├─bash<span class="token punctuation">(</span><span class="token number">22913</span><span class="token punctuation">)</span>                      ├─nginx<span class="token punctuation">(</span><span class="token number">9212</span><span class="token punctuation">)</span>─┬─nginx<span class="token punctuation">(</span><span class="token number">9294</span><span class="token punctuation">)</span>                      │             └─nginx<span class="token punctuation">(</span><span class="token number">9295</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9191</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9192</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9193</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9194</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9195</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9196</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9197</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9198</span><span class="token punctuation">)</span>                      ├─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9261</span><span class="token punctuation">)</span>                      └─<span class="token punctuation">&#123;</span>containerd-shim<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">9262</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="2-1-5-Net-Namespace"><a href="#2-1-5-Net-Namespace" class="headerlink" title="2.1.5 Net Namespace"></a>2.1.5 Net Namespace</h3><p>​Docker使用Net Namespace启用一个vethX接口，这样容器将拥有它自己的桥接IP地址，通常是docker0，而docker0实质就是Linux的虚拟网桥，网桥是在OSI七层模型的数据链路层的网络设备，通过Mac地址对网络进行划分，并且在不同网络直接传递数据。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看宿主机网卡信息</span>root@node10:~<span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        inet6 fe80::42:76ff:fea2:3ea  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 02:42:76:a2:03:ea  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1857</span>  bytes <span class="token number">90366</span> <span class="token punctuation">(</span><span class="token number">90.3</span> KB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">2369</span>  bytes <span class="token number">10118460</span> <span class="token punctuation">(</span><span class="token number">10.1</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>ens33: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">192.168</span>.1.10  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.1.255        inet6 fe80::20c:29ff:fea2:51d5  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether 00:0c:29:a2:51:d5  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">99777</span>  bytes <span class="token number">45657571</span> <span class="token punctuation">(</span><span class="token number">45.6</span> MB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">8471</span>  bytes <span class="token number">976578</span> <span class="token punctuation">(</span><span class="token number">976.5</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>veth06a285f: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::747b:2fff:fea7:933  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">76</span>:7b:2f:a7:09:33  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">17</span>  bytes <span class="token number">1338</span> <span class="token punctuation">(</span><span class="token number">1.3</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>veth29ed0d6: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::406c:45ff:fe90:12e3  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">42</span>:6c:45:90:12:e3  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1842</span>  bytes <span class="token number">113991</span> <span class="token punctuation">(</span><span class="token number">113.9</span> KB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">2360</span>  bytes <span class="token number">10117153</span> <span class="token punctuation">(</span><span class="token number">10.1</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>vetha303916: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet6 fe80::f457:37ff:fe37:69c4  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether f6:57:37:37:69:c4  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">15</span>  bytes <span class="token number">1118</span> <span class="token punctuation">(</span><span class="token number">1.1</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span><span class="token comment">#查看宿主机桥接设备</span>root@node10:~<span class="token comment"># apt install bridge-utils</span>root@node10:~<span class="token comment"># brctl show</span>bridge namebridge <span class="token function">id</span>STP enabledinterfacesdocker0<span class="token number">8000</span>.024276a203eanoveth06a285f            veth29ed0d6            vetha303916    <span class="token comment">#查看容器IP</span>root@327eccd06f3e:/<span class="token comment"># ifconfig</span>eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.2  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255        ether 02:42:ac:11:00:02  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">4195</span>  bytes <span class="token number">10217822</span> <span class="token punctuation">(</span><span class="token number">9.7</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">3380</span>  bytes <span class="token number">202715</span> <span class="token punctuation">(</span><span class="token number">197.9</span> KiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span></code></pre></div></figure><p> <img src="/2022/08/30/Container/Docker/docker01/image-20220829214559207.png" alt="image-20220829214559207">    </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看宿主机iptables规则</span>root@node10:~<span class="token comment"># iptables -t nat -vnL</span>Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1830</span> packets, 286K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">8</span>   <span class="token number">394</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ADDRTYPE match dst-type LOCALChain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1818</span> packets, 285K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">34</span> packets, <span class="token number">2419</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">0</span>     <span class="token number">0</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0           <span class="token operator">!</span><span class="token number">127.0</span>.0.0/8          ADDRTYPE match dst-type LOCAL<span class="token comment">#源地址转换，让容器通过宿主机访问外网</span>Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">34</span> packets, <span class="token number">2419</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination            <span class="token number">12</span>   <span class="token number">730</span> MASQUERADE  all  --  *      <span class="token operator">!</span>docker0  <span class="token number">172.17</span>.0.0/16        <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.2           <span class="token number">172.17</span>.0.2           tcp dpt:80    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.3           <span class="token number">172.17</span>.0.3           tcp dpt:80    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.4           <span class="token number">172.17</span>.0.4           tcp dpt:80<span class="token comment">#目的地址转换，以实现从外宿主机访问容器</span>Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination             <span class="token number">0</span>     <span class="token number">0</span> RETURN     all  --  docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:80 to:172.17.0.2:80    <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:81 to:172.17.0.3:80    <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:82 to:172.17.0.4:80            root@node10:~<span class="token comment"># iptables -vnL</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">16972</span> packets, 5634K bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         <span class="token comment">#转发规则</span>Chain FORWARD <span class="token punctuation">(</span>policy DROP <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         <span class="token number">11758</span>   20M DOCKER-<span class="token environment constant">USER</span>  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0           <span class="token number">11758</span>   20M DOCKER-ISOLATION-STAGE-1  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            <span class="token number">6528</span>   20M ACCEPT     all  --  *      docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ctstate RELATED,ESTABLISHED    <span class="token number">2</span>   <span class="token number">104</span> DOCKER     all  --  *      docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            <span class="token number">5228</span>  246K ACCEPT     all  --  docker0 <span class="token operator">!</span>docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0               <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  docker0 docker0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0 </code></pre></div></figure><h3 id="2-1-6-User-Namespace"><a href="#2-1-6-User-Namespace" class="headerlink" title="2.1.6 User Namespace"></a>2.1.6 User Namespace</h3><p>​User Namespace允许在各个宿主机的各个容器空间内创建相同的用户名以及相同的用户UID和GID，只是会把用户的作用范围限制在每个容器内，即A容器和B容器可以有相同的用户名，但是此用户名的有效范围仅是当前容器内，不能访问另外一个容器内的文件系统，即相互隔离，互不影响。</p><h2 id="2-2-Linux-Control-groups"><a href="#2-2-Linux-Control-groups" class="headerlink" title="2.2 Linux Control groups"></a>2.2 Linux Control groups</h2><p>​Linux Control groups是Linux内核的一个特性(内核2.6.24开始支持)，主要用来对共享资源进行隔离，限制，审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时对系统资源的竞争。控制组可以提供对容器的内存，CPU，磁盘IO等资源的限制和审计管理。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#CentOS7.9 cgroups</span><span class="token punctuation">[</span>root@node50 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release </span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token punctuation">[</span>root@node50 ~<span class="token punctuation">]</span><span class="token comment"># cat /boot/config-3.10.0-1160.el7.x86_64 | grep CGROUP</span><span class="token assign-left variable">CONFIG_CGROUPS</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_CGROUP_FREEZER</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PIDS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_DEVICE</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_CPUACCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_HUGETLB</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PERF</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_SCHED</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_BLK_CGROUP</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_DEBUG_BLK_CGROUP is not set</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NET_CLS_CGROUP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_NETPRIO_CGROUP</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu20.04 cgroups</span>root@node10:~<span class="token comment"># cat /etc/issue</span>Ubuntu <span class="token number">20.04</span>.4 LTS <span class="token punctuation">\</span>n <span class="token punctuation">\</span>lroot@node10:~<span class="token comment"># uname -r</span><span class="token number">5.4</span>.0-125-genericroot@node10:~<span class="token comment"># cat /boot/config-5.4.0-125-generic | grep CGROUP</span><span class="token assign-left variable">CONFIG_CGROUPS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_BLK_CGROUP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_WRITEBACK</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_SCHED</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PIDS</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_RDMA</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_FREEZER</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_HUGETLB</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_DEVICE</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_CPUACCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_PERF</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_BPF</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_SOCK_CGROUP_DATA</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_BLK_CGROUP_IOLATENCY is not set</span><span class="token assign-left variable">CONFIG_BLK_CGROUP_IOCOST</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_BFQ_CGROUP_DEBUG is not set</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_NET_CLS_CGROUP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_CGROUP_NET_PRIO</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_CGROUP_NET_CLASSID</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cgroups中内存模块</span>root@node10:~<span class="token comment"># cat /boot/config-5.4.0-125-generic | grep MEMCG</span><span class="token assign-left variable">CONFIG_MEMCG</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_MEMCG_SWAP</span><span class="token operator">=</span>y<span class="token comment"># CONFIG_MEMCG_SWAP_ENABLED is not set</span><span class="token assign-left variable">CONFIG_MEMCG_KMEM</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_SLUB_MEMCG_SYSFS_ON</span><span class="token operator">=</span>y</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cgroups具体实现</span>blkio：<span class="token comment">#块设备IO限制</span>cpu：<span class="token comment">#使用调度程序为cgroup任务提供cpu访问</span>cpuacct：<span class="token comment">#产生cgroup任务的cpu资源报告</span>cpuset：<span class="token comment">#如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存</span>devices：<span class="token comment">#允许或拒绝cgroup任务对设备的访问</span>freezer：<span class="token comment">#暂停和恢复cgroup任务</span>memory：<span class="token comment">#设置每个cgroup的内存限制以及产生内存资源报告</span>net_cls：<span class="token comment">#标记每个网络包以供cgroup方便使用</span>ns：<span class="token comment">#命名空间子系统</span>perf_event：<span class="token comment">#增加了对group的监测跟踪的能力，可以监测属于某个特定的group的所有线程以及运行在特定cpu上的线程。</span><span class="token comment">#查看系统cgroups</span>root@node10:~<span class="token comment"># ll /sys/fs/cgroup/</span>total <span class="token number">0</span>drwxr-xr-x <span class="token number">15</span> root root <span class="token number">380</span> Aug <span class="token number">29</span> 01:11 ./drwxr-xr-x <span class="token number">11</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 <span class="token punctuation">..</span>/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 blkio/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">11</span> Aug <span class="token number">29</span> 01:11 cpu -<span class="token operator">></span> cpu,cpuacct/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">11</span> Aug <span class="token number">29</span> 01:11 cpuacct -<span class="token operator">></span> cpu,cpuacct/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 cpu,cpuacct/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 cpuset/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 devices/dr-xr-xr-x  <span class="token number">4</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 freezer/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 hugetlb/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 memory/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">16</span> Aug <span class="token number">29</span> 01:11 net_cls -<span class="token operator">></span> net_cls,net_prio/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 net_cls,net_prio/lrwxrwxrwx  <span class="token number">1</span> root root  <span class="token number">16</span> Aug <span class="token number">29</span> 01:11 net_prio -<span class="token operator">></span> net_cls,net_prio/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 perf_event/dr-xr-xr-x  <span class="token number">5</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 pids/dr-xr-xr-x  <span class="token number">3</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 rdma/dr-xr-xr-x  <span class="token number">6</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:11 systemd/dr-xr-xr-x  <span class="token number">6</span> root root   <span class="token number">0</span> Aug <span class="token number">29</span> 01:14 unified/</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).Ubuntu基础配置</title>
    <link href="/2022/08/28/Linux/Ubuntu/UbuntuBase/"/>
    <url>/2022/08/28/Linux/Ubuntu/UbuntuBase/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ubuntu20-04基础配置"><a href="#1-Ubuntu20-04基础配置" class="headerlink" title="1.Ubuntu20.04基础配置"></a>1.Ubuntu20.04基础配置</h1><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http">#官⽅使⽤⽂档<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//help.ubuntu.com</span></span></code></pre></div></figure><h2 id="1-1-更改主机名-x2F-时区"><a href="#1-1-更改主机名-x2F-时区" class="headerlink" title="1.1 更改主机名&#x2F;时区"></a>1.1 更改主机名&#x2F;时区</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更改主机名</span><span class="token comment">#方式一：</span>root@node80:~<span class="token comment"># cat /etc/hostname </span>node80<span class="token comment">#方式二：</span>root@node80:~<span class="token comment"># hostnamectl set-hostname gitlab</span><span class="token comment">#更改时区</span>root@node80:~<span class="token comment"># timedatectl set-timezone Asia/Shanghai</span><span class="token function">ln</span> <span class="token parameter variable">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token builtin class-name">echo</span> <span class="token string">"LC_TIME=en_DK.UTF-8"</span> <span class="token operator">>></span> /etc/default/locale</code></pre></div></figure><h2 id="1-2-更改网卡名称为eth"><a href="#1-2-更改网卡名称为eth" class="headerlink" title="1.2 更改网卡名称为eth*"></a>1.2 更改网卡名称为eth*</h2><p>如果没有在安装系统之前传递内核参数将⽹卡名称更改为eth*，则可以在安装系统之后使用以下方式修改： </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/default/grub</span><span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_TIMEOUT_STYLE</span><span class="token operator">=</span>hidden<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">GRUB_DISTRIBUTOR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>lsb_release <span class="token parameter variable">-i</span> <span class="token parameter variable">-s</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token builtin class-name">echo</span> Debian<span class="token variable">`</span></span><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">""</span><span class="token comment">#GRUB_CMDLINE_LINUX=""</span><span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"net.ifnames=0 biosdevname=0"</span>root@node80:~<span class="token comment"># update-grub</span>Sourcing <span class="token function">file</span> <span class="token variable"><span class="token variable">`</span>/etc/default/grub'Sourcing <span class="token function">file</span> <span class="token variable">`</span></span>/etc/default/grub.d/init-select.cfg'Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-5.15.0-25-genericFound initrd image: /boot/initrd.img-5.15.0-25-genericWarning: os-prober will not be executed to detect other bootable partitions.Systems on them will not be added to the GRUB boot configuration.Check GRUB_DISABLE_OS_PROBER documentation entry.<span class="token keyword">done</span>root@node80:~<span class="token comment"># reboot</span></code></pre></div></figure><h2 id="1-3-配置root远程登录"><a href="#1-3-配置root远程登录" class="headerlink" title="1.3 配置root远程登录"></a>1.3 配置root远程登录</h2><p>默认情况下，ubuntu不允许root用户远程ssh，如果有实际场景需要允许root⽤⼾远程ssh，则需要设置root密码，并且编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config⽂件修改如下：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">#默认为禁⽌登录</span><span class="token number">33</span> <span class="token comment">#PermitRootLogin prohibit-password</span><span class="token comment">#改为允许登录</span><span class="token number">34</span> PermitRootLogin <span class="token function">yes</span><span class="token comment">#打开密码认证，其实默认就是允许通过密码认证登录</span><span class="token number">58</span> PasswordAuthentication <span class="token function">yes</span>~$ <span class="token function">sudo</span> <span class="token function">su</span> - root <span class="token comment">#切换到root⽤⼾环境</span>~<span class="token comment"># passwd #设置密码</span>Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully<span class="token comment">#重启ssh服务并测试root⽤⼾远程ssh连接</span>~<span class="token comment"># systemctl restart sshd</span></code></pre></div></figure><h2 id="1-4-网络配置"><a href="#1-4-网络配置" class="headerlink" title="1.4 网络配置"></a>1.4 网络配置</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官⽅⽂档</span>https://netplan.io/<span class="token comment">#Ubuntu从17.10开始，已放弃在/etc/network/interfaces⾥固定IP的配置,⽽是改成netplan⽅式,配置⽂件是：</span>root@node80:~<span class="token comment"># cat /etc/netplan/00-installer-config.yaml</span></code></pre></div></figure><h3 id="1-4-1-单网卡静态IP地址"><a href="#1-4-1-单网卡静态IP地址" class="headerlink" title="1.4.1 单网卡静态IP地址"></a>1.4.1 单网卡静态IP地址</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml </span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5  version: <span class="token number">2</span>root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-2-配置多网卡静态IP"><a href="#1-4-2-配置多网卡静态IP" class="headerlink" title="1.4.2 配置多网卡静态IP"></a>1.4.2 配置多网卡静态IP</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5    ens37:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-3-单网卡桥接"><a href="#1-4-3-单网卡桥接" class="headerlink" title="1.4.3 单网卡桥接"></a>1.4.3 单网卡桥接</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no  bridges:    br0:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens33  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-4-多网卡桥接"><a href="#1-4-4-多网卡桥接" class="headerlink" title="1.4.4 多网卡桥接"></a>1.4.4 多网卡桥接</h3><p>ubuntu 22.04多网卡的桥接配置，将br0和br1分别桥接到ens33和ens37</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bridges:    br0:      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens33    br1:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - ens37  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-5-双网卡绑定"><a href="#1-4-5-双网卡绑定" class="headerlink" title="1.4.5 双网卡绑定"></a>1.4.5 双网卡绑定</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#7种bond模式说明</span>第1种模式：mod<span class="token operator">=</span><span class="token number">0</span>，即：<span class="token punctuation">(</span>balance-rr<span class="token punctuation">)</span> Round-robin policy（平衡抡循环策略）特点：传输数据包顺序是依次传输（即：第1个包⾛eth0，下⼀个包就⾛eth1….⼀直循环下去，直到最后⼀个传输完毕），此模式提供负载平衡和容错能⼒。第2种模式：mod<span class="token operator">=</span><span class="token number">1</span>，即： <span class="token punctuation">(</span>active-backup<span class="token punctuation">)</span> Active-backup policy（主-备份策略）特点：只有⼀个设备处于活动状态，当⼀个宕掉另⼀个⻢上由备份转换为主设备。mac地址是外部可⻅得，从外⾯看来，bond的MAC地址是唯⼀的，以避免switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>发⽣混乱。此模式只提供了容错能⼒；由此可⻅此算法的优点是可以提供⾼⽹络连接的可⽤性，但是它的资源利⽤率较低，只有⼀个接⼝处于⼯作状态，在有 N 个⽹络接⼝的情况下，资源利⽤率为1/N。第3种模式：mod<span class="token operator">=</span><span class="token number">2</span>，即：<span class="token punctuation">(</span>balance-xor<span class="token punctuation">)</span> XOR policy（平衡策略）特点：基于指定的传输HASH策略传输数据包。缺省的策略是：<span class="token punctuation">(</span>源MAC地址 XOR ⽬标MAC地址<span class="token punctuation">)</span> % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能⼒。第4种模式：mod<span class="token operator">=</span><span class="token number">3</span>，即：broadcast（⼴播策略）特点：在每个slave接⼝上传输每个数据包，此模式提供了容错能⼒。第5种模式：mod<span class="token operator">=</span><span class="token number">4</span>，即：<span class="token punctuation">(</span><span class="token number">802</span>.3ad<span class="token punctuation">)</span> IEEE <span class="token number">802</span>.3adDynamic <span class="token function">link</span> aggregation（IEEE <span class="token number">802</span>.3ad 动态链接聚合）特点：创建⼀个聚合组，它们共享同样的速率和双⼯设定。根据802.3ad规范将多个slave⼯作在同⼀个激活的聚合体下。必要条件：条件1：ethtool⽀持获取每个slave的速率和双⼯设定。条件2：switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>⽀持IEEE <span class="token number">802</span>.3ad Dynamic <span class="token function">link</span> aggregation。条件3：⼤多数switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>需要经过特定配置才能⽀持802.3ad模式。第6种模式：mod<span class="token operator">=</span><span class="token number">5</span>，即：<span class="token punctuation">(</span>balance-tlb<span class="token punctuation">)</span> Adaptive transmit load balancing（适配器传输负载均衡）特点：不需要任何特别的switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>⽀持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另⼀个slave接管失败的slave的MAC地址。该模式的必要条件：ethtool⽀持获取每个slave的速率第7种模式：mod<span class="token operator">=</span><span class="token number">6</span>，即：<span class="token punctuation">(</span>balance-alb<span class="token punctuation">)</span> Adaptive load balancing（适配器适应性负载均衡）特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡<span class="token punctuation">(</span>receive load balance,rlb<span class="token punctuation">)</span>，⽽且不需要任何switch<span class="token punctuation">(</span>交换机<span class="token punctuation">)</span>的⽀持。</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-6-双网卡绑定-桥接"><a href="#1-4-6-双网卡绑定-桥接" class="headerlink" title="1.4.6 双网卡绑定+桥接"></a>1.4.6 双网卡绑定+桥接</h3><p>网卡绑定用于提供网卡接口冗余以及高可用和端口聚合共功能，桥接网卡再给需要桥接设备的服务使用。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  bridges:    br0:      dhcp4: no      dhcp6: no      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond0  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-7-内外多网卡绑定"><a href="#1-4-7-内外多网卡绑定" class="headerlink" title="1.4.7 内外多网卡绑定"></a>1.4.7 内外多网卡绑定</h3><p>多网络情况下实现网卡绑定</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no    ens38:      dhcp4: no      dhcp6: no    ens39:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>    bond1:      interfaces:        - ens38        - ens39      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  version: <span class="token number">2</span>  root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h3 id="1-4-8-内网多网卡绑定-桥接"><a href="#1-4-8-内网多网卡绑定-桥接" class="headerlink" title="1.4.8 内网多网卡绑定+桥接"></a>1.4.8 内网多网卡绑定+桥接</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/netplan/00-installer-config.yaml</span><span class="token comment"># This is the network config written by 'subiquity'</span>network:  ethernets:    ens33:      dhcp4: no      dhcp6: no    ens37:      dhcp4: no      dhcp6: no    ens38:      dhcp4: no      dhcp6: no    ens39:      dhcp4: no      dhcp6: no  bonds:    bond0:      interfaces:        - ens33        - ens37      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>    bond1:      interfaces:        - ens38        - ens39      parameters:        mode: active-backup        mii-monitor-interval: <span class="token number">100</span>  bridges:    br0:      dhcp4: no      dhcp6: no      addresses:      - <span class="token number">192.168</span>.1.80/24      gateway4: <span class="token number">192.168</span>.1.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond0    br1:      addresses: <span class="token punctuation">[</span><span class="token number">10.0</span>.0.80/8<span class="token punctuation">]</span>      gateway4: <span class="token number">10.0</span>.0.1      nameservers:        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5<span class="token punctuation">]</span>        search:        - <span class="token number">223.5</span>.5.5      interfaces:        - bond1  version: <span class="token number">2</span>root@node80:~<span class="token comment"># netplan apply</span></code></pre></div></figure><h2 id="1-5-软件包管理"><a href="#1-5-软件包管理" class="headerlink" title="1.5 软件包管理"></a>1.5 软件包管理</h2><p>在ubuntu安装、升级、卸载软件包等常规操作。  </p><h3 id="1-5-1-修改软件仓库"><a href="#1-5-1-修改软件仓库" class="headerlink" title="1.5.1 修改软件仓库"></a>1.5.1 修改软件仓库</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿⾥云仓库地址</span>https://opsx.alibaba.com/mirror<span class="token comment">#中科⼤</span>http://mirrors.ustc.edu.cn/help/ubuntu.html<span class="token comment">#清华⼤学</span>https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/<span class="token comment">#华为</span>https://mirrors.huaweicloud.com/</code></pre></div></figure><h3 id="1-5-2-apt-x2F-apt-get"><a href="#1-5-2-apt-x2F-apt-get" class="headerlink" title="1.5.2 apt&#x2F;apt-get"></a>1.5.2 apt&#x2F;apt-get</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt list #apt列出仓库软件包，等于yum list</span><span class="token comment"># apt search NAME #搜索安装包</span><span class="token comment"># apt show apache2 #查看某个安装包的详细信息</span><span class="token comment"># apt install apache2 #在线安装软件包</span><span class="token comment"># apt remove apache2 #卸载单个软件包但是保留配置⽂件</span><span class="token comment"># apt autoremove apache2 #删除安装包并解决依赖关系</span><span class="token comment"># apt update #更新本地软件包列表索引，修改了apt仓库后必须执⾏</span><span class="token comment"># apt purge apache2 #卸载单个软件包删除配置⽂件</span><span class="token comment"># apt upgrade #升级所有已安装且可升级到新版本的软件包</span><span class="token comment"># apt full-upgrade #升级整个系统，必要时可以移除旧软件包。</span><span class="token comment"># apt edit-sources #编辑source源⽂件</span><span class="token comment"># apt-cache madison nginx #查看仓库中软件包有哪些版本可以安装</span><span class="token comment"># apt install nginx=1.14.0-0ubuntu1.6 #安装软件包的时候指定安装具体的版本</span></code></pre></div></figure><h3 id="1-5-3-设置oracle-JDK环境"><a href="#1-5-3-设置oracle-JDK环境" class="headerlink" title="1.5.3 设置oracle JDK环境"></a>1.5.3 设置oracle JDK环境</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># cd /usr/local/src/</span>root@node80:/usr/local/src<span class="token comment"># ls</span>jdk-8u341-linux-x64.tar.gzroot@node80:/usr/local/src<span class="token comment"># tar -xvf jdk-8u341-linux-x64.tar.gz</span>root@node80:/usr/local/src<span class="token comment"># ln -sv /usr/local/src/jdk1.8.0_341/ /usr/local/jdk</span><span class="token string">'/usr/local/jdk'</span> -<span class="token operator">></span> <span class="token string">'/usr/local/src/jdk1.8.0_341/'</span>root@node80:~<span class="token comment"># vim /etc/profile</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JAVA_HOME</span>/jre/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JAVA_HOME</span>/jre/lib:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarroot@node80:~<span class="token comment"># source /etc/profile</span>root@node80:/usr/local/src<span class="token comment"># java -version</span><span class="token function">java</span> version <span class="token string">"1.8.0_341"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_341-b10<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.341</span>-b10, mixed mode<span class="token punctuation">)</span></code></pre></div></figure><h3 id="1-5-4-安装OpenJDK"><a href="#1-5-4-安装OpenJDK" class="headerlink" title="1.5.4 安装OpenJDK"></a>1.5.4 安装OpenJDK</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># apt install openjdk-8-jdk</span></code></pre></div></figure><h3 id="1-5-5-安装常用系统命令"><a href="#1-5-5-安装常用系统命令" class="headerlink" title="1.5.5 安装常用系统命令"></a>1.5.5 安装常用系统命令</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># apt install iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute iotop unzip zip net-tools</span></code></pre></div></figure><h3 id="1-5-6-系统资源限制优化"><a href="#1-5-6-系统资源限制优化" class="headerlink" title="1.5.6 系统资源限制优化"></a>1.5.6 系统资源限制优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">root@node80:~<span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure><h3 id="1-5-7-内核参数优化"><a href="#1-5-7-内核参数优化" class="headerlink" title="1.5.7 内核参数优化"></a>1.5.7 内核参数优化</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Controls source route verification</span>net.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#启用源路由核查功能</span>net.ipv4.ip_nonlocal_bind <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#允许非本地IP地址socket监听</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#开启IPV4转发</span><span class="token comment"># Do not accept source routing</span>net.ipv4.conf.default.accept_source_route <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#禁用所有IP源路由</span><span class="token comment"># Controls the System Request debugging functionality of the kernel</span>kernel.sysrq <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#关闭sysrq组合键</span><span class="token comment"># Controls whether core dumps will append the PID to the core filename.</span><span class="token comment"># Useful for debugging multi-threaded applications.</span>kernel.core_uses_pid <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#控制core文件的文件名是否添加pid作为扩展</span><span class="token comment"># Controls the use of TCP syncookies</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#与性能无关。用于解决TCP的SYN攻击</span><span class="token comment"># Disable netfilter on bridges.</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">0</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">0</span>net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># Controls the default maxmimum size of a mesage queue</span>kernel.msgmnb <span class="token operator">=</span> <span class="token number">65536</span> <span class="token comment">#每个消息队列的大小限制（单位：字节）</span><span class="token comment"># # Controls the maximum size of a message, in bytes</span>kernel.msgmax <span class="token operator">=</span> <span class="token number">65536</span> <span class="token comment">#整个系统最大消息队列数量限制</span><span class="token comment"># Controls the maximum shared segment size, in bytes</span>kernel.shmmax <span class="token operator">=</span> <span class="token number">68719476736</span> 单个共享内存段大小（单位：字节）<span class="token comment"># # Controls the maximum number of shared memory segments, in pages</span>kernel.shmall <span class="token operator">=</span> <span class="token number">4294967296</span> <span class="token comment">#所有内存大小（单位：页）</span><span class="token comment"># TCP kernel paramater</span>net.ipv4.tcp_mem <span class="token operator">=</span> <span class="token number">786432</span> <span class="token number">1048576</span> <span class="token number">1572864</span> <span class="token comment">#1st低于此值，TCP没有内存压力，2nd进入内存压力阶段，3rd TCP拒绝分配socket（单位：内存页）</span>net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">87380</span> <span class="token number">4194304</span> <span class="token comment">#定义TCP接受socket请求缓存的内存最小值、默认值、较大值</span>net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">16384</span> <span class="token number">4194304</span> <span class="token comment">#定义TCP发送缓存的最小值、默认值、最大值</span>net.ipv4.tcp_window_scaling <span class="token operator">=</span> <span class="token number">1</span> 支持更大的TCP窗口，如果TCP窗口最大超过65535（64K），必须设置该数值为1net.ipv4.tcp_sack <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#开启有选择应答</span><span class="token comment"># socket buffer</span>net.core.wmem_default <span class="token operator">=</span> <span class="token number">8388608</span> <span class="token comment">#表示内核套接字接受缓存区默认大小</span>net.core.rmem_default <span class="token operator">=</span> <span class="token number">8388608</span> <span class="token comment">#表示内核套接字发送缓存区默认大小</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">#表示内核套接字接受缓存区较大大小</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">#表示内核套接字发送缓存区较大大小</span>net.core.netdev_max_backlog <span class="token operator">=</span> <span class="token number">262144</span> <span class="token comment">#当网卡接收数据包的速度大于内核处理速度时，会有一个队列保存这些数据。这个参数表示该队列的较大值</span><span class="token comment">#默认值128，这个参数用于调节系统同时发起TCP连接数，在高并发的请求中，默认值可能会导致连接超时或者重传，因此需要结合高并发请求数来调整此值</span>net.core.somaxconn <span class="token operator">=</span> <span class="token number">20480</span>net.core.optmem_max <span class="token operator">=</span> <span class="token number">81920</span> <span class="token comment"># TCP conn</span><span class="token comment">#这个参数表示TCP三次握手建立阶段接受SYN请求队列的较大长度，默认1024，将其设置大一些可使出现nginx繁忙来不及accept新连接，linux不至于丢失客户端发起的连接请求</span>net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">262144</span>net.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">#该变量设置放弃回应一个tcp连接请求前，需要进行多少次重试。</span><span class="token comment">#该变量设置放弃回应一个tcp连接请求前，需要进行多少次重试。</span>net.ipv4.tcp_retries1 <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#控制内核向已经建立连接的远程主机重新发送数据的次数，低值可以更早的检测到与远程主机失效的连接，因此服务器可以更快的释放该连接，可以修改为5</span>net.ipv4.tcp_retries2 <span class="token operator">=</span> <span class="token number">15</span><span class="token comment"># tcp conn reuse</span>net.ipv4.tcp_timestamps <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#是否开启数据包时间戳</span><span class="token comment">#端口复用，参数值设置为1，表示允许将TIME_WAIT的状态socket重新用于新的TCP连接，这对于服务器来说意义重大，因为总是有大量TIME_WAIT状态的连接存在</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">0</span> net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">0</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#当服务器主动关闭连接时，socket保持在FIN_WAIT_2状态的较大时间</span><span class="token comment">#表示操作系统允许TIME_WAIT套接字数量的最大值，如果超过此值，TIME_WAIT套接字将立刻被清除并打印警告信息默认为8000，过多的TIME_WAIT套接字会使web服务变慢</span>net.ipv4.tcp_max_tw_buckets <span class="token operator">=</span> <span class="token number">20000</span><span class="token comment">#选项用于设置系统中最多有多少个TCP套接字不被关联到任何一个用户句柄上。如果超过这个数字，孤立连接数将立即被复位并输出警告信息。这个限制只是为了防止简单DOS攻击不用过分依靠这个限制，甚至认为减小这个值 ，更多的情况是增加这个值</span>net.ipv4.tcp_max_orphans <span class="token operator">=</span> <span class="token number">3276800</span> <span class="token comment">#表示应用程序进行connect()系统调用时，在对方不返回SYN + ACK的情况下(也就是超时的情况下)，第一次发送之后，内核最多重试几次发送SYN包;</span>net.ipv4.tcp_synack_retries <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#开启SYN Cookies，当出现SYN等待队列溢出时，启用cookies来处理</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># keepalive conn</span><span class="token comment">#当keepalive启动时，TCP发送keepalive消息的频度，默认2小时，将其设置为5分钟，可更快的清理无效连接</span>net.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">300</span><span class="token comment">#当探测没有确认时，重新发送探测的频度。缺省是75秒。</span>net.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">#在认定连接失效之前，发送多少个TCP的keepalive探测包。缺省值是9。这个值乘以tcp_keepalive_intvl之后决定了，一个连接发送了keepalive之后可以有多少时间没有回应</span>net.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#定义UDP和TCP连接的本地端口的取值范围</span>net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">10001</span> <span class="token number">65000</span><span class="token comment"># swap</span><span class="token comment">#0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。2， 表示内核允许分配超过所有物理内存和交换空间总和的内存</span>vm.overcommit_memory <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#数值可设置范围在0到100之间。 低参数值会让内核尽量少用交换，更高参数值会使内核更多的去使用交换空间。默认值为60。当系统存在足够内存时，推荐设置为该值以提高性能。</span>vm.swappiness <span class="token operator">=</span> <span class="token number">10</span>fs.file-max <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token comment"># 表示单个进程可以打开的句柄数</span><span class="token comment">#net.ipv4.conf.eth1.rp_filter = 0</span><span class="token comment">#net.ipv4.conf.lo.arp_ignore = 1</span><span class="token comment">#net.ipv4.conf.lo.arp_announce = 2</span><span class="token comment">#net.ipv4.conf.all.arp_ignore = 1</span><span class="token comment">#net.ipv4.conf.all.arp_announce = 2</span></code></pre></div></figure><h3 id="1-5-8-dpkg安装包管理"><a href="#1-5-8-dpkg安装包管理" class="headerlink" title="1.5.8 dpkg安装包管理"></a>1.5.8 dpkg安装包管理</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dpkg -i gitlab-ce_11.9.8-ce.0_amd64.deb #安装某个软件包</span><span class="token comment"># dpkg -r gitlab-ce #删除某个软件包保留配置⽂件</span><span class="token comment"># dpkg -r -P gitlab-ce #删除某个软件包不保留配置⽂件</span><span class="token comment"># dpkg -I gitlab-ce_11.9.8-ce.0_amd64.deb #查看软件包信息</span><span class="token comment"># dpkg -c gitlab-ce_11.9.8-ce.0_amd64.deb #查看软件包内的⽂件及⽬录内容</span><span class="token comment"># dpkg -l #列出本机已经安装的所有软件</span><span class="token comment">#安装Nginx</span>root@node80:~<span class="token comment"># apt install nginx=1.18.0-6ubuntu14.1</span>root@node80:~<span class="token comment"># systemctl start nginx</span>root@node80:~<span class="token comment"># systemctl enable nginx</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).Ubuntu系统安装</title>
    <link href="/2022/08/28/Linux/Ubuntu/UbuntuInstall/"/>
    <url>/2022/08/28/Linux/Ubuntu/UbuntuInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Ubuntu20-04安装"><a href="#1-Ubuntu20-04安装" class="headerlink" title="1.Ubuntu20.04安装"></a>1.Ubuntu20.04安装</h1><p>使用VMware Workstation16进行安装</p><h2 id="1-1-Ubuntu20-04镜像下载"><a href="#1-1-Ubuntu20-04镜像下载" class="headerlink" title="1.1 Ubuntu20.04镜像下载"></a>1.1 Ubuntu20.04镜像下载</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿里源地址下载</span>https://mirrors.aliyun.com/ubuntu-releases/focal/ubuntu-20.04.4-live-server-amd64.iso</code></pre></div></figure><h2 id="1-2-基本设置"><a href="#1-2-基本设置" class="headerlink" title="1.2 基本设置"></a>1.2 基本设置</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170358770.png" alt="image-20220828170358770"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170453917.png" alt="image-20220828170453917"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170519785.png" alt="image-20220828170519785"> </p><h2 id="1-3-配置网络"><a href="#1-3-配置网络" class="headerlink" title="1.3 配置网络"></a>1.3 配置网络</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170629665.png" alt="image-20220828170629665"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170703158.png" alt="image-20220828170703158"> </p><h2 id="1-4-配置源"><a href="#1-4-配置源" class="headerlink" title="1.4 配置源"></a>1.4 配置源</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170748249.png" alt="image-20220828170748249"> </p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#阿里源：https://mirrors.aliyun.com/ubuntu/</span><span class="token comment">#清华源：https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span></code></pre></div></figure><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170844479.png" alt="image-20220828170844479"> </p><h2 id="1-5-配置分区"><a href="#1-5-配置分区" class="headerlink" title="1.5 配置分区"></a>1.5 配置分区</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828170959400.png" alt="image-20220828170959400"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171054576.png" alt="image-20220828171054576"> </p><h2 id="1-6-配置服务器信息"><a href="#1-6-配置服务器信息" class="headerlink" title="1.6 配置服务器信息"></a>1.6 配置服务器信息</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171150242.png" alt="image-20220828171150242"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171230825.png" alt="image-20220828171230825"> </p><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828171300998.png" alt="image-20220828171300998"> </p><h2 id="1-7-安装完成-x2F-重启"><a href="#1-7-安装完成-x2F-重启" class="headerlink" title="1.7 安装完成&#x2F;重启"></a>1.7 安装完成&#x2F;重启</h2><p><img src="/2022/08/28/Linux/Ubuntu/UbuntuInstall/image-20220828174120596.png" alt="image-20220828174120596"> </p><h2 id="1-8-基础配置"><a href="#1-8-基础配置" class="headerlink" title="1.8 基础配置"></a>1.8 基础配置</h2><p>配置root远程登录：默认情况下，ubuntu不允许root用户远程ssh，如果有实际场景需要允许root⽤⼾远程ssh，则需要设置root密码，并且编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config⽂件修改如下：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">#默认为禁⽌登录</span><span class="token number">33</span> <span class="token comment">#PermitRootLogin prohibit-password</span><span class="token comment">#改为允许登录</span><span class="token number">34</span> PermitRootLogin <span class="token function">yes</span><span class="token comment">#打开密码认证，其实默认就是允许通过密码认证登录</span><span class="token number">58</span> PasswordAuthentication <span class="token function">yes</span>~$ <span class="token function">sudo</span> <span class="token function">su</span> - root <span class="token comment">#切换到root⽤⼾环境</span>~<span class="token comment"># passwd #设置密码</span>Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully<span class="token comment">#重启ssh服务并测试root⽤⼾远程ssh连接</span>~<span class="token comment"># systemctl restart sshd</span></code></pre></div></figure><p>关闭Swap分区</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭swap分区</span>~<span class="token comment"># swapoff -a</span><span class="token comment">#修改配置文件/etc/fstab，注释sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>~<span class="token comment"># sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>~<span class="token comment"># free -h</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          <span class="token number">1</span>.9Gi       565Mi       246Mi       <span class="token number">1</span>.0Mi       <span class="token number">1</span>.1Gi       <span class="token number">1</span>.2GiSwap:            0B          0B          0B</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(2).CentOS基础配置</title>
    <link href="/2022/08/28/Linux/CentOS/CentosBase/"/>
    <url>/2022/08/28/Linux/CentOS/CentosBase/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS7-9初始化"><a href="#1-CentOS7-9初始化" class="headerlink" title="1.CentOS7.9初始化"></a>1.CentOS7.9初始化</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment">#关闭SELiunx</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/config<span class="token comment">#安装基本软件</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> ntpdate telnet lrzsz<span class="token comment">#阿里源</span><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'/mirrors.cloud.aliyuncs.com/d'</span> <span class="token parameter variable">-e</span> <span class="token string">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo<span class="token comment">#清华源</span><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s|^mirrorlist=|#mirrorlist=|g'</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-e</span> <span class="token string">'s|^#baseurl=http://mirror.centos.org|baseurl=https://mirrors.tuna.tsinghua.edu.cn|g'</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-i.bak</span> <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-*.repo<span class="token comment">#清除缓存</span>yum clean allyum makecache<span class="token comment">#安装epel源(清华源)</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release<span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s!^metalink=!#metalink=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!^#baseurl=!baseurl=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.fedoraproject\.org/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.example/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://mirrors!https://mirrors!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-i</span> /etc/yum.repos.d/epel*.repo</code></pre></div></figure><h1 id="2-CentOS8-5初始化"><a href="#2-CentOS8-5初始化" class="headerlink" title="2.CentOS8.5初始化"></a>2.CentOS8.5初始化</h1><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment">#关闭SELiunx</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/config<span class="token comment">#清华源</span><span class="token assign-left variable">minorver</span><span class="token operator">=</span><span class="token number">8.5</span>.2111<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">"s|^mirrorlist=|#mirrorlist=|g"</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-e</span> <span class="token string">"s|^#baseurl=http://mirror.centos.org/\<span class="token variable">$contentdir</span>/\<span class="token variable">$releasever</span>|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/<span class="token variable">$minorver</span>|g"</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-i.bak</span> <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-*.repo<span class="token comment">#清除缓存</span>yum clean allyum makecache<span class="token comment">#安装基本软件</span>dnf <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> lrzsz psmisc net-tools tree <span class="token function">unzip</span> <span class="token function">zip</span> gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute iotop <span class="token function">lsof</span> telnet lrzsz<span class="token comment">#安装epel源(清华源)</span>yum <span class="token function">install</span> epel-release<span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">'s!^metalink=!#metalink=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!^#baseurl=!baseurl=!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.fedoraproject\.org/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!//download\.example/pub!//mirrors.tuna.tsinghua.edu.cn!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token string">'s!http://mirrors!https://mirrors!g'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-i</span> /etc/yum.repos.d/epel*.repo</code></pre></div></figure><h1 id="3-CentOS-x2F-Ubuntu内核优化"><a href="#3-CentOS-x2F-Ubuntu内核优化" class="headerlink" title="3.CentOS&#x2F;Ubuntu内核优化"></a>3.CentOS&#x2F;Ubuntu内核优化</h1><h2 id="3-1-系统资源限制优化"><a href="#3-1-系统资源限制优化" class="headerlink" title="3.1 系统资源限制优化"></a>3.1 系统资源限制优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure><h2 id="3-2-内核参数优化"><a href="#3-2-内核参数优化" class="headerlink" title="3.2 内核参数优化"></a>3.2 内核参数优化</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># vim /etc/security/limits.conf</span><span class="token comment">#root账⼾的资源软限制和硬限制</span>root soft core unlimitedroot hard core unlimitedroot soft nproc <span class="token number">1000000</span>root hard nproc <span class="token number">1000000</span>root soft nofile <span class="token number">1000000</span>root hard nofile <span class="token number">1000000</span>root soft memlock <span class="token number">32000</span>root hard memlock <span class="token number">32000</span>root soft msgqueue <span class="token number">8192000</span>root hard msgqueue <span class="token number">8192000</span><span class="token comment">#其他账⼾的资源软限制和硬限制</span>* soft core unlimited* hard core unlimited* soft nproc <span class="token number">1000000</span>* hard nproc <span class="token number">1000000</span>* soft nofile <span class="token number">1000000</span>* hard nofile <span class="token number">1000000</span>* soft memlock <span class="token number">32000</span>* hard memlock <span class="token number">32000</span>* soft msgqueue <span class="token number">8192000</span>* hard msgqueue <span class="token number">8192000</span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(1).CentOS系统安装</title>
    <link href="/2022/08/28/Linux/CentOS/CentosInstall/"/>
    <url>/2022/08/28/Linux/CentOS/CentosInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS7-9安装"><a href="#1-CentOS7-9安装" class="headerlink" title="1.CentOS7.9安装"></a>1.CentOS7.9安装</h1><p>使用VMware Workstation16进行安装</p><h2 id="1-1-CentOS7-9镜像下载"><a href="#1-1-CentOS7-9镜像下载" class="headerlink" title="1.1 CentOS7.9镜像下载"></a>1.1 CentOS7.9镜像下载</h2><figure><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</span></span></code></pre></div></figure><h2 id="1-2-创建虚拟机环境"><a href="#1-2-创建虚拟机环境" class="headerlink" title="1.2 创建虚拟机环境"></a>1.2 创建虚拟机环境</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181007425.png" alt="image-20220807181007425"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181032110.png" alt="image-20220807181032110"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181111922.png" alt="image-20220807181111922"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181148677.png" alt="image-20220807181148677"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181229602.png" alt="image-20220807181229602"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181400328.png" alt="image-20220807181400328"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181429795.png" alt="image-20220807181429795"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181506431.png" alt="image-20220807181506431"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181543170.png" alt="image-20220807181543170"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181603290.png" alt="image-20220807181603290"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181629133.png" alt="image-20220807181629133"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181656860.png" alt="image-20220807181656860"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181736017.png" alt="image-20220807181736017"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181756158.png" alt="image-20220807181756158"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807181847715.png" alt="image-20220807181847715"></p><h2 id="1-3-加电开机"><a href="#1-3-加电开机" class="headerlink" title="1.3 加电开机"></a>1.3 加电开机</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182013796.png" alt="image-20220807182013796"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182053601.png" alt="image-20220807182053601"></p><h2 id="1-4-选择语言"><a href="#1-4-选择语言" class="headerlink" title="1.4 选择语言"></a>1.4 选择语言</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182212850.png" alt="image-20220807182212850"></p><h2 id="1-5-配置网络-x2F-主机名"><a href="#1-5-配置网络-x2F-主机名" class="headerlink" title="1.5 配置网络&#x2F;主机名"></a>1.5 配置网络&#x2F;主机名</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182438882.png" alt="image-20220807182438882"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182522414.png" alt="image-20220807182522414"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182636553.png" alt="image-20220807182636553"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182702915.png" alt="image-20220807182702915"></p><h2 id="1-6-选择时区"><a href="#1-6-选择时区" class="headerlink" title="1.6 选择时区"></a>1.6 选择时区</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182746078.png" alt="image-20220807182746078"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807182929454.png" alt="image-20220807182929454"></p><h2 id="1-7-添加中文语言"><a href="#1-7-添加中文语言" class="headerlink" title="1.7 添加中文语言"></a>1.7 添加中文语言</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183006735.png" alt="image-20220807183006735"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183033203.png" alt="image-20220807183033203"></p><h2 id="1-8-配置分区"><a href="#1-8-配置分区" class="headerlink" title="1.8 配置分区"></a>1.8 配置分区</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183123111.png" alt="image-20220807183123111"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183201413.png" alt="image-20220807183201413"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183318312.png" alt="image-20220807183318312"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183351990.png" alt="image-20220807183351990"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183416291.png" alt="image-20220807183416291"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183446596.png" alt="image-20220807183446596"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183510410.png" alt="image-20220807183510410"></p><h2 id="1-9-创建用户"><a href="#1-9-创建用户" class="headerlink" title="1.9 创建用户"></a>1.9 创建用户</h2><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183610694.png" alt="image-20220807183610694"></p><p> <img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183636949.png" alt="image-20220807183636949"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183705127.png" alt="image-20220807183705127"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183728159.png" alt="image-20220807183728159"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807183800510.png" alt="image-20220807183800510"></p><p><img src="/2022/08/28/Linux/CentOS/CentosInstall/image-20220807184003894.png" alt="image-20220807184003894"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
